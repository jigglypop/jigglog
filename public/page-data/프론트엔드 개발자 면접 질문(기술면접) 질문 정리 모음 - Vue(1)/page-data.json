{"componentChunkName":"component---src-templates-post-tsx","path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"f127e304-04d4-5ed4-9c2e-5cf78651fa9d","html":"<blockquote>\n<p>프론트 엔드 면접 질문용(Vue) 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요</p>\n</blockquote>\n<h2>Vue 개요</h2>\n<hr>\n<h4>1) vue란</h4>\n<ul>\n<li>사용자 인터페이스를 만들기 위한 진보적인 프레임워크</li>\n<li>핵심 라이브러리는 <code>뷰 레이어</code>만 초점을 맞추어, 다른 라이브러리나 기존 프로젝트와의 통합이 쉬움</li>\n</ul>\n<h4>2) 특징</h4>\n<ul>\n<li>가상 DOM(Virtual DOM): 가상 DOM은 원본 HTML DOM을 표현하는 메모리 상의 가벼운 DOM 트리로, 원본 DOM에 영향을 미치지 않고 업데이트 가능</li>\n<li>컴포넌트(Components):  VueJS 어플리케이션에서 재사용할 수 있는 엘리먼트들을 만들 수 있음</li>\n<li>템플릿(Templates):  VueJS는 Vue 인스턴스 데이터와 DOM에 접근할 수 있는 HTML 기반의 템플릿을 제공</li>\n<li>라우팅(Routing): 페이지의 전환은 vue-router를 이용</li>\n<li>저용량(Light weight): VueJS는 다른 프레임워크와 비교해 저용량</li>\n</ul>\n<h2>vue 라이프사이클</h2>\n<hr>\n<h4>1) 개요</h4>\n<ul>\n<li>사용중인 라이브러리가 어떤 순서로 동작하는지를 알려주는 역할</li>\n<li>훅을 이용해 컴포넌트가 언제 생성되고, 언제 DOM에 추가되며, 언제 업데이트되고 언제 사라지는지 알 수 있음</li>\n</ul>\n<img src=\"https://github.com/sudheerj/vuejs-interview-questions/raw/master/images/vuelifecycle.png\" alt=\"img\" style=\"zoom: 33%;\">\n<h4>2) Creation(초기화)</h4>\n<ul>\n<li>컴포넌트가 DOM에 추가되기 전에 실행되는 단계</li>\n<li>클라이언트와 서버가 렌더링 단계 전에 컴포넌트에 설정해야 할 것들이 있을 때 사용하는 단계</li>\n<li>다른 훅과는 다르게, Create 훅은 서버 사이드 렌더링에서도 지원되는 훅</li>\n</ul>\n<h5>(1) beforeCreate</h5>\n<ul>\n<li>컴포넌트 초기화 단계 중 가장 처음으로 실행</li>\n<li>컴포넌트의 data를 관찰하고, 이벤트를 초기화</li>\n<li>data는 아직까지 반응적이지 않으며, 컴포넌트의 라이프사이클에서 발생하는 이벤트 역시 설정되지 않은 상태</li>\n</ul>\n<pre><code class=\"language-javascript\">    new Vue({\n      data: {\n       count: 10\n      },\n      beforeCreate: function () {\n        console.log('Nothing gets called at this moment')\n        // `this` points to the view model instance\n        console.log('count is ' + this.count);\n      }\n    })\n       // count is undefined\n</code></pre>\n<h5>(2) created</h5>\n<ul>\n<li>Vue 인스턴스가 이벤트를 설정하고 data를 관찰할 때 발생</li>\n<li>템플릿은 아직 마운트되거나 렌더링되지 않았지만 이벤트들이 활성화되며 data에 반응적으로 접근하는 것이 가능</li>\n<li>DOM에 직접 접근하거나 마운트할 엘리먼트(<code>this.$el</code>)에 직접 접근할 수 없음</li>\n</ul>\n<pre><code class=\"language-javascript\">  new Vue({\n    data: {\n     count: 10\n    },\n    created: function () {\n      console.log('count is: ' + this.count)\n    }\n  })\n</code></pre>\n<h4>3) Mounting(DOM 추가)</h4>\n<ul>\n<li>가장 많이 사용되는 단계로, 컴포넌트가 렌더링되기 직전이나 직후에 컴포넌트에 접근할 수 있는 단계</li>\n</ul>\n<h5>(1) beforeMount</h5>\n<ul>\n<li>컴포넌트가 DOM에 추가되기 직전에 실행</li>\n</ul>\n<pre><code class=\"language-javascript\">  new Vue({\n    beforeMount: function () {\n      console.log(`this.$el is yet to be created`);\n    }\n  })\n</code></pre>\n<h5>(2) mounted</h5>\n<ul>\n<li>반응적인 data, 템플릿, 렌더링된 DOM(this.$el) 모두에 접근할 수 있어서 가장 많이 사용되는 훅</li>\n<li>흔히 컴포넌트에서 필요한 데이터를 외부에서 가져오는(fetch) 용도로 많이 사용</li>\n</ul>\n<pre><code class=\"language-vue\">&#x3C;div id=\"app\">\n    &#x3C;p>I’m text inside the component.&#x3C;/p>\n&#x3C;/div>\n  new Vue({\n    el: '#app',\n    mounted: function() {\n      console.log(this.$el.textContent);\n    }\n  })\n</code></pre>\n<h4>4) Updating (재 렌더링)</h4>\n<ul>\n<li>Update 훅은 컴포넌트 내부의 반응적인 속성이 변했거나, 그 외의 것들이 재 렌더링을 일으킬 때 실행되는 단계</li>\n</ul>\n<h5>(1) beforeUpdate</h5>\n<ul>\n<li>컴포넌트의 data가 변경되어 업데이트 사이클이 시작될 때 실행</li>\n</ul>\n<pre><code class=\"language-javascript\">&#x3C;div id=\"app\">\n  &#x3C;p>{{counter}}&#x3C;/p>\n&#x3C;/div>\n...// rest of the code\n  new Vue({\n    el: '#app',\n    data() {\n      return {\n        counter: 0\n      }\n    },\n     created: function() {\n      setInterval(() => {\n        this.counter++\n      }, 1000)\n    },\n\n    beforeUpdate: function() {\n      console.log(this.counter) \n    }\n  })\n</code></pre>\n<h5>(2) updated</h5>\n<ul>\n<li>컴포넌트의 data가 변하여 재 렌더링이 일어난 후에 실행</li>\n</ul>\n<pre><code class=\"language-javascript\">&#x3C;div id=\"app\">\n  &#x3C;p ref=\"dom\">{{counter}}&#x3C;/p>\n&#x3C;/div>\n...//\n  new Vue({\n    el: '#app',\n    data() {\n      return {\n        counter: 0\n      }\n    },\n    created: function() {\n      setInterval(() => {\n        this.counter++\n      }, 1000)\n    },\n    updated: function() {\n      console.log(+this.$refs['dom'].textContent === this.counter) \n    }\n  })\n</code></pre>\n<h4>5) Destruction(해체)</h4>\n<ul>\n<li>컴포넌트를 더 이상 사용하지 않을 때 사용하는 단계</li>\n</ul>\n<h5>(1) beforeDestroy</h5>\n<ul>\n<li>컴포넌트가 해체되기 직전에 실행</li>\n<li>반응적인 이벤트들이나 data들을 해체하는 훅으로 적합</li>\n<li>컴포넌트는 여전히 문제없이 잘 동작</li>\n</ul>\n<pre><code class=\"language-javascript\">new Vue ({\n  data() {\n    return {\n      message: 'Welcome VueJS developers'\n    }\n  },\n\n  beforeDestroy: function() {\n    this.message = null\n    delete this.message\n  }\n})\n</code></pre>\n<h5>(2) destroyed</h5>\n<ul>\n<li>컴포넌트가 해체되고 난 직후에 호출</li>\n<li>모든 지시자들의 바인딩이 해제되었으며, 이벤트 리스너가 제거된 상태</li>\n</ul>\n<pre><code class=\"language-javascript\">new Vue ({\n    destroyed: function() {\n      console.log(this) // Nothing to show here\n    }\n})\n</code></pre>\n<h3>조건부 지시자(conditional directives)</h3>\n<hr>\n<ul>\n<li>조건에 따라 엘리먼트를 보여주거나 숨길 수 있는 지시자</li>\n</ul>\n<h4>1) v-if</h4>\n<ul>\n<li>조건에 따라 DOM 엘리먼트를 추가하거나 제거</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;button v-if=\"isLoggedIn\">Logout&#x3C;/button>\n</code></pre>\n<ul>\n<li>엘리먼트들을 <code>&#x3C;template></code> 태그로 감싼다면, 하나의 v-if만으로 여러 엘리먼트들의 조건을 설정할 수 있음</li>\n</ul>\n<pre><code class=\"language-vue\">&#x3C;template v-if=\"isLoggedIn\">\n  &#x3C;label> Logout &#x3C;/button>\n  &#x3C;button> Logout &#x3C;/button>\n&#x3C;/template>\n</code></pre>\n<h4>2) v-else</h4>\n<ul>\n<li>인접한 v-if 지시자 또는 v-else-if 지시자가 false일 때만 그 내용이 나타남</li>\n<li>조건을 지정할 필요가 없음</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;button v-if=\"isLoggedIn\"> Logout &#x3C;/button>\n&#x3C;button v-else> Log In &#x3C;/button>\n</code></pre>\n<h4>3) v-else-if</h4>\n<ul>\n<li>v-if 이외의 다른 조건을 추가로 확인해야 할 때 사용</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;button v-if=\"isLoggedIn\"> Logout &#x3C;/button>\n&#x3C;label v-else-if=\"isLoginDisabled\"> User login disabled &#x3C;/label>\n&#x3C;button v-else> Log In &#x3C;/button>\n</code></pre>\n<h4>4) v-show</h4>\n<ul>\n<li>v-if 지시자와 비슷한 기능을 하지만, DOM에 엘리먼트가 추가된 상태에서 CSS의 display 값을 이용해 보여주고 숨김을 결정</li>\n<li>조건문이 자주 토글될 때 권장</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;span v-show=\"user.name\">Welcome user,{{user.name}}&#x3C;/span>\n</code></pre>\n<h4>5) v-show와 v-if의 차이점</h4>\n<ul>\n<li>v-if는 조건이 일치하는 엘리먼트만 DOM에 렌더링하는 반면, v-show는 모든 엘리먼트를 DOM에 렌더링한 후 CSS를 이용해 내용을 보여주거나 숨김</li>\n<li>v-if와 v-else-if에서는 v-else를 사용할 수 있지만, v-show에서는 사용할 수 없음</li>\n<li>v-if는 토글할 때 높은 렌더링 비용이 들지만, v-show는 초기의 렌더링 작업에서 높은 비용이 듦</li>\n<li>v-show는 요소를 자주 켜고 끄는 경우 성능 상의 이점이 있지만, 초기 렌더링 작업에서는 v-if가 더 효율적</li>\n<li>v-if는 <code>&#x3C;template></code>태그에서 사용할 수 있지만 v-show는 사용할 수 없음</li>\n</ul>\n<h2>v-for</h2>\n<hr>\n<p>-</p>\n<h3>v-for를 쓰는 목적은</h3>\n<p>v-for 지시자는 배열이나 객체를 순환하면서 반복적인 렌더링을 가능하게 합니다.</p>\n<ol>\n<li>배열의 경우:</li>\n</ol>\n<pre><code>&#x3C;ul id=\"list\">\n  &#x3C;li v-for=\"(item, index) in items\">\n    {{ index }} - {{ item.message }}\n  &#x3C;/li>\n&#x3C;/ul>\n\nvar vm = new Vue({\n  el: '#list',\n  data: {\n    items: [\n      { message: 'John' },\n      { message: 'Locke' }\n    ]\n  }\n})\n</code></pre>\n<p>자바스크립트 순환문과 유사하게, <code>in</code> 외에도 <code>of</code>를 사용할 수 있습니다.</p>\n<ol>\n<li>객체의 경우:</li>\n</ol>\n<pre><code>&#x3C;div id=\"object\">\n  &#x3C;div v-for=\"(value, key, index) in user\">\n    {{ index }}. {{ key }}: {{ value }}\n  &#x3C;/div>\n&#x3C;/div>\n\nvar vm = new Vue({\n  el: '#object',\n  data: {\n    user: {\n      firstName: 'John',\n      lastName: 'Locke',\n      age: 30\n    }\n  }\n})\n</code></pre>\n<h3>v-for에서 key 속성이 필요한 이유</h3>\n<p>Vue에서 개별 DOM 노드들을 추적하고 기존 엘리먼트의 재사용/재정렬을 위해, v-for의 요소에 고유한 key 속성을 제공해야 합니다. key에 대한 이상적인 값은 각 항목을 식별할 수 있는 고유한 ID입니다.</p>\n<pre><code>&#x3C;div v-for=\"item in items\" :key=\"item.id\">\n  {{item.name}}\n&#x3C;/div>\n</code></pre>\n<p>반복되는 DOM 내용이 단순한 경우나 의도적인 성능 향상을 위해 기본 동작에 의존하지 않는 경우를 제외하면, 가능하면 언제나 v-for에 key를 추가하는 것이 좋습니다. <strong>Note:</strong> 객체나 배열처럼, 기본 타입(Primitive value)이 아닌 값을 키로 사용해서는 안됩니다. 문자열이나 숫자를 사용하세요.</p>\n<h3>Vue 인스턴스란</h3>\n<p>모든 Vue 어플리케이션은 Vue 함수를 이용해 Vue 인스턴스를 생성하면서 동작합니다. 일반적으로 <code>vm</code>(ViewModel의 축약형)이라는 변수를 이용해 Vue 인스턴스를 참조합니다. 아래와 같은 방법으로 Vue 인스턴스를 생성할 수 있습니다.</p>\n<pre><code>var vm = new Vue({\n  // options\n})\n</code></pre>\n<ol>\n<li>\n<h3>key 속성을 이용해 엘리먼트를 재사용하는 방법은</h3>\n<p>Vue는 가능한 한 엘리먼트를 효율적으로 렌더링하려 합니다. 그래서 엘리먼트를 처음부터 다시 만들기보다는 재사용하려 합니다. 그러나 이는 몇 가지 상황에서 문제를 일으킬 수 있습니다. 예를 들어, <code>input</code> 엘리먼트를 <code>v-if</code>와 <code>v-else</code> 블록 양쪽에서 사용하면, <code>input</code> 엘리먼트는 조건문에 따라 바뀌지 않고 최초에 렌더링 된 엘리먼트의 상태를 유지하고 있습니다.</p>\n<pre><code>&#x3C;template v-if=\"loginType === 'Admin'\">\n &#x3C;label>Admin&#x3C;/label>\n &#x3C;input placeholder=\"Enter your ID\">\n&#x3C;/template>\n&#x3C;template v-else>\n &#x3C;label>Guest&#x3C;/label>\n &#x3C;input placeholder=\"Enter your name\">\n&#x3C;/template>\n</code></pre>\n<p>이 경우에서 <code>input</code> 엘리먼트는 재사용되어서는 안 되기 때문에, <strong>key</strong> 속성을 이용해 두 개의 <code>input</code> 엘리먼트를 별개의 것으로 취급하도록 선언할 수 있습니다.</p>\n<pre><code>   &#x3C;template v-if=\"loginType === 'Admin'\">\n     &#x3C;label>Admin&#x3C;/label>\n     &#x3C;input placeholder=\"Enter your ID\" key=\"admin-id\">\n   &#x3C;/template>\n   &#x3C;template v-else>\n     &#x3C;label>Guest&#x3C;/label>\n     &#x3C;input placeholder=\"Enter your name\" key=\"user-name\">\n   &#x3C;/template>\n</code></pre>\n<p>위의 경우는 두 개의 <code>input</code> 엘리먼트가 별개의 것으로 취급되며 서로에게 어떤 영향도 끼치지 않습니다.</p>\n</li>\n</ol>\n<h3>같은 엘리먼트에서 v-for와 v-if를 함께 쓰면 안 되는 이유</h3>\n<p>v-for 지시자는 v-if 보다 더 높은 우선 순위를 갖고 있기 때문에, 한 엘리먼트 내에서 v-for와 v-if를 함께 쓰는 것은 권장되지 않습니다. 일반적으로 다음과 같은 이유 때문에 두 지시자를 함께 쓰곤 합니다.</p>\n<ol>\n<li>리스트의 요소를 필터링하기 위해 예를 들어, v-if 지시자를 이용해 리스트에 있는 아이템을 필터링하고 싶은 경우입니다.</li>\n</ol>\n<pre><code>&#x3C;ul>\n  &#x3C;li\n    v-for=\"user in users\"\n    v-if=\"user.isActive\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  &#x3C;li>\n&#x3C;/ul>\n</code></pre>\n<p>이 경우는 아래와 같이 사전에 computed 속성을 이용해 필터링된 리스트를 만들어 사용할 수 있습니다.</p>\n<pre><code>computed: {\n  activeUsers: function () {\n    return this.users.filter(function (user) {\n      return user.isActive\n    })\n  }\n}\n...... //\n...... //\n&#x3C;ul>\n  &#x3C;li\n    v-for=\"user in activeUsers\"\n    :key=\"user.id\">\n    {{ user.name }}\n  &#x3C;li>\n&#x3C;/ul>\n</code></pre>\n<ol>\n<li>리스트 자체가 숨겨져야 할 때 예를 들어, v-if를 이용해 반복되는 리스트를 숨기고 싶은 경우입니다.</li>\n</ol>\n<pre><code>&#x3C;ul>\n  &#x3C;li\n    v-for=\"user in users\"\n    v-if=\"shouldShowUsers\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  &#x3C;li>\n&#x3C;/ul>\n</code></pre>\n<p>이 경우는 아래와 같이 조건문을 상위 엘리먼트로 옮김으로써 해결할 수 있습니다.</p>\n<pre><code>&#x3C;ul v-if=\"shouldShowUsers\">\n  &#x3C;li\n    v-for=\"user in users\"\n    :key=\"user.id\"\n  >\n    {{ user.name }}\n  &#x3C;li>\n&#x3C;/ul>\n</code></pre>\n<ol>\n<li>\n<h3>배열을 변화시키는 함수(Mutation method)란</h3>\n<p>이름에서 볼 수 있듯, 배열을 변화시키는 함수(mutation methods)는 원본 배열을 변경시킵니다. 아래의 함수는 뷰(view) 업데이트를 일으킵니다.</p>\n<ol>\n<li>push()</li>\n<li>pop()</li>\n<li>shift()</li>\n<li>unshift()</li>\n<li>splice()</li>\n<li>sort()</li>\n<li>reverse()</li>\n</ol>\n<p>예를 들어, 아래와 같이 <code>todos</code> 배열에 <code>push</code> 함수를 실행시키면 뷰 업데이트가 일어납니다.</p>\n<pre><code>vm.todos.push({ message: 'Baz' })\n</code></pre>\n</li>\n<li>\n<h3>배열을 대체하는 함수(Non-mutation method)란</h3>\n<p>배열을 대체하는 함수는 원본 배열을 수정하지 않고, 항상 새로운 배열을 반환합니다. 아래의 함수는 배열을 대체하는 함수입니다.</p>\n<ol>\n<li>filter()</li>\n<li>concat()</li>\n<li>slice()</li>\n</ol>\n<p>예를 들어, 아래와 같이 <code>status</code> 속성에 따라 <code>todos</code> 배열을 필터링한 새로운 배열을 반환받을 수 있습니다.</p>\n<pre><code>vm.todos = vm.todos.filter(function (todo) {\n return todo.status.match(/Completed/)\n})\n</code></pre>\n<p>Vue가 DOM을 효율적으로 재사용하기 때문에, 전체 리스트가 새로 렌더링되지는 않습니다.</p>\n</li>\n<li>\n<h3>배열 변경을 탐지할 때 주의할 점</h3>\n<p>Vue는 아래의 두 가지 경우의 변경 사항을 감지할 수 없습니다.</p>\n<ol>\n<li>인덱스로 배열에 있는 항목을 직접 할당하는 경우</li>\n</ol>\n<pre><code>vm.todos[indexOfTodo] = newTodo\n</code></pre>\n<ol>\n<li>배열의 길이를 수정하는 경우</li>\n</ol>\n<pre><code>vm.todos.length = todosLength\n</code></pre>\n<p>이는 <code>set</code>과 <code>splice</code> 함수를 이용해 해결할 수 있습니다.</p>\n<p><strong>첫 번째 경우</strong></p>\n<pre><code>// Vue.set\nVue.set(vm.todos, indexOfTodo, newTodoValue)\n</code></pre>\n<pre><code>// Array.prototype.splice\nvm.todos.splice(indexOfTodo, 1, newTodoValue)\n</code></pre>\n<p><strong>두 번째 경우</strong></p>\n<pre><code>vm.todos.splice(todosLength)\n</code></pre>\n</li>\n<li>\n<h3>객체 변경을 탐지할 때 주의할 점</h3>\n<p>Vue는 추가되거나 삭제된 속성에 반응형으로 접근할 수 없습니다.</p>\n<pre><code>var vm = new Vue({\n data: {\n   user: {\n     name: 'John'\n   }\n }\n})\n\n// `vm.name` is now reactive\n\nvm.email = john@email.com // `vm.email` is NOT reactive\n</code></pre>\n<p>이 경우는 <code>Vue.set(object, key, value)</code>나 <code>Object.assign()</code>를 이용함으로써 반응형 속성을 추가할 수 있습니다.</p>\n<pre><code>Vue.set(vm.user, 'email', john@email.com);\n</code></pre>\n<pre><code>vm.user = Object.assign({}, vm.user, {\n email: john@email.com\n})\n</code></pre>\n</li>\n<li>\n<h3>v-for를 특정 횟수만큼 반복하는 방법은?</h3>\n<p><code>v-for</code> 지시자에 정수를 사용해 특정 횟수만큼 반복해 렌더링 할 수 있습니다.</p>\n<pre><code>&#x3C;div>\n &#x3C;span v-for=\"n in 20\">{{ n }} &#x3C;/span>\n&#x3C;/div>\n</code></pre>\n<p>이 경우 1부터 20까지 숫자가 출력됩니다.</p>\n</li>\n<li>\n<h3>v-for로 템플릿을 반복하는 방법은</h3>\n<p><code>&#x3C;template></code>에서 v-if를 사용한 것과 유사하게, <code>&#x3C;template></code>에서 v-for 문법을 사용할 수 있습니다.</p>\n<pre><code>&#x3C;ul>\n &#x3C;template v-for=\"todo in todos\">\n   &#x3C;li>{{ todo.title }}&#x3C;/li>\n   &#x3C;li class=\"divider\">&#x3C;/li>\n &#x3C;/template>\n&#x3C;/ul>\n</code></pre>\n</li>\n<li>\n<h3>이벤트 핸들러를 사용하는 방법은?</h3>\n<p>VueJS에서는 순수 자바스크립트와 유사하게 이벤트 핸들러를 사용할 수 있습니다. 함수에서 <code>$event</code> 변수를 호출해 사용할 수 있습니다.</p>\n<pre><code class=\"language-vue\">&#x3C;button v-on:click=\"show('Welcome to VueJS world', $event)\">\n Submit\n&#x3C;/button>\n\nmethods: {\n show: function (message, event) {\n   if (event) event.preventDefault()\n   console.log(message);\n }\n}\n</code></pre>\n</li>\n<li>\n<h3>Vue에서 이벤트 수식어(Event modifier)란?</h3>\n<p>일반적으로 자바스크립트에서는 이벤트 핸들러 내부에서 <code>event.preventDefault()</code> 또는 <code>event.stopPropagation()</code>를 제공합니다. Vue의 메소드 내부에서도 이 작업을 할 수 있지만, DOM에서 발생한 이벤트와 메소드의 로직은 별개로 구분하는 것이 좋습니다.</p>\n<p>이 문제를 해결하기 위해, Vue는 <code>v-on</code> 이벤트에 이벤트 수식어를 제공합니다. 수식어는 점으로 표시된 접미사 입니다.</p>\n<ol>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ol>\n<p><code>.stop</code> 수식어를 예로 들어보겠습니다.</p>\n<pre><code>&#x3C;!-- the click event's propagation will be stopped -->\n&#x3C;a v-on:click.stop=\"methodCall\">&#x3C;/a>\n</code></pre>\n<p>수식어는 연속해서 사용할 수 있습니다.</p>\n<pre><code>&#x3C;!-- modifiers can be chained -->\n&#x3C;a v-on:click.stop.prevent=\"doThat\">&#x3C;/a>\n</code></pre>\n</li>\n<li>\n<h3>키 수식어(Key modifiers)란?</h3>\n<p>Vue는 키보드 이벤트를 제어하기 위해 <code>v-on</code> 지시자에 키 수식어를 제공합니다.</p>\n<pre><code>&#x3C;!-- only call `vm.show()` when the `keyCode` is 13 -->\n&#x3C;input v-on:keyup.13=\"show\">\n</code></pre>\n<p>모든 키 코드를 외우는 것은 어렵기 때문에, Vue에서는 자주 사용되는 키들은 별칭을 제공하고 있습니다.</p>\n<ol>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code> (“Delete”와 “Backspace” 포함)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ol>\n<p>위 예시의 키 코드는 아래와 같이 별칭으로 다시 쓸 수 있습니다.</p>\n<pre><code>&#x3C;input v-on:keyup.enter=\"submit\">\n// (OR)\n&#x3C;!-- with shorthand notation-->\n&#x3C;input @keyup.enter=\"submit\">\n</code></pre>\n<p><strong>키 코드 이벤트의 사용은 최신 브라우저에서는 지원되지 않을 수 있습니다.</strong></p>\n</li>\n<li>\n<h3>키 수식어를 커스터마이징하는 방법은?</h3>\n<p>전역 <code>config.keyCodes</code> 객체를 통해 키 수식어를 커스터마이징할 수 있습니다. 여기에는 몇 가지 규칙들이 있습니다.</p>\n<ol>\n<li>카멜 케이스(camelCase)를 대신 쌍따옴표로 감싸진 케밥 케이스(Kebab-case)를 사용해야 합니다.</li>\n<li>배열을 이용해 한 번에 여러 값들을 정의할 수 있습니다.</li>\n</ol>\n<pre><code>Vue.config.keyCodes = {\n  f1: 112,\n  \"media-play-pause\": 179,\n  down: [40, 87]\n}\n</code></pre>\n</li>\n<li>\n<h3>시스템 수식어 키(System modifier key)란?</h3>\n<p>Vue에서는 다음 수식어를 사용해 해당 수식어 키가 눌러진 경우에만 마우스 또는 키보드 이벤트를 발생시킬 수 있습니다.</p>\n<ol>\n<li><code>.ctrl</code></li>\n<li><code>.alt</code></li>\n<li><code>.shift</code></li>\n<li><code>.meta</code></li>\n</ol>\n<p>아래는 컨트롤 키가 눌린 상태에서 클릭 이벤트를 활성화 하는 예시입니다.</p>\n<pre><code>&#x3C;!-- Ctrl + Click -->\n&#x3C;div @click.ctrl=\"doSomething\">Do something&#x3C;/div>\n</code></pre>\n</li>\n<li>\n<h3>마우스 버튼 수식어(Mouse button modifier)란?</h3>\n<p>Vue는 특정한 마우스 버튼으로 발생한 이벤트를 제어할 수 있습니다.</p>\n<ol>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n<li><code>.middle</code></li>\n</ol>\n<p>마우스 이벤트로 <code>.right</code>를 이용한 예시입니다.</p>\n<pre><code> &#x3C;button\n   v-if=\"button === 'right'\"\n   v-on:mousedown.right=\"increment\"\n   v-on:mousedown.left=\"decrement\"\n />\n</code></pre>\n</li>\n</ol>\n<h2>v-model</h2>\n<hr>\n<h4>1) v-model의 역할</h4>\n<ul>\n<li><code>input</code>, <code>textarea</code>, <code>select</code> 엘리먼트의 데이터를 양방향으로 제어할 수 있음</li>\n</ul>\n<pre><code>&#x3C;input v-model=\"message\" placeholder=\"Enter input here\">\n&#x3C;p>The message is: {{ message }}&#x3C;/p>\n</code></pre>\n<p><code>v-model</code>은 모든 <code>form</code> 엘리먼트에서 HTML 속성(attribute)으로 선언된 <code>value</code>, <code>checked</code> 그리고 <code>selected</code>를 무시합니다. 그 대신 Vue 인스턴스에서 <code>v-model</code>로 바인딩한 값을 이용합니다. 따라서 컴포넌트의 data에서 초기값을 선언해야 합니다.</p>\n<h4>2) v-model에서 지원되는 수식어</h4>\n<h5>(1) lazy</h5>\n<ul>\n<li><code>v-model</code>은 하나의 키 입력 이벤트가 발생할 때마다 data가 업데이트</li>\n<li>이를 방지하기 위해서 <code>.lazy</code> 수식어를 이용</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;input v-model.lazy=\"msg\" >\n</code></pre>\n<h5>(2) number</h5>\n<ul>\n<li><code>v-model</code>에 <code>.number</code> 수식어를 붙이면 자동적으로 사용자의 입력의 자료형이 <code>Number</code>로 변환</li>\n<li>HTML <code>input</code> 태그의 속성이 <code>type=\"number\"</code>일지라도 반환되는 값의 자료형은 문자열이기 때문에, 숫자 자료형이 필요하다면 <code>.number</code> 수식어를 사용</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;input v-model.number=\"age\" type=\"number\">\n</code></pre>\n<h5>(3) trim</h5>\n<ul>\n<li><code>.trim</code> 수식어를 사용자 입력에서 처음과 끝에 들어있는 공백을 자동으로 제거</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;input v-model.trim=\"msg\">\n</code></pre>\n<h4>3) 컴포넌트에서 v-model을 사용자 정의하는 방법</h4>\n<p>일반적인 컴포넌트에서 <code>v-model</code> 지시자는 <strong>value</strong>를 <code>props</code>로 사용하고 <strong>input</strong>을 이벤트로 사용하지만, </p>\n<p>체크 박스나 라디오 버튼같은 일부 입력 타입은 다른 목적으로 <code>value</code> 속성을 사용할 수 있습니다. </p>\n<p>이런 경우에는 <code>v-model</code>을 커스터마이징해서 사용하는 것이 좋습니다.</p>\n<pre><code class=\"language-vue\">Vue.component('custom-checkbox', {\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    checked: Boolean\n  },\n  template: `\n    &#x3C;input\n      type=\"checkbox\"\n      v-bind:checked=\"checked\"\n      v-on:change=\"$emit('change', $event.target.checked)\"\n    >\n  `\n})\n</code></pre>\n<p>이 컴포넌트에서 <code>v-model</code>은 다음과 같이 사용할 수 있습니다.</p>\n<pre><code>&#x3C;custom-checkbox v-model=\"selectFramework\">&#x3C;/custom-checkbox>\n</code></pre>\n<p><code>selectFramework</code> 속성은 <code>props</code> 중 <code>checked</code>로 넘어갈 것이고, 체크 박스 컴포넌트에서 값이 변경되면 이벤트를 발생시킬 것입니다.</p>\n<h4>4) 사용자 정의의 input 컴포넌트에서 v-model을 사용하는 법</h4>\n<ul>\n<li>사용자 정의 input 컴포넌트에서도 <code>v-model</code>을 활용할 수 있음</li>\n<li><code>input</code>의 <code>value</code>를 props를 이용해 바인딩합니다.</li>\n<li>새로운 값이 입력되는 <code>input</code> 이벤트 발생 시, 해당 값을 <code>emit</code>하여 상위 컴포넌트로 이벤트를 전달합니다.</li>\n</ul>\n<pre><code>Vue.component('custom-input', {\n  props: ['value'],\n  template: `\n    &#x3C;input\n      v-bind:value=\"value\"\n      v-on:input=\"$emit('input', $event.target.value)\"\n    >\n  `\n})\n</code></pre>\n<p>이 경우 상위 컴포넌트에서 <code>v-model</code>을 이용해 값을 바인딩할 수 있습니다.</p>\n<pre><code>&#x3C;custom-input v-model=\"searchInput\">&#x3C;/custom-input>\n</code></pre>\n<h3></h3>\n<h3>컴포넌트(Component)</h3>\n<hr>\n<hr>\n<h4>1) 개요</h4>\n<ul>\n<li>재사용 가능하면서 이름이 명명된 Vue 인스턴스</li>\n<li>컴포넌트는 Vue처럼 data, computed, watch, methods, 라이프사이클 옵션을 갖고 있음</li>\n</ul>\n<pre><code class=\"language-javascript\">Vue.component('button-counter', {\n  template: '&#x3C;button v-on:click=\"count++\">You clicked me {{ count }} times.&#x3C;/button>'\n  data: function () {\n    return {\n      count: 0\n    }\n  },\n})\n</code></pre>\n<ul>\n<li>이 컴포넌트는 전역으로 선언되었기 때문에 Vue 인스턴스에서 사용</li>\n</ul>\n<pre><code class=\"language-vue\">&#x3C;div id=\"app\">\n  &#x3C;button-counter>&#x3C;/button-counter>\n&#x3C;/div>\n\nvar vm = new Vue({ el: '#app' });\n</code></pre>\n<ul>\n<li>템플릿이 여러 개의 엘리먼트들로 구성되어 있을 때 컴포넌트의 최상단 템플릿은 반드시 단일 엘리먼트로 감싸져 있어야 함</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;div class=\"todo-item\">\n  &#x3C;h2>{{ title }}&#x3C;/h2>\n  &#x3C;div v-html=\"content\">&#x3C;/div>\n&#x3C;/div>\n</code></pre>\n<h4>2)하위 컴포넌트에서 상위 컴포넌트로 이벤트 전달</h4>\n<ul>\n<li>하위 컴포넌트에서 <code>$event</code> 객체를 이용해 상위 컴포넌트로 이벤트를 발생킬 수 있음</li>\n</ul>\n<pre><code class=\"language-vue\">Vue.component('todo-tem', {\n  props: ['todo'],\n  template: `\n    &#x3C;div class=\"todo-item\">\n      &#x3C;h3>{{ todo.title }}&#x3C;/h3>\n      &#x3C;button v-on:click=\"$emit('increment-count', 1)\">\n        Add\n      &#x3C;/button>\n      &#x3C;div v-html=\"todo.description\">&#x3C;/div>\n    &#x3C;/div>\n  `\n})\n</code></pre>\n<ul>\n<li>상위 컴포넌트에서는 <code>v-on</code> 지시자를 이용해 하위 컴포넌트에서 명명한 이벤트와 값을 사용할 수 있음</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;ul v-for=\"todo in todos\">\n &#x3C;li>\n   &#x3C;todo-item\n     v-bind:key=\"todo.id\"\n     v-bind:todo=\"todo\"\n     v-on:increment-count=\"total += 1\">\n   &#x3C;/todo-item>\n &#x3C;/li>\n&#x3C;/ul>\n&#x3C;span> Total todos count is {{total}}&#x3C;/span>\n</code></pre>\n<h3>slots</h3>\n<p>Vue에서는 <code>&#x3C;slot></code>을 이용해 상위 컴포넌트에서 하위 컴포넌트 내부에 사용자 정의의 컨텐츠를 집어 넣을 수 있습니다. 하위 컴포넌트에 <code>&#x3C;slot></code>을 이용해 문구를 동적으로 넣을 수 있는 컴포넌트를 만들어봅시다.</p>\n<pre><code class=\"language-html\">Vue.component('alert', {\n  template: `\n    &#x3C;div class=\"alert-box\">\n      &#x3C;strong>Error!&#x3C;/strong>\n      &#x3C;slot>&#x3C;/slot>\n    &#x3C;/div>\n  `\n})\n</code></pre>\n<p><code>&#x3C;alert></code> 태그 안에 넣은 값은 컴포넌트 내부의 <code>&#x3C;slot></code>의 컨텐츠로 들어가게 됩니다.</p>\n<pre><code class=\"language-html\">&#x3C;alert>\n  There is an issue with in application.\n&#x3C;/alert>\n</code></pre>\n<h4>컴포넌트 전역 등록</h4>\n<ul>\n<li>컴포넌트를 전역으로 등록하게 되면 모든 Vue 인스턴스에서 해당 컴포넌트를 사용할 수 있음</li>\n<li>컴포넌트는 <code>Vue.component()</code> 함수를 이용해 전역 등록</li>\n</ul>\n<pre><code class=\"language-javascript\">Vue.component('my-component-name', {\n  // ... options ...\n})\n\nVue.component('component-a', { /* ... */ })\nVue.component('component-b', { /* ... */ })\nVue.component('component-c', { /* ... */ })\n\nnew Vue({ el: '#app' })\n</code></pre>\n<ul>\n<li>사용(전역으로 등록한 컴포넌트들은 하위 컴포넌트에서도 사용이 가능)</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;div id=\"app\">\n  &#x3C;component-a>&#x3C;/component-a>\n  &#x3C;component-b>&#x3C;/component-b>\n  &#x3C;component-c>&#x3C;/component-c>\n&#x3C;/div>\n</code></pre>\n<h4>컴포넌트의 지역 등록</h4>\n<ul>\n<li>전역 등록으로 인해 사용되지 않는 컴포넌트가 빌드 시에 여전히 남아있을 수 있음</li>\n<li>우선 자바스크립트 객체로 컴포넌트를 정의합니다.</li>\n</ul>\n<pre><code>var ComponentA = { /* ... */ }\nvar ComponentB = { /* ... */ }\nvar ComponentC = { /* ... */ }\n</code></pre>\n<p>지역 등록한 컴포넌트는 다른 컴포넌트의 하위에서는 사용할 수 없습니다. 이 경우, <code>components</code> 속성으로 컴포넌트를 추가해 사용할 수 있습니다.</p>\n<pre><code>var ComponentA = { /* ... */ }\n\nvar ComponentB = {\n  components: {\n    'component-a': ComponentA\n  },\n  // ...\n}\n</code></pre>\n<ol>\n<li>Vue 인스턴스에서 <code>components</code> 속성에 사용할 컴포넌트들을 정의할 수 있습니다.</li>\n</ol>\n<pre><code>new Vue({\n  el: '#app',\n  components: {\n    'component-a': ComponentA,\n    'component-b': ComponentB\n  }\n})\n</code></pre>\n<ol>\n<li>\n<h3>모듈 시스템에서 전역 등록과 지역 등록의 차이점은?</h3>\n<p><strong>지역 등록</strong>의 경우, 각 컴포넌트를 디렉토리에 생성하고 각각의 컴포넌트는 다른 컴포넌트 안에서 <code>import</code> 하여 사용하는 것이 권장됩니다. 만약 여러분들이 컴포넌트 C에서 컴포넌트 A와 B를 사용하고 싶다면 아래와 같은 설정을 해야 합니다.</p>\n<pre><code>import ComponentA from './ComponentA'\nimport ComponentB from './ComponentC'\n\nexport default {\n components: {\n   ComponentA,\n   ComponentB\n }\n}\n</code></pre>\n<p>위의 경우 컴포넌트 A와 컴포넌트 B는 컴포넌트 C의 템플릿에서 사용할 수 있습니다.</p>\n<p><strong>전역 등록</strong>의 경우, 공통적으로 사용되는 컴포넌트를 각각의 파일에서 <code>export</code>해야합니다. 하지만 <code>webpack</code>과 같은 유명한 번들러들은 <code>require.context</code>라는 문법을 이용해서 컴포넌트를 쉽게 전역적으로 등록할 수 있게 해줍니다.</p>\n<pre><code>import Vue from 'vue'\nimport upperFirst from 'lodash/upperFirst'\nimport camelCase from 'lodash/camelCase'\n\nconst requireComponent = require.context(\n './components',\n false,\n /Base[A-Z]\\w+\\.(vue|js)$/\n)\n\nrequireComponent.keys().forEach(fileName => {\n const componentConfig = requireComponent(fileName)\n const componentName = upperFirst(\n   camelCase(\n     fileName.replace(/^\\.\\/(.*)\\.\\w+$/, '$1')\n   )\n )\n Vue.component(\n   componentName,\n   componentConfig.default || componentConfig\n )\n})\n</code></pre>\n</li>\n</ol>\n<h2>Prop</h2>\n<hr>\n<h4>1) 개요</h4>\n<ul>\n<li>상위 컴포넌트의 정보를 하위 컴포넌트로 전달할 수 있는 사용자 지정의 속성</li>\n<li>상위 컴포넌트에서 전달되는 props는 하위 컴포넌트의 속성으로 여겨지며, 하위 컴포넌트에서는 props 옵션을 사용하여 수신할 것으로 예상되는 props를 명시적으로 선언</li>\n</ul>\n<pre><code class=\"language-javascript\">Vue.component('todo-item', {\n  props: ['title'],\n  template: '&#x3C;h2>{{ title }}&#x3C;/h2>'\n})\n</code></pre>\n<ul>\n<li>하위 컴포넌트에서 props가 등록되고 나면, 상위 컴포넌트에서는 사용자 지정 속성을 이용해 값을 전달할 수 있음</li>\n</ul>\n<pre><code class=\"language-html\">&#x3C;todo-item title=\"Learn Vue conceptsnfirst\">&#x3C;/todo-item>\n</code></pre>\n<h4>2) Prop 타입의 종류</h4>\n<ul>\n<li><code>props</code>에는 타입을 지정할 수도, 지정하지 않을 수도 있음</li>\n<li>하지만 일반적으로 타입을 지정하면 다른 개발자들이 해당 코드에서 잘못된 타입의 <code>props</code>를 넘겨주는 실수를 줄여주기 때문에, 가능하면 타입을 지정해주는 것이 좋음</li>\n<li><code>props</code> 객체의 속성과 값을 선언함으로서 타입을 선언</li>\n</ul>\n<pre><code class=\"language-javascript\">props: {\n  name: String,\n  age: Number,\n  isAuthenticated: Boolean,\n  phoneNumbers: Array,\n  address: Object\n}\n</code></pre>\n<h4>3) props에 의한 데이터 흐름</h4>\n<ul>\n<li>모든 <code>props</code>는 하위 속성과 상위 속성 사이에서 단방향 바인딩을 형성</li>\n<li>상위 속성이 변경되는 것은 하위 속성에게 전달되지만, 그 반대는 안됨</li>\n<li>원칙적으로, 하위 컴포넌트에서는 상위 컴포넌트에서 받은 <code>props</code>을 수정해서는 안됨</li>\n</ul>\n<p>하위 컴포넌트에서 <code>props</code> 수정의 필요성을 느낄 수 있는 몇 가지 경우가 있는데, 아래와 같은 방법으로 해결할 수 있습니다.</p>\n<ol>\n<li>상위 컴포넌트의 <code>props</code>는 하위 컴포넌트의 초기값 설정에만 사용되고 그 이후에는 로컬 데이터 속성으로 활용되는 경우:</li>\n</ol>\n<p>이 경우, 하위 컴포넌트에서 사용할 속성을 <code>data</code>에 선언하고, 그 값을 <code>props</code>로 초기화하면 됩니다.</p>\n<pre><code>props: ['defaultUser'],\ndata: function () {\n  return {\n    username: this.defaultUser\n  }\n}\n</code></pre>\n<ol>\n<li>상위 컴포넌트에서 <code>props</code>로 전해주는 값이 수정되는 경우</li>\n</ol>\n<p>이 경우, 하위 컴포넌트에서 <code>computed</code> 속성을 이용해 <code>props</code>의 값이 바뀔 때마다 신규 값을 얻을 수 있습니다.</p>\n<pre><code>props: ['environment'],\ncomputed: {\n  localEnvironment: function () {\n    return this.environment.trim().toUpperCase()\n  }\n}\n</code></pre>\n<h4>4) Props가 아닌 속성</h4>\n<ul>\n<li>컴포넌트에 전달되기는 하지만 해당 <code>props</code>가 하위 컴포넌트에서 정의되지는 않은 속성</li>\n<li>만약 <code>data-tooltip</code> 속성을 요구하는 컴포넌트를 사용하고 있다고 가정해봅시다. </li>\n<li>이 속성을 컴포넌트 인스턴스에 다음과 같이 추가 할 수 있습니다.</li>\n</ul>\n<pre><code>&#x3C;custom-input data-tooltip=\"Enter your input\" />\n</code></pre>\n<ul>\n<li>상위 컴포넌트에서부터 <code>props</code>가 아닌 속성을 넘겨주려 한다면, 하위 컴포넌트에서 같은 이름을 가진 속성은 덮어씌워집니다. </li>\n<li>하지만 <code>class</code>나 <code>style</code>같은 <code>props</code>는 예외로, 이 값들은 하위 컴포넌트와 합쳐집니다.</li>\n</ul>\n<pre><code>//Parent component\n&#x3C;custom-input class=\"custom-class\" />\n\n//Child component\n&#x3C;input type=\"date\" class=\"date-control\">\n</code></pre>\n<h4>5) props 검증</h4>\n<ul>\n<li>타입, 필수 여부, 디폴트 값 등 <code>props</code>의 유효성 검증을 제공</li>\n</ul>\n<pre><code class=\"language-javascript\">Vue.component('user-profile', {\n  props: {\n    age: Number,\n    identityNumber: [String, Number],\n    email: {\n      type: String,\n      required: true\n    },\n    minBalance: {\n      type: Number,\n      default: 10000\n    },\n    message: {\n      type: Object,\n      default: function () {\n        return { message: 'Welcome to Vue' }\n      }\n    },\n    location: {\n      validator: function (value) {\n        return ['India', 'Singapore', 'Australia'].indexOf(value) !== -1\n      }\n    }\n  }\n})\n</code></pre>\n<ol>\n<li>\n<h3>트랜지션 효과를 넣을 수 있는 방법은?</h3>\n<p>Vue에서는 항목들이 DOM에서 추가, 갱신 또는 삭제될 때, 다양한 방법으로 트랜지션 효과를 입힐 수 있습니다.</p>\n<ol>\n<li>CSS 트랜지션과 애니메이션을 위한 클래스를 자동으로 적용</li>\n<li>Animate.css와 같은 써드파티 CSS 애니메이션 라이브러리 통합</li>\n<li>트랜지션 훅 중에 JavaScript를 사용하여 DOM을 직접 조작</li>\n<li>Velocity.js와 같은 써드파티 JavaScript 애니메이션 라이브러리 통합</li>\n</ol>\n</li>\n</ol>\n<h2>싱글 파일 컴포넌트</h2>\n<hr>\n<h4>1) 싱글 파일 컴포넌트</h4>\n<ul>\n<li>템플릿과 스타일, 로직들을 하나의 파일에 정리</li>\n</ul>\n<pre><code class=\"language-vue\">&#x3C;template>\n    &#x3C;div>\n        &#x3C;h1>Welcome {{ name }}!&#x3C;/h1>\n    &#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script>\n    module.exports = {\n       data: function() {\n           return {\n               name: 'John'\n           }\n       }\n    }\n&#x3C;/script>\n\n&#x3C;style scoped>\n    h1 {\n        color: #34c779;\n        padding: 3px;\n    }\n&#x3C;/style>\n</code></pre>\n<h4>2) 관심사 분리(separation of concerns)</h4>\n<ul>\n<li>관심사 분리가 파일 타입 분리는 다름</li>\n<li>현대적인 UI 개발에서 코드베이스를 서로 얽혀있는 세 개의 거대한 레이어로 나누는 대신, 느슨하게 결합 된 컴포넌트로 나누고 구성하는 것이 더 중요</li>\n<li>컴포넌트 내부에서 템플릿, 로직 및 스타일이 본질적으로 결합되어 배치되면 컴포넌트의 응집력과 유지 보수성이 향상</li>\n</ul>\n<pre><code class=\"language-vue\">&#x3C;template>\n  &#x3C;div>This section will be pre-compiled and hot reloaded&#x3C;/div>\n&#x3C;/template>\n&#x3C;script src=\"./my-component.js\">&#x3C;/script>\n&#x3C;style src=\"./my-component.css\">&#x3C;/style>../0+.3\n</code></pre>\n<h4>3) 싱글 파일 컴포넌트 사용 이유</h4>\n<ul>\n<li>\n<p>싱글 파일 컴포넌트가 아닐 경우 문제점</p>\n<ul>\n<li>전역 정의 :  모든 구성 요소에 대해 고유한 이름을 지정하도록 강요</li>\n<li>문자열 템플릿 : 구문 강조가 약해 여러 줄로 된 HTML에 보기 안좋은 슬래시가 많이 필요</li>\n<li>CSS 지원 없음 : HTML 및 JavaScript가 컴포넌트로 모듈화 되어 있으나 CSS가 빠져 있는 것을 말함</li>\n<li>빌드 단계 없음 : Pug (이전의 Jade) 및 Babel과 같은 전처리기가 아닌 HTML 및 ES5 JavaScript로 제한</li>\n</ul>\n</li>\n</ul>\n<p>싱글 파일 컴포넌트는 JavaScript 기반에서 발생하는 문제점을 해결하기 위해, 별도의 <code>.vue</code> 확장자의 파일로 작성</p>\n<h2>Vue Router</h2>\n<h4>1) 개요</h4>\n<ul>\n<li>Vue에서 동작하는 공식적인 라우팅 라이브러리</li>\n<li>중첩된 라우트/뷰 매핑</li>\n<li>모듈화된, 컴포넌트 기반의 라우터 설정</li>\n<li>라우터 파라미터, 쿼리, 와일드카드</li>\n<li>Vue의 트랜지션 시스템을 이용한 트랜지션 효과</li>\n<li>세밀한 네비게이션 컨트롤</li>\n<li>active CSS 클래스를 자동으로 추가해주는 링크</li>\n<li>HTML5 히스토리 모드 또는 해시 모드(IE9에서 자동으로 폴백)</li>\n<li>사용자 정의 가능한 스크롤 동작</li>\n</ul>\n<h4>2) 사용법</h4>\n<ul>\n<li>템플릿에서 <code>&#x3C;router-link></code>태그를 설정</li>\n</ul>\n<pre><code class=\"language-vue\">&#x3C;script src=\"https://unpkg.com/vue/dist/vue.js\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/vue-router/dist/vue-router.js\">&#x3C;/script>\n\n&#x3C;div id=\"app\">\n  &#x3C;h1>Welcome to Vue routing app!&#x3C;/h1>\n  &#x3C;p>\n    &#x3C;router-link to=\"/home\">Home&#x3C;/router-link>\n    &#x3C;router-link to=\"/services\">Services&#x3C;/router-link>\n  &#x3C;/p>\n  &#x3C;router-view>&#x3C;/router-view>\n&#x3C;/div>\n</code></pre>\n<ul>\n<li>main.js에서 Vue와 Vue 라우터를 <code>import</code>하고 <code>Vue.use()</code>함수를 이용해 호출</li>\n</ul>\n<pre><code class=\"language-javascript\">import Vue from 'vue';\nimport VueRouter from 'vue-router';\n\nVue.use(VueRouter)\n</code></pre>\n<ul>\n<li>라우트 컴포넌트를 정의하거나 <code>import</code></li>\n</ul>\n<pre><code class=\"language-javascript\">const Home = { \n    template: '&#x3C;div>Home&#x3C;/div>' \n}\nconst Services = { \n    template: '&#x3C;div>Services&#x3C;/div>' \n}\n</code></pre>\n<ul>\n<li>라우트를 정의. 각 라우트는 반드시 컴포넌트와 매핑</li>\n</ul>\n<pre><code class=\"language-javascript\">const routes = [\n  { path: '/home', component: Home },\n  { path: '/services', component: Services }\n]\n</code></pre>\n<ul>\n<li><code>routes</code> 옵션과 함께 router 인스턴스를 만듦</li>\n</ul>\n<pre><code class=\"language-javascript\">const router = new VueRouter({\n  routes\n})\n</code></pre>\n<ul>\n<li>루트 Vue 인스턴스를 만들고 <code>mount</code></li>\n</ul>\n<pre><code class=\"language-javascript\">const app = new Vue({\n  router\n}).$mount('#app')\n</code></pre>\n<h4>3) 동적 라우트 매칭</h4>\n<ul>\n<li>주어진 패턴을 가진 라우트를 동일한 컴포넌트에 매핑해야하는 경우</li>\n</ul>\n<pre><code class=\"language-javascript\">const User = {\n  template: '&#x3C;div>User {{ $route.params.name }}, PostId: {{ route.params.postid }}&#x3C;/div>'\n}\nconst router = new VueRouter({\n  routes: [\n    { \n        path: '/user/:name/post/:postid', \n        component: User \n    }\n  ]\n})\n</code></pre>\n<h4>4) 라우터 params를 반응적으로 만드는 방법</h4>\n<ul>\n<li>매개 변수와 함께 라우트를 사용할 때 주의 해야할 점은 사용자가 <code>/user/foo</code>에서 <code>/user/bar</code>로 이동할 때 동일한 컴포넌트 인스턴스가 재사용된다는 것</li>\n<li>두 라우트 모두 동일한 컴포넌트를 렌더링하므로 이전 인스턴스를 삭제 한 다음 새 인스턴스를 만드는 것보다 효율적</li>\n<li>그러나 이는 또한 컴포넌트의 라이프 사이클 훅이 호출되지 않음을 의미</li>\n<li>동일한 컴포넌트의 <code>params</code> 변경 사항에 반응하려면 <code>$route</code> 객체를 보면 됨</li>\n<li><code>watch</code>에서 <code>$route</code> 관찰하기:</li>\n</ul>\n<pre><code class=\"language-javascript\">const User = {\n  template: '&#x3C;div>User {{ $route.params.name }} &#x3C;/div>',\n  watch: {\n    '$route' (to, from) {\n    }\n  }\n}\n</code></pre>\n<ol>\n<li><code>beforeRouteUpdate</code> 네비게이션 가드를 사용하기 : <code>beforeRouteEnter</code> 가드에서는 <code>this</code>에 접근할 권한이 없지만 <code>next</code> 콜백 함수를 이용해 인스턴스에 접근 가능</li>\n</ol>\n<pre><code class=\"language-javascript\">const User = {\n  template: '&#x3C;div>User {{ $route.params.name }} &#x3C;/div>',\n  beforeRouteUpdate (to, from, next) {\n  }\n}\n</code></pre>\n<h4>3) 라우트의 우선 순위</h4>\n<ul>\n<li>동일한 URL이 여러 라우트와 일치하는 경우가 있음</li>\n<li>일치하는 우선 순위는 라우트 정의의 순서에 따라 결정</li>\n<li>즉, 경로가 더 먼저 정의 될수록 우선 순위가 높아짐</li>\n</ul>\n<pre><code class=\"language-javascript\">const router = new VueRouter({\n    routes: [\n       { path: '/user/:name', component: User } \n       { path: '/user/:name', component: Admin }\n       { path: '/user/:name', component: Customer }\n    ]\n})\n</code></pre>\n<h4>4) 중첩된 라우트</h4>\n<ul>\n<li>URL의 세그먼트 역시 중첩된 컴포넌트의 특정 구조와 일치합니다. </li>\n<li>중첩된 아웃렛에서 컴포넌트를 렌더링하려면 <code>VueRouter</code> 생성자에서 <code>config</code>로 <code>children</code>을 설정</li>\n</ul>\n<pre><code class=\"language-javascript\">const router = new VueRouter({\n  routes: [\n    { path: '/user/:id', component: User,\n      children: [\n        {\n          path: 'profile',\n          component: UserProfile\n        },\n        {\n          path: 'posts',\n          component: UserPosts\n        },\n        {  path: '',\n           component: UserHome },\n      ]\n    }\n  ]\n})\n</code></pre>\n<h2>filter</h2>\n<hr>\n<h4>1) 개요</h4>\n<ul>\n<li>텍스트 형식화를 위해 사용</li>\n<li>자바스크립트 표현식에 파이프(<code>|</code>) 기호와 함께 추가</li>\n</ul>\n<pre><code class=\"language-javascript\">filters: {\n  capitalize: function (value) {\n    if (!value) return ''\n    value = value.toString()\n    return value.charAt(0).toUpperCase() + value.slice(1)\n  }\n}\n</code></pre>\n<ul>\n<li>이 필터를 중괄호 보간법 또는 <code>v-bind</code> 표현식 함께 사용 가능</li>\n</ul>\n<pre><code class=\"language-vue\">// 중괄호 보간법\n{{ username | capitalize }}\n// v-bind\n&#x3C;div v-bind:id=\"username | capitalize\">&#x3C;/div>\n</code></pre>\n<h4>2) 전역, 지역필터</h4>\n<h5>(1) 지역 필터(Local filters)</h5>\n<ul>\n<li>컴포넌트의 옵션에서 정의. 이 경우, 필터는 해당 컴포넌트에서만 사용 가능</li>\n</ul>\n<pre><code class=\"language-javascript\">filters: {\n  capitalize: function (value) {\n    if (!value) return ''\n    value = value.toString()\n    return value.charAt(0).toUpperCase() + value.slice(1)\n  }\n}\n</code></pre>\n<h5>(5) 전역 필터(Global filters)</h5>\n<ul>\n<li>Vue 인스턴스를 만들기 전에 전역적으로 필터를 정의할 수 있음</li>\n<li>이 경우 Vue 인스턴스 내의 모든 컴포넌트에서 필터를 사용</li>\n</ul>\n<pre><code class=\"language-javascript\">Vue.filter('capitalize', function (value) {\n  if (!value) return ''\n  value = value.toString()\n  return value.charAt(0).toUpperCase() + value.slice(1)\n})\n\nnew Vue({\n  // ...\n})\n</code></pre>\n<h4>3) filter 연속</h4>\n<ul>\n<li>필터 뒤에 또 다른 필터를 사용 가능</li>\n</ul>\n<pre><code class=\"language-javascript\">{{ message | filterA | filterB | filterC ... }}\n</code></pre>\n<ul>\n<li>각각의 필터는 파이프(<code>|</code>)로 구분되며, <code>message</code>는 <code>filterA</code>의 결과가 <code>filterB</code>의 영향을 받고, 그 결과가 다시 <code>filterC</code>의 영향을 받음</li>\n<li>날짜 형식의 데이터를 변경한 뒤 대문자로 변경하고 싶다면 아래와 같이 사용</li>\n</ul>\n<pre><code class=\"language-javascript\">{{ birthday | dateFormat | uppercase }}\n</code></pre>\n<h4>4) filter 파라미터</h4>\n<ul>\n<li>필터는 기본적으로 자바스크립트 함수이기 때문에, 아래와 같이 두 개 이상의 인수를 받을 수 있음</li>\n</ul>\n<pre><code class=\"language-javascript\">{{ message | filterA('arg1', arg2) }}\n</code></pre>\n<ul>\n<li><code>filterA</code>는 세 개의 인수를 받는 함수로 정의</li>\n<li><code>message</code>의 값은 첫번째 인수로 전달될 것이며, 순수 문자열인 <code>'arg1'</code>은 두번째 인수로 전달될 것이며, 자바스크립트 표현식인 <code>arg2</code>는 표현식이 실행된 이후에 세번째 인수로 전달</li>\n</ul>\n<pre><code class=\"language-javascript\">{{ 2 | exponentialStrength(10) }} \n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#vue-%EA%B0%9C%EC%9A%94\">Vue 개요</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-vue%EB%9E%80\">1) vue란</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-%ED%8A%B9%EC%A7%95\">2) 특징</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#vue-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\">vue 라이프사이클</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EA%B0%9C%EC%9A%94\">1) 개요</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-creation%EC%B4%88%EA%B8%B0%ED%99%94\">2) Creation(초기화)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-beforecreate\">(1) beforeCreate</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-created\">(2) created</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-mountingdom-%EC%B6%94%EA%B0%80\">3) Mounting(DOM 추가)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-beforemount\">(1) beforeMount</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-mounted\">(2) mounted</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-updating-%EC%9E%AC-%EB%A0%8C%EB%8D%94%EB%A7%81\">4) Updating (재 렌더링)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-beforeupdate\">(1) beforeUpdate</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-updated\">(2) updated</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#5-destruction%ED%95%B4%EC%B2%B4\">5) Destruction(해체)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-beforedestroy\">(1) beforeDestroy</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-destroyed\">(2) destroyed</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%A7%80%EC%8B%9C%EC%9E%90conditional-directives\">조건부 지시자(conditional directives)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-v-if\">1) v-if</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-v-else\">2) v-else</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-v-else-if\">3) v-else-if</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-v-show\">4) v-show</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#5-v-show%EC%99%80-v-if%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">5) v-show와 v-if의 차이점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#v-for\">v-for</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#v-for%EB%A5%BC-%EC%93%B0%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9D%80\">v-for를 쓰는 목적은</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#v-for%EC%97%90%EC%84%9C-key-%EC%86%8D%EC%84%B1%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\">v-for에서 key 속성이 필요한 이유</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#vue-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%9E%80\">Vue 인스턴스란</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#%EA%B0%99%EC%9D%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%97%90%EC%84%9C-v-for%EC%99%80-v-if%EB%A5%BC-%ED%95%A8%EA%BB%98-%EC%93%B0%EB%A9%B4-%EC%95%88-%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">같은 엘리먼트에서 v-for와 v-if를 함께 쓰면 안 되는 이유</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#v-model\">v-model</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-v-model%EC%9D%98-%EC%97%AD%ED%95%A0\">1) v-model의 역할</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-v-model%EC%97%90%EC%84%9C-%EC%A7%80%EC%9B%90%EB%90%98%EB%8A%94-%EC%88%98%EC%8B%9D%EC%96%B4\">2) v-model에서 지원되는 수식어</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-lazy\">(1) lazy</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-number\">(2) number</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-trim\">(3) trim</a></li>\n</ul>\n</li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-v-model%EC%9D%84-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">3) 컴포넌트에서 v-model을 사용자 정의하는 방법</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98%EC%9D%98-input-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-v-model%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B2%95\">4) 사용자 정의의 input 컴포넌트에서 v-model을 사용하는 법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8component\">컴포넌트(Component)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EA%B0%9C%EC%9A%94-1\">1) 개요</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2%ED%95%98%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EC%83%81%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A0%84%EB%8B%AC\">2)하위 컴포넌트에서 상위 컴포넌트로 이벤트 전달</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#slots\">slots</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%A0%84%EC%97%AD-%EB%93%B1%EB%A1%9D\">컴포넌트 전역 등록</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%A7%80%EC%97%AD-%EB%93%B1%EB%A1%9D\">컴포넌트의 지역 등록</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#prop\">Prop</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EA%B0%9C%EC%9A%94-2\">1) 개요</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-prop-%ED%83%80%EC%9E%85%EC%9D%98-%EC%A2%85%EB%A5%98\">2) Prop 타입의 종류</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-props%EC%97%90-%EC%9D%98%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%9D%90%EB%A6%84\">3) props에 의한 데이터 흐름</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-props%EA%B0%80-%EC%95%84%EB%8B%8C-%EC%86%8D%EC%84%B1\">4) Props가 아닌 속성</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#5-props-%EA%B2%80%EC%A6%9D\">5) props 검증</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#%EC%8B%B1%EA%B8%80-%ED%8C%8C%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">싱글 파일 컴포넌트</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EC%8B%B1%EA%B8%80-%ED%8C%8C%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">1) 싱글 파일 컴포넌트</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-%EA%B4%80%EC%8B%AC%EC%82%AC-%EB%B6%84%EB%A6%ACseparation-of-concerns\">2) 관심사 분리(separation of concerns)</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-%EC%8B%B1%EA%B8%80-%ED%8C%8C%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%82%AC%EC%9A%A9-%EC%9D%B4%EC%9C%A0\">3) 싱글 파일 컴포넌트 사용 이유</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#vue-router\">Vue Router</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EA%B0%9C%EC%9A%94-3\">1) 개요</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-%EC%82%AC%EC%9A%A9%EB%B2%95\">2) 사용법</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-%EB%8F%99%EC%A0%81-%EB%9D%BC%EC%9A%B0%ED%8A%B8-%EB%A7%A4%EC%B9%AD\">3) 동적 라우트 매칭</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-%EB%9D%BC%EC%9A%B0%ED%84%B0-params%EB%A5%BC-%EB%B0%98%EC%9D%91%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EB%B0%A9%EB%B2%95\">4) 라우터 params를 반응적으로 만드는 방법</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-%EB%9D%BC%EC%9A%B0%ED%8A%B8%EC%9D%98-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84\">3) 라우트의 우선 순위</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-%EC%A4%91%EC%B2%A9%EB%90%9C-%EB%9D%BC%EC%9A%B0%ED%8A%B8\">4) 중첩된 라우트</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#filter\">filter</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EA%B0%9C%EC%9A%94-4\">1) 개요</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#2-%EC%A0%84%EC%97%AD-%EC%A7%80%EC%97%AD%ED%95%84%ED%84%B0\">2) 전역, 지역필터</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#1-%EC%A7%80%EC%97%AD-%ED%95%84%ED%84%B0local-filters\">(1) 지역 필터(Local filters)</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#5-%EC%A0%84%EC%97%AD-%ED%95%84%ED%84%B0global-filters\">(5) 전역 필터(Global filters)</a></li>\n</ul>\n</li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#3-filter-%EC%97%B0%EC%86%8D\">3) filter 연속</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20Vue(1)/#4-filter-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\">4) filter 파라미터</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)","path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/","images":["images/2.jpg"],"category":"기술 면접","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-04-15T01:00:00.000Z","components":null,"tweets":null,"summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)"}},"posts":{"edges":[{"node":{"frontmatter":{"type":"portfolio","title":"MOIJA","images":["moija/images/moija.png","moija/images/moija1.png","moija/images/moija2.png","moija/images/moija3.png","moija/images/moija4.png","moija/images/moija5.png"],"path":"/portfolios/moija/","tags":null,"date":"2022-03-02T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"VUELOG","images":["vuelog/images/vuelog.png","vuelog/images/vuelog1.png","vuelog/images/vuelog2.png","vuelog/images/vuelog3.png","vuelog/images/vuelog4.png","vuelog/images/vuelog5.png","vuelog/images/vuelog6.png"],"path":"/portfolios/VUELOG/","tags":null,"date":"2022-03-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"DT CENTER","images":["dtcenter/images/dtcenter.png","dtcenter/images/dtcenter1.png","dtcenter/images/dtcenter2.png","dtcenter/images/dtcenter3.png"],"path":"/portfolios/DT CENTER/","tags":null,"date":"2022-02-21T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"COLORBERRY","images":["ColorBerry/images/colorberry.png","ColorBerry/images/colorberry2.png","ColorBerry/images/colorberry3.png","ColorBerry/images/colorberry4.png","ColorBerry/images/colorberry5.png","ColorBerry/images/colorberry6.png","ColorBerry/images/colorberry7.png","ColorBerry/images/colorberry8.png"],"path":"/portfolios/COLORBERRY/","tags":null,"date":"2022-02-20T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"우아한 테크 캠프 4기 - 4주차 회고","images":["images/woowa.jpg"],"path":"/우아한 테크 캠프 4기 - 4주차 회고/","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-08-02T19:21:00000Z","summary":"우아한 테크 캠프 4기 - 4주차 회고"}}},{"node":{"frontmatter":{"type":null,"title":"우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기","images":["images/woowa.jpg"],"path":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-07-11T19:21:00000Z","summary":"우아한 테크 캠프 4기 - 우아한 리액트 만들기 - useState, useEffect 만들기"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 클로저","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 클로저/","tags":["자바스크립트"],"date":"2021-06-12T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 클로저"}}},{"node":{"frontmatter":{"type":null,"title":"react - Jest 사용하기","images":["images/react.jpg"],"path":"/react - Jest 사용하기/","tags":["리액트","react"],"date":"2021-06-06T01:06:00.000Z","summary":"react - Jest 사용하기 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"redux-toolkit - createSlice","images":["images/react.jpg"],"path":"/redux-toolkit - createSlice/","tags":["리액트","react","redux","redux-toolkit"],"date":"2021-06-05T01:06:00.000Z","summary":"redux-toolkit - createSlice 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"redux-toolkit - 튜토리얼","images":["images/react.jpg"],"path":"/redux-toolkit - 튜토리얼/","tags":["리액트","react","redux","redux-toolkit"],"date":"2021-06-05T01:06:00.000Z","summary":"redux-toolkit - 튜토리얼 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - REST API","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - REST API/","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","summary":"자바스크립트 요점 정리 - REST API 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 타이머","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 타이머/","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 타이머 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 프로토타입","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 프로토타입/","tags":["자바스크립트"],"date":"2021-06-03T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 프로토타입 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 실행 컨텍스트","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 실행 컨텍스트/","tags":["자바스크립트"],"date":"2021-05-25T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 실행 컨텍스트"}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-21T22:23:00.000Z","summary":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-20T20:21:00.000Z","summary":"2020 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 2-요구 사항 확인","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 2-요구 사항 확인/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-19T17:21:00.000Z","summary":"2021 정보 처리 기사 실기 요약 2-요구 사항 확인 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 3-데이터 입출력 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 3-데이터 입출력 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-18T17:22:00.000Z","summary":"2021 정보 처리 기사 데이터 입출력 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 4-통합 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 4-통합 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-17T05:31:00.000Z","summary":"2021 정보 처리 기사 통합 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 5-서버 프로그램 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 5-서버 프로그램 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-16T06:31:00.000Z","summary":"2021 정보 처리 기사 서버 프로그램 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 6-화면 설계","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 6-화면 설계/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-15T17:00:00.000Z","summary":"2021 정보 처리 기사 화면 설계 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-14T17:00:00.000Z","summary":"2021 정보 처리 기사 애플리케이션 테스트 관리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 8-SQL 응용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 8-SQL 응용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-12T12:45:00.000Z","summary":"2021 정보 처리 기사 SQL 응용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-11T19:00:00.000Z","summary":"2021 정보 처리 기사 소프트웨어 보안 구축 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-네트워크","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-네트워크/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-10T21:03:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-네트워크 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-05-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-05-06T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-03T21:01:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-02T21:01:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-01T23:03:00.000Z","summary":"2021 정보 처리 기사 제품 소프트웨어 패키징 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node/","tags":["벡엔드","개발자","면접","기술면접","node"],"date":"2021-04-20T01:00:00.000Z","summary":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt/","tags":["프론트엔드","개발자","면접","기술면접","Nuxt"],"date":"2021-04-15T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-04-15T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS/","tags":["프론트엔드","개발자","면접","기술면접","CSS"],"date":"2021-04-14T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React/","tags":["프론트엔드","개발자","면접","기술면접","React"],"date":"2021-04-14T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택/","tags":["벡엔드","개발자","면접","기술면접","기술스택"],"date":"2021-04-09T01:00:00.000Z","summary":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CS","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - cs/","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-04-08T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - this","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - this/","tags":["자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"자바스크립트 요점 정리 - this 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1) 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2) 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - history api 정리","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - history api/","tags":["자바스크립트"],"date":"2021-03-03T12:23:00.000Z","summary":"자바스크립트 요점 정리 - history api 정리"}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 고양이 정리","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 고양이 정리/","tags":["프로그래머스 데브매칭","고양이 사진첩"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 고양이 정리입니다."}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 상태관리","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 상태관리/","tags":["프로그래머스 데브매칭","상태관리"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 상태관리입니다."}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 라우팅","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 라우팅/","tags":["프로그래머스","데브매칭","소프트웨어"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 라우팅입니다."}}},{"node":{"frontmatter":{"type":"portfolio","title":"MBTI WORLD","images":["mbtiworld/images/mbtiworld.png","mbtiworld/images/mbtiworld2.png","mbtiworld/images/mbtiworld3.png","mbtiworld/images/mbtiworld4.png","mbtiworld/images/mbtiworld5.png","mbtiworld/images/mbtiworld6.png","mbtiworld/images/mbtiworld7.png","mbtiworld/images/mbtiworld8.png","mbtiworld/images/mbtiworld9.png","mbtiworld/images/mbtiworld10.png"],"path":"/portfolios/MBTI WORLD/","tags":null,"date":"2021-02-19T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 3-단답형 문제(3)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 3-단답형 문제(3)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-25T09:22:00000Z","summary":"2020 정보 처리 기사 실기 3-단답형 문제(3)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 4-단답형 문제(4)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 4-단답형 문제(4)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-15T09:24:00000Z","summary":"2020 정보 처리 기사 실기 4-단답형 문제(4)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 2-단답형 문제(2)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 2-단답형 문제(2)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-15T09:21:00000Z","summary":"2020 정보 처리 기사 실기 2-단답형 문제(2)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 1-단답형 문제(1)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 1-단답형 문제(1)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-14T16:21:00000Z","summary":"2020 정보 처리 기사 실기 1-단답형 문제(1)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 5-정보 관련 용어 정리","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 5-정보 관련 용어 정리/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-14T02:21:00.000Z","summary":"2020 정보 처리 기사 실기 5-정보 용어 정리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-03T01:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-02T01:00:00.000Z","summary":"응용 SW 기초 기술 활용"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-01T01:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-03T03:05:00.000Z","summary":"정보시스템 구축 관리"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-02T03:05:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-01T03:05:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-03T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-02T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-01T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-03T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-02T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-01T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-01-03T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-01-02T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)/","tags":["정보처리기사 필기","정보처리기사","필기","데이터베이스 구축"],"date":"2020-01-01T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)"}}},{"node":{"frontmatter":{"type":"portfolio","title":"CAPTURE BLOG","images":["CaptureBlog/images/capture1.png","CaptureBlog/images/capture2.png","CaptureBlog/images/capture3.png","CaptureBlog/images/capture4.png","CaptureBlog/images/capture5.png","CaptureBlog/images/capture6.png"],"path":"/portfolios/CAPTURE BLOG/","tags":null,"date":"2020-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"LANGUAGE TOGETHER","images":["languageTogether/images/languagetogether.png","languageTogether/images/languagetogether2.png","languageTogether/images/languagetogether3.png","languageTogether/images/languagetogether4.png","languageTogether/images/languagetogether5.png","languageTogether/images/languagetogether6.png","languageTogether/images/languagetogether7.png","languageTogether/images/languagetogether8.png","languageTogether/images/languagetogether9.png"],"path":"/portfolios/LANGUAGE TOGETHER/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"MOVIE STAR","images":["moviestar/images/moviestar.png","moviestar/images/moviestar2.png","moviestar/images/moviestar3.png","moviestar/images/moviestar4.png"],"path":"/portfolios/MOVIE STAR/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"resume","title":"Resume","images":null,"path":"/resume/","tags":null,"date":"2000-01-01T00:00:00.000Z","summary":null}}}]}},"pageContext":{}}}