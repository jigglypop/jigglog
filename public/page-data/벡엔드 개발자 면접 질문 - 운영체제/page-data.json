{"componentChunkName":"component---src-templates-post-tsx","path":"/벡엔드 개발자 면접 질문 - 운영체제/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"5d262096-c718-5b27-8124-8ceb4c059c31","html":"<blockquote>\n<p>백엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요</p>\n</blockquote>\n<h1>2. 운영체제</h1>\n<hr>\n<h3>1) 가비지 컬렉터</h3>\n<hr>\n<h4>(1) 가비지와 가비지 컬렉터</h4>\n<ul>\n<li>Garbage : 정리되지 않은 메모리, 유효하지 않은 객체의 메모리</li>\n<li>Garbage collector (GC) : 프로그램이 사용할 수 있는 메모리 용량이 부족할 때 가비지들을 메모리에서 해제하는 기능</li>\n</ul>\n<h4>(2) 메모리</h4>\n<ul>\n<li>메모리 할당 : 자바스크립트는 값을 선언할 때 자동으로 메모리를 할당한다.</li>\n<li>메모리 사용 : 메모리를 읽고 쓰는 것을 의미. 메모리가 할당된 변수를 사용하면 읽기와 쓰기 작업이 이루어짐</li>\n<li>메모리 해제 : 더 이상 필요하지 않은 메모리를 해제하여 재사용 할 수 있도록 함</li>\n</ul>\n<h4>(3) 레퍼런스 카운팅(Reference Counting)</h4>\n<ul>\n<li>해당 값이 얼마나 많이 참조되었는지 추적</li>\n<li>변수를 선언하고 참조값이 할당되면 레퍼런스 카운트는 1이 됨</li>\n<li>다른 변수가 같은 값을 참조하면 레퍼런스 카운트가 늘어남</li>\n<li>마찬가지로 해당 값을 참조하는 변수에 다른 값을 할당하면 레퍼런스 카운트가 줄어듦</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> objectA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 레퍼런스 카운트 1</span>\n<span class=\"token keyword\">let</span> objectB <span class=\"token operator\">=</span> objectA<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 레퍼런스 카운트 2</span>\n\nobjectA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 레퍼런스 카운트 1</span>\nobjectB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 레퍼런스 카운트 0</span></code></pre></div>\n<ul>\n<li>값의 레퍼런스 카운트가 0이 되면 해당 값에 접근할 방법이 없으며 메모리를 회수해도 안전</li>\n<li>순환 참조 문제 : 객체가 두 개일 때 함수 실행이 끝날 때 두 객체는 모두 스코프를 벗어나게 될 것이고, 두 객체는 불필요해지므로 할당된 메모리는 회수되어야 하지만 함수 실행이 끝난 뒤에도 레퍼런스 카운트가 0이 되지 않으므로 두 객체는 계속 존재</li>\n<li>이런 함수를 여러 번 호출하면 메모리를 회수하지 못하고 낭비되는 메모리가 많이 늘어남</li>\n</ul>\n<h4>(4) 마크 앤 스위프(Mark and sweep)</h4>\n<ul>\n<li>메모리 해제 여부를 결정하기 위해 루트(roots, 자바스크립트의 <code class=\"language-text\">window</code> 객체)부터 해당 객체까지 닿을 수 있는지를 판단</li>\n<li>루트부터 시작하여 루트가 참조하는 객체들과 그 객체가 참조하는 또 다른 객체들을 추적</li>\n<li>객체를 추적하면서 닿을 수 있는 객체는 표시(mark) 한 후, 표시가 없는 객체들은 메모리를 해제(sweep)</li>\n</ul>\n<h3>2) Call-by-value, Call-by-reference, Call-by-assignment</h3>\n<hr>\n<h4>(1) call-by-value(cbv):</h4>\n<ul>\n<li>변수의 <em>값</em>을 복사하여 함수의 인자로 전달</li>\n<li>복사된 인자는 함수 내에서만 사용되는 local variable의 특성을 가짐</li>\n<li>함수 안에서 인자의 값이 변경되어도 외부의 변수의 값은 변경되지 않음</li>\n</ul>\n<h4>(2) call-by-reference(cbr)</h4>\n<ul>\n<li>변수의 <em>주소값</em>을 복사하여 함수의 인자로 전달</li>\n<li>함수 안에서 값이 인자의 값이 변경된다면 전체 코드에서 해당 변수의 값이 변경</li>\n</ul>\n<h4>(3) call-by-assignment (cba)(python)</h4>\n<ul>\n<li>전달받는 객체에 따라 참조 방식이 결정.</li>\n<li>immutable object : (int, float, tuple)이 함수의 인자로 넘어갈 땐 call-by-value로 전달</li>\n<li>mutable object : (list, dic, set)이 함수의 인자로 넘어갈 땐 call-by-reference로 전달</li>\n<li>list, dic, set이 mutable object 인 이유 : 객체의 크기가 아주 큰 경우 복사 참조만 된다면 메모리 공간이 낭비</li>\n</ul>\n<h3>3) 가상 메모리와 페이지 폴트</h3>\n<hr>\n<h4>(1) 가상 메모리</h4>\n<ul>\n<li>프로그램 실행에 필요한 메모리 용량 전체를 RAM에서 할당받는 것이 아니라, 최소한의 메모리를 RAM에서 할당받아 저장하고 나머지는 HDD (가상 메모리 공간)에 저장하는 것</li>\n<li>요구 페이징 : 페이지 폴트가 발생하면 운영 체제가 가상 메모리에서 해당 페이지를 찾아 물리 메모리의 불필요한 페이지와의 교체를 요구. 그리고 이 과정 동안은 모든 스레드가 대기</li>\n</ul>\n<h4>(3) 페이지 교체 알고리즘</h4>\n<ul>\n<li>요구 페이징이 발생했을 때 교체할 물리 메모리의 페이지를 선정하는 알고리즘</li>\n<li><code class=\"language-text\">FIFO (First In First Out)</code> : 물리 메모리에 적재된지 가장 오래된 페이지를 교체. 페이지의 사용 빈도를 무시하기 때문에 활발하게 사용하는 페이지가 교체될 수 있다는 문제점이 있음. 페이지가 적재된 순서를 Queue에 저장하는 방식을 사용</li>\n<li><code class=\"language-text\">LRU (Least Recently Used)</code> : 가장 오랜 기간 사용되지 않은 페이지를 교체. 많은 운영체제가 사용하는 알고리즘</li>\n<li><code class=\"language-text\">LFU (Least Frequently Used)</code> : 참조 횟수가 가장 적은 페이지를 교체. 만약 교체 대상이 여러 개일 경우에 LRU를 사용LFU는 초기에 한 페이지를 집중적으로 참조하다가 이후에 참조하지 않는 경우에 메모리에 계속 남아있을 수 있음</li>\n<li><code class=\"language-text\">MFU (Most Frequently Used)</code> : LFU와 반대로 참조 횟수가 가장 많은 페이지를 교체하는 알고리즘</li>\n</ul>\n<h4>(4) 메모리 단편화 (Memory Fragmentation)</h4>\n<ul>\n<li>내부 단편화 : 교체된 페이지의 크기 &#x3C; 할당된 공간의 크기</li>\n<li>외부 단편화 : 교체된 페이지의 크기 > 할당된 공간의 크기</li>\n</ul>\n<h4>(5) 페이징과 세그먼테이션</h4>\n<ul>\n<li>메모리 단편화를 해결할 수 있는 기법</li>\n<li>\n<p>페이징</p>\n<ul>\n<li>페이지가 연속적인 물리 메모리 공간에 들어가야하는 제약을 해결하기 위한 방법</li>\n<li>가상 메모리는 페이지, 물리 메모리는 프레임이라는 고정 크기의 블록으로 나눈 후, 페이지 테이블의 매핑을 통해 1:1 대응</li>\n<li>페이지 단위를 작게하면 내부 단편화(Internal fragmentation) 역시 해결할 수 있지만 페이지에 공간을 할당한 후 남는 공간이 적어지기 때문에 그 만큼 page mapping 과정이 증가</li>\n</ul>\n</li>\n<li>\n<p>세그멘테이션</p>\n<ul>\n<li>method, function, object, variables 등 프로그램의 논리적 단위를 바탕으로 서로 다른 크기의 블록으로 나누는 방법</li>\n<li>세그먼트들의 크기가 서로 다르기 때문에 메모리를 페이징 기법처럼 미리 분할해 둘 수 없고, 메모리에 적재될 때 빈 공간을 찾아 할당하는 사용자 관점의 가상 메모리 관리 기법</li>\n<li>각 세그먼트 별로 길이 값을 가지고 있어 내부 단편화를 해결</li>\n</ul>\n</li>\n</ul>\n<h3>4) 프로세스와 스레드</h3>\n<hr>\n<h4>(1) 프로세스</h4>\n<ul>\n<li><em>실행 중인 프로그램</em></li>\n<li>운영체제로부터 자원을 할당. 한 프로세스 안에 여러개의 스레드가 생성될 수 있음</li>\n<li>운영체제로부터 프로세서, 주소 공간, 메모리과 같은 시스템 자원을 할당받는 작업의 단위로 실행된 프로그램</li>\n<li>프로세스는 실행될 때 운영 체제로부터 독립된 메모리 영역 (Code, Data, Heap, Stack)을 할당</li>\n<li>다른 프로세스의 자원에는 접근할 수 없음</li>\n</ul>\n<h4>(2) 프로세스 관련 용어</h4>\n<ul>\n<li>PCB : 프로세스 제어 블록, 프로세스에 대한 중요한 정보를 저장</li>\n<li>PC : 프로그램 카운터, 프로세스 실행을 위한 다음 명령의 주소를 표시</li>\n<li>캐시메모리 : 자주 사용되는 데이터가 저장되는 공간으로 CPU의 레지스터와 메모리 사이에서 병목 현상을 완화하는 장치</li>\n</ul>\n<h4>(3) 스레드</h4>\n<ul>\n<li><em>실행 부분만 분리한 것</em></li>\n<li>프로세스 내에서 동작되는 실행의 단위</li>\n<li>Stack 외에 프로세스가 할당받은 자원 (Code, Data, Heap)을 스레드끼리 공유하면서 실행</li>\n<li>컨텍스트 스위칭도 캐시 메모리를 비우지 않아도 되는 스레드쪽이 빠름</li>\n<li>자원 공유로 인해 문제가 발생할 수 있음</li>\n<li>하나의 프로세스가 실행되면 기본적으로 하나의 메인 스레드가 생성</li>\n</ul>\n<h4>(4) 멀티 프로세스</h4>\n<ul>\n<li>하나의 프로그램을 프로세스 여러 개로 구성하여 Context switching을 통해 실행하는 것</li>\n<li>하나의 프로세스에 문제가 생기더라도 다른 프로세스에 영향을 미치지 않음</li>\n</ul>\n<h4>(5) 멀티 스레드</h4>\n<ul>\n<li>하나의 프로그램을 한 프로세스 내에 여러 개의 스레드로 구성하여 실행하는 것</li>\n<li>하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것</li>\n<li>\n<p>장점</p>\n<ul>\n<li>멀티 프로세스에 비해 메모리 자원소모가 줄어듬</li>\n<li>힙 영역을 통해서 스레드간 통신이 가능해서 프로세스간 통신보다 간단</li>\n<li>스레드의 컨텍스트 스위칭은 프로세스의 컨텍스트 스위칭보다 빠름</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>힙 영역에 있는 자원을 사용할 때는 동기화를 해야 함</li>\n<li>동기화를 위해서 락을 과도하게 사용하면 성능이 저하</li>\n<li>하나의 스레드가 비정상적으로 동작하면 다른 스레드도 종료</li>\n</ul>\n</li>\n</ul>\n<h4>(6) Thread-safe</h4>\n<ul>\n<li>두 개 이상의 스레드가 race condition에 들어가거나 같은 객체에 동시에 접근해도 연산결과의 정합성이 보장될 수 있게끔 메모리 가시성이 확보된 상태를 의미</li>\n<li>java.util.concurrent 패키지 하위의 클래스를 사용</li>\n<li>인스턴스 변수를 두지 않음</li>\n<li>Singleton 패턴을 사용(이 때, 일반적으로 구현하는 Singleton Pattern은 Thread-safe 하지 않습니다.)</li>\n<li>동기화(syncronized) 블럭에서 연산을 수행</li>\n</ul>\n<h4>(7) ThreadLocal</h4>\n<ul>\n<li>스레드 내부에서 사용되는 지역변수</li>\n<li>각각의 thread scope 내에서 공유되어 사용될 수 있는 값으로 다른 스레드에서 공유 변수에 접근할 시 발생할 수 있는 동시성 문제의 예방을 위해 만들어짐</li>\n</ul>\n<h4>(8) 컨텍스트 스위칭</h4>\n<ul>\n<li><em>한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법</em></li>\n<li>프로세서가 멀티 프로세싱을 구성하여 어떤 하나의 프로세스를 실행하고 있는 상태에서 인터럽트 요청에 의해 다음 우선 순위의 프로세스가 실행되어야 할 때, 기존 프로세스의 상태 또는 레지스터 값 (context)을 저장하고 다음 프로세스를 수행하도록 새로운 프로세스의 상태 또는 레지스터 값을 교체하는 작업.</li>\n<li>인터럽트가 발생하면 현재 프로세스의 상태를 PCB에 저장하고 새로운 프로세스의 상태를 레지스터에 저장하는 방식으로 동작</li>\n<li>CPU는 아무런 일을 하지 않으므로 잦은 컨텍스트 스위칭은 성능저하 원인</li>\n<li>스레드는 캐시메모리나 PCB에 저장해야하는 내용이 적고 비워야 하는 내용도 적기때문에 상대적으로 더 빠른 컨텍스트 스위칭 가능</li>\n<li>멀티 프로세싱을 Computer multitasking을 통해 빠른 속도로 Task를 바꿔 가며 실행하여 실시간 처리에 근사하도록 하는 기술</li>\n</ul>\n<h4>(9) 프로세스 동기화</h4>\n<ul>\n<li>다중 프로세스 환경에서 자원등에 한 프로세스만이 접근가능하도록 하는 것</li>\n<li>프로세스 동기화를 하지 않으면 데이터의 일관성이 깨지기 때문에 연산결과가 잘못 반환될 가능성이 존재</li>\n<li>\n<p>경쟁 상태(Race Condition)</p>\n<ul>\n<li>여러 프로세스나 스레드가 동기화 메커니즘 없이 자원에 접근하려는 상황</li>\n<li>공유된 자원에 대한 접근 순서에 따라 실행 결과가 달라질 수 있는 상황</li>\n</ul>\n</li>\n<li>\n<p>임계 구역(Critical Section)</p>\n<ul>\n<li>여러 스레드가 동시에 접근해서는 안되는 공유자원에 접근하는 코드 블럭</li>\n<li>한 임계구역에 하나의 스레드 혹은 프로세스만 접근이 가능</li>\n<li>임계 구역에 접근하는 것을 제어하기 위해 세마포어, 뮤텍스와 같은 매커니즘을 사용</li>\n</ul>\n</li>\n<li>\n<p>임계 구역 문제를 해결하기 위한 조건</p>\n<ul>\n<li>상호 배제(Mutual Exclusion): 한 프로세스가 임계구역에서 동작중이면 다른 프로세스는 접근할 수 없다.</li>\n<li>진행(Progress): 임계구역에서 작업중인 프로세스가 없다면 입계구역으로 진입하려는 프로세스를 적절히 선택해서 진입할 수 있도록 합니다.</li>\n<li>유한 대기(Bounded Waiting): 한 프로세스가 임계영역으로 진입을 요청한 후 다른 프로세스는 진입이 유한한 횟수로 제한되어야 합니다. (기아상태 방지)</li>\n</ul>\n</li>\n</ul>\n<h3>5) 동기, 비동기 / 블로킹/논블로킹</h3>\n<hr>\n<h4>(1) 동기(Synchronous) 방식</h4>\n<ul>\n<li><em>요청과 결과가 동시에 일어남</em></li>\n<li>메서드 리턴과 결과를 전달받는 시간이 일치하는 명령 실행 방식</li>\n<li>동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같음</li>\n</ul>\n<h4>(2) 비동기(Asynchronous) 방식</h4>\n<ul>\n<li><em>요청한 그 자리에서 결과가 주어지지 않음</em></li>\n<li>여러 개의 처리가 함께 실행되는 방식</li>\n<li>동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있음</li>\n<li>CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있고 프로그램의 복잡도도 증가</li>\n</ul>\n<h4>(3) 블로킹 / 논블로킹 방식</h4>\n<ul>\n<li>블로킹 : 대상의 작업이 끝날 때 까지 제어권을 대상이 가지고 있음</li>\n<li>논블로킹 : 대상의 작업 완료여부와 상관없이 새로운 작업을 수행</li>\n</ul>\n<h4>(4) 동기 논블로킹</h4>\n<ul>\n<li>계속해서 polling을 수행하기 때문에 컨텍스트 스위칭이 지속적으로 발생해 지연이 발생</li>\n</ul>\n<h3>6) RISC와 CISC</h3>\n<hr>\n<h4>(1) RISC(Reduced Instruction Set Computer)</h4>\n<ul>\n<li>축소 명령어 세트 컴퓨터(명령어의 개수가 적은 것)</li>\n<li>핵심적인 명령어를 기반으로 최소한의 명령어 세트를 구성함으로써 파이프라이닝 이라는 획기적인 기술을 도입할 수 있어 빠른 동작 속도와 하드웨어의 단순화와 효율화를 시킬 수 있었고, 가격 경쟁력에서도 우위를 점함</li>\n<li>\n<p>특징</p>\n<ul>\n<li>적은 명령어 세트</li>\n<li>간단한 명령어로 빠른 실행속도</li>\n<li>고정적인 명령어 길이</li>\n<li>워드, 데이터 버스 크기가 동일하고 실행 사이클도 모두 동일</li>\n<li>회로 구성이 단순</li>\n<li>프로그램을 구성할 때 상대적으로 많은 명령어가 필요</li>\n<li>파이프 라이닝을 사용함</li>\n<li>명령어 개수가 적어서 컴파일러가 단순하게 구현</li>\n</ul>\n</li>\n</ul>\n<h4>(2) CISC(Complex Instruction Set Computer)</h4>\n<ul>\n<li>연산을 처리하는 복잡한 명령어(명령어가 할 수 있는 일의 양이 RISC 대비하여 많다는 것)들을 수백개 이상 탑재하고 있는 프로세서</li>\n<li>CISC는 명령어 개수 증가에 따라 프로세서 내부구조가 매우 복잡해지고, 고속으로 작동되는 프로세서를 만들기 힘들어짐</li>\n<li>명령어마다 길이가 다르고 실행에 필요한 사이클 수도 다르기 때문에 파이프 라이닝설계가 어려움</li>\n<li>\n<p>특징</p>\n<ul>\n<li>명령어의 개수가 많음</li>\n<li>명령어 길이가 다양하며, 실행 사이클도 명령어 마다 다름</li>\n<li>회로구성이 복잡함</li>\n<li>프로그램을 만들 때 적은 명령어로 구현 가능</li>\n<li>다양한 명령어를 사용하기 때문에 컴파일러가 복잡</li>\n</ul>\n</li>\n<li>\n<p>사용 이유</p>\n<ul>\n<li>아직 너무도 많은 프로세서가 CISC 모델로 구축되어 있고 이것을 전부 바꾸는 것은 비용이 큼</li>\n<li>CISC 성능의 취약점은 RISC와 같은 파이프라인을 일부 사용하고 집적도는 더 높임으로써 부분적으로 보완이 가능</li>\n<li>RISC에 비해 호환성이 좋음</li>\n</ul>\n</li>\n</ul>\n<h3>7) 교착상태(Deadlock)</h3>\n<hr>\n<ul>\n<li>서로 다른 프로세스가 서로의 자원을 요구하며 무한정 기다리는 현상</li>\n</ul>\n<h4>(1) 상호배제 (Mutual exclusion)</h4>\n<ul>\n<li>한번에 한 프로세스만이 자원을 점유할 수 있음</li>\n<li>하나의 프로세스가 자원을 사용할 경우 다른 프로세스는 그 자원을 사용할 수 없는 것</li>\n</ul>\n<h4>(2) 점유와 대기, 보유 및 대기(Hold and wait)</h4>\n<ul>\n<li>프로세스가 이미 자원을 점유하는 상태에서 다른 자원을 무한정 기다림</li>\n<li>프로세스가 자신이 가질 수 있는 자원은 가지고 있으면서 다른 자원이 오기를 기다리고 있는 것</li>\n</ul>\n<h4>(3) 비선점(No Preemption)</h4>\n<ul>\n<li>프로세스가 어떤 자원의 점유를 끝낼 때까지 그 자원을 뺏을 수 없음</li>\n<li>CPU 할당뿐만 아니라 모든 자원에 의해서 비선점이 된다는 것</li>\n<li>임의의 프로세스가 자원을 할당 받은 상태에서 다른 프로세스는 이 자원을 뺏어서 사용할 수 없는 형태</li>\n</ul>\n<h4>(4) 환형대기(Circular wait)</h4>\n<ul>\n<li>각 프로세스들이 원형으로 구성되어 순환적으로 자원을 요구</li>\n<li>선형이 아니고 원형을 이루게 되어 프로세스의 자원 할당에서 첫 번째 프로세스와 마지막 프로세스의 자원할당이 겹치게 되어 원형에 있는 모든 프로세스가 자원 할당을 받고자 기다리는 형태가 만들어지는 것</li>\n</ul>\n<h4>(2) 교착 상태 해결방법</h4>\n<ul>\n<li>예방 : 4가지 조건 중 하나라도 만족되지 않도록 함</li>\n<li>회피 : 알고리즘을 데드락이 발생하지 않도록 함</li>\n<li>회복 : 교착상태가 발생할 때 해결</li>\n<li>무시 : 회복과정의 성능저하가 심하다면 그냥 무시</li>\n</ul>\n<h4>(3) 기아상태(Starvation)</h4>\n<ul>\n<li>여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우</li>\n<li>우선순위를 수시로 변경하거나 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용</li>\n</ul>\n<h3>8) 세마포어와 뮤텍스</h3>\n<hr>\n<ul>\n<li>뮤텍스와 세마포어 : 다수의 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 제어하는 것</li>\n</ul>\n<h4>(1) 세마포어</h4>\n<ul>\n<li><em>여러개의 프로세스가 접근 가능한 공유자원을 관리하는 방식</em></li>\n<li>뮤텍스가 될 수 있음</li>\n<li>다른 프로세스가 세마포어를 해제할 수 있음</li>\n<li>현재 공유 자원에 접근할 수 있는 스레드, 프로세스의 수를 나타내는 값을 두는 상호 배제 기법.</li>\n<li>그 값만큼 동시에 스레드가 해당 공유 자원에 접근 가능</li>\n</ul>\n<h4>(2) 뮤텍스</h4>\n<ul>\n<li><em>한 번에 한 개의 프로세스만 접근 가능하도록 관리하는 방식</em></li>\n<li>뮤텍스는 세마포어가 될 수 없음</li>\n<li>락을 획득한 프로세스만 락을 반환할 수 있음</li>\n<li>한 스레드, 프로세스에 의해 소유될 수 있는 Key를 기반으로 한 상호배제 기법</li>\n<li>한 스레드가 임계 영역에 들어갈 때 lock을 걸어 다른 스레드가 접근하지 못하도록 하고 임계 영역에서 나올 때 unlock</li>\n</ul>\n<h3>(4) 가상 메모리</h3>\n<ul>\n<li>Swap 영역. 실제 메모리에서 공간이 부족한 경우 보조 기억 장치(auxiliary storage, secondary storage)에서 임시로 사용하는 영역</li>\n<li>OS 에서 관리하며 프로세스는 이것이 실제 메모리인지 Swap 영역인지 모름</li>\n<li>실제 메모리가 아니기 때문에 지연시간이 많이 발생하며 가급적이면 swap메모리를 사용하지 않도록 설계하는 것이 좋고 만약 계속해서 사용하는 양이 증가한다면 메모리 누수 의심</li>\n</ul>\n<h3>(5) 캐시의 지역성</h3>\n<ul>\n<li>시간 지역성 : 최근에 접근한 데이터에 다시 접근하는 경향</li>\n<li>공간 지역성 : 최근 접근한 데이터의 주변 공간에 다시 접근하는 경향</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C\">2. 운영체제</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%ED%84%B0\">1) 가비지 컬렉터</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%EA%B0%80%EB%B9%84%EC%A7%80%EC%99%80-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%ED%84%B0\">(1) 가비지와 가비지 컬렉터</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%EB%A9%94%EB%AA%A8%EB%A6%AC\">(2) 메모리</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%EC%B9%B4%EC%9A%B4%ED%8C%85reference-counting\">(3) 레퍼런스 카운팅(Reference Counting)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%EB%A7%88%ED%81%AC-%EC%95%A4-%EC%8A%A4%EC%9C%84%ED%94%84mark-and-sweep\">(4) 마크 앤 스위프(Mark and sweep)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-call-by-value-call-by-reference-call-by-assignment\">2) Call-by-value, Call-by-reference, Call-by-assignment</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-call-by-valuecbv\">(1) call-by-value(cbv):</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-call-by-referencecbr\">(2) call-by-reference(cbr)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-call-by-assignment-cbapython\">(3) call-by-assignment (cba)(python)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%99%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%8F%B4%ED%8A%B8\">3) 가상 메모리와 페이지 폴트</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC\">(1) 가상 메모리</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">(3) 페이지 교체 알고리즘</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%8B%A8%ED%8E%B8%ED%99%94-memory-fragmentation\">(4) 메모리 단편화 (Memory Fragmentation)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#5-%ED%8E%98%EC%9D%B4%EC%A7%95%EA%B3%BC-%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%85%8C%EC%9D%B4%EC%85%98\">(5) 페이징과 세그먼테이션</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C\">4) 프로세스와 스레드</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">(1) 프로세스</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B4%80%EB%A0%A8-%EC%9A%A9%EC%96%B4\">(2) 프로세스 관련 용어</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%EC%8A%A4%EB%A0%88%EB%93%9C\">(3) 스레드</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">(4) 멀티 프로세스</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#5-%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C\">(5) 멀티 스레드</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#6-thread-safe\">(6) Thread-safe</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#7-threadlocal\">(7) ThreadLocal</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#8-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD\">(8) 컨텍스트 스위칭</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94\">(9) 프로세스 동기화</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#5-%EB%8F%99%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0--%EB%B8%94%EB%A1%9C%ED%82%B9%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9\">5) 동기, 비동기 / 블로킹/논블로킹</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%EB%8F%99%EA%B8%B0synchronous-%EB%B0%A9%EC%8B%9D\">(1) 동기(Synchronous) 방식</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%EB%B9%84%EB%8F%99%EA%B8%B0asynchronous-%EB%B0%A9%EC%8B%9D\">(2) 비동기(Asynchronous) 방식</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%EB%B8%94%EB%A1%9C%ED%82%B9--%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9-%EB%B0%A9%EC%8B%9D\">(3) 블로킹 / 논블로킹 방식</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%EB%8F%99%EA%B8%B0-%EB%85%BC%EB%B8%94%EB%A1%9C%ED%82%B9\">(4) 동기 논블로킹</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#6-risc%EC%99%80-cisc\">6) RISC와 CISC</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-riscreduced-instruction-set-computer\">(1) RISC(Reduced Instruction Set Computer)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-cisccomplex-instruction-set-computer\">(2) CISC(Complex Instruction Set Computer)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#7-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9Cdeadlock\">7) 교착상태(Deadlock)</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%EC%83%81%ED%98%B8%EB%B0%B0%EC%A0%9C-mutual-exclusion\">(1) 상호배제 (Mutual exclusion)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%EC%A0%90%EC%9C%A0%EC%99%80-%EB%8C%80%EA%B8%B0-%EB%B3%B4%EC%9C%A0-%EB%B0%8F-%EB%8C%80%EA%B8%B0hold-and-wait\">(2) 점유와 대기, 보유 및 대기(Hold and wait)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%EB%B9%84%EC%84%A0%EC%A0%90no-preemption\">(3) 비선점(No Preemption)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%ED%99%98%ED%98%95%EB%8C%80%EA%B8%B0circular-wait\">(4) 환형대기(Circular wait)</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\">(2) 교착 상태 해결방법</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#3-%EA%B8%B0%EC%95%84%EC%83%81%ED%83%9Cstarvation\">(3) 기아상태(Starvation)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#8-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4%EC%99%80-%EB%AE%A4%ED%85%8D%EC%8A%A4\">8) 세마포어와 뮤텍스</a></p>\n<ul>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#1-%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\">(1) 세마포어</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#2-%EB%AE%A4%ED%85%8D%EC%8A%A4\">(2) 뮤텍스</a></li>\n</ul>\n</li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#4-%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC\">(4) 가상 메모리</a></li>\n<li><a href=\"/%EB%B2%A1%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8%20-%20%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/#5-%EC%BA%90%EC%8B%9C%EC%9D%98-%EC%A7%80%EC%97%AD%EC%84%B1\">(5) 캐시의 지역성</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"벡엔드 개발자 면접 질문 - 운영체제","path":"/벡엔드 개발자 면접 질문 - 운영체제/","images":["images/2.jpg"],"category":"기술 면접","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-11-22T02:00:00.000Z","components":null,"tweets":null,"summary":"벡엔드 개발자 면접 질문 - 운영체제"}},"posts":{"edges":[{"node":{"frontmatter":{"type":"portfolio","title":"MOIJA","images":["moija/images/moija.png","moija/images/moija1.png","moija/images/moija2.png","moija/images/moija3.png","moija/images/moija4.png","moija/images/moija5.png"],"path":"/portfolios/moija/","tags":null,"date":"2022-03-02T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"VUELOG","images":["vuelog/images/vuelog.png","vuelog/images/vuelog1.png","vuelog/images/vuelog2.png","vuelog/images/vuelog3.png","vuelog/images/vuelog4.png","vuelog/images/vuelog5.png","vuelog/images/vuelog6.png"],"path":"/portfolios/VUELOG/","tags":null,"date":"2022-03-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"DT CENTER","images":["dtcenter/images/dtcenter.png","dtcenter/images/dtcenter1.png","dtcenter/images/dtcenter2.png","dtcenter/images/dtcenter3.png"],"path":"/portfolios/DT CENTER/","tags":null,"date":"2022-02-21T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"COLORBERRY","images":["ColorBerry/images/colorberry.png","ColorBerry/images/colorberry2.png","ColorBerry/images/colorberry3.png","ColorBerry/images/colorberry4.png","ColorBerry/images/colorberry5.png","ColorBerry/images/colorberry6.png","ColorBerry/images/colorberry7.png","ColorBerry/images/colorberry8.png"],"path":"/portfolios/COLORBERRY/","tags":null,"date":"2022-02-20T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문 - cs","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문 - cs/","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-11-22T04:00:00.000Z","summary":"벡엔드 개발자 면접 질문 - cs"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문 - 네트워크","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문 - 네트워크/","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-11-22T03:00:00.000Z","summary":"벡엔드 개발자 면접 질문 - 네트워크"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문 - 운영체제","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문 - 운영체제/","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-11-22T02:00:00.000Z","summary":"벡엔드 개발자 면접 질문 - 운영체제"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문 - 데이터베이스","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문 - 데이터베이스/","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-11-228T03:00:00.000Z","summary":"벡엔드 개발자 면접 질문 - 데이터베이스"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 면접 질문 - React(2)","images":["images/2.jpg"],"path":"/프론트엔드 면접 질문 - React(2)/","tags":["프론트엔드","개발자","면접","기술면접","React"],"date":"2021-11-02T01:00:00.000Z","summary":"프론트엔드 면접 질문 - React(2)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 면접 질문 - React(1)","images":["images/2.jpg"],"path":"/프론트엔드 면접 질문 - React(1)/","tags":["프론트엔드","개발자","면접","기술면접","React"],"date":"2021-11-01T01:00:00.000Z","summary":"프론트엔드 면접 질문 - React(1)"}}},{"node":{"frontmatter":{"type":null,"title":"threejs - 시작하기","images":["images/threejs.png"],"path":"/threejs - 시작하기/","tags":["threejs"],"date":"2021-09-4T01:00:00.000Z","summary":"threejs - 시작하기"}}},{"node":{"frontmatter":{"type":null,"title":"우아한 테크 캠프 4기 - 4주차 회고","images":["images/woowa.jpg"],"path":"/우아한 테크 캠프 4기 - 4주차 회고/","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-08-02T19:21:00000Z","summary":"우아한 테크 캠프 4기 - 4주차 회고"}}},{"node":{"frontmatter":{"type":null,"title":"우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기","images":["images/woowa.jpg"],"path":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-07-11T19:21:00000Z","summary":"우아한 테크 캠프 4기 - 우아한 리액트 만들기 - useState, useEffect 만들기"}}},{"node":{"frontmatter":{"type":null,"title":"react - Jest 사용하기","images":["images/react.jpg"],"path":"/react - Jest 사용하기/","tags":["리액트","react"],"date":"2021-06-06T01:06:00.000Z","summary":"react - Jest 사용하기 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"redux-toolkit - 튜토리얼","images":["images/react.jpg"],"path":"/redux-toolkit - 튜토리얼/","tags":["리액트","react","redux","redux-toolkit"],"date":"2021-06-05T01:06:00.000Z","summary":"redux-toolkit - 튜토리얼 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"redux-toolkit - createSlice","images":["images/react.jpg"],"path":"/redux-toolkit - createSlice/","tags":["리액트","react","redux","redux-toolkit"],"date":"2021-06-05T01:06:00.000Z","summary":"redux-toolkit - createSlice 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - REST API","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - REST API/","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","summary":"자바스크립트 요점 정리 - REST API 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 타이머","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 타이머/","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 타이머 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 프로토타입","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 프로토타입/","tags":["자바스크립트"],"date":"2021-06-03T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 프로토타입 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바 요점 정리 - 객체지향 2","images":["images/java.jpg"],"path":"/자바 요점 정리 - 객체지향 2/","tags":["자바"],"date":"2021-05-25T01:00:00.000Z","summary":"자바 요점 정리 - 객체지향 2"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 실행 컨텍스트","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 실행 컨텍스트/","tags":["자바스크립트"],"date":"2021-05-25T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 실행 컨텍스트"}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-21T22:23:00.000Z","summary":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-20T20:21:00.000Z","summary":"2020 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 2-요구 사항 확인","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 2-요구 사항 확인/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-19T17:21:00.000Z","summary":"2021 정보 처리 기사 실기 요약 2-요구 사항 확인 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 3-데이터 입출력 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 3-데이터 입출력 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-18T17:22:00.000Z","summary":"2021 정보 처리 기사 데이터 입출력 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 4-통합 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 4-통합 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-17T05:31:00.000Z","summary":"2021 정보 처리 기사 통합 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 5-서버 프로그램 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 5-서버 프로그램 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-16T06:31:00.000Z","summary":"2021 정보 처리 기사 서버 프로그램 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 6-화면 설계","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 6-화면 설계/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-15T17:00:00.000Z","summary":"2021 정보 처리 기사 화면 설계 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-14T17:00:00.000Z","summary":"2021 정보 처리 기사 애플리케이션 테스트 관리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 8-SQL 응용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 8-SQL 응용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-12T12:45:00.000Z","summary":"2021 정보 처리 기사 SQL 응용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-11T19:00:00.000Z","summary":"2021 정보 처리 기사 소프트웨어 보안 구축 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-네트워크","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-네트워크/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-10T21:03:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-네트워크 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-05-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-05-06T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-03T21:01:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-02T21:01:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-01T23:03:00.000Z","summary":"2021 정보 처리 기사 제품 소프트웨어 패키징 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node/","tags":["벡엔드","개발자","면접","기술면접","node"],"date":"2021-04-20T01:00:00.000Z","summary":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt/","tags":["프론트엔드","개발자","면접","기술면접","Nuxt"],"date":"2021-04-15T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-04-15T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS/","tags":["프론트엔드","개발자","면접","기술면접","CSS"],"date":"2021-04-14T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택/","tags":["벡엔드","개발자","면접","기술면접","기술스택"],"date":"2021-04-09T01:00:00.000Z","summary":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - this","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - this/","tags":["자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"자바스크립트 요점 정리 - this 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2) 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1) 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 프론트엔드","images":["images/2.jpg"],"path":"/프론트엔드 면접 질문 - 브라우저/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 프론트엔드 파트 - 브라우저"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 면접 질문 - graphql","images":["images/2.jpg"],"path":"/프론트엔드 면접 질문 - graphql/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 프론트엔드 파트 - graphql"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - history api 정리","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - history api/","tags":["자바스크립트"],"date":"2021-03-03T12:23:00.000Z","summary":"자바스크립트 요점 정리 - history api 정리"}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 상태관리","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 상태관리/","tags":["프로그래머스 데브매칭","상태관리"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 상태관리입니다."}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 고양이 정리","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 고양이 정리/","tags":["프로그래머스 데브매칭","고양이 사진첩"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 고양이 정리입니다."}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 라우팅","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 라우팅/","tags":["프로그래머스","데브매칭","소프트웨어"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 라우팅입니다."}}},{"node":{"frontmatter":{"type":"portfolio","title":"MBTI WORLD","images":["mbtiworld/images/mbtiworld.png","mbtiworld/images/mbtiworld2.png","mbtiworld/images/mbtiworld3.png","mbtiworld/images/mbtiworld4.png","mbtiworld/images/mbtiworld5.png","mbtiworld/images/mbtiworld6.png","mbtiworld/images/mbtiworld7.png","mbtiworld/images/mbtiworld8.png","mbtiworld/images/mbtiworld9.png","mbtiworld/images/mbtiworld10.png"],"path":"/portfolios/MBTI WORLD/","tags":null,"date":"2021-02-19T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 3-단답형 문제(3)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 3-단답형 문제(3)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-25T09:22:00000Z","summary":"2020 정보 처리 기사 실기 3-단답형 문제(3)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 4-단답형 문제(4)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 4-단답형 문제(4)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-15T09:24:00000Z","summary":"2020 정보 처리 기사 실기 4-단답형 문제(4)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 2-단답형 문제(2)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 2-단답형 문제(2)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-15T09:21:00000Z","summary":"2020 정보 처리 기사 실기 2-단답형 문제(2)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 1-단답형 문제(1)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 1-단답형 문제(1)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-14T16:21:00000Z","summary":"2020 정보 처리 기사 실기 1-단답형 문제(1)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 5-정보 관련 용어 정리","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 5-정보 관련 용어 정리/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-14T02:21:00.000Z","summary":"2020 정보 처리 기사 실기 5-정보 용어 정리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-03T01:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-02T01:00:00.000Z","summary":"응용 SW 기초 기술 활용"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-01T01:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-03T03:05:00.000Z","summary":"정보시스템 구축 관리"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-02T03:05:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-01T03:05:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-03T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-02T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-01T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-03T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-02T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-01T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-01-03T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-01-02T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)/","tags":["정보처리기사 필기","정보처리기사","필기","데이터베이스 구축"],"date":"2020-01-01T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)"}}},{"node":{"frontmatter":{"type":"portfolio","title":"CAPTURE BLOG","images":["CaptureBlog/images/capture1.png","CaptureBlog/images/capture2.png","CaptureBlog/images/capture3.png","CaptureBlog/images/capture4.png","CaptureBlog/images/capture5.png","CaptureBlog/images/capture6.png"],"path":"/portfolios/CAPTURE BLOG/","tags":null,"date":"2020-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"LANGUAGE TOGETHER","images":["languageTogether/images/languagetogether.png","languageTogether/images/languagetogether2.png","languageTogether/images/languagetogether3.png","languageTogether/images/languagetogether4.png","languageTogether/images/languagetogether5.png","languageTogether/images/languagetogether6.png","languageTogether/images/languagetogether7.png","languageTogether/images/languagetogether8.png","languageTogether/images/languagetogether9.png"],"path":"/portfolios/LANGUAGE TOGETHER/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"MOVIE STAR","images":["moviestar/images/moviestar.png","moviestar/images/moviestar2.png","moviestar/images/moviestar3.png","moviestar/images/moviestar4.png"],"path":"/portfolios/MOVIE STAR/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"resume","title":"Resume","images":null,"path":"/resume/","tags":null,"date":"2000-01-01T00:00:00.000Z","summary":null}}}]}},"pageContext":{}}}