{"componentChunkName":"component---src-templates-markdown-tsx","path":"/markdown/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"d8f984c9-3351-539d-9834-56db17fe3d17","html":"<blockquote>\n<p>정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요</p>\n</blockquote>\n<blockquote>\n<p>2021 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.</p>\n</blockquote>\n<h1>1. 데이터 타입(Data Type)</h1>\n<hr>\n<ul>\n<li><em>변수(Variable)에 저장될 데이터의 형식을 나타내는 것으로, 변수에 값을 저장하기 전에 문자형, 정수형, 실수형 등 어 떤 형식의 값을 저장할지 데이터 타입을 지정하여 변수를 선언해야 함</em></li>\n<li><em>데이터 타입의 유형</em></li>\n<li><code>불린 타입 (Boolean Type)</code>: 조건의 참(True), 거짓(False) 여부를 판단. 기본값은 거짓(False) (true, false)</li>\n<li><code>문자 타입 (Character Type)</code> : 한 문자를 저장할 때, 작은따옴표(' ') 안에 표시 ('A', 'a', '1', '*')</li>\n<li><code>문자열 타입(Character String Type)</code> : 문자열을 저장할 때, 큰따옴표(\" \") 안에 표시 (\"Hello!\", \"1+2=3\")</li>\n<li><code>정수 타입 (Integer Type)</code> : 정수, 즉 소수점이 없는 숫자를 저장 (1, -1, 10, -100)</li>\n<li><code>부동 소수점 타입 (Floating Point Type)</code> : 소수점 이하가 있는 실수를 저장할 때 (0.123×102, -1.6×23)</li>\n<li><code>배열 타입 (Array Type)</code> : 같은 타입의 데이터 집합을 만들어 저장 , 데이터는 중괄호({ }) 안에 콤마(,)로 구분하여 값들을 나열\n({1, 2, 3, 4, 5})</li>\n</ul>\n<h1>2. 변수와 기억 클래스</h1>\n<hr>\n<ul>\n<li>\n<p><code>변수(Variable)</code></p>\n<ul>\n<li>컴퓨터가 명령을 처리하는 도중 발생하는 값을 저장하기 위한 공간으로, 변할 수 있는 값을 의미</li>\n<li>변수는 저장하는 값에 따라 정수형, 실수형, 문자형, 포인터형 등으로 구분</li>\n</ul>\n</li>\n<li>\n<p><code>기억 클래스</code></p>\n<ul>\n<li>변수 선언 시 메모리 내에 변수의 값을 저장하기 위한 기억영역이 할당되는데, 할당되는 기억영역에 따라 사용 범위에 제한이 있음. 이러한 기억영역을 결정하는 작업</li>\n</ul>\n</li>\n<li>\n<p>C언어에서 제공하는 기억 클래스의 종류</p>\n<ul>\n<li><em>자동 변수(Automatic Variable)</em> : 함수나 코드의 범위를 한정하는 블록 내에서 선언되는 변수</li>\n<li><em>외부 변수(External Variable)</em> : 현재 파일이나 다른 파일에서 선언된 변수나 함수를 참조(reference)하기 위한 변수</li>\n<li><em>정적 변수(Static Variable)</em> : 함수나 블록 내에서 선언하는 내부 정적 변수와 함수 외부에서 선언하는 외부 정적 변수</li>\n<li><em>레지스터 변수(Register Variable)</em> : 메모리가 아닌 CPU 내부의 레지스터에 기억영역을 할당받는 변수</li>\n</ul>\n</li>\n</ul>\n<h1>3. scanf 함수 / printf 함수</h1>\n<hr>\n<ul>\n<li><code>scanf 함수</code> : C언어의 표준 입력 함수로, 키보드로 입력받아 변수에 저장하는 함수</li>\n</ul>\n<pre><code class=\"language-c\">scanf(\"%3d\", &#x26;a);\n// % : 서식 문자 / 3 : 입력 자릿수 3자리 / d : 10진수로 입력 / &#x26;a : 입력받은 데이터를 변수 a의 주소에 저장\n</code></pre>\n<ul>\n<li>서식 문자열 : printf함수로 출력할 때도 동일하게 적용</li>\n<li>%d : 정수형 10진수</li>\n<li>%u : 부호없는 정수형 10진수</li>\n<li>%o : 정수형 8진수</li>\n<li>%x : 정수형 16진수</li>\n<li>%c : 문자를 입·출력</li>\n<li>%s : 문자열을 입·출력</li>\n<li>%f : 소수점을 포함하는 실수를 입·출력</li>\n<li>%e : 지수형 실수를 입·출력</li>\n<li>%ld : long형 10진수를 입·출력</li>\n<li>%lo : long형 8진수를 입·출력</li>\n<li>%lx : long형 16진수를 입·출력</li>\n<li>%p : 주소를 16진수로 입·출력</li>\n<li><code>printf 함수</code> : C언어의 표준 출력 함수로, 인수로 주어진 값을 화면에 출력하는 함수</li>\n</ul>\n<pre><code class=\"language-c\">printf(\" %-5.2f \", 200.2);\n// % : 서식 문자 / 8 : 출력 자릿수 5자리 / f : 실수로 출력 / 2 : 소수점 이하를 2자리로 지정 /- : 왼쪽부터 출력\n</code></pre>\n<ul>\n<li>\\n : 커서를 다음 줄 앞으로 이동</li>\n<li>' : 작은따옴표를 출력</li>\n<li>\\b : 커서를 왼쪽으로 한 칸 이동</li>\n<li>\" : 큰따옴표를 출력</li>\n<li>\\t : 커서를 일정 간격 띄움</li>\n<li>\\a : 스피커로 벨 소리를 출력</li>\n<li>\\r : 커서를 현재 줄의 처음으로 이동</li>\n<li>\\ : 역 슬래시를 출력</li>\n<li>\\0 : 널 문자를 출력</li>\n<li>\\f : 한 페이지를 넘김</li>\n</ul>\n<h1>4. Java에서의 표준 입·출력</h1>\n<hr>\n<ul>\n<li>Java에서의 표준 입력 : Java에서 키보드로 입력받은 값을 변수에 저장하려면 먼저 Scanner 클래스를 이용해 키보드로부터 값을 입력받는 객체 변수를 생성한 후 사용</li>\n<li>\n<p><code>객체 변수 생성</code></p>\n<ul>\n<li>Scanner : 입력에 사용할 객체 변수를 생성할 때 사용하는 클래스 이름</li>\n<li>sc : 객체 변수명</li>\n<li>new : 객체 생성 예약어</li>\n<li>Scanner( ) : 클래스의 이름</li>\n<li>System.in : 표준 입력장치(키보드)를 의미</li>\n</ul>\n</li>\n<li>\n<p><code>객체 변수 활용</code></p>\n<ul>\n<li>scin.nextInt( )</li>\n<li>scin : 입력에 사용할 객체 변수 이름이다. 객체 변수 생성 시 사용한 객체 변수 이름과 동일해야 함</li>\n<li>nextInt( ) : 입력받은 값을 정수형으로 반환</li>\n</ul>\n</li>\n<li>\n<p><code>Java에서의 표준 출력</code></p>\n<ul>\n<li>Java에서 값을 화면에 출력할 때 : printf( ) 메소드를 이용</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n\n        if (a>b) System.out.println(\">\");\n        else if(b>a) System.out.println(\"&#x3C;\");\n        else System.out.println(\"==\");\n    }\n}\n</code></pre>\n<h1>5. 연산자</h1>\n<hr>\n<ul>\n<li>산술 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>덧셈</td>\n</tr>\n<tr>\n<td>-</td>\n<td>뺄셈</td>\n</tr>\n<tr>\n<td>*</td>\n<td>곱셈</td>\n</tr>\n<tr>\n<td>/</td>\n<td>나눗셈</td>\n</tr>\n<tr>\n<td>%</td>\n<td>나머지</td>\n</tr>\n<tr>\n<td>++</td>\n<td>증가 연산자</td>\n</tr>\n<tr>\n<td>- -</td>\n<td>감소 연산자</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>관계 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>같다</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>같지 않다</td>\n</tr>\n<tr>\n<td>></td>\n<td>크다</td>\n</tr>\n<tr>\n<td>>=</td>\n<td>크거나 같다</td>\n</tr>\n<tr>\n<td>&#x3C;</td>\n<td>작다</td>\n</tr>\n<tr>\n<td>&#x3C;=</td>\n<td>작거나 같다</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>논리 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>의미</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>!</td>\n<td>not</td>\n<td>부정</td>\n</tr>\n<tr>\n<td>&#x26;&#x26;</td>\n<td>and</td>\n<td>모두 참이면 참</td>\n</tr>\n<tr>\n<td>||</td>\n<td>or</td>\n<td>하나라도 참이면 참</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>비트 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>의미</th>\n<th>비고</th>\n<th>연산자</th>\n<th>의미</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#x26;</td>\n<td>and</td>\n<td>모든 비트가 1일 때만 1</td>\n<td>~</td>\n<td>not</td>\n<td>각 비트의 부정, 0이면 1, 1이면 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>xor</td>\n<td>모든 비트가 같으면 0, 하나라도 다르면 1</td>\n<td>&#x3C;&#x3C;</td>\n<td>왼쪽 시프트</td>\n<td>비트를 왼쪽으로 이동</td>\n</tr>\n<tr>\n<td>|</td>\n<td>or</td>\n<td>모든 비트 중 한 비트라도 1이면 1</td>\n<td>>></td>\n<td>오른쪽 시프트</td>\n<td>비트를 오른쪽으로 이동</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>대입 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>예</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+=</td>\n<td>a += 1</td>\n<td>a = a + 1</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>a -= 1</td>\n<td>a = a - 1</td>\n</tr>\n<tr>\n<td>* =</td>\n<td>a * = 1</td>\n<td>a = a * 1</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>a /= 1</td>\n<td>a = a / 1</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>a %= 1</td>\n<td>a = a % 1</td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;=</td>\n<td>a &#x3C;&#x3C;= 1</td>\n<td>a = a &#x3C;&#x3C; 1</td>\n</tr>\n<tr>\n<td>>>=</td>\n<td>a >>= 1</td>\n<td>a = a >> 1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>조건 연산자 형 : <code>조건 ? 1 : 2</code> : 참이면 1, 거짓이면 2 반환</li>\n<li>기타 연산자</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>연산자</th>\n<th>의미</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sizeof</td>\n<td>자료형의 크기를 표시한다.</td>\n</tr>\n<tr>\n<td>,(콤마)</td>\n<td>콤마로 구분하여 한 줄에 두 개 이상의 수식을 작성하거나 변수를 정의한다. 왼쪽에서 른쪽으로 순서대로 수행되며, 순서 연산자라 부르기도 한다.</td>\n</tr>\n<tr>\n<td>(자료형)</td>\n<td>사용자가 자료형을 다른 자료형으로 변환할 때 사용하는 것으로, cast(캐스트) 연산자라고 부른다. 변환할 자료형을 괄호 안에 넣어서 변환할 값이나 변수명 앞에 놓는다.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>증가/감소 연산자는 변수의 앞(전치) 또는 변수의 뒤(후치)에 붙여 사용한다.</li>\n<li>전치 : 변수 앞에 증감 연산자가 오는 형태로 먼저 변수의 값을 증감시킨 후 변수를 연산에 사용한다(++a, --a).</li>\n<li>후치 : 변수 뒤에 증감 연산자가 오는 형태로 먼저 변수를 연산에 사용한 후 변수의 값을 증감시킨다(a++, a--).</li>\n<li>연산자 우선순위 : 단항, 산술, 시프트, 관계, 비트, 논리, 조건, 대입, 순서</li>\n</ul>\n<h1>6. if문</h1>\n<hr>\n<ul>\n<li>조건에 따라서 실행할 문장을 달리하는 제어문. 조건이 참일 때만 실행할 문장을 지정할 수도 있고, 참과 거짓에 대해 각각 다른 실행문을 지정할 수도 있음</li>\n<li>\n<p><code>단순 if문</code> : 조건이 한 개 일 때 사용하는 제어문</p>\n<ul>\n<li>조건이 참일 때 실행할 문장이 하나인 경우</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nint main(){\n  int num1 = 10;\n  if (num1 == 10)\n    printf(\"10\\n\");\n  return 0;\n}\n</code></pre>\n<ul>\n<li>조건이 참일 때 실행할 문장이 두 문장 이상인 경우</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nint main(){\n  int num1 = 10;\n  if (num1 == 10){\n    printf(\"두 문장\\n\");\n    printf(\"10\\n\");\n  }\n  return 0;\n}\n</code></pre>\n<ul>\n<li>조건이 참일 때와 거짓일 때 실행할 문장/이 다를 때</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nint main(){\n  int num1 = 10;\n  if (num1 == 10){\n    printf(\"10\\n\");\n  }else{\n    printf(\"not 10\\n\");\n  }\n  return 0;\n}\n</code></pre>\n<ul>\n<li><code>다중 if문</code> : 조건이 여러 개 일 때 사용하는 제어문</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nint main(){\n  int num1 = 10;\n  if (num1 >= 10){\n    if (num1 >= 20){\n      printf(\"20 이상\\n\");\n    }\n  }\n  return 0;\n}\n</code></pre>\n<h1>7. switch문</h1>\n<hr>\n<ul>\n<li><em>조건에 따라 분기할 곳이 여러 곳인 경우 간단하게 처리할 수 있는 제어문</em></li>\n<li>case문의 레이블에는 한 개의 상수만 지정할 수 있으며, int, char, enum형의 상수만 가능</li>\n<li>case문의 레이블에는 변수 지정 불가</li>\n<li>break문은 생략이 가능하지만 break문이 생략되면 수식과 레이블이 일치할 때 실행할 문장부터 break문 또는 switch 문이 종료될 때까지 모든 문장이 실행</li>\n</ul>\n<pre><code class=\"language-c\">#define _CRT_SECURE_NO_WARNINGS\n// scanf 보안 경고로 인한 컴파일 에러 방지\n#include &#x3C;stdio.h>\n\nint main(){\n  int num1;\n  scanf(\"%d\", &#x26;num1);\n\n  switch (num1){\n    case 1:\n      printf(\"1 \\n\");\n      break\n    case 2:\n      printf(\"2 \\n\");\n      break\n    default:\n      printf(\"default\\n\");\n  }\n  return 0;\n}\n// 1(입력)\n// 1\n// 2\n// default\n</code></pre>\n<h1>8. for문</h1>\n<hr>\n<ul>\n<li>초기값, 최종값, 증가값을 지정하는 수식을 이용해 정해진 횟수를 반복하는 제어문</li>\n<li>초기값을 정한 다음 최종값에 대한 조건이 참이면 실행할 문장을 실행한 후 초기값을 증가값 만큼 증가시키면서 최종값 에 대한 조건이 참인 동안 실행할 문장을 반복 수행</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\nint main() {\n    int i, j;\n    for (i = 2; i &#x3C;= 4; i++) {\n        for (j = 5; j &#x3C;= 7; j++) {\n        }\n    }\n    printf(\"%d × %d = %d\", j, i, i * j);\n    return 0;\n}\n\n// 8 x 5 = 40\n</code></pre>\n<h1>9. while문</h1>\n<hr>\n<ul>\n<li>\n<p><code>while</code> : 조건이 참인 동안 실행할 문장을 반복 수행하는 제어문</p>\n<ul>\n<li>while 문은 조건이 참인동안 실행할 문장을 반복 수행하다가 조건이 거짓이면 while문을 끝낸 후 다음 코드를 실행</li>\n<li>while 문은 조건이 처음부터 거짓이면 한 번도 수행하지 않음</li>\n</ul>\n</li>\n<li>\n<p><code>do / while</code> : 실행할 문장을 무조건 한 번 실행한 다음 조건을 판단하여 탈출 여부를 결정</p>\n<ul>\n<li>do/while 문은 실행할 문장을 우선 실행한 후 조건을 판별하여 조건이 참이면 실행할 문장을 계속 반복 수행, 거짓이면 do/while 문을 끝낸 후 다음 코드를 실행</li>\n</ul>\n</li>\n<li>\n<p><code>break / continue</code></p>\n<ul>\n<li>switch문이나 반복문의 실행을 제어하기 위해 사용되는 예약어</li>\n<li><em>break</em> : switch문이나 반복문 안에서 break가 나오면 블록을 벗어남</li>\n<li><em>continue</em> : continue 이후의 문장을 실행하지 않고 제어를 반복문의 처음으로 옮김</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nint main() {\n    int x = 100, y = 10;\n    do {\n        x -= y;\n        printf(\"%d, %d\\n\", x, y++);\n    }\n    while (x > 30);\n    return 0;\n}\n// 25, 15\n</code></pre>\n<h1>10. 배열과 문자열</h1>\n<hr>\n<ul>\n<li>\n<p><code>배열</code> : 동일한 데이터 유형을 여러 개 사용해야 할 경우 이를 손쉽게 처리하기 위해 여러 개의 변수들을 조합해서 하나의 이름으로 정의해 사용하는 것</p>\n<ul>\n<li>배열은 변수명 뒤에 대괄호 [ ]를 붙이고 그 안에 사용할 개수를 지정</li>\n<li>C언어에서 배열의 위치는 0부터 시작</li>\n<li>C언어에서 배열 위치를 나타내는 첨자 없이 배열 이름을 사용하면 배열의 첫 번째 요소의 주소를 지정하는 것과 같음</li>\n</ul>\n</li>\n<li>1차원 배열 : 변수들을 일직선상의 개념으로 조합한 배열(<code>int a[5]</code>)</li>\n<li>2차원 배열 : 변수들을 평면, 즉 행과 열로 조합한 배열(<code>int b[3][3]</code>)</li>\n<li>\n<p>배열 형태의 문자열 변수</p>\n<ul>\n<li>C언어에서는 큰따옴표(\" \")로 묶인 글자는 글자 수에 관계없이 문자열로 처리</li>\n<li>C언어에는 문자열을 저장하는 자료형이 없기 때문에 배열 또는 포인터를 이용하여 처리</li>\n<li>char a[5] = \"hello\"</li>\n<li>배열에 문자열을 저장할 때는 배열 선언 시 초기값으로 지정해야 하며, 이미 선언된 배열에는 문자열을 저장할 수 없음</li>\n<li>문자열 끝에 자동으로 널 문자(\"\\0\")가 삽입되므로, 널 문자까지 고려하여 배열 크기를 지정해야 함</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\nint main() {\n    int exint[] = { 4,9,3,7,6,4,24,4,8,4,10 };\n    int len = sizeof(exint) / sizeof(int);\n    int value = 0;\n    for (int i = 0; i &#x3C; len; i++) {\n        if (exint[i] == 4) {\n            value++;\n        }\n    }\n    printf(\"%d\", value);\n    return 0;\n}\n\n// 4\n</code></pre>\n<h1>11. Java에서의 배열과 문자열</h1>\n<hr>\n<ul>\n<li>Java에서는 향상된 for문을 사용할 수 있는데, 향상된 for문은 객체를 대상으로만 가능</li>\n</ul>\n<pre><code class=\"language-java\">public class Example {\n    public static void main(String[ ] args) {\n        int[ ] a = {90,100,80,70,60,50,30};\n        int hap = 0;\n        float avg;\n        for (int i : a){\n            hap = hap + i;\n        }\n        avg = (float)hap / a.length;\n        System.out.printf(\"%d, %.2f\", hap, avg);\n    }\n}\n\n// 480, 68.57\n</code></pre>\n<pre><code class=\"language-java\">public class Example {\n    public static void main(String[ ] args){\n        String str = \"Information!\";\n        int n = str.length( );\n        char[ ] st = new char [n];\n        n--;\n        for (int k = n; k >= 0; k--) {\n            st[n-k] = str.charAt(k);\n        }\n        for (char k : st) {\n            System.out.printf(\"%c\", k);\n        }\n    }\n}\n\n// !noitamrofiI\n</code></pre>\n<ul>\n<li>1회 기사 실기</li>\n</ul>\n<pre><code class=\"language-java\">public class Test {\n    static int[] arr() {\n        int a[] = new int[4];\n        int b = a.length;\n        for(int i = 0; i &#x3C; b; i++){\n            a[i] = i;            \n        }\n        return a;\n    }\n\n    public static void main(String[ ] args) {\n        int a[] = arr();\n        for(int i = 0; i &#x3C; a.length; i++)\n            System.out.print(a[i] + \" \");\n        }\n    }\n}\n// 0 1 2 3\n</code></pre>\n<h1>12. 포인터</h1>\n<hr>\n<ul>\n<li>\n<p>포인터와 포인터 변수</p>\n<ul>\n<li>포인터는 변수의 주소를 말하며, C언어에서는 주소를 제어할 수 있는 기능을 제공</li>\n<li>포인터 변수 : C언어에서 변수의 주소를 저장할 때 사용하는 변수</li>\n<li>포인터 변수를 선언할 때는 자료의 형을 먼저 쓰고 변수명 앞에 간접 연산자 *를 붙임(int *a;).</li>\n<li>연산자 &#x26; : 포인터 변수에 주소를 저장하기 위해 변수의 주소를 알아낼 때(a = &#x26;b;)</li>\n<li>연산자 * : 해당 포인터 변수가 가리키는 곳의 값(c = *a;)</li>\n</ul>\n</li>\n<li>\n<p>포인터와 배열</p>\n<ul>\n<li>배열을 포인터 변수에 저장한 후 포인터를 이용해 배열의 요소에 접근할 수 있음</li>\n<li>배열 위치를 나타내는 첨자를 생략하고 배열의 대표명만 지정하면 배열의 첫 번째 요소의 주소를 지정하는 것과 같음</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-c\">int a[5], *b;\n\n// b = a → 배열의 대표명을 적었으므로 a 배열의 시작 주소인 a[0]의 주소를 b에 저장\n// b = &#x26;a[0] → a 배열의 첫 번째 요소인 a[0]의 주소(&#x26;)를 b에 저장\n</code></pre>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nint main( )\n{\n    int a = 50;\n    int *b;\n    b = &#x26;a;\n    *b = *b+20;\n    printf(\"%d, %d\", a, *b);\n}\n// 70, 70\n</code></pre>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\nmain() {\n    int a[5], b = 1, sum = 0;\n    for (int i = 4; i > -1; i--) {\n        a[i] = b;\n        b *= 3;\n    }\n    // int a[5] = {81,27,9,3,1}\n    for (int i = 4; i > -1; i -= 2){\n        sum += *(a + i);\n    }\n    printf(\"%d\", sum);\n}\n// 91\n</code></pre>\n<h1>13. 사용자 정의 함수</h1>\n<hr>\n<ul>\n<li><em>사용자가 필요한 기능을 취향대로 만들어 사용할 수 있는 함수</em></li>\n<li><em>실기 기출</em></li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nvoid align(int a[]) {\n    int temp;\n    for (int i = 0; i &#x3C; 4; i++)\n        for (int j = 0; j &#x3C; 4 - i; j++){\n            if (a[j] > a[j+1]) {\n                temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int a[] = { 85, 75, 50, 100, 95 };\n    align(a);\n    for (int i = 0; i &#x3C; 5; i++){\n        printf(\"%d \", a[i]);\n    }\n    return 0;\n}\n// 50 75 85 95 100\n</code></pre>\n<h1>14. 재귀 함수</h1>\n<hr>\n<ul>\n<li><em>자기가 자기를 호출하는 순환 프로그램</em></li>\n<li><em>팩토리얼(Factorial)</em></li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\n\nfactorial(int n) {\n    if ( n &#x3C;= 1 )\n          return 1;\n    else\n          return n * factorial(n-1);\n}\n\nint main( )\n{\n    printf(\"%d\", factorial(5));\n    return 0;\n}\n// 120\n</code></pre>\n<ul>\n<li><em>기능사 기출</em></li>\n</ul>\n<pre><code class=\"language-c\">#include &#x3C;stdio.h>\nhrd(num) {\n    if (num &#x3C;= 0)\n        return;\n  printf(“%d ”, num);\n  hrd(num-1);\n}\nint main( ) {\n    hrd(5);\n    return 0;\n}\n// 5 4 3 2 1\n</code></pre>\n<h1>15. Java의 클래스와 메소드</h1>\n<hr>\n<ul>\n<li><em>클래스는 객체 생성을 위한 필드(속성)와 메소드(함수)를 정의하는 설계도로, Java는 아무리 작은 프로그램이라도 클래스를 만들어서 사용해야 함</em></li>\n<li>두 수 교환</li>\n</ul>\n<pre><code class=\"language-java\">public class Example {\n    static class AAclass {\n        int i;\n        int j;\n    }\n    public static void main(String[ ] args) {\n        AAclass myVal = new AAclass( );\n        myVal.i = 10;\n        myVal.j = 20;\n        myVal = change(myVal);\n        System.out.printf(\"i=%d, j=%d\\n\", myVal.i, myVal.j);\n    }\n    static AAclass change(AAclass myVal) {\n        int temp;\n        temp = myVal.i;\n        myVal.i = myVal.j;\n        myVal.j = temp;\n        return myVal;\n    }\n}\n</code></pre>\n<ul>\n<li>예제 1</li>\n</ul>\n<pre><code class=\"language-java\">public class Test {\n    static int power(int data, int exp) {\n        int i, result = 1;\n        for(i = 0; i &#x3C; exp; i++){\n            result = result * data;\n        }\n        return result;\n    }\n    public static void main(String args[]) {\n        System.out.print(power(2, 10));\n    }\n}\n// 1024(2의 10승)\n</code></pre>\n<h1>16. Python의 기초</h1>\n<hr>\n<ul>\n<li><code>input</code> : <em>Python의 표준 입력 함수로, 키보드로 입력받아 변수에 저장하는 함수</em>. 입력되는 값은 문자열로 취급되어 저장</li>\n<li><code>print</code> : Python의 표준 출력 함수로, 값을 화면에 출력하는 함수</li>\n<li><code>리스트(List)</code> : Python에서는 배열 대신 리스트를 사용</li>\n<li><code>range</code> : 연속된 숫자를 생성하는 것으로, 리스트, 반복문 등에서 많이 사용</li>\n<li><code>슬라이스(Slice)</code> : 문자열이나 리스트와 같은 순차형 객체에서 일부를 잘라(slicing) 반환하는 기능</li>\n</ul>\n<pre><code class=\"language-python\"># 입력\n# abcde // fghij\n# 13\n\nx = input().split('//')\ny = int(input())\nval = list(range(0, y, 3))\n# [0, 3, 6, 9, 12 ]\nval.remove(6)\nprint(x[1].find('i') + val[2])\n\n# 12\n</code></pre>\n<h1>17. 라이브러리</h1>\n<hr>\n<ul>\n<li><em>라이브러리</em> : 프로그램을 효율적으로 개발할 수 있도록 자주 사용하는 함수나 데이터들을 미리 만들어 모아 놓은 집합체</li>\n<li><em>표준 라이브러리</em> : 프로그래밍 언어에 기본적으로 포함되어 있는 라이브러리로, 여러 종류의 모듈이나 패키지 형태</li>\n<li><em>외부 라이브러리</em> : 개발자들이 필요한 기능들을 만들어 인터넷 등에 공유해 놓은 것으로, 외부 라이브러리를 다운받아 설치한 후 사용</li>\n<li>c의 라이브러리</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>헤더 파일</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stdio.h</td>\n<td>데이터의 입·출력에 사용되는 기능들을 제공(printf, scanf, fprintf, fscanf, fclose, fopen)등</td>\n</tr>\n<tr>\n<td>math.h</td>\n<td>수학 함수들을 제공(sqrt, pow, abs)등</td>\n</tr>\n<tr>\n<td>string.h</td>\n<td>문자열 처리에 사용되는 기능들을 제공(strlen, strcpy, strcmp)등</td>\n</tr>\n<tr>\n<td>stdlib.h</td>\n<td>자료형 변환, 난수 발생, 메모리 할당에 사용되는 기능들을 제공(atoi, atof, srand, rand, malloc, free)</td>\n</tr>\n<tr>\n<td>time.h</td>\n<td>시간 처리에 사용되는 기능들을 제공(time, clock)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>java 라이브러리</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>패키지</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java.lang</td>\n<td>Java에 기본적으로 필요한 인터페이스, 자료형, 예외 처리 등에 관련된 기능을 제공(import문x)(String, System, Process, Runtime, Math, Error)</td>\n</tr>\n<tr>\n<td>java.util</td>\n<td>날짜 처리, 난수 발생, 복잡한 문자열 처리 등에 관련된 기능을 제공 (Date, Calender, Random, StringTokenizer)</td>\n</tr>\n<tr>\n<td>java.io</td>\n<td>파일 입·출력과 관련된 기능 및 프로토콜을 제공 (InputStream, OutputStream, Reader, Writer)</td>\n</tr>\n<tr>\n<td>java.net</td>\n<td>네트워크와 관련된 기능을 제공(Socket, URL, InetAddress)</td>\n</tr>\n<tr>\n<td>java.awt</td>\n<td>사용자 인터페이스(UI)와 관련된 기능(rame, Panel, Dialog, Button, Checkbox)</td>\n</tr>\n</tbody>\n</table>\n<h1>18. 예외 처리</h1>\n<hr>\n<ul>\n<li><em>예외(Exception)</em> : 프로그램의 정상적인 실행을 방해하는 조건이나 상태</li>\n<li><em>예외 처리(Exception Handling)</em> : 예외가 발생했을 때 프로그래머가 해당 문제에 대비해 작성해 놓은 처리 루틴을 수행하도록 하는 것</li>\n<li>예외의 원인 : 하드웨어 문제, 운영체제의 설정 실수, 라이브러리 손상, 사용자의 입력 실수, 받아들일 수 없는 연산, 할당하지 못하는 기억장치 접근 등</li>\n<li>java의 예외 객체</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>예외 객체</th>\n<th>발생 원인</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ClassNotFoundException</td>\n<td>클래스를 찾지 못한 경우</td>\n</tr>\n<tr>\n<td>NoSuchMethodException</td>\n<td>메소드를 찾지 못한 경우</td>\n</tr>\n<tr>\n<td>FileNotFoundException</td>\n<td>파일을 찾지 못한 경우</td>\n</tr>\n<tr>\n<td>InterruptedIOException</td>\n<td>입·출력 처리가 중단된 경우</td>\n</tr>\n<tr>\n<td>ArithmeticException</td>\n<td>0으로 나누는 등의 산술 연산에 대한 예외가 발생한 경우</td>\n</tr>\n<tr>\n<td>IllegalArgumentException</td>\n<td>잘못된 인자를 전달한 경우</td>\n</tr>\n<tr>\n<td>NumberFormatException</td>\n<td>숫자 형식으로 변환할 수 없는 문자열을 숫자 형식으로 변환한 경우</td>\n</tr>\n<tr>\n<td>ArrayIndexOutOfBoundsException</td>\n<td>배열의 범위를 벗어난 접근을 시도한 경우</td>\n</tr>\n<tr>\n<td>NegativeArraySizeException</td>\n<td>0보다 작은 값으로 배열의 크기를 지정한 경우</td>\n</tr>\n<tr>\n<td>NullPointerException</td>\n<td>존재하지 않는 객체를 참조한 경우</td>\n</tr>\n</tbody>\n</table>","tableOfContents":"<ul>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85data-type\">1. 데이터 타입(Data Type)</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#2-%EB%B3%80%EC%88%98%EC%99%80-%EA%B8%B0%EC%96%B5-%ED%81%B4%EB%9E%98%EC%8A%A4\">2. 변수와 기억 클래스</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#3-scanf-%ED%95%A8%EC%88%98--printf-%ED%95%A8%EC%88%98\">3. scanf 함수 / printf 함수</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#4-java%EC%97%90%EC%84%9C%EC%9D%98-%ED%91%9C%EC%A4%80-%EC%9E%85%C2%B7%EC%B6%9C%EB%A0%A5\">4. Java에서의 표준 입·출력</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#5-%EC%97%B0%EC%82%B0%EC%9E%90\">5. 연산자</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#6-if%EB%AC%B8\">6. if문</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#7-switch%EB%AC%B8\">7. switch문</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#8-for%EB%AC%B8\">8. for문</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#9-while%EB%AC%B8\">9. while문</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#10-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%AC%B8%EC%9E%90%EC%97%B4\">10. 배열과 문자열</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#11-java%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%AC%B8%EC%9E%90%EC%97%B4\">11. Java에서의 배열과 문자열</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#12-%ED%8F%AC%EC%9D%B8%ED%84%B0\">12. 포인터</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#13-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98\">13. 사용자 정의 함수</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#14-%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98\">14. 재귀 함수</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#15-java%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EB%A9%94%EC%86%8C%EB%93%9C\">15. Java의 클래스와 메소드</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#16-python%EC%9D%98-%EA%B8%B0%EC%B4%88\">16. Python의 기초</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#17-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\">17. 라이브러리</a></li>\n<li><a href=\"/2021%20%EC%A0%95%EB%B3%B4%20%EC%B2%98%EB%A6%AC%20%EA%B8%B0%EC%82%AC%20%EC%8B%A4%EA%B8%B0%20%EC%9A%94%EC%95%BD%201-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%20%EC%96%B8%EC%96%B4-%EC%96%B8%EC%96%B4%20%ED%99%9C%EC%9A%A9/#18-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\">18. 예외 처리</a></li>\n</ul>","frontmatter":{"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용","path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용/","images":["images/1.jpg"],"category":"정보처리기사 실기 요약","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-20T20:21:00.000Z","components":null,"tweets":null,"summary":"2020 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},"pageContext":{"match":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용/"}}}