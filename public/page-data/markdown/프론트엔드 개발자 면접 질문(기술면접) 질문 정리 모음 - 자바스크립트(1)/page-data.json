{"componentChunkName":"component---src-templates-markdown-tsx","path":"/markdown/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"16877eed-49c4-58cf-8aa4-ca51e23ead00","html":"<blockquote>\n<p>프론트 엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요</p>\n</blockquote>\n<h1>1. 호이스팅(Hoisting)</h1>\n<hr>\n<h2>1) let, var, const</h2>\n<ul>\n<li>let, const 중복이나 호이스팅을 선언하지 않음</li>\n<li>블록 단위의 변수타입</li>\n<li>var 와 let, const의 차이점 (function scope와 block scope의 개념에서) : </li>\n<li>var은 함수 레벨 스코프 </li>\n<li>let , const는 블록 레벨 스코프를 지원</li>\n<li>다음과 같이 블록레벨에 foo를 456으로 재선언하는 경우 foo를 456으로 인식. 하지만 let이나 const는 블록 안에 있는것을 읽지 않고 전역 변수를 읽음</li>\n</ul>\n<pre><code class=\"language-javascript\">var foo = 123; // 전역 변수\nconsole.log(foo); // 123\n{\n  var foo = 456; // 전역 변수\n}\nconsole.log(foo); // 456\n</code></pre>\n<h2>2) 호이스팅</h2>\n<hr>\n<ul>\n<li>함수 내에서 아래쪽에 존재하는 내용 중 필요한 값들을 끌어올리는 것</li>\n<li>자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서 유효 범위의 최상단에 선언</li>\n<li>자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑음</li>\n<li>함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시</li>\n<li>실제로 코드가 끌어올려지는 건 아니며, 자바스크립트 Parser 내부적으로 끌어올려서 처리하는 것</li>\n<li>실제 메모리에서는 변화가 없음</li>\n</ul>\n<h4>(1) 호이스팅의 대상</h4>\n<ul>\n<li>var 변수 선언과 함수선언문에서만 호이스팅이 일어남</li>\n<li>var 변수/함수의 선언만 위로 끌어 올려지며, 할당은 끌어 올려지지 않음</li>\n<li>let/const 변수 선언과 함수표현식에서는 호이스팅이 발생하지 않음</li>\n</ul>\n<h4>(2) 변수 생성 과정</h4>\n<ul>\n<li>\n<ol>\n<li>변수 선언</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>변수 초기화</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>변수에 지정한 값 할당(변수에 사용자가 지정한 값으로 초기화)</li>\n</ol>\n</li>\n<li>여기서 변수에 지정한 값 할당은 해당 실행 컨텍스트의 변수 객체 생성이 완료된 뒤에 실행</li>\n<li>변수의 선언 + 초기화 와 사용자가 지정한 값 초기화가 발생되는 환경이 나뉘어 발생</li>\n</ul>\n<h4>(3) 함수의 호이스팅</h4>\n<h5>(1) 함수 선언문</h5>\n<ul>\n<li>변수 객체가 만들어지는 과정에서 함수 선언, 초기화, 사용자 지정 값으로 초기화 3단계가 모두 발생</li>\n<li>실행 단계에서 함수 선언문보다 함수 호출이 먼저 발생해도 에러가 나지 않고 정상적으로 실행</li>\n<li>함수 바디가 호이스트</li>\n</ul>\n<pre><code class=\"language-javascript\">foo() // 'FOOOOO'\nfunction foo() {\n  console.log('FOOOOO')\n}\n</code></pre>\n<h5>(2) 함수 표현식</h5>\n<ul>\n<li>익명함수를 생성하여 변수에 할당하는 방식(변수 호이스팅 적용)</li>\n<li>실행 단계에서 함수 표현식보다 함수 호출이 먼저 발생하게 된다면 TypeError 가 발생</li>\n<li>함수 바디는 호이스트되지 않음</li>\n</ul>\n<pre><code class=\"language-js\">foo() // Uncaught TypeError: foo는 함수가 아닙니다\nvar foo = function() {\n  console.log('FOOOOO')\n}\n</code></pre>\n<h2>3) typeof, instanceof</h2>\n<hr>\n<ul>\n<li>typeof 는 변수의 유형(type)을 반환</li>\n<li>instanceof 는 비교연산자로 prototype 객체를 비교</li>\n</ul>\n<pre><code class=\"language-javascript\">const str = 'zzz'; \nconsole.log(typeof 2); // 'number' \nconsole.log(typeof str); // 'string' \nconst obj = {}; \nconsole.log(obj instanceof Object); // true \nconsole.log(str instanceof String); // false str 는 원시타입 문자열이기 때문\n</code></pre>\n<h2>use strict</h2>\n<ul>\n<li>엄격 모드. 전체 스크립트 또는 부분 함수에 적용이 가능</li>\n<li>기존에 무시되던 에러들이 throw 되며 JS 엔진 최적화 작업을 어렵게 만드는 실수들을 바로 잡고ECMAScript의 차기 버전에서 정의될 문법들을 금지하는 특성을 가지고 있음</li>\n<li>전체 코드나 함수에 strict mode를 적용하기 위해 사용. strict 모드의 선언은 자바스크립트 변형의 제한에 동의한다는 것</li>\n<li>서로 다른 strict mode로 작성된 코드를 연결했을 때 오류가 발생할 수 있음</li>\n</ul>\n<h4>(1) 금지 사항</h4>\n<ul>\n<li>전역 변수 생성</li>\n<li>NaN에 할당하는 것</li>\n<li>삭제할 수 없는 프로퍼티를 삭제하려고 할 때</li>\n<li>함수의 파라미터 이름 중복</li>\n<li>this 는 전역 컨텍스트에서 undefined</li>\n<li>function.caller 그리고 function.arguments 에 접근할 수 없음</li>\n</ul>\n<h2>4) Call by value &#x26; call by ref</h2>\n<hr>\n<h4>1) call by value</h4>\n<ul>\n<li>인자로 값이 넘어올때 복사된 값이 넘어오기 떄문에 중간에 어떤 연산을 해도 변하지 않음</li>\n<li>자바스크립트는 기본적으로 원시값을 넘겨주면 call by value 로 작동</li>\n<li>\n<p>q함수 내에서 값을 변경하면 함수에 전달된 데이터만 변경될 뿐 함수 전달된 원본 복사본에는 아무런 영향을 미치지 않음</p>\n<pre><code class=\"language-javascript\">let a = 1;\nlet fun = funcion(b) {\n    b=b+1;\n}\nfun(a)\nconsole.log(a) // 1\n</code></pre>\n</li>\n</ul>\n<h4>2) call by reference</h4>\n<ul>\n<li>인자로 레퍼런스가 넘어올때 가리키는 값을 복사하는 것이 아니라 참조 값을 넘기는 것</li>\n<li>참조형 데이터는 그 값의 주소를 말 그대로 참조 할 값의 복사본이나 값 자체가 할당되지 않음</li>\n<li>참조에 의해 할당된 새 변수는 원본 변수가 가르키는 값과 동일한 값을 가리킴</li>\n<li>원본 변수와 할당된 변수는 모두 동등하며, 값을 조작하는데 사용될 수 있음. </li>\n<li>\n<p>그래서 할당된 변수(참조)가 변경되면 원본 변수에서도 동일하게 변경</p>\n<pre><code class=\"language-javascript\">let a = {};\nlet fun = funcion(b) {\n    b.a=1;\n}\nfun(a)\nconsole.log(a.a) // 1\n</code></pre>\n</li>\n</ul>\n<h2>반응형 프로그래밍</h2>\n<ul>\n<li>데이터 스트림이라는 하나의 일관된 형식으로 만들고, 이 데이터 스트림을 구독하여 데이터 스트림의 상태 변화에 반응하는 방식으로 동작하는 애플리케이션을 만드는 것</li>\n<li>Tv와 Tv방송국이 있다고 가정했을때, Tv방송국이 일정한 시간 단위로 영상에 대한 프레임을 계속해서 방출(emit)하고 TV는 방송국을 관찰하고 있다가 새로운 영상을 방출하면 이를 획득하는 방식</li>\n<li>여기서 방송국의 역할이 옵저버블, Tv가 옵저버, 영상프레임이 Notification</li>\n</ul>\n<h2>1) this</h2>\n<ul>\n<li>함수 내에서 함수 호출 컨텍스트(맥락)을 의미</li>\n<li>자바스크립트 런타임 시에 바인딩이 이루어지는 실행 컨텍스트 중 하나 </li>\n<li>해당 함수가 실행되는 동안에 사용할 수 있으며 함수 호출 부분에서 this가 가리키는 것이 무엇인지를 확인 가능</li>\n</ul>\n<h4>(1) 일반함수의 this와 화살표 함수의 this</h4>\n<ul>\n<li>내부함수는 일반 함수, 메소드, 콜백함수 어디에서 선언되었든지 this는 전역객체를 가르킴</li>\n<li>일반함수의 this는 window(전역) 을 가르키며,</li>\n<li>화살표 함수의 this는 언제나 상위스코프의 this를 가르킴</li>\n</ul>\n<h4>(2) Call, Apply, Bind</h4>\n<ul>\n<li>암시적 바인딩에 의해 혼란스러운 문제를 해결하기 위해서 call이나 apply 같은 내장 유틸리티를 사용하여 명시적으로 바인딩</li>\n<li>\n<p>this를 바인딩하기 위한 방법</p>\n<ul>\n<li>Call : this를 바인딩하면서 함수를 호출하는 것, 두번째 인자를 하나씩 넘기는 것</li>\n<li>Apply : this를 바인딩하면서 함수를 호출하는 것, 두번째 인자가 배열</li>\n<li>Bind : 함수를 호출하는 것이 아닌 this가 바인딩 된 새로운 함수를 리턴</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-javascript\">// call\nconst obj1 = { name: \"Call\" };\nconst say1 = function (city) {\n  console.log(Hello, my name is ${this.name}, I live in ${city});\n};\nsay1.call(obj1, \"callcity\");\n\n// apply\nconst obj2 = { name: \"Apply\" };\nconst say2 = function (city) {\n  console.log(Hello, my name is ${this.name}, I live in ${city});\n};\nsay2.apply(obj2, [\"applycity\"]);\n\n// bind\nconst obj3 = { name: \"Bind\" };\nconst say3 = function (city) {\n  console.log(Hello, my name is ${this.name}, I live in ${city});\n};\nconst boundSay = say3.bind(obj3);\nboundSay(\"bindcity\");\n</code></pre>\n<h4>(3) this의 상황별 용법</h4>\n<h5>(1) 단독으로 쓴 this</h5>\n<ul>\n<li>global object를 가리킴</li>\n<li>브라우저에서 호출하는 경우 [object Window]</li>\n<li>strict mode(엄격 모드)에서도 동일</li>\n</ul>\n<pre><code class=\"language-javascript\">'use strict';\nvar x = this;\nconsole.log(x); //Window\n</code></pre>\n<h5>(2) 함수 안에서 쓴 this</h5>\n<ul>\n<li>함수 안에서 this는 함수의 주인에게 바인딩 </li>\n</ul>\n<pre><code class=\"language-javascript\">function myFunction() {\n  return this;\n}\nconsole.log(myFunction()); //Window\nvar num = 0;\nfunction addNum() {\n  this.num = 100;\n  num++;\n  \n  console.log(num); // 101\n  console.log(window.num); // 101\n  console.log(num === window.num); // true\n}\n \naddNum();\n\n//위 코드에서 this.num의 this는 window 객체를 가리킵니다.\n//따라서 num은 전역 변수를 가리키게 됩니다.\n</code></pre>\n<ul>\n<li>strict mode(엄격 모드)에서는 함수 내의 this에 디폴트 바인딩이 없기 때문에 undefined</li>\n</ul>\n<pre><code class=\"language-javascript\">\"use strict\";\nfunction myFunction() {\n  return this;\n}\nconsole.log(myFunction()); //undefined\n\"use strict\";\nvar num = 0;\nfunction addNum() {\n  this.num = 100; //ERROR! Cannot set property 'num' of undefined\n  num++;\n}\n \naddNum();\n\n// 따라서 this.num을 호출하면 undefined.num을 호출하는 것과 마찬가지기 때문에 에러가 납니다.\n</code></pre>\n<h5>(3) 메서드 안에서 쓴 this</h5>\n<ul>\n<li>메서드 호출 시 메서드 내부 코드에서 사용된 this는 해당 메서드를 호출한 객체로 바인딩</li>\n</ul>\n<pre><code class=\"language-javascript\">var person = {\n  firstName: 'John',\n  lastName: 'Doe',\n  fullName: function () {\n    return this.firstName + ' ' + this.lastName;\n  },\n};\nperson.fullName(); //\"John Doe\"\n\nvar num = 0;\nfunction showNum() {\n  console.log(this.num);\n}\nshowNum(); //0\n \nvar obj = {\n  num: 200,\n  func: showNum,\n};\nobj.func(); //200\n</code></pre>\n<h5>(4) 이벤트 핸들러 안에서 쓴 this</h5>\n<ul>\n<li>이벤트를 받는 HTML 요소를 가리킴</li>\n</ul>\n<pre><code class=\"language-javascript\">var btn = document.querySelector('#btn')\nbtn.addEventListener('click', function () {\n  console.log(this); //#btn\n});\n</code></pre>\n<h5>(5) new 생성자 안에서 쓴 this</h5>\n<ul>\n<li>생성자 함수가 생성하는 객체로 this가 바인딩</li>\n</ul>\n<pre><code class=\"language-javascript\">function Person(name) {\n  this.name = name;\n}\nvar kim = new Person('kim');\nvar lee = new Person('lee');\nconsole.log(kim.name); //kim\nconsole.log(lee.name); //lee\n</code></pre>\n<ul>\n<li>new로 바인딩이 되지 않았을 때</li>\n</ul>\n<pre><code class=\"language-javascript\">var name = 'window';\nfunction Person(name) {\n  this.name = name;\n}\nvar kim = Person('kim');\nconsole.log(window.name); //kim\n</code></pre>\n<h5>(6) 명시적 바인딩을 한 this</h5>\n<ul>\n<li>apply() 와 call() 메서드는 Function Object에 기본적으로 정의된 메서드. 인자를 this로 만들어주는 기능</li>\n</ul>\n<pre><code class=\"language-javascript\">function whoisThis() {\n  console.log(this);\n}\nwhoisThis(); //window\nvar obj = {\n  x: 123,\n};\nwhoisThis.call(obj); //{x:123}\n</code></pre>\n<ul>\n<li>apply()에서 매개변수로 받은 첫 번째 값은 함수 내부에서 사용되는 this에 바인딩, 두 번째 값인 배열은 자신을 호출한 함수의 인자로 사용</li>\n</ul>\n<pre><code class=\"language-javascript\">function Character(name, level) {\n  this.name = name;\n  this.level = level;\n}\n \nfunction Player(name, level, job) {\n  this.name = name;\n  this.level = level;\n  this.job = job;\n}\n</code></pre>\n<pre><code class=\"language-javascript\">function Character(name, level) {\n  this.name = name;\n  this.level = level;\n}\n \nfunction Player(name, level, job) {\n  Character.apply(this, [name, level]);\n  this.job = job;\n}\n \nvar me = new Player('Nana', 10, 'Magician');\n</code></pre>\n<ul>\n<li>call() :  인수 목록을 받음</li>\n<li>apply() : 인수 배열을 받음</li>\n</ul>\n<pre><code class=\"language-javascript\">function Character(name, level) {\n  this.name = name;\n  this.level = level;\n}\n \nfunction Player(name, level, job) {\n  Character.call(this, name, level);\n  this.job = job;\n}\n \nvar me = {};\nPlayer.call(me, 'nana', 10, 'Magician');\n</code></pre>\n<ul>\n<li>apply()나 call()은 보통 유사배열 객체에게 배열 메서드를 쓰고자 할 때 사용</li>\n<li>ex) arguments 객체는 함수에 전달된 인수를 Array 형태로 보여주지만 배열 메서드를 쓸 수가 없어서 사용</li>\n</ul>\n<pre><code class=\"language-javascript\">function func(a, b, c) {\n  console.log(arguments);\n  arguments.push('hi!'); //ERROR! (arguments.push is not a function);\n}\n\nfunction func(a, b, c) {\n  var args = Array.prototype.slice.apply(arguments);\n  args.push('hi!');\n  console.dir(args);\n}\n \nfunc(1, 2, 3); // [ 1, 2, 3, 'hi!' ]\nvar list = {\n  0: 'Kim',\n  1: 'Lee',\n  2: 'Park',\n  length: 3,\n};\n \nArray.prototype.push.call(list, 'Choi');\nconsole.log(list);\n</code></pre>\n<ul>\n<li>Array.from : Array인자를 얕게 복사해 새로운 배열 생성</li>\n</ul>\n<pre><code class=\"language-javascript\">var children = document.body.children; // HTMLCollection\n \nchildren.forEach(function (el) {\n  el.classList.add('on'); //ERROR! (children.forEach is not a function)\n});\nvar children = document.body.children; // HTMLCollection\n \nArray.from(children).forEach(function (el) {\n  el.classList.add('on'); \n});\n</code></pre>\n<h5>(6) 화살표 함수로 쓴 this</h5>\n<ul>\n<li>화살표 함수는 전역 컨텍스트에서 실행되더라도 this를 새로 정의하지 않고 바로 바깥 함수나 클래스의 this를 사용</li>\n</ul>\n<pre><code class=\"language-javascript\">var Person = function (name, age) {\n  this.name = name;\n  this.age = age;\n  this.say = function () {\n    console.log(this); // Person {name: \"Nana\", age: 28}\n \n    setTimeout(function () {\n      console.log(this); // Window\n      console.log(this.name + ' is ' + this.age + ' years old');\n    }, 100);\n  };\n};\nvar me = new Person('Nana', 28);\nme.say(); //global is undefined years old\n\n// --------------------------------------------------------------------\n// --------------------------------------------------------------------\n\n\nvar Person = function (name, age) {\n  this.name = name;\n  this.age = age;\n  this.say = function () {\n    console.log(this); // Person {name: \"Nana\", age: 28}\n    setTimeout(() => {\n      console.log(this); // Person {name: \"Nana\", age: 28}\n      console.log(this.name + ' is ' + this.age + ' years old'); \n    }, 100);\n  };\n};\nvar me = new Person('Nana', 28); //Nana is 28 years old\n</code></pre>\n<h2>2) 스코프</h2>\n<ul>\n<li>정의 : <em>식별자가 유효한 범위</em></li>\n<li>모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위를 결정</li>\n</ul>\n<pre><code class=\"language-javascript\">var x = \"global\";\nfunction foo() {\n  var x = \"local\";\n  console.log(x);\n  // \"local\"\n}\nfoo();\nconsole.log(x);\n// \"global\"\n</code></pre>\n<h4>(1) 스코프의 종류</h4>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>설명</th>\n<th>스코프</th>\n<th>변수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>전역</td>\n<td>코드의 가장 바깥 영역</td>\n<td>전역 스코프</td>\n<td>전역 변수</td>\n</tr>\n<tr>\n<td>지역</td>\n<td>함수 몸체 내부</td>\n<td>지역 스코프</td>\n<td>지역 변수</td>\n</tr>\n</tbody>\n</table>\n<h4>(2) 스코프 체인</h4>\n<ul>\n<li>정의 : <em>스코프가 계층적으로 연결된 것</em></li>\n<li>스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프</li>\n<li>변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색</li>\n</ul>\n<h4>(3) 블록 / 함수 레벨 스코프</h4>\n<ul>\n<li>블록 레벨 스코프 : 함수 몸체 뿐만 아니라 모든 코드 블록(if, for, while 등) 이 지역 스코프를 만듦</li>\n<li>함수 레벨 스코프 : var로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체) 만을 지역 스코프로 인정</li>\n</ul>\n<h1>3. 실행 컨텍스트(Execution Context)</h1>\n<hr>\n<ul>\n<li>자바스크립트의 코드가 실행되기 위해 정보들을 담고 있는 곳(변수 객체, 스코프 체인, this 정보)</li>\n<li>자바스크립트의 코드들이 실행되기 위한 환경(전역 컨텍스트 ,함수 컨텍스트)  </li>\n<li>전역 컨텍스트 하나 생성 후에 함수 호출할 때마다 함수 컨텍스트가 생성. </li>\n<li>컨텍스트를 생성시에 변수객체, 스코프 체인, this가 생성. 컨텍스트 생성 후 함수가 실행되는데 사용되는 변수들은 변수 객체 안에서 값을 찾고 없다면 스코프 체인을 따라 올라가며 찾음</li>\n<li>함수 실행이 마무리되면 해당 컨텍스트는 사라짐</li>\n<li>페이지가 종료되면 전역 컨텍스트가 사라짐</li>\n</ul>\n<h4>1) 전역 scope를 사용했을 때 장단점</h4>\n<ul>\n<li>변수와 함수 이름의 충돌을 방지하기 위해</li>\n<li>모든 스크립트는 전역 스쿠프에 접근 가능</li>\n<li>만약 모든 사람이 변수 선언에 전역 네임스페이스를 사용한다면 충돌이 매우 많이 발생할 것</li>\n<li>모듈 패턴(IIFE 등)으로 직접 선언한 변수는 로컬 네임스페이스에 포함되도록 해야 함</li>\n</ul>\n<h2>프로퍼티</h2>\n<ul>\n<li>자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의</li>\n<li>프로퍼티의 값(value), 값의 갱신 여부(writeable), 열거 가능 여부(enumerable), 재정의 가능 여부(configurable)</li>\n</ul>\n<pre><code class=\"language-javascript\">const person = {\n  name: \"Lee\",\n};\nconsole.log(Object.getOwnPropertyDescriptor(person, \"name\"));\n// { value: 'Lee', writable: true, enumerable: true, configurable: true }\n</code></pre>\n<h4>(1) 프로퍼티</h4>\n<ul>\n<li>데이터 프로퍼티 : 키와 값으로 구성된 일반적인 프로퍼티</li>\n<li>접근자 프로퍼티 : 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티</li>\n</ul>\n<h1>4. prototype</h1>\n<hr>\n<ul>\n<li>자바스크립트 객체에는 Prototype이라는 내부 프로퍼티가 있고, 이는 다른 객체를 참조할 때 사용</li>\n<li>자바스크립트에서 상속을 진행할 때는 프로토타입끼리 연결을 하는데  부모 프로토타입을 create()나 setPropertyOf() 메서드를 사용하여 자식 프로토타입과 연결</li>\n</ul>\n<h4>1) 프로토타입</h4>\n<ul>\n<li>자바스크립트는 프로토타입을 기반으로 상속을 구현하여 불필요한 중복을 제거</li>\n<li>즉, 생성자 함수가 생성할 모든 인스턴스가 공통적으로 사용할 프로퍼티나 메소드를 프로토타입에 미리 구현해 놓음으로써 또 구현하는것이 아니라 상위(부모) 객체인 프로토타입의 자산을 공유하여 사용할 수 있음</li>\n<li>__proto__접근자 프로퍼티로 자신의 프로토타입, 즉 [[Prototype]] 내부슬롯에 접근 할 수 있음.</li>\n</ul>\n<h4>2) 프로토타입 체인</h4>\n<ul>\n<li>객체의 프로퍼티에 접근하려고 할때 객체에 접근하려는 프로퍼티가 없으면  __proto__접근자 프로퍼티가 가리키는 링크를 따라 자신의 부모역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색</li>\n<li>프로로타입 체인의 최상위 객체는 Object.prototype</li>\n<li>이 객체의 프로퍼티와 메소드는 모든 객체에게 상속</li>\n<li>prototype 프로퍼티 는 생성자함수가 생성할 인스턴스의 프로토타입을 가리킴</li>\n</ul>\n<h2>객체 순회</h2>\n<p>객체 안의 속성과 배열의 아이템을 순회할 때 사용하는 문법:</p>\n<ul>\n<li>Object: for in hasOwnProperty, Object.keys().forEach, for of</li>\n<li>Array: for, Array.forEach, for of</li>\n<li>\n<p>for-in 루프</p>\n<ul>\n<li>for (var property in obj) { console.log(property); }</li>\n<li>하지만 상속받은 속성도 포함한다. 그래서 obj.hasOwnproperty(property) 를 사용해서 검사해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>Object.keys(obj).forEach(property ⇒ { ... })</p>\n<ul>\n<li>Object.keys 는 static 메서드이며 객체가 가진 열거 가능한(enumerable) 모든 속성을 배열로 만들어서 리턴한다.</li>\n</ul>\n</li>\n<li>\n<p>Object.getOwnPropertyNames()</p>\n<ul>\n<li>Object.getOwnPropertyNames(obj).forEach(property => { ... })</li>\n<li>getOwnPropertyNames는 객체가 가진 모든 열거 가능한, 열거 불가능한(non-enumerable) 값을 배열에 담아 리턴한다.</li>\n</ul>\n</li>\n</ul>\n<h2>브라우저의 렌더링 과정</h2>\n<hr>\n<h4>1) 브라우저의 렌더링 과정</h4>\n<ul>\n<li>브라우저는 HTML, CSS, 자바스크립트, 이미지, 폰트 파일 등 렌더링에 필요한 리소스를 요청, 서버 응답</li>\n<li>브라우저의 렌더링 엔진은 서버로부터 응답된 HTML과 CSS를 파싱하여 DOM과 CSSOM을 생성하고 이를 결합하여 렌더 트리를 생성</li>\n<li>브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST를 생성하고 바이트코드를 변환하여 실행. 이때 자바스크립트는 DOM API를 통해 DOM이나 CSSOM을 변경할 수 있음. 변경된 DOM과 CSSOM은 렌더 트리로 결합</li>\n<li>렌더 트리를 기반으로 HTML 요소의 레이아웃(위치와 크기)를 계산하고 브라우저 화면에 HTML 요소를 페인팅</li>\n</ul>\n<h4>2) 요청과 응답</h4>\n<ul>\n<li>브라우저 주소창에 URL을 입력하면 호스트 이름이 DNS를 통해 IP로 변환되고 요청 전송</li>\n<li>HTTP : 웹에서 브라우저와 서버가 통신하기 위한 프로토콜</li>\n<li>HTTP/1.1 : 커넥션 당 하나의 요청과 응답</li>\n<li>HTTP/2 : 여러 리소스 동시에 전송 가능. 50% 정도 빠름</li>\n</ul>\n<h4>3) HTML 파싱과 DOM 생성</h4>\n<ul>\n<li>HTML 문서를 바이트 형태로 응답받음</li>\n<li>meta 태그의 charset 어트리뷰트에 의해 지정된 인코딩 방식을 기준으로 문자열 변환</li>\n<li>응답 헤더를 통해 응답</li>\n<li>문자열로 변환된 HTML 문서를 읽어 token들로 분해</li>\n<li>토큰을 객체로 변환하여 node 들을 생성</li>\n</ul>\n<h4>4) 웹 통신</h4>\n<h5>(1) 브라우저 주소창에 주소 검색 이후의 렌더링 과정</h5>\n<ul>\n<li>DNS 서버가 연결해줄 곳을 찾음   </li>\n<li>http / https 여부 판단</li>\n<li>index.html 클라이언트로 보내고 브라우저가 index.html 파싱</li>\n<li>\n<p>DOM트리를 읽음:</p>\n<ul>\n<li>css : link태그를 만나 css요청이 발생하면, 요청과 응답과정을 거치고 css를 파싱, 이후 중단된 html을 다시읽고 DOM트리를 완성</li>\n<li>js : HTML파서는 Script태그를 만나게 되면 javascript 코드를 실행하기 위해 파싱을 중단. 제어권한을 자바스크립트 엔진에게 넘기고, 자바스크립트 코드 또는 파일을 로드해서 파싱하고 실행</li>\n</ul>\n</li>\n<li>DOM트리 + CSSOM트리= Render Tree를 만들고 그림</li>\n</ul>\n<img src=\"https://t1.daumcdn.net/cfile/tistory/2210F643570307E233\" alt=\"img\" style=\"zoom:50%;\">\n<ul>\n<li>DOM tree : 태그라고 불리는 HTML 문서의 구성 요소와 각 구성 요소간의 관계를 트리 구조로 나타낸 자료구조</li>\n<li>Styles struct : 브라우저에 기본으로 설정된 스타일이나 스타일시트에 정의된 코드를 바탕으로 스타일 구조체를 형성한 것</li>\n<li>브라우저 엔진 : DOM tree와 styles struct를 결합하여 HTML 문서를 구성하는 요소간의 관계와 각각의 요소가 갖는 스타일에 대한 정보를 구성하고 이 정보에 동적으로 실행되는 script code를 결합하여 render tree 생성</li>\n<li>브라우저 엔진은 render tree가 생성되면 랜더링을 수행하여 브라우저에 HTML 문서를 출력</li>\n</ul>\n<h2>리페인트와 리플로우</h2>\n<hr>\n<ul>\n<li>수정된 렌더 트리를 리렌더링 하는 과정에서 발생</li>\n<li>웹 애플리케이션의 성능을 저하시키는 주된 원인</li>\n</ul>\n<h4>1) Reflow</h4>\n<ul>\n<li>리플로우(크기나 위치) : HTML 문서를 구성하는 요소의 크기나 위치가 변경되었을 때 각각의 요소를 재배치하는 작업</li>\n<li>모든 엘리먼트의 위치와 길이 등을 다시 계산하는 과정에서 발생</li>\n<li>dom 일부 혹은 전체 렌더링시에 발생</li>\n</ul>\n<h4>2) Repaint</h4>\n<ul>\n<li>리페인트(스타일) : HTML 문서의 전체 또는 일부 영역의 스타일이 변경되었을 때 브라우저가 변경된 스타일을 다시 적용하는 작업</li>\n<li>가시성에 영향을 주는 엘리먼트가 변경되면 발생 (background, display)</li>\n<li>무조건은 아니지만, Reflow가 발생하면 Repaint는 같이 발생</li>\n<li>브라우저가 DOM트리에 있는 다른 노드의 가시성을 모두 확인해야 하므로 리페인트는 비용이 비쌈</li>\n</ul>\n<h4>3) Reflow 가 발생 되는 경우</h4>\n<ul>\n<li>DOM el 추가, 제거 또는 변경</li>\n<li>\n<p>CSS 스타일 추가, 제거 또는 변경</p>\n<ul>\n<li>inline-style, class 변경이 일어남으로써 레이아웃이 변경 될 수 있음</li>\n<li>DOM el 길이를 변경하면 DOM트리에 있는 다른 노드에 영향을 줄 수 있음</li>\n</ul>\n</li>\n<li>CSS 애니메이션, 트렌지션 : 애니메이션의 모든 프레임에서 리플로우 발생</li>\n<li>\n<p>offsetWidth와 offsetHeight의 사용</p>\n<ul>\n<li>해당 속성을 사용하면, 초기 reflow가 트리거되어 수치가 계산</li>\n<li>offset, computed, bounding 같은 속성 및 메소드들은 이미 렌더링 된 DOM기준으로 CSS속성을 <code>계산만</code>해서 내려주기 때문에 reflow + repaint가 아닌 순수 reflow만 발생</li>\n</ul>\n</li>\n<li>hover, 텍스트 입력, 창 크기 조절, 글꼴 크기 변경 등등</li>\n<li>활성화 되면 리플로우를 트리거 할 수 있음</li>\n</ul>\n<h4>4) 성능 저하 최소화</h4>\n<h5>(1) 클래스 변경을 통해 스타일을 변경할 경우, 최대한 말단의 노드의 클래스를 변경</h5>\n<ul>\n<li>돔 구조에서 최 하단 노드의 클래스를 변경</li>\n<li>중간에 있는 class를 바꾸게 된다면) 위 아래 노드들에게 영향을 미치게 되고, 그 과정에서 리플로우 리페인트가 발생 할 수 있기 때문</li>\n</ul>\n<h5>(2) 인라인 스타일 자제</h5>\n<ul>\n<li>인라인 스타일을 사용하면 HTML이 다운로드 될 때, 레이아웃에 영향을 미치면서 추가 리플로우를 발생</li>\n</ul>\n<h5>(3) 애니메이션이 들어간 엘리먼트는 <code>position: fixed</code> 혹은 <code>position: absolute</code>로 지정</h5>\n<ul>\n<li><code>absolute</code> 또는 <code>fixed</code> 위치인 엘리먼트는 다른 엘리먼트 레이아웃에 영향을 미치지 않음</li>\n<li>리플로우가 아닌 리페인트 발생, 리페인트가 훨씬 적은 비용이 듦(리플로우 + 리페인트 &#x3C; 리페인트)</li>\n</ul>\n<h5>(4) 레이아웃을 위한 <code>&#x3C;table></code> 자제</h5>\n<ul>\n<li>점진적으로 렌더링이 되지 않고, 모두 불려지고 계산된 다음에서야 렌더링이 됨, 작은 변경만으로 테이블의 다른 모든 노드에 대한 <code>리플로우</code>가 발생</li>\n</ul>\n<h2>webpack과 Babel</h2>\n<h4>1) Webpack</h4>\n<ul>\n<li>의존 관계에 있는 자바스크립트, css, 이미지 등의 리소스를 하나의 파일로 번들링하는 모듈 번들러</li>\n<li>모듈 번들러 : 웹 애플리케이션을 구성하는 자원(HTML, CSS, Javscript, Images 등)을 모두 각각의 모듈로 보고 이를 조합해서 병합된 하나의 결과물을 만드는 도구</li>\n</ul>\n<h4>2) Webpack 기본 세팅</h4>\n<pre><code class=\"language-javascript\">const path = require('path);\n\nmodule.exports = {\n    // 모듈 네임\n    name: 'word-relay-setting',\n    // 웹팩 실행 모드: development, production, none\n    mode: 'development',\n    devtool: 'eval',\n    resolve: {\n        // webpack에서 모듈을 읽어올 때 파일 확장자 체크\n        extensions: ['.js', '.jsx']\n    }\n    // 입력\n    entry: {\n        app: ['./client', 'WordRelay'],\n    },\n    module: {\n        rules: [{\n            test:/\\.jsx?/, // 적용할 파일 체크\n            loader: 'babel-loader',\n            options: {\n                presets: [\n                    ['babel/preset-env',{\n                        targets: {\n                            browsers: ['last 2 chrome versions']\n                        }\n                    }\n                ], '@babel/preset-react'],\n                plugins: ['@babel/plugin-proposal-class-properties']\n                // class형 컴포넌트에서 state = {} 문법을 사용할 때 필요\n            }\n        }]\n    }, // 입력받은 모듈에 모듈을 적용\n    plugins: [],\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: 'app.js'\n    } // 출력\n}\n</code></pre>\n<h4>3) webpack기능</h4>\n<h5>(1) mode</h5>\n<ul>\n<li>mode의 설정값에 따라 웹팩이 다르게 실행</li>\n<li><code>none</code>: 모드 설정 없음</li>\n<li><code>development</code>: 개발에 좀 더 편하게 웹팩 로그나 결과물이 보임</li>\n<li><code>production</code>: 성능 최적화 작업(파일 압축, 빌드)</li>\n</ul>\n<h5>(2) entry</h5>\n<ul>\n<li>웹 애플리케이션이 실행될 수 있게 빌드를 하기 위해 모든 소스의 경로가 담겨져 있어야 할 영역</li>\n</ul>\n<h5>(3) output</h5>\n<ul>\n<li>웹팩이 entry 속성을 참고하여 빌드를 한 후 결과물이 저장되는 경로</li>\n<li>filename과 path 속성을 추가해주어야 함</li>\n</ul>\n<h5>(4) Loader</h5>\n<ul>\n<li>웹팩이 웹 애플리케이션을 해석할 때 자바스크립트가 아닌 소스(html, css, sass, images, babel 등)들을 변환할 수 있게 도와주는 속성</li>\n<li>webpack.config.js 내에선 <code>module</code> 속성으로 표현</li>\n</ul>\n<pre><code class=\"language-javascript\">module: {\n  rules: [\n    {\n      test: /\\.scss$/,\n      use: ['css-loader', 'sass-loader'],\n    },\n  ]\n}\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: [\n        { loader: 'style-loader' },\n        {\n          loader: 'css-loader',\n          options: { modules: true },\n        },\n        { loader: 'sass-loader' },\n      ],\n    },\n  ]\n}\n</code></pre>\n<h5>(5) Plugin</h5>\n<ul>\n<li>웹팩의 기본 기능에 추가적인 기능을 추가하는 속성</li>\n<li>\n<p>Plugin과 Loader의 차이점</p>\n<ul>\n<li>로더는 파일을 해석하고 변환하는 과정에 관여한다면 플러그인은 결과물의 형태를 바꿈</li>\n<li>플러그인 속성은 배열의 성격을 띄고 있고 그 안엔 생성자 함수로 생성된 객체 인스턴스만 추가할 수 있음</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-javascript\">var webpack = require('webpack')\nvar HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n  plugins: [new HtmlWebpackPlugin(), new webpack.ProgressPlugin()],\n}\n</code></pre>\n<h2>Babel</h2>\n<hr>\n<ul>\n<li>트랜스파일러</li>\n<li>ES6이상의 문법의 코드들을 브라우저가 이해할 수 있게끔 ES5이하의 문법으로 변환</li>\n</ul>\n<h4>1) 컴파일과 트랜스파일</h4>\n<h5>(1) 컴파일</h5>\n<ul>\n<li>한 언어로 작성된 소스 코드를 다른 언어로 바꾸는것 </li>\n<li>ex) C-> 어셈블리어</li>\n</ul>\n<h5>(2) 트랜스파일</h5>\n<ul>\n<li>한언어로 작성된 소스코드를 비슷한 수준의 추상화를 가진 다른 언어로 변환</li>\n<li>ex) ES6->ES5</li>\n</ul>\n<h4>3) babel 적용 방법</h4>\n<ul>\n<li>@babel/core: 바벨의 가장 핵심적인 내용이 담긴 모듈</li>\n<li>@babel/preset-env: 사용자의 브라우저에 맞게 최신 문법을 예전 문법으로 바꿔줌</li>\n<li>@babel/preset-react: 바벨을 리액트에서 사용할 수 있게해주는 모듈(jsx 지원)</li>\n<li>babel-loader: 바벨과 웹팩을 연결해줌</li>\n</ul>\n<h2>AMD와 CommonJS</h2>\n<ul>\n<li>모든 모듈의 로딩이 완료된 후에 실행/ 로딩 완료 이전에 실행(동기 vs 비동기)</li>\n</ul>\n<h4>1) Common.js</h4>\n<ul>\n<li>모든 모듈이 로컬에 다운로드가 된 이후에 실행하는 방식. </li>\n<li>node.js에서 사용하는 방식으로 server 환경에서 외부 모듈을 가져올 때 유리</li>\n</ul>\n<pre><code class=\"language-javascript\">var lib = require(\"package/lib\");\nfunction foo() {\n    lib.log(\"hello world!\");\n}\n\nexports.foobar = foo;\n</code></pre>\n<h4>2) AMD</h4>\n<ul>\n<li>비동기적으로 필요한 파일을 다운로드하는 방식</li>\n<li>client단(브라우저 환경)에서 외부 모듈을 가져올 때 유리한 방식 </li>\n</ul>\n<pre><code class=\"language-javascript\"> define([\"package/lib\"], function (lib) {\n     function foo() {\n        lib.log(\"hello world!\");\n     }\n     return {\n      foobar : foo\n     }\n}\n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85hoisting\">1. 호이스팅(Hoisting)</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-let-var-const\">1) let, var, const</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">2) 호이스팅</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%9D%98-%EB%8C%80%EC%83%81\">(1) 호이스팅의 대상</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%EB%B3%80%EC%88%98-%EC%83%9D%EC%84%B1-%EA%B3%BC%EC%A0%95\">(2) 변수 생성 과정</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">(3) 함수의 호이스팅</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8\">(1) 함수 선언문</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%ED%95%A8%EC%88%98-%ED%91%9C%ED%98%84%EC%8B%9D\">(2) 함수 표현식</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-typeof-instanceof\">3) typeof, instanceof</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#use-strict\">use strict</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EA%B8%88%EC%A7%80-%EC%82%AC%ED%95%AD\">(1) 금지 사항</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-call-by-value--call-by-ref\">4) Call by value &#x26; call by ref</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-call-by-value\">1) call by value</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-call-by-reference\">2) call by reference</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#%EB%B0%98%EC%9D%91%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">반응형 프로그래밍</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-this\">1) this</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EC%9D%BC%EB%B0%98%ED%95%A8%EC%88%98%EC%9D%98-this%EC%99%80-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%9D%98-this\">(1) 일반함수의 this와 화살표 함수의 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-call-apply-bind\">(2) Call, Apply, Bind</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-this%EC%9D%98-%EC%83%81%ED%99%A9%EB%B3%84-%EC%9A%A9%EB%B2%95\">(3) this의 상황별 용법</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EB%8B%A8%EB%8F%85%EC%9C%BC%EB%A1%9C-%EC%93%B4-this\">(1) 단독으로 쓴 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%ED%95%A8%EC%88%98-%EC%95%88%EC%97%90%EC%84%9C-%EC%93%B4-this\">(2) 함수 안에서 쓴 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%95%88%EC%97%90%EC%84%9C-%EC%93%B4-this\">(3) 메서드 안에서 쓴 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC-%EC%95%88%EC%97%90%EC%84%9C-%EC%93%B4-this\">(4) 이벤트 핸들러 안에서 쓴 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#5-new-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%95%88%EC%97%90%EC%84%9C-%EC%93%B4-this\">(5) new 생성자 안에서 쓴 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#6-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9%EC%9D%84-%ED%95%9C-this\">(6) 명시적 바인딩을 한 this</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#6-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A1%9C-%EC%93%B4-this\">(6) 화살표 함수로 쓴 this</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%EC%8A%A4%EC%BD%94%ED%94%84\">2) 스코프</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EC%8A%A4%EC%BD%94%ED%94%84%EC%9D%98-%EC%A2%85%EB%A5%98\">(1) 스코프의 종류</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\">(2) 스코프 체인</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-%EB%B8%94%EB%A1%9D--%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\">(3) 블록 / 함수 레벨 스코프</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8execution-context\">3. 실행 컨텍스트(Execution Context)</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EC%A0%84%EC%97%AD-scope%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%96%88%EC%9D%84-%EB%95%8C-%EC%9E%A5%EB%8B%A8%EC%A0%90\">1) 전역 scope를 사용했을 때 장단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">프로퍼티</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">(1) 프로퍼티</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-prototype\">4. prototype</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\">1) 프로토타입</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8\">2) 프로토타입 체인</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#%EA%B0%9D%EC%B2%B4-%EC%88%9C%ED%9A%8C\">객체 순회</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\">브라우저의 렌더링 과정</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\">1) 브라우저의 렌더링 과정</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5\">2) 요청과 응답</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-html-%ED%8C%8C%EC%8B%B1%EA%B3%BC-dom-%EC%83%9D%EC%84%B1\">3) HTML 파싱과 DOM 생성</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-%EC%9B%B9-%ED%86%B5%EC%8B%A0\">4) 웹 통신</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A3%BC%EC%86%8C%EC%B0%BD%EC%97%90-%EC%A3%BC%EC%86%8C-%EA%B2%80%EC%83%89-%EC%9D%B4%ED%9B%84%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\">(1) 브라우저 주소창에 주소 검색 이후의 렌더링 과정</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#%EB%A6%AC%ED%8E%98%EC%9D%B8%ED%8A%B8%EC%99%80-%EB%A6%AC%ED%94%8C%EB%A1%9C%EC%9A%B0\">리페인트와 리플로우</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-reflow\">1) Reflow</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-repaint\">2) Repaint</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-reflow-%EA%B0%80-%EB%B0%9C%EC%83%9D-%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">3) Reflow 가 발생 되는 경우</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-%EC%84%B1%EB%8A%A5-%EC%A0%80%ED%95%98-%EC%B5%9C%EC%86%8C%ED%99%94\">4) 성능 저하 최소화</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EA%B2%BD%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%8A%A4%ED%83%80%EC%9D%BC%EC%9D%84-%EB%B3%80%EA%B2%BD%ED%95%A0-%EA%B2%BD%EC%9A%B0-%EC%B5%9C%EB%8C%80%ED%95%9C-%EB%A7%90%EB%8B%A8%EC%9D%98-%EB%85%B8%EB%93%9C%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%B3%80%EA%B2%BD\">(1) 클래스 변경을 통해 스타일을 변경할 경우, 최대한 말단의 노드의 클래스를 변경</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%9E%90%EC%A0%9C\">(2) 인라인 스타일 자제</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%B4-%EB%93%A4%EC%96%B4%EA%B0%84-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EB%8A%94-position-fixed-%ED%98%B9%EC%9D%80-position-absolute%EB%A1%9C-%EC%A7%80%EC%A0%95\">(3) 애니메이션이 들어간 엘리먼트는 <code>position: fixed</code> 혹은 <code>position: absolute</code>로 지정</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83%EC%9D%84-%EC%9C%84%ED%95%9C-table-%EC%9E%90%EC%A0%9C\">(4) 레이아웃을 위한 <code>&#x3C;table></code> 자제</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#webpack%EA%B3%BC-babel\">webpack과 Babel</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-webpack\">1) Webpack</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-webpack-%EA%B8%B0%EB%B3%B8-%EC%84%B8%ED%8C%85\">2) Webpack 기본 세팅</a></li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-webpack%EA%B8%B0%EB%8A%A5\">3) webpack기능</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-mode\">(1) mode</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-entry\">(2) entry</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-output\">(3) output</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#4-loader\">(4) Loader</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#5-plugin\">(5) Plugin</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#babel\">Babel</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EA%B3%BC-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC\">1) 컴파일과 트랜스파일</a></p>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-%EC%BB%B4%ED%8C%8C%EC%9D%BC\">(1) 컴파일</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-%ED%8A%B8%EB%9E%9C%EC%8A%A4%ED%8C%8C%EC%9D%BC\">(2) 트랜스파일</a></li>\n</ul>\n</li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#3-babel-%EC%A0%81%EC%9A%A9-%EB%B0%A9%EB%B2%95\">3) babel 적용 방법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#amd%EC%99%80-commonjs\">AMD와 CommonJS</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#1-commonjs\">1) Common.js</a></li>\n<li><a href=\"/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%20%EA%B0%9C%EB%B0%9C%EC%9E%90%20%EB%A9%B4%EC%A0%91%20%EC%A7%88%EB%AC%B8(%EA%B8%B0%EC%88%A0%EB%A9%B4%EC%A0%91)%20%EC%A7%88%EB%AC%B8%20%EC%A0%95%EB%A6%AC%20%EB%AA%A8%EC%9D%8C%20-%20%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8(2)/#2-amd\">2) AMD</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)","path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/","images":["images/2.jpg"],"category":"기술 면접","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","components":null,"tweets":null,"summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1) 파트"}}},"pageContext":{"match":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/"}}}