{"componentChunkName":"component---src-templates-markdown-tsx","path":"/markdown/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"ea10ae50-2e21-5b63-a541-8c55cd1fdaf4","html":"<blockquote>\n<p>정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요</p>\n</blockquote>\n<h1></h1>\n<h1>1. 데이터 입출력 구현</h1>\n<h3>자료구조</h3>\n<p>프로그램에서 사용하기 위한 자료를 기억장치의 공간 내에 저장하는 방법과 자료 간의 관계, 처리 방법 등을 저장공간의 효율성 및 실행 간의 신속성을 높이기 위한 연구 분석하는 것</p>\n<h5>자료 구조의 분류</h5>\n<ul>\n<li>\n<p>배열</p>\n<ul>\n<li>동일한 자료형의 데이터들이 같은 크기로 나열되어 순서를 갖고 있는 집합</li>\n<li>첨자를 이용하여 데이터에 접근</li>\n<li>첨자의 개수에 따라 n차원 배열이라 부름</li>\n</ul>\n</li>\n<li>\n<p>선형 리스트</p>\n<ul>\n<li>일정한 순서에 의해 나열된 자료 구조</li>\n</ul>\n</li>\n<li>\n<p>연속 리스트</p>\n<ul>\n<li>배열을 이용한 선형 리스트</li>\n<li>중간에 데이터를 삽입하기 위해 연속된 빈 공간이 있어야 하며 삽입, 삭제 시 자료의 이동 필요</li>\n</ul>\n</li>\n<li>\n<p>연결 리스트</p>\n<ul>\n<li>자료 항목의 순서에 따라 노드의 포인터 부분을 이용하여 서로 연결시킨 자료 구조</li>\n<li>연결을 위한 포인터를 찾는 시간이 필요해 접근 속도가 느림</li>\n<li>노드의 삽입 삭제 작업이 용이</li>\n<li>노드 부분 때문에 연속 리스트에 비해 기억 공간의 효율이 좋지 않음</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://k.kakaocdn.net/dn/bJe01h/btqDof0wQtR/JIiMXyTZaPqHiFlWg6WIX1/img.png\" alt=\"img\">*</p>\n<ul>\n<li>\n<p>스택</p>\n<ul>\n<li>리스트의 한쪽으로 자료의 삽입, 삭제가 이루어짐</li>\n<li>LIFO(Last In First Out)의 구조를 가지고 있음</li>\n<li>오버플로우(overflow) : 기억 공간이 모두 차있는 상태에서 데이터를 삽입하면 일어나는 현상</li>\n<li>언더플로우(underflow) : 기억 공간이 비어있는 상태에서 데이터를 삭제하면 일어나는 현상</li>\n<li>Top : 스택에 가장 마지막으로 삽입된 자료의 위치</li>\n<li>Bottom : 스택의 가장 바닥</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://k.kakaocdn.net/dn/dkXkWm/btqDnxUYnEx/nkXn1U4BiyEZh2zTxGX0ok/img.png\" alt=\"img\">*</p>\n<ul>\n<li>\n<p>큐</p>\n<ul>\n<li>리스트의 한쪽에서는 삽입 다른 한쪽에서는 삭제가 이루어짐</li>\n<li>FIFO(First In First Out)의 구조를 가지고 있음</li>\n<li>F(Front) : 먼저 삽입된 자료의 기억 공간을 가르키는 포인터</li>\n<li>R(Rear) : 마지막에 삽입된 자료의 기억 공간을 가르키는 포인터</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://k.kakaocdn.net/dn/4VVz3/btqDohRDIg5/8UBtRrUDmGOyakrIZqcoz1/img.png\" alt=\"img\">*</p>\n<ul>\n<li>\n<p>트리</p>\n<ul>\n<li>노드와 가지를 이용하여 사이클이 없이 구성한 그래프의 특수 형태</li>\n<li>디그리 : 노드에서 뻗어나온 가지의 개수</li>\n<li>단말노드 / 잎 노드 : 자식이 없는 노드</li>\n<li>트리의 디그리 : 노드들의 디그리 중 가장 많은 수</li>\n</ul>\n</li>\n</ul>\n<h3>데이터저장소 / 데이터베이스 / DBMS</h3>\n<hr>\n<h5>데이터저장소의 개요</h5>\n<ul>\n<li>소프트웨어 개발 과정에서 다루어야 할 데이터들을 논리적인 구조로 조직화하거나 물리적인 공간에 구현한 것</li>\n<li>논리 데이터저장소는 데이터 및 데이터 간의 연간성, 제약 조건을 식별하여 논리적인 구조로 조직화한 것</li>\n<li>물리 데이터저장소는 논리 데이터저장소에 저장된 데이터와 구조들을 하드웨어적인 저장장치에 저장한 것</li>\n</ul>\n<h5>데이터베이스의 정의 (통합, 저장, 운영, 공용)</h5>\n<p>특정 조직의 업무를 수행하는데 필요한 데이터들의 모임</p>\n<p><code class=\"language-text\">통합된 데이터</code> : 자료의 중복을 최소화</p>\n<p><code class=\"language-text\">저장된 데이터</code>: 컴퓨터가 접근할 수 있는 저장 매체에 저장</p>\n<ul>\n<li>운영 데이터 : 조직의 고유한 업무를 수행하는데 필요</li>\n<li>공용 데이터 : 여러 시스템이 공동으로 소유하고 유지함</li>\n</ul>\n<h5>DBMS(DataBase Management System)</h5>\n<ul>\n<li>사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고 데이터베이스를 관리하는 소프트웨어</li>\n<li>기존의 파일 시스템이 가지는 데이터의 종속성과 종복성 문제를 해결하기 위해 제안된 시스템</li>\n<li>\n<p>DBMS의 기능</p>\n<ul>\n<li><code class=\"language-text\">정의 기능</code> : 데이터베이스에 저장될 데이터의 타입과 구조에 대해 명시하는 기능</li>\n<li><code class=\"language-text\">조작 기능</code> : 데이터를 검색, 갱신, 삽입, 삭제 등 처리하기 위해 사용자와 데이터베이스 간 인터페이스 수단을 제공하는 기능</li>\n<li><code class=\"language-text\">제어 기능</code> : 데이터의 무결성이 유지되도록 제어 , 사용자에게 허가된 데이터만 접근하도록 보안을 유지하고 권한을 검사</li>\n</ul>\n<p>여러 사용자가 동시에 접근하여 데이터를 처리할 때 정확성을 유지하도록 병행 제어</p>\n</li>\n</ul>\n<h5>DBMS의 장단점</h5>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>데이터 독립성, 일관성, 무결성 유지</li>\n<li>보안 유지</li>\n<li>데이터 실시간 처리, 통합 관리, 표준화 가능</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>전문가 부족</li>\n<li>전산화 비용 증가</li>\n<li>파일의 백업과 회복이 어려움</li>\n<li>시스템이 복잡함</li>\n</ul>\n</li>\n</ul>\n<h3>데이터 입출력</h3>\n<hr>\n<h5>데이터 입출력의 개요</h5>\n<ul>\n<li>소프트웨어의 기능을 구현하기 위해 데이터베이스에 데이터를 입력, 출력하는 작업</li>\n</ul>\n<h5>SQL</h5>\n<ul>\n<li>국제 표준 데이터베이스 언어</li>\n<li>데이터 정의어, 조작어, 제어어로 구분됨</li>\n</ul>\n<h5>데이터 접속(Data Mapping)</h5>\n<ul>\n<li>프로그래밍 코드와 데이터베이스의 데이터를 연결하는 것</li>\n</ul>\n<h5>트랜잭션</h5>\n<ul>\n<li>하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 수행돼야 할 일련의 연산</li>\n<li>\n<p>TCL(Transaction Control Language) : 트랜잭션을 제어하기 위해 사용되는 명령어</p>\n<ul>\n<li>COMMIT : 트랜잭션 처리가 비정상적으로 종료되어 트랜잭션이 수행한 변경 내용을 데이터베이스에 반영</li>\n</ul>\n</li>\n<li>\n<p>ROLLBACK : 트랜잭션 처리가 비정상적으로 종료되어 데이터베이스의 일관성이 깨졌을 때 트랜잭션이 행한 모든 변경 작업을 취소하고 이전 상태로 되돌림</p>\n<ul>\n<li>SAVEPOINT(CHECKPOINT) : 트랜잭션 내에 ROLLBACK 할 위치인 저장점을 지정</li>\n</ul>\n</li>\n</ul>\n<h3>절차형 SQL</h3>\n<hr>\n<h5>절차형 SQL의 개요</h5>\n<ul>\n<li>프로그래밍 언어와 같이 연속적인 실행이나 분기, 반복 등의 제어가 가능한 SQL</li>\n<li>단일 SQL문장으로 처리가 어려운 연속적인 작업을 처리하는데 적합</li>\n<li>BEGIN ~ END 형식의 블록 구조로 되어 있어 기능별 모듈화가 가능</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B5%AC%ED%98%84\">1. 데이터 입출력 구현</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<p><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0\">자료구조</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0%EC%9D%98-%EB%B6%84%EB%A5%98\">자료 구조의 분류</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%80%EC%9E%A5%EC%86%8C--%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4--dbms\">데이터저장소 / 데이터베이스 / DBMS</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%80%EC%9E%A5%EC%86%8C%EC%9D%98-%EA%B0%9C%EC%9A%94\">데이터저장소의 개요</a></li>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%A0%95%EC%9D%98-%ED%86%B5%ED%95%A9-%EC%A0%80%EC%9E%A5-%EC%9A%B4%EC%98%81-%EA%B3%B5%EC%9A%A9\">데이터베이스의 정의 (통합, 저장, 운영, 공용)</a></li>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#dbmsdatabase-management-system\">DBMS(DataBase Management System)</a></li>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#dbms%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\">DBMS의 장단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EC%B6%9C%EB%A0%A5\">데이터 입출력</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EC%B6%9C%EB%A0%A5%EC%9D%98-%EA%B0%9C%EC%9A%94\">데이터 입출력의 개요</a></li>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#sql\">SQL</a></li>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EC%86%8Ddata-mapping\">데이터 접속(Data Mapping)</a></li>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98\">트랜잭션</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EC%A0%88%EC%B0%A8%ED%98%95-sql\">절차형 SQL</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020%20%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC%20%ED%95%84%EA%B8%B0%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC(2)-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%20%EA%B0%9C%EB%B0%9C(1)/#%EC%A0%88%EC%B0%A8%ED%98%95-sql%EC%9D%98-%EA%B0%9C%EC%9A%94\">절차형 SQL의 개요</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)","path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/","images":["images/2.jpg"],"category":"정보처리기사 필기","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-01T05:00:00.000Z","components":null,"tweets":null,"summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)"}}},"pageContext":{"match":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/"}}}