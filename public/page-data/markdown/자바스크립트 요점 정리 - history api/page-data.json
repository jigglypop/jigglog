{"componentChunkName":"component---src-templates-markdown-tsx","path":"/markdown/자바스크립트 요점 정리 - history api/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"13a5bb24-171d-5f01-9687-ef3f1a7d3c90","html":"<h1>1. index</h1>\n<pre><code class=\"language-javascript\">&#x3C;!doctype html>\n&#x3C;html lang=\"ko\">\n  &#x3C;head>\n    &#x3C;title>History API Sample&#x3C;/title>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;style>\n      section {margin: 20px 0;}\n    &#x3C;/style>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;section>\n      &#x3C;h2>push state&#x3C;/h2>\n      &#x3C;button id=\"push-state1\">pushState1&#x3C;/button>\n      &#x3C;button id=\"push-state2\">pushState2&#x3C;/button>\n      &#x3C;button id=\"push-state3\">pushState3&#x3C;/button>\n    &#x3C;/section>\n    &#x3C;section>\n      &#x3C;h2>replace state&#x3C;/h2>\n      &#x3C;button id=\"replace-state\">replaceState&#x3C;/button>\n    &#x3C;/section>\n    &#x3C;section>\n        &#x3C;h2>변경&#x3C;/h2>\n        &#x3C;div id=\"info\">&#x3C;/div>\n    &#x3C;/section>\n  &#x3C;/body>\n  &#x3C;script type=\"module\" src=\"./src/index.js\">&#x3C;/script>\n&#x3C;/html>\n</code></pre>\n<h2>2. index.js</h2>\n<pre><code class=\"language-javascript\">// 현재의 history state 값을 출력합니다.\nconst currentHistoryState = () => {\n  if (history.state) {\n    document.getElementById(\"info\").innerHTML = `\n      &#x3C;div>\n        &#x3C;h1>${history.state}&#x3C;/h1>\n      &#x3C;/div>`;\n  } else {\n    document.getElementById(\"info\").innerHTML = `\n    &#x3C;div>\n      &#x3C;h1>페이지가 없습니다.&#x3C;/h1>\n    &#x3C;/div>`;\n  }\n};\n\ncurrentHistoryState();\n\nconst pushState1Btn = document.getElementById(\"push-state1\");\nconst pushState2Btn = document.getElementById(\"push-state2\");\nconst pushState3Btn = document.getElementById(\"push-state3\");\nconst replaceStateBtn = document.getElementById(\"replace-state\");\n\n// pushState()\npushState1Btn.addEventListener(\"click\", () => {\n  history.pushState(\"pushState1\", \"\", \"/push-state1\");\n  currentHistoryState();\n});\npushState2Btn.addEventListener(\"click\", () => {\n  history.pushState(\"pushState2\", \"\", \"/push-state2\");\n  currentHistoryState();\n});\npushState3Btn.addEventListener(\"click\", () => {\n  history.pushState(\"pushState3\", \"\", \"/push-state3\");\n  currentHistoryState();\n});\n\n// replaceState()\nreplaceStateBtn.addEventListener(\"click\", () => {\n  history.replaceState(\"replaceState\", \"\", \"/replace-state\");\n  currentHistoryState();\n});\n\n// 브라우저의 뒤로가기 / 앞으로가기를 누르면 history state 값을 확인하여 출력합니다.\nwindow.addEventListener(\"popstate\", () => {\n  currentHistoryState();\n});\n</code></pre>\n<h2>3. store</h2>\n<pre><code class=\"language-javascript\">/* \n  store.js 임시 구현\n  \n  context를 create하는 컴포넌트 => constructor에서 store.set('context', initialData)하기\n  context의 update에 따라 리렌더링되는 컴포넌트 => constructor에서 store.subscribe('context', this)하기\n  \n  context를 set하는 코드 라인 => data를 업데이트하는 곳에서 store.set('context', data)하기\n  context를 get하는 코드 라인 => data를 사용하는 곳에서 store.get('context')하기\n*/\n\nconst store = {\n  subscribe: (context, ref) => {\n    store[context].refs.push(ref);\n  },\n  get: (context) => {\n    return store[context].data;\n  },\n  set: (context, data) => {\n    const initialSet = !store[context];\n\n    if (initialSet) {\n      store[context] = {\n        data: data,\n        refs: [],\n      };\n      return;\n    }\n\n    console.log('new data', data);\n    store[context].data = data;\n    store[context].refs.forEach((ref) => ref.render());\n  },\n};\n\nexport default store;\n\n// SearchHistory.js\n\nimport store from '../../store.js';\n\nexport default class SearchHistory {\n  constructor($target) {\n    this.$target = $target;\n\n    this.$el = document.createElement('ul');\n    this.$el.className = 'SearchHistory';\n\n    this.$target.append(this.$el);\n\n    store.set('search-history', []); // create 'search-history' context, initialData is []\n    store.subscribe('search-history', this); // subscribe 'search-history' context\n  }\n\n  render() { // 'search-history'가 다른 곳에서 업데이트될 경우 render()가 실행됨\n    this.$el.innerHTML = store\n      .get('search-history') // get 'search-history' context\n      .map((searched) => `&#x3C;li>${searched}&#x3C;/li>`)\n      .join('');\n  }\n}\n</code></pre>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20history%20api/#1-index\">1. index</a></p>\n<ul>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20history%20api/#2-indexjs\">2. index.js</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20history%20api/#3-store\">3. store</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"자바스크립트 요점 정리 - history api 정리","path":"/자바스크립트 요점 정리 - history api/","images":["images/js.png"],"category":"자바스크립트","tags":["자바스크립트"],"date":"2021-03-03T12:23:00.000Z","components":null,"tweets":null,"summary":"자바스크립트 요점 정리 - history api 정리"}}},"pageContext":{"match":"/자바스크립트 요점 정리 - history api/"}}}