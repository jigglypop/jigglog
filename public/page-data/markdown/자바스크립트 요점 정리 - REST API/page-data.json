{"componentChunkName":"component---src-templates-markdown-tsx","path":"/markdown/자바스크립트 요점 정리 - REST API/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"91c177f8-17f1-517c-a79d-365faba2aea9","html":"<blockquote>\n<p>자바스크립트 요점 정리 - REST API 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요</p>\n</blockquote>\n<h1 id=\"rest-api\" style=\"position:relative;\"><a href=\"#rest-api\" aria-label=\"rest api permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API</h1>\n<hr>\n<h2 id=\"1-rest-api\" style=\"position:relative;\"><a href=\"#1-rest-api\" aria-label=\"1 rest api permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) REST API</h2>\n<hr>\n<h4>(1) REST</h4>\n<ul>\n<li>HTTP를 기반으로 클라이언트가 서버의 리소스에 접근하는 방식을 규정한 아키텍쳐</li>\n</ul>\n<h4>(2) REST API</h4>\n<ul>\n<li>REST를 기반으로 서비스 API를 구현한 것</li>\n</ul>\n<h4>(3) REST API의 구성</h4>\n<ul>\n<li>자원, 행위, 표현의 3가지 요소로 구성</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>구성 요소</th>\n<th>내용</th>\n<th>표현 방법</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>자원(resource)</td>\n<td>자원</td>\n<td>URI(엔드포인트)</td>\n</tr>\n<tr>\n<td>행위(verb)</td>\n<td>자원에 대한 행위</td>\n<td>HTTP 요청 메서드</td>\n</tr>\n<tr>\n<td>표현(representations)</td>\n<td>자원에 대한 행위의 구체적 내용</td>\n<td>페이로드</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code class=\"language-text\">RESTful</code> :  <em>REST API의 설계의도를 명확하게 지켜주는 것</em></li>\n<li>HTTP URI를 통해 자원을 표시하고 HTTP Method를 통해 자원에 대한 처리를 표현</li>\n<li>HTTP를 사용하기 때문에 HTTP의 특성을 그대로 반영하고 별도의 인프라 구축이 필요없음</li>\n<li>URI로 접근가능하고 내용이 JSON,XML 등으로 표현된 자원에 대한 행위를 HTTP Method로 정의</li>\n<li>동사보단 명사를 위주 (ex 슬래시를 통해 계층관계를 표시, 숫자는 id를 나타냄 )</li>\n</ul>\n<h5>(1) 장점</h5>\n<ul>\n<li>검색엔진에 최대한 많은 페이지가 인덱싱되기를 원하는 경우 REST로 설계하고 html을 서버사이드 렌더링하여 sitemap을 형성하는 것이 쉬움</li>\n<li>API 명세서를 읽지 않고도 요청을 알아보기 쉬움</li>\n</ul>\n<h5>(2) 단점</h5>\n<ul>\n<li>공식화된 레퍼런스가 없기 때문에, 사람마다 다르게 해석하여 사용할 수도 있음</li>\n<li>특정 클라이언트에서는 HTTP Method나 상태코드 중에 사용할 수 없는 것들이 있음</li>\n<li>실제 API를 개발할 때 REST로 디자인하면 굉장히 복잡한 비즈니스가 있음</li>\n</ul>\n<h5>(3) HATEOAS</h5>\n<ul>\n<li>동적인 API를 제공할 수 있음(모든 관련된 동작을 URI를 통해 알려줌) </li>\n<li>클라이언트가 API의 변화에 일일이 대응하지 않아도 됨</li>\n</ul>\n<h2 id=\"2-rest-api-설계-원칙\" style=\"position:relative;\"><a href=\"#2-rest-api-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99\" aria-label=\"2 rest api 설계 원칙 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) REST API 설계 원칙</h2>\n<hr>\n<h4>1) 원칙</h4>\n<ul>\n<li>URI는 리소스를 표현하는데 집중</li>\n<li>행위에 대한 정의는 HTTP 요청 메서드를 통해 함</li>\n</ul>\n<h4>2) HTTP 요청 메서드</h4>\n<table>\n<thead>\n<tr>\n<th>HTTP 요청 메서드</th>\n<th>종류</th>\n<th>목적</th>\n<th>페이로드</th>\n<th>CRUD</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>index/retrive</td>\n<td>모든/특정 리소스 취득</td>\n<td>X</td>\n<td>R</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>create</td>\n<td>리소스 생성</td>\n<td>O</td>\n<td>C</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>replace</td>\n<td>리소스의 전체 교체</td>\n<td>O</td>\n<td>CU</td>\n</tr>\n<tr>\n<td>PATCH</td>\n<td>modify</td>\n<td>리소스의 일부 수정</td>\n<td>O</td>\n<td>U</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>delete</td>\n<td>모든/특정 리소스 삭제</td>\n<td>X</td>\n<td>D</td>\n</tr>\n</tbody>\n</table>\n<h5>1) GET</h5>\n<ul>\n<li>서버에 존재하는 데이터를 요청하는 것 </li>\n<li>요청된 자원을 수정할 때, 자원내 필드를 전체 수정할 때 사용 (만약 일부만 전달할 경우, 그외 필드들은 NULL or 초기값 처리).</li>\n<li>Http Request Message의 Header 부분의 URL에 담겨서 전송되며, BODY는 비어있는 상태 URL에 ?뒤에 데이터를 가져오기 위한 조건이 포함</li>\n<li>URL에 조건이 포함되었기 때문에 데이터의 제한이 존재하며, URL에 노출되기 때문에 보안의 위험 존재</li>\n</ul>\n<h5>2) POST</h5>\n<ul>\n<li>서버에 데이터를 생성하는 것을 요청</li>\n<li>Http Request Message의 BODY 부분에 클라이언트의 요청을 처리하기 위한 데이터가 존재</li>\n<li>URL에 노출되지 않기 때문에 보안의 위험이 존재하지 않으며 보내는 데이터의 제한이 없음</li>\n</ul>\n<h5>3) PUT</h5>\n<ul>\n<li>서버에 존재하는 데이터를 수정하거나 존재하지 않으면 생성</li>\n</ul>\n<h5>4) DELETE</h5>\n<ul>\n<li>서버에 데이터를 제거할 것을 요청. 존재하지 않아도 동일하게 동작</li>\n</ul>\n<h5>5) PATCH</h5>\n<ul>\n<li>서버에 존재하는 데이터를 일부 수정</li>\n</ul>\n<h4>3) GET과 POST의 차이점</h4>\n<h5>(1) GET</h5>\n<ul>\n<li>서버에 존재하는 정보를 요청</li>\n<li>이 때 반환되는 정보는 정보 자체가 아니라 정보의 표현</li>\n<li>Request Body는 입력하지 않는 것이 일반적이며, 레거시 시스템의 경우 요청을 받아들이지 않을 수 있음</li>\n<li>캐싱을 수행하기 때문에 캐싱되지 않는 요청은 GET 요청이 맞지 않을 수 있음</li>\n</ul>\n<h5>(2) POST</h5>\n<ul>\n<li>서버에 정보를 생성하는 것을 요청</li>\n<li>예전 HTTP 통신은 POST 요청으로 데이터 삭제, 수정도 form 요청으로 같이 수행 </li>\n<li>POST 요청은 서버의 상태를 변경시키기 때문에 멱등성이 유지되지 않음</li>\n<li>Request Body에 요청하는 데이터를 담아 전송</li>\n</ul>\n<h5>(3) CORS</h5>\n<ul>\n<li>서로 다른 도메인간에 자원을 공유하는 것, 도메인 또는 포트가 다른 서버의 자원을 요청하면 발생하는 문제 </li>\n<li>웹 프론트 측에서 request header에 CORS 관련 옵션을 넣어주고 서버에서는 해당 프론트 요청을 허용</li>\n<li>대부분의 브라우저에서는 이를 기본적으로 차단하며 서버측에서 헤더를 통해서 사용가능한 자원을 알려줌</li>\n<li>preflight request는 실제 요청을 보내도 안전한지 판단하기 위해 사전에 보내는 요청</li>\n<li>OPTIONS 메서드로 요청하며 CORS를 허용하는지 확인</li>\n<li>CORS가 허용된 웹서버라면 사용 가능한 리소스를 헤더에 담아 응답</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#rest-api\">REST API</a></p>\n<ul>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#1-rest-api\">1) REST API</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#1-rest\">(1) REST</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#2-rest-api\">(2) REST API</a></li>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#3-rest-api%EC%9D%98-%EA%B5%AC%EC%84%B1\">(3) REST API의 구성</a></p>\n<ul>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#1-%EC%9E%A5%EC%A0%90\">(1) 장점</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#2-%EB%8B%A8%EC%A0%90\">(2) 단점</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#3-hateoas\">(3) HATEOAS</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#2-rest-api-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99\">2) REST API 설계 원칙</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#1-%EC%9B%90%EC%B9%99\">1) 원칙</a></li>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#2-http-%EC%9A%94%EC%B2%AD-%EB%A9%94%EC%84%9C%EB%93%9C\">2) HTTP 요청 메서드</a></p>\n<ul>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#1-get\">1) GET</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#2-post\">2) POST</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#3-put\">3) PUT</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#4-delete\">4) DELETE</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#5-patch\">5) PATCH</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#3-get%EA%B3%BC-post%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">3) GET과 POST의 차이점</a></p>\n<ul>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#1-get-1\">(1) GET</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#2-post-1\">(2) POST</a></li>\n<li><a href=\"/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EC%9A%94%EC%A0%90%20%EC%A0%95%EB%A6%AC%20-%20REST%20API/#3-cors\">(3) CORS</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"자바스크립트 요점 정리 - REST API","path":"/자바스크립트 요점 정리 - REST API/","images":["images/js.png"],"category":"자바스크립트","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","components":null,"tweets":null,"summary":"자바스크립트 요점 정리 - REST API 파트"}}},"pageContext":{"match":"/자바스크립트 요점 정리 - REST API/"}}}