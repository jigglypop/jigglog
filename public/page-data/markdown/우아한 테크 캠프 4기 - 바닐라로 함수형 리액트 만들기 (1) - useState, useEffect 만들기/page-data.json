{"componentChunkName":"component---src-templates-markdown-tsx","path":"/markdown/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"68cdd003-3b39-5720-9f80-c46ca1daf421","html":"<blockquote>\n<p>우아한 테크 캠프 4기 중 만들고 있는 우아한 리액트 연재글입니다</p>\n<p>다음 프로젝트는 <a href=\"https://github.com/jigglypop/woowa-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/jigglypop/woowa-react</a> 에서 보실 수 있습니다.</p>\n</blockquote>\n<h1>1. 들어가기에 앞서</h1>\n<hr>\n<ul>\n<li>안녕하세요 이번에 우아한 테크 캠프 4기에 합류하게 된 염동환입니다. 우아한 테크 캠프 4기 합격 발표 이후 바로 시작해서 지금까지 바닐라로 리액트를 만들어보고자 혼자 고군분투하고 있습니다.</li>\n<li>그리고 첫 주 금요일 미니 세미나때 이 내용에 대해 발표를 했었고, 그 부분과 어떤 부분에서 어려움이 있었는지 기능별로 쭉 정리를 해보고자 합니다</li>\n</ul>\n<h2>1) 왜 만드는가</h2>\n<hr>\n<ul>\n<li>저는 리액트를 거의 1년여동안 써 오면서 막연하게 useState는 이렇게 동작하겠구나..하고 써왔고 원리에 대해서는 매우 무지하다는 것을 깨달았습니다.</li>\n<li>그리고 우아한 테크 캠프에서 공개된 커리큘럼을 보면 1달 정도는 리액트를 사용할 수 없는데, 그 동안 쓸 바닐라 자바스크립트를 좀 준비해 볼 겸, 공부를 할 겸 만들게 되었습니다</li>\n</ul>\n<h2>2) 어떻게 만드는가</h2>\n<ul>\n<li>우선 클래스형 리액트는 다양한 과제 테스트에서 사용해 보았고, 비교적 큰 어려움은 없었던 것 같습니다. 하지만 함수형 리액트는 몇배는 더 어려운 과정이라고 생각합니다. 그만큼 코드가 간결하기 때문입니다.</li>\n<li>리액트 함수형의 가장 큰 핵심은 훅이라고 생각합니다. 그리고 그 훅의 가장 핵심은 <code class=\"language-text\">클로저</code>입니다</li>\n</ul>\n<h2>3) 클로저</h2>\n<hr>\n<ul>\n<li>먼저 사전적 정의는 이렇습니다</li>\n</ul>\n<blockquote>\n<p>“A closure is the combination of a function and the lexical environment within which that function was declared.”\n클로저는 함수와 그 함수가 선언됐을 때의 렉시컬 환경(Lexical environment)과의 조합이다.</p>\n<p>(MDN)</p>\n</blockquote>\n<ul>\n<li>공식적인 설명은 이렇습니다만…확실히 와닿지는 않는 개념입니다. 예제를 보겠습니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">const Redux </span><span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token function\"> </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">    setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token function\">    getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redux1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredux1<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redux2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredux2<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredux2<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>redux1<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>redux2<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>다음과 같이 redux라는 함수를 따로따로 new 생성자로 생성해주었다고 합시다. setCount의 입장에서 보면 count는 이해할 수 없습니다. setCount 아무곳에서도 count가 선언된 곳을 찾을 수 없기 때문입니다.</li>\n<li>하지만 결론적으로 말하자면 count를 setCount에서 쓸 수 있습니다. 반환된 내부함수가 자신이 선언됐을 때의 환경(Lexical environment)인 스코프를 기억하여 자신이 선언됐을 때의 환경(스코프) 밖에서 호출되어도 그 환경(스코프)에 접근할 수 있는 함수이기 때문입니다.</li>\n<li>그래서 count가 선언된 새로 생성된 redux1, 그리고 redux2의 환경에서 따로 setCount를 해 주었을 경우, 각각의 기억된 환경의 count를 추가합니다</li>\n<li>따라서 답은 <code class=\"language-text\">1, 2</code>입니다.</li>\n<li>그리고 리액트는 각각의 컴포넌트에서 useState를 해 줄 경우 각각 다른 상태를 모두 저장합니다. 모든 컴포넌트에 클로저를 잡아주면 useState를 사용할 수 있다는 말입니다.</li>\n</ul>\n<h1>2. 이제 만들어보자</h1>\n<ul>\n<li>오늘 만들 개략적인 파일 트리는 이렇습니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 리액트 실행부입니다. 이 부분만 우리가 건드릴 겁니다</span>\nreact\n\t<span class=\"token comment\">// 클로저를 생성할 파일</span>\n\tㄴ Closure<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// uuid 만들기</span>\n\tㄴ getID<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 앱 시작할 때</span>\n\tㄴ initApp<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 전역 상태를 저장할 전역 클로저</span>\n    ㄴ memo<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 핵심부. 훅 등이 들어있음</span>\n    ㄴ react<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 정규표현식으로 jsx를 파싱할 곳</span>\n    ㄴ tag<span class=\"token punctuation\">.</span>js\n<span class=\"token comment\">// 사용자가 작성할 파일</span>\nsrc\n\tㄴ <span class=\"token punctuation\">[</span>components<span class=\"token punctuation\">]</span>\n        ㄴ count<span class=\"token punctuation\">.</span>js\n        ㄴ word<span class=\"token punctuation\">.</span>js\n        ㄴ wordB<span class=\"token punctuation\">.</span>js\n\tㄴApp<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 인덱스 파일. 전역 클로저 시작부분입니다. 그리고 이 곳에 모듈을 등록해주어야 합니다.</span>\nindex<span class=\"token punctuation\">.</span>js</code></pre></div>\n<ul>\n<li>이번 시간에는 react.js의 useState, useEffect만 볼겁니다.</li>\n<li>우선 가장 핵심부 react.js부터 보시죠</li>\n</ul>\n<h2>1) react.js</h2>\n<hr>\n<ul>\n<li>이 곳에서 useState, useEffect와 같은 핵심 처리가 이루어집니다.</li>\n<li>나중에 클로저로 감싸질 곳이고, global이라는 변수로 전역의 상태를 공유하고, i인덱스로 훅의 순서를 잡습니다. 또한 $target으로 자신의 부모 노드를 가리킵니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">React</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 클로저 내부(훅 인덱스, 루트 타겟)</span>\n  <span class=\"token keyword\">let</span> global <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hooks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> $target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// useState</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 훅에서 상태 찾기</span>\n    <span class=\"token keyword\">const</span> hooks <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> _state <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> state<span class=\"token punctuation\">;</span>\n    hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setState(클로저 내의 클로저)</span>\n    <span class=\"token keyword\">const</span> setState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 내부 클로저 index 고정</span>\n      <span class=\"token keyword\">let</span> _i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 리렌더링 함수로</span>\n        <span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>_state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// useEffect</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hooks <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> changed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// value에서 변한 것이 있는지 찾음</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span> changed <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d <span class=\"token operator\">!==</span> _value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 바뀌었으면 콜백 함수 글로벌에 push</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">,</span>\n    useState<span class=\"token punctuation\">,</span>\n    useEffect<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>개략적으로 다음과 같이 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 클로저 내부(훅 인덱스, 루트 타겟)</span>\n  <span class=\"token keyword\">let</span> global <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hooks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> $target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이 부분에서 global 내의 hooks를 정의합니다. 나중에 hook을 저장하고 여기에서 꺼내오게 됩니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// useState</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 훅에서 상태 찾기</span>\n    <span class=\"token keyword\">const</span> _state <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> state<span class=\"token punctuation\">;</span>\n    global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setState(클로저 내의 클로저)</span>\n    <span class=\"token keyword\">const</span> setState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 내부 클로저 index 고정</span>\n      <span class=\"token keyword\">let</span> _i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 리렌더링 함수로</span>\n        <span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>_state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>useState입니다.</li>\n<li>처음 선언할 당시 useState는 초기값을 받습니다. 그리고 글로벌 내의 훅에서 현재 인덱스로 상태를 찾아온 뒤 있으면 그 값을 갱신하기 위해 _state를 global.hooks[i]로 하고 , 아니면 state(초기값)으로 합니다.</li>\n<li>setState는 클로저 내의 클로저입니다. setState는 클로저 내부에 target과 i를 고정시키고 호출될 시 global.hooks의 클로저 내부 지정된 인덱스 값을 갱신해주고 rerender링 해줍니다. </li>\n<li>마지막으로 다른 훅을 위해 인덱스를 늘려주고 state와 setState함수를 리턴해주고 마칩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// useEffect</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> hook</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// const hooks = global.hooks;</span>\n    <span class=\"token keyword\">let</span> _hook <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> changed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// hook에서 변한 것이 있는지 찾음</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      changed <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> h <span class=\"token operator\">!==</span> _hook<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 바뀌었으면 콜백 함수 글로벌에 push</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      memoset<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>useEffect입니다. 이 함수는 아시다시피 뒤에 배열로 바뀐 것을 추적할 값을 넣어줍니다. 빈 배열이면 그냥 초기 렌더링 이후에 실행되구요. </li>\n<li>value가 값들의 배열입니다. 호출될 시 훅이 변했을 시 호출됩니다.</li>\n</ul>\n<h2>마무리</h2>\n<hr>\n<ul>\n<li>\n<p>대략적인 훅의 개념을 알아봤습니다. 진짜 리액트는 이것보다 더 복잡하고 잘 구현되어 있을 겁니다. </p>\n<p>부족하지만 리액트를 이해하기 위해서 구현해봤습니다. 다음에는 본격적인 렌더링을 구현해보겠습니다. </p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#1-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">1. 들어가기에 앞서</a></p>\n<ul>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#1-%EC%99%9C-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B0%80\">1) 왜 만드는가</a></li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#2-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B0%80\">2) 어떻게 만드는가</a></li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#3-%ED%81%B4%EB%A1%9C%EC%A0%80\">3) 클로저</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#2-%EC%9D%B4%EC%A0%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">2. 이제 만들어보자</a></p>\n<ul>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#1-reactjs\">1) react.js</a></li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기","path":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","images":["images/woowa.jpg"],"category":"우아한 리액트","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-07-11T19:21:00000Z","components":null,"tweets":null,"summary":"우아한 테크 캠프 4기 - 우아한 리액트 만들기 - useState, useEffect 만들기"}}},"pageContext":{"match":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/"}}}