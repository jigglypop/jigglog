{"componentChunkName":"component---src-templates-post-tsx","path":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"495cf3dd-6729-525a-abce-914195f97ce3","html":"<blockquote>\n<p>우아한 테크 캠프 4기 중 만들고 있는 우아한 리액트 연재글입니다</p>\n<p>다음 프로젝트는 <a href=\"https://github.com/jigglypop/woowa-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/jigglypop/woowa-react</a> 에서 보실 수 있습니다.</p>\n</blockquote>\n<h1>1. 들어가기에 앞서</h1>\n<hr>\n<ul>\n<li>안녕하세요 이번에 우아한 테크 캠프 4기에 합류하게 된 염동환입니다. 우아한 테크 캠프 4기 합격 발표 이후 바로 시작해서 지금까지 바닐라로 리액트를 만들어보고자 혼자 고군분투하고 있습니다.</li>\n<li>그리고 첫 주 금요일 미니 세미나때 이 내용에 대해 발표를 했었고, 그 부분과 어떤 부분에서 어려움이 있었는지 기능별로 쭉 정리를 해보고자 합니다</li>\n</ul>\n<h2>1) 왜 만드는가</h2>\n<hr>\n<ul>\n<li>저는 리액트를 거의 1년여동안 써 오면서 막연하게 useState는 이렇게 동작하겠구나..하고 써왔고 원리에 대해서는 매우 무지하다는 것을 깨달았습니다.</li>\n<li>그리고 우아한 테크 캠프에서 공개된 커리큘럼을 보면 1달 정도는 리액트를 사용할 수 없는데, 그 동안 쓸 바닐라 자바스크립트를 좀 준비해 볼 겸, 공부를 할 겸 만들게 되었습니다</li>\n</ul>\n<h2>2) 어떻게 만드는가</h2>\n<ul>\n<li>우선 클래스형 리액트는 다양한 과제 테스트에서 사용해 보았고, 비교적 큰 어려움은 없었던 것 같습니다. 하지만 함수형 리액트는 몇배는 더 어려운 과정이라고 생각합니다. 그만큼 코드가 간결하기 때문입니다.</li>\n<li>리액트 함수형의 가장 큰 핵심은 훅이라고 생각합니다. 그리고 그 훅의 가장 핵심은 <code class=\"language-text\">클로저</code>입니다</li>\n</ul>\n<h2>3) 클로저</h2>\n<hr>\n<ul>\n<li>먼저 사전적 정의는 이렇습니다</li>\n</ul>\n<blockquote>\n<p>“A closure is the combination of a function and the lexical environment within which that function was declared.”\n클로저는 함수와 그 함수가 선언됐을 때의 렉시컬 환경(Lexical environment)과의 조합이다.</p>\n<p>(MDN)</p>\n</blockquote>\n<ul>\n<li>공식적인 설명은 이렇습니다만…확실히 와닿지는 않는 개념입니다. 예제를 보겠습니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Redux</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redux1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredux1<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> redux2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredux2<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredux2<span class=\"token punctuation\">.</span><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>redux1<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>redux2<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>다음과 같이 redux라는 함수를 따로따로 new 생성자로 생성해주었다고 합시다. setCount의 입장에서 보면 count는 이해할 수 없습니다. setCount 아무곳에서도 count가 선언된 곳을 찾을 수 없기 때문입니다.</li>\n<li>하지만 결론적으로 말하자면 count를 setCount에서 쓸 수 있습니다. 반환된 내부함수가 자신이 선언됐을 때의 환경(Lexical environment)인 스코프를 기억하여 자신이 선언됐을 때의 환경(스코프) 밖에서 호출되어도 그 환경(스코프)에 접근할 수 있는 함수이기 때문입니다.</li>\n<li>그래서 count가 선언된 새로 생성된 redux1, 그리고 redux2의 환경에서 따로 setCount를 해 주었을 경우, 각각의 기억된 환경의 count를 추가합니다</li>\n<li>따라서 답은 <code class=\"language-text\">1, 2</code>입니다.</li>\n<li>그리고 리액트는 각각의 컴포넌트에서 useState를 해 줄 경우 각각 다른 상태를 모두 저장합니다. 모든 컴포넌트에 클로저를 잡아주면 useState를 사용할 수 있다는 말입니다.</li>\n</ul>\n<h1>2. 이제 만들어보자</h1>\n<ul>\n<li>오늘 만들 개략적인 파일 트리는 이렇습니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 리액트 실행부입니다. 이 부분만 우리가 건드릴 겁니다</span>\nreact\n\t<span class=\"token comment\">// 클로저를 생성할 파일</span>\n\tㄴ Closure<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// uuid 만들기</span>\n\tㄴ getID<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 앱 시작할 때</span>\n\tㄴ initApp<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 전역 상태를 저장할 전역 클로저</span>\n    ㄴ memo<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 핵심부. 훅 등이 들어있음</span>\n    ㄴ react<span class=\"token punctuation\">.</span>js\n\t<span class=\"token comment\">// 정규표현식으로 jsx를 파싱할 곳</span>\n    ㄴ tag<span class=\"token punctuation\">.</span>js\n<span class=\"token comment\">// 사용자가 작성할 파일</span>\nsrc\n\tㄴ <span class=\"token punctuation\">[</span>components<span class=\"token punctuation\">]</span>\n        ㄴ count<span class=\"token punctuation\">.</span>js\n        ㄴ word<span class=\"token punctuation\">.</span>js\n        ㄴ wordB<span class=\"token punctuation\">.</span>js\n\tㄴApp<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 인덱스 파일. 전역 클로저 시작부분입니다. 그리고 이 곳에 모듈을 등록해주어야 합니다.</span>\nindex<span class=\"token punctuation\">.</span>js</code></pre></div>\n<ul>\n<li>이번 시간에는 react.js의 useState, useEffect만 볼겁니다.</li>\n<li>우선 가장 핵심부 react.js부터 보시죠</li>\n</ul>\n<h2>1) react.js</h2>\n<hr>\n<ul>\n<li>이 곳에서 useState, useEffect와 같은 핵심 처리가 이루어집니다.</li>\n<li>나중에 클로저로 감싸질 곳이고, global이라는 변수로 전역의 상태를 공유하고, i인덱스로 훅의 순서를 잡습니다. 또한 $target으로 자신의 부모 노드를 가리킵니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">React</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 클로저 내부(훅 인덱스, 루트 타겟)</span>\n  <span class=\"token keyword\">let</span> global <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hooks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    callback<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> $target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// useState</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 훅에서 상태 찾기</span>\n    <span class=\"token keyword\">const</span> hooks <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> _state <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> state<span class=\"token punctuation\">;</span>\n    hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setState(클로저 내의 클로저)</span>\n    <span class=\"token keyword\">const</span> setState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 내부 클로저 index 고정</span>\n      <span class=\"token keyword\">let</span> _i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 리렌더링 함수로</span>\n        <span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>_state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// useEffect</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> hooks <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _value <span class=\"token operator\">=</span> hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> changed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// value에서 변한 것이 있는지 찾음</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span> changed <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> d <span class=\"token operator\">!==</span> _value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 바뀌었으면 콜백 함수 글로벌에 push</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    render<span class=\"token punctuation\">,</span>\n    useState<span class=\"token punctuation\">,</span>\n    useEffect<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>개략적으로 다음과 같이 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// 클로저 내부(훅 인덱스, 루트 타겟)</span>\n  <span class=\"token keyword\">let</span> global <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hooks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> $target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>이 부분에서 global 내의 hooks를 정의합니다. 나중에 hook을 저장하고 여기에서 꺼내오게 됩니다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// useState</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 훅에서 상태 찾기</span>\n    <span class=\"token keyword\">const</span> _state <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> state<span class=\"token punctuation\">;</span>\n    global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setState(클로저 내의 클로저)</span>\n    <span class=\"token keyword\">const</span> setState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 내부 클로저 index 고정</span>\n      <span class=\"token keyword\">let</span> _i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>_i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 리렌더링 함수로</span>\n        <span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>Component<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>_state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>useState입니다.</li>\n<li>처음 선언할 당시 useState는 초기값을 받습니다. 그리고 글로벌 내의 훅에서 현재 인덱스로 상태를 찾아온 뒤 있으면 그 값을 갱신하기 위해 _state를 global.hooks[i]로 하고 , 아니면 state(초기값)으로 합니다.</li>\n<li>setState는 클로저 내의 클로저입니다. setState는 클로저 내부에 target과 i를 고정시키고 호출될 시 global.hooks의 클로저 내부 지정된 인덱스 값을 갱신해주고 rerender링 해줍니다. </li>\n<li>마지막으로 다른 훅을 위해 인덱스를 늘려주고 state와 setState함수를 리턴해주고 마칩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// useEffect</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span> hook</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// const hooks = global.hooks;</span>\n    <span class=\"token keyword\">let</span> _hook <span class=\"token operator\">=</span> global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> changed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// hook에서 변한 것이 있는지 찾음</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_hook<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      changed <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> h <span class=\"token operator\">!==</span> _hook<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 바뀌었으면 콜백 함수 글로벌에 push</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      memoset<span class=\"token punctuation\">.</span><span class=\"token function\">setCallback</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    global<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인덱스 늘리기</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>useEffect입니다. 이 함수는 아시다시피 뒤에 배열로 바뀐 것을 추적할 값을 넣어줍니다. 빈 배열이면 그냥 초기 렌더링 이후에 실행되구요. </li>\n<li>value가 값들의 배열입니다. 호출될 시 훅이 변했을 시 호출됩니다.</li>\n</ul>\n<h2>어려웠던 점?</h2>\n<hr>\n<h3>리액트는 컴포넌트마다 클로저를 잡아준다</h3>\n<ul>\n<li>리액트는 컴포넌트 하나하나마다 모두 클로저가 있습니다.</li>\n<li>저도 그렇게 만들고자 노력했을 때 상당한 난관에 부딪혔습니다. </li>\n<li>훅을 잡아 준 상위 컴포넌트에서 재랜더링이 호출되어 자식 컴포넌트를 다시 랜더링할 당시 클로저가 삭제되어버렸기 때문입니다.</li>\n<li>이 부분은 트리구조를 다시 공부하면서 하나하나 자식부터 순회하면서 클로저를 복원시켜주면서 해결해야 했습니다. </li>\n<li>상당히 난이도가 있는 작업이었기 때문에 알고리즘을 다시 공부하면서 혼자 3일정도를 보고 해결해 왔던 것 같습니다.</li>\n</ul>\n<h3>this 바인딩과 컴포넌트별로 분리</h3>\n<ul>\n<li>리액트라는 객체를 거쳐서 빠져나온 컴포넌트 자식별로 리액트스럽게 분리시키고 싶었습니다</li>\n<li>하지만 그 부분에서 다시 반복되는 코드가 많이 들어가는 등의 문제가 있었습니다.</li>\n<li>그리고 하나하나가 제대로 분리되지 않는 문제점이 발생하였습니다.</li>\n<li>이 부분은 this의 명시적 바인딩 bind로 해결하였고, this의 개념을 다시 공부하는 계기가 되었습니다.</li>\n</ul>\n<h2>마무리</h2>\n<hr>\n<ul>\n<li>\n<p>대략적인 훅의 개념을 알아봤습니다. 진짜 리액트는 이것보다 더 복잡하고 잘 구현되어 있을 겁니다. </p>\n<p>부족하지만 리액트를 이해하기 위해서 구현해봤습니다. 다음에는 본격적인 렌더링을 구현해보겠습니다. </p>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#1-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\">1. 들어가기에 앞서</a></p>\n<ul>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#1-%EC%99%9C-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B0%80\">1) 왜 만드는가</a></li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#2-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%A7%8C%EB%93%9C%EB%8A%94%EA%B0%80\">2) 어떻게 만드는가</a></li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#3-%ED%81%B4%EB%A1%9C%EC%A0%80\">3) 클로저</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#2-%EC%9D%B4%EC%A0%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90\">2. 이제 만들어보자</a></p>\n<ul>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#1-reactjs\">1) react.js</a></li>\n<li>\n<p><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90\">어려웠던 점?</a></p>\n<ul>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%8A%94-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A7%88%EB%8B%A4-%ED%81%B4%EB%A1%9C%EC%A0%80%EB%A5%BC-%EC%9E%A1%EC%95%84%EC%A4%80%EB%8B%A4\">리액트는 컴포넌트마다 클로저를 잡아준다</a></li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#this-%EB%B0%94%EC%9D%B8%EB%94%A9%EA%B3%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%B3%84%EB%A1%9C-%EB%B6%84%EB%A6%AC\">this 바인딩과 컴포넌트별로 분리</a></li>\n</ul>\n</li>\n<li><a href=\"/%EC%9A%B0%EC%95%84%ED%95%9C%20%ED%85%8C%ED%81%AC%20%EC%BA%A0%ED%94%84%204%EA%B8%B0%20-%20%EC%9A%B0%EC%95%84%ED%95%9C%20%EB%A6%AC%EC%95%A1%ED%8A%B8%20%EB%A7%8C%EB%93%A4%EA%B8%B0/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기","path":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","images":["images/woowa.jpg"],"category":"우아한 리액트","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-07-11T19:21:00000Z","components":null,"tweets":null,"summary":"우아한 테크 캠프 4기 - 우아한 리액트 만들기 - useState, useEffect 만들기"}},"posts":{"edges":[{"node":{"frontmatter":{"type":"portfolio","title":"MOIJA","images":["moija/images/moija.png","moija/images/moija1.png","moija/images/moija2.png","moija/images/moija3.png","moija/images/moija4.png","moija/images/moija5.png"],"path":"/portfolios/moija/","tags":null,"date":"2022-03-02T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"VUELOG","images":["vuelog/images/vuelog.png","vuelog/images/vuelog1.png","vuelog/images/vuelog2.png","vuelog/images/vuelog3.png","vuelog/images/vuelog4.png","vuelog/images/vuelog5.png","vuelog/images/vuelog6.png"],"path":"/portfolios/VUELOG/","tags":null,"date":"2022-03-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"DT CENTER","images":["dtcenter/images/dtcenter.png","dtcenter/images/dtcenter1.png","dtcenter/images/dtcenter2.png","dtcenter/images/dtcenter3.png"],"path":"/portfolios/DT CENTER/","tags":null,"date":"2022-02-21T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"COLORBERRY","images":["ColorBerry/images/colorberry.png","ColorBerry/images/colorberry2.png","ColorBerry/images/colorberry3.png","ColorBerry/images/colorberry4.png","ColorBerry/images/colorberry5.png","ColorBerry/images/colorberry6.png","ColorBerry/images/colorberry7.png","ColorBerry/images/colorberry8.png"],"path":"/portfolios/COLORBERRY/","tags":null,"date":"2022-02-20T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"우아한 테크 캠프 4기 - 4주차 회고","images":["images/woowa.jpg"],"path":"/우아한 테크 캠프 4기 - 4주차 회고/","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-08-02T19:21:00000Z","summary":"우아한 테크 캠프 4기 - 4주차 회고"}}},{"node":{"frontmatter":{"type":null,"title":"우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기","images":["images/woowa.jpg"],"path":"/우아한 테크 캠프 4기 - 바닐라로 함수형 리액트 만들기 (1) - useState, useEffect 만들기/","tags":["우아한 테크 캠프","우아한 테크 캠프 4기","우아한 리액트","리액트"],"date":"2021-07-11T19:21:00000Z","summary":"우아한 테크 캠프 4기 - 우아한 리액트 만들기 - useState, useEffect 만들기"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 클로저","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 클로저/","tags":["자바스크립트"],"date":"2021-06-12T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 클로저"}}},{"node":{"frontmatter":{"type":null,"title":"react - Jest 사용하기","images":["images/react.jpg"],"path":"/react - Jest 사용하기/","tags":["리액트","react"],"date":"2021-06-06T01:06:00.000Z","summary":"react - Jest 사용하기 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"redux-toolkit - 튜토리얼","images":["images/react.jpg"],"path":"/redux-toolkit - 튜토리얼/","tags":["리액트","react","redux","redux-toolkit"],"date":"2021-06-05T01:06:00.000Z","summary":"redux-toolkit - 튜토리얼 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"redux-toolkit - createSlice","images":["images/react.jpg"],"path":"/redux-toolkit - createSlice/","tags":["리액트","react","redux","redux-toolkit"],"date":"2021-06-05T01:06:00.000Z","summary":"redux-toolkit - createSlice 정리 자료입니다."}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - REST API","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - REST API/","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","summary":"자바스크립트 요점 정리 - REST API 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 타이머","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 타이머/","tags":["자바스크립트"],"date":"2021-06-04T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 타이머 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 프로토타입","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 프로토타입/","tags":["자바스크립트"],"date":"2021-06-03T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 프로토타입 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - 실행 컨텍스트","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - 실행 컨텍스트/","tags":["자바스크립트"],"date":"2021-05-25T01:00:00.000Z","summary":"자바스크립트 요점 정리 - 실행 컨텍스트"}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-21T22:23:00.000Z","summary":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)-개요 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-20T20:21:00.000Z","summary":"2020 정보 처리 기사 실기 요약 1-프로그래밍 언어(2)-언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 2-요구 사항 확인","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 2-요구 사항 확인/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-19T17:21:00.000Z","summary":"2021 정보 처리 기사 실기 요약 2-요구 사항 확인 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 3-데이터 입출력 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 3-데이터 입출력 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-18T17:22:00.000Z","summary":"2021 정보 처리 기사 데이터 입출력 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 4-통합 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 4-통합 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-17T05:31:00.000Z","summary":"2021 정보 처리 기사 통합 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 5-서버 프로그램 구현","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 5-서버 프로그램 구현/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-16T06:31:00.000Z","summary":"2021 정보 처리 기사 서버 프로그램 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 6-화면 설계","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 6-화면 설계/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-15T17:00:00.000Z","summary":"2021 정보 처리 기사 화면 설계 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-14T17:00:00.000Z","summary":"2021 정보 처리 기사 애플리케이션 테스트 관리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 8-SQL 응용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 8-SQL 응용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-12T12:45:00.000Z","summary":"2021 정보 처리 기사 SQL 응용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-11T19:00:00.000Z","summary":"2021 정보 처리 기사 소프트웨어 보안 구축 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-네트워크","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-네트워크/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-10T21:03:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-네트워크 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-05-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-05-06T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-03T21:01:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-운영체제 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-02T21:01:00.000Z","summary":"2021 정보 처리 기사 실기 요약 10-응용-프로세스 관리 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2021 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징","images":["images/1.jpg"],"path":"/2021 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징/","tags":["정보처리기사 실기 요약","정보처리기사","정처기"],"date":"2021-05-01T23:03:00.000Z","summary":"2021 정보 처리 기사 제품 소프트웨어 패키징 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node/","tags":["벡엔드","개발자","면접","기술면접","node"],"date":"2021-04-20T01:00:00.000Z","summary":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/","tags":["프론트엔드","개발자","면접","기술면접","Vue"],"date":"2021-04-15T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt/","tags":["프론트엔드","개발자","면접","기술면접","Nuxt"],"date":"2021-04-15T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React/","tags":["프론트엔드","개발자","면접","기술면접","React"],"date":"2021-04-14T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS/","tags":["프론트엔드","개발자","면접","기술면접","CSS"],"date":"2021-04-14T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택/","tags":["벡엔드","개발자","면접","기술면접","기술스택"],"date":"2021-04-09T01:00:00.000Z","summary":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택"}}},{"node":{"frontmatter":{"type":null,"title":"벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CS","images":["images/2.jpg"],"path":"/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - cs/","tags":["벡엔드","개발자","면접","기술면접","CS"],"date":"2021-04-08T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - this","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - this/","tags":["자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"자바스크립트 요점 정리 - this 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2) 파트"}}},{"node":{"frontmatter":{"type":null,"title":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)","images":["images/2.jpg"],"path":"/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/","tags":["프론트엔드","개발자","면접","기술면접","자바스크립트"],"date":"2021-04-07T01:00:00.000Z","summary":"프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1) 파트"}}},{"node":{"frontmatter":{"type":null,"title":"자바스크립트 요점 정리 - history api 정리","images":["images/js.png"],"path":"/자바스크립트 요점 정리 - history api/","tags":["자바스크립트"],"date":"2021-03-03T12:23:00.000Z","summary":"자바스크립트 요점 정리 - history api 정리"}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 고양이 정리","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 고양이 정리/","tags":["프로그래머스 데브매칭","고양이 사진첩"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 고양이 정리입니다."}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 라우팅","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 라우팅/","tags":["프로그래머스","데브매칭","소프트웨어"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 라우팅입니다."}}},{"node":{"frontmatter":{"type":null,"title":"프로그래머스 데브매칭 상태관리","images":["images/pg.jpg"],"path":"/프로그래머스 데브매칭 상태관리/","tags":["프로그래머스 데브매칭","상태관리"],"date":"2021-03-01T12:23:00.000Z","summary":"프로그래머스 데브매칭 상태관리입니다."}}},{"node":{"frontmatter":{"type":"portfolio","title":"MBTI WORLD","images":["mbtiworld/images/mbtiworld.png","mbtiworld/images/mbtiworld2.png","mbtiworld/images/mbtiworld3.png","mbtiworld/images/mbtiworld4.png","mbtiworld/images/mbtiworld5.png","mbtiworld/images/mbtiworld6.png","mbtiworld/images/mbtiworld7.png","mbtiworld/images/mbtiworld8.png","mbtiworld/images/mbtiworld9.png","mbtiworld/images/mbtiworld10.png"],"path":"/portfolios/MBTI WORLD/","tags":null,"date":"2021-02-19T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 3-단답형 문제(3)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 3-단답형 문제(3)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-25T09:22:00000Z","summary":"2020 정보 처리 기사 실기 3-단답형 문제(3)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 4-단답형 문제(4)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 4-단답형 문제(4)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-15T09:24:00000Z","summary":"2020 정보 처리 기사 실기 4-단답형 문제(4)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 2-단답형 문제(2)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 2-단답형 문제(2)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-15T09:21:00000Z","summary":"2020 정보 처리 기사 실기 2-단답형 문제(2)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 1-단답형 문제(1)","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 1-단답형 문제(1)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-14T16:21:00000Z","summary":"2020 정보 처리 기사 실기 1-단답형 문제(1)입니다 정처기 공부를 할 때 활용하세요"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보 처리 기사 실기 5-정보 관련 용어 정리","images":["images/1.jpg"],"path":"/2020 정보 처리 기사 실기 5-정보 관련 용어 정리/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-10-14T02:21:00.000Z","summary":"2020 정보 처리 기사 실기 5-정보 용어 정리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-03T01:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-02T01:00:00.000Z","summary":"응용 SW 기초 기술 활용"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-05-01T01:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-03T03:05:00.000Z","summary":"정보시스템 구축 관리"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-02T03:05:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-04-01T03:05:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-03T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-02T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-03-01T02:01:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-03T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-02T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-02-01T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-01-03T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-01-02T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)/","tags":["정보처리기사 필기","정보처리기사","필기","데이터베이스 구축"],"date":"2020-01-01T05:00:00.000Z","summary":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)"}}},{"node":{"frontmatter":{"type":"portfolio","title":"CAPTURE BLOG","images":["CaptureBlog/images/capture1.png","CaptureBlog/images/capture2.png","CaptureBlog/images/capture3.png","CaptureBlog/images/capture4.png","CaptureBlog/images/capture5.png","CaptureBlog/images/capture6.png"],"path":"/portfolios/CAPTURE BLOG/","tags":null,"date":"2020-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"LANGUAGE TOGETHER","images":["languageTogether/images/languagetogether.png","languageTogether/images/languagetogether2.png","languageTogether/images/languagetogether3.png","languageTogether/images/languagetogether4.png","languageTogether/images/languagetogether5.png","languageTogether/images/languagetogether6.png","languageTogether/images/languagetogether7.png","languageTogether/images/languagetogether8.png","languageTogether/images/languagetogether9.png"],"path":"/portfolios/LANGUAGE TOGETHER/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"MOVIE STAR","images":["moviestar/images/moviestar.png","moviestar/images/moviestar2.png","moviestar/images/moviestar3.png","moviestar/images/moviestar4.png"],"path":"/portfolios/MOVIE STAR/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"resume","title":"Resume","images":null,"path":"/resume/","tags":null,"date":"2000-01-01T00:00:00.000Z","summary":null}}}]}},"pageContext":{}},"staticQueryHashes":["3020484120"]}