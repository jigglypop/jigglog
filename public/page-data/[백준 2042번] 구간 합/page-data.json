{"componentChunkName":"component---src-templates-post-jsx","path":"/[백준 2042번] 구간 합/","result":{"data":{"site":{"siteMetadata":{"title":"jigglog","author":"JIGGLYPOP","homepage":"https://jigglog.netlify.app"}},"post":{"id":"c1ff4e49-b4e4-54bd-9f02-761918b9470d","html":"<h1 id=\"세그먼트-트리-segment-tree\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%8A%B8-%ED%8A%B8%EB%A6%AC-segment-tree\" aria-label=\"세그먼트 트리 segment tree permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세그먼트 트리 (Segment Tree)</h1>\n<hr>\n<p>배열 A가 있고 다음과 같은 두 연산을 수행해야하는 문제를 생각해보자.</p>\n<p><strong>1. 구간 l, r이 주어졌을 때, A[l] + … A[r] 구해서 출력하기</strong></p>\n<p><strong>2. i번째 수를 V로 바꾸기. A[i] = v</strong></p>\n<p>수행해야하는 연산은 최대 M번이다.</p>\n<p>다른 방법을 사용하지 않고 문제를 푼다면, 1번 연산을 수행하는데 O(N), 2번 연산을 수행하는데 O(1)이 걸린다.</p>\n<p>총 시간 복잡도는 O(NM) + O(M) = O(NM)이 나오게된다.</p>\n<p>2번 연산이 없다고 생각해보자.</p>\n<p>수를 바꾸는 경우가 없기 때문에, 합도 변하지 않는다. 앞에서부터 차례대로 합을 구해놓는 방식으로 문제를 풀 수 있다.</p>\n<p>S[i] = A[1] + … + A[i] 라고 했을 때, i~j까지의 합은 S[j] - S[i-1]이 된다.</p>\n<p>여기서 2번 연산을 하려면 수가 바뀔때마다 S를 변경해줘야한다. 가장 앞에있는 0번째 수가 바뀐 경우에는 모든 S배열을 변경해야하기 때문에, 시간복잡도는 O(N)이 걸리게 된다.</p>\n<p>따라서, M과 N이 매우 큰 경우에는 시간이 너무 오래 걸리게된다.</p>\n<h2 id=\"세그먼트-트리-설명\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%8A%B8-%ED%8A%B8%EB%A6%AC-%EC%84%A4%EB%AA%85\" aria-label=\"세그먼트 트리 설명 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세그먼트 트리 설명</h2>\n<hr>\n<p>세그먼트 트리를 이용하면, 1번 연산을 O(logN), 2번 연산도 O(logN)만에 수행할 수 있습니다.</p>\n<p>세그먼트 트리의 리프 노드와 리프 노드가 아닌 다른 노드는 다음과 같은 의미를 가집니다.</p>\n<p><code class=\"language-text\">리프 노드</code> : 배열의 그 수 자체</p>\n<p><code class=\"language-text\">다른 노드</code> : 왼쪽 자식과 오른쪽 자식의 합을 저장함.</p>\n<p>어떤 노드의 번호가 <code class=\"language-text\">x</code>일때, 왼쪽 자식의 번호는 <code class=\"language-text\">2x</code>, 오른쪽 자식의 번호는 <code class=\"language-text\">2x+1</code>이 됩니다.</p>\n<ul>\n<li>N=10인 경우 세그먼트 트리</li>\n</ul>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg1.png\" alt=\"img\" style=\"zoom:50%;\">\n<ul>\n<li>노드의 번호</li>\n</ul>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg2.png\" alt=\"img\" style=\"zoom:50%;\">\n<p>만약, N이 2의 제곱꼴인 경우에는 <code class=\"language-text\">Full Binary Tree</code>라고 합니다(이때 높이는 logN) </p>\n<p>리프 노드가 N개인 <code class=\"language-text\">Full Binary Tree</code>는 필요한 노드의 개수가 <code class=\"language-text\">2(N-1)</code>입니다.</p>\n<p>N이 2의 제곱꼴이 아닌 경우에는 높이가 H=⌈lgN⌉ 이고, 총 세그먼트 트리를 만드는데 필요한 배열의 크기는 <code class=\"language-text\">2^(H+1) -1</code> 개가 됩니다.</p>\n<h2 id=\"합-구하기\" style=\"position:relative;\"><a href=\"#%ED%95%A9-%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"합 구하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합 구하기</h2>\n<hr>\n<p>구간 left, right가 주어졌을 떄, 합을 찾으려면 루트부터 트리를 순회하면서 각 노드가 담당하는 구간과 left, right 사이의 관계를 살펴봐야 합니다.</p>\n<p>예를 들어, 0~9까지 합을 구하는 경우는 루트 노드 하나만으로 합을 알 수 있습니다(루트 노드가 합)</p>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg3.png\" alt=\"img\" style=\"zoom:50%;\">\n<p>2~4까지의 합을 구하는 경우는 다음과 같다.</p>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg4.png\" alt=\"img\" style=\"zoom:50%;\">\n<p>5~8까지 합을 구하는 경우는 다음과 같다.</p>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg5.png\" alt=\"img\" style=\"zoom:50%;\">\n<p>node가 담당하고 있는 구간이 [start, end]이고, 합을 구해야하는 구간이 [left, right]이라면 다음과 같이 4가지 경우로 나누어질 수 있다.</p>\n<p><code class=\"language-text\">[left, right]와 [start, end]가 겹치지 않는 경우</code></p>\n<p><code class=\"language-text\">[left, right]가 [start, end]를 완전히 포함하는 경우</code></p>\n<p><code class=\"language-text\">[start, end]가 [left, right]를 완전히 포함하는 경우</code></p>\n<p><code class=\"language-text\">[left, right]와 [start, end]가 겹쳐져 있는 경우 (1, 2, 3을 제외한 나머지 경우)</code></p>\n<h2 id=\"수-변경하기\" style=\"position:relative;\"><a href=\"#%EC%88%98-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"수 변경하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수 변경하기</h2>\n<hr>\n<p>중간에 어떤 수를 변경한다면, 그 숫자가 포함된 구간을 담당하는 노드를 모두 변경해줘야 한다.</p>\n<p>다음은 3번째 수를 변경할 때, 변경해야 하는 구간을 나타낸다.</p>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg7.png\" alt=\"img\" style=\"zoom:50%;\">\n<p>다음은 5를 변경할 때이다.</p>\n<img src=\"https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/blog/seg8.png\" alt=\"img\" style=\"zoom:50%;\">\n<p>index 번째 수를 val로 변경한다면, 그 수가 얼마만큼 변했는지를 알아야한다. 이 수를 diff라고 하면, diff = val - a[index]로 쉽게 구할 수 있다.</p>\n<p>수 변경은 2가지 경우가 있다.</p>\n<p><code class=\"language-text\">[start, end]에 index가 포함되는 경우</code></p>\n<p><code class=\"language-text\">[start, end]에 index가 포함되지 않는 경우</code></p>\n<p>node의 구간에 포함되는 경우에는 diff만큼 증가시켜 합을 변경해 줄 수 있다. </p>\n<p>tree[node] = tree[node] + diff 포함되지 않는 경우는 그 자식도 index가 포함되지 않기 때문에, 탐색을 중단해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\n \n<span class=\"token comment\"># 세그먼트 트리 생성</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    <span class=\"token comment\"># node가 leaf 노드인 경우 배열의 원소 값을 반환.</span>\n    <span class=\"token keyword\">if</span> start <span class=\"token operator\">==</span> end <span class=\"token punctuation\">:</span>\n        tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 재귀함수를 이용하여 왼쪽 자식과 오른쪽 자식 트리를 만들고 합을 저장.</span>\n        tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> init<span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> init<span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\n \n<span class=\"token comment\"># 구간 합 구하기</span>\n<span class=\"token comment\"># node가 담당하는 구간 [start, end]</span>\n<span class=\"token comment\"># 합을 구해야하는 구간 [left, right]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">subSum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># 겹치지 않기 때문에, 더 이상 탐색을 이어갈 필요가 없다.    </span>\n    <span class=\"token keyword\">if</span> left <span class=\"token operator\">></span> end <span class=\"token keyword\">or</span> right <span class=\"token operator\">&lt;</span> start <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n \n    <span class=\"token comment\"># 구해야하는 합의 범위는 [left, right]인데, [start, end]는 그 범위에 모두 포함되고</span>\n    <span class=\"token comment\"># 그 node의 자식도 모두 포함되기 때문에 더 이상 호출을 하는 것은 비효율적이다.</span>\n    <span class=\"token keyword\">if</span> left <span class=\"token operator\">&lt;=</span> start <span class=\"token keyword\">and</span> end <span class=\"token operator\">&lt;=</span> right <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span>\n \n    <span class=\"token comment\"># 왼쪽 자식과 오른쪽 자식을 루트로 하는 트리에서 다시 탐색을 시작해야한다.</span>\n    <span class=\"token keyword\">return</span> subSum<span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> \n<span class=\"token operator\">+</span> subSum<span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n \n \n<span class=\"token keyword\">def</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n \n    <span class=\"token keyword\">if</span> index <span class=\"token operator\">&lt;</span> start <span class=\"token keyword\">or</span> index <span class=\"token operator\">></span> end <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n \n    tree<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> diff\n    \n    <span class=\"token comment\"># 리프 노드가 아닌 경우에는 자식도 변경해줘야 하기 때문에 검사해야함.</span>\n    <span class=\"token keyword\">if</span> start <span class=\"token operator\">!=</span> end <span class=\"token punctuation\">:</span>\n        update<span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">)</span>\n        update<span class=\"token punctuation\">(</span>node<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">+</span>end<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">)</span>\n \n \nn<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3000000</span>\n \n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \ninit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">if</span> a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span>\n        b <span class=\"token operator\">=</span> b<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        diff <span class=\"token operator\">=</span> c <span class=\"token operator\">-</span> l<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span>\n        l<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n        update<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span>                \n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>subSum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>b<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>출처 : <a href=\"https://www.acmicpc.net/blog/view/9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/blog/view/9</a></p>\n<p>문제 출처 : <a href=\"https://www.acmicpc.net/problem/2042\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/2042</a></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/%5B%EB%B0%B1%EC%A4%80%202042%EB%B2%88%5D%20%EA%B5%AC%EA%B0%84%20%ED%95%A9/#%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%8A%B8-%ED%8A%B8%EB%A6%AC-segment-tree\">세그먼트 트리 (Segment Tree)</a></p>\n<ul>\n<li><a href=\"/%5B%EB%B0%B1%EC%A4%80%202042%EB%B2%88%5D%20%EA%B5%AC%EA%B0%84%20%ED%95%A9/#%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%8A%B8-%ED%8A%B8%EB%A6%AC-%EC%84%A4%EB%AA%85\">세그먼트 트리 설명</a></li>\n<li><a href=\"/%5B%EB%B0%B1%EC%A4%80%202042%EB%B2%88%5D%20%EA%B5%AC%EA%B0%84%20%ED%95%A9/#%ED%95%A9-%EA%B5%AC%ED%95%98%EA%B8%B0\">합 구하기</a></li>\n<li><a href=\"/%5B%EB%B0%B1%EC%A4%80%202042%EB%B2%88%5D%20%EA%B5%AC%EA%B0%84%20%ED%95%A9/#%EC%88%98-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\">수 변경하기</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[백준 2042번] 구간 합","path":"/[백준 2042번] 구간 합/","images":["images/baekjoon.png"],"category":"알고리즘","tags":["백준","세그먼트 트리","구간합"],"date":"2020-07-06T22:06:00.000Z","components":null,"tweets":null,"summary":"[백준 2042번] 구간 합 문제입니다."}},"posts":{"edges":[{"node":{"frontmatter":{"type":"portfolio","title":"COLORBERRY","images":["ColorBerry/images/colorberry.png","ColorBerry/images/colorberry2.png","ColorBerry/images/colorberry3.png","ColorBerry/images/colorberry4.png","ColorBerry/images/colorberry5.png","ColorBerry/images/colorberry6.png","ColorBerry/images/colorberry7.png","ColorBerry/images/colorberry8.png"],"path":"/portfolios/COLORBERRY/","tags":null,"date":"2020-09-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":null,"title":"[mobx] Next.js 에서 Mobx 사용하기","images":["images/2.jpg"],"path":"/[mobx] Next.js 에서 Mobx 사용하기/","tags":["mobx","next.js"],"date":"2020-08-21T01:00:00.000Z","summary":"mobx와 Next.js를 사용하기"}}},{"node":{"frontmatter":{"type":null,"title":"[opic] 오픽 주제 모음","images":["images/2.jpg"],"path":"/[opic] 오픽 주제 모음/","tags":["OPIC","오픽"],"date":"2020-08-10T01:00:00.000Z","summary":"오픽 주제 모음"}}},{"node":{"frontmatter":{"type":null,"title":"[Mobx] Mobx 사용하기","images":["images/mobx.jpg"],"path":"/[Mobx] Mobx 사용하기/","tags":["react","mobx"],"date":"2020-07-31T19:23:00.000Z","summary":"리액트로 mobx를 다뤄보기 시리즈입니다."}}},{"node":{"frontmatter":{"type":null,"title":"[리액트 3D] 리액트 + three.js 시작하기","images":["images/1.jpg"],"path":"/[리액트 3D] 리액트 + three.js 시작하기/","tags":["react","three.js","3D"],"date":"2020-07-31T19:23:00.000Z","summary":"리액트로 three.js 를 다루어보기 시리즈, 3D 웹페이지를 만들기 위한 포스팅입니다."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 1-프로그래밍 언어 활용(3)","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 1-프로그래밍 언어 활용(3)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-18T22:23:00.000Z","summary":"2020 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 1-프로그래밍 언어 활용(2)","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 1-프로그래밍 언어 활용(2)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-18T22:21:00.000Z","summary":"2020 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 1-프로그래밍 언어 활용(1)","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 1-프로그래밍 언어 활용(1)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-18T20:21:00.000Z","summary":"2020 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 11-제품 소프트웨어 패키징","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 11-제품 소프트웨어 패키징/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-17T23:03:00.000Z","summary":"2020 정보 처리 기사 제품 소프트웨어 패키징 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 10-응용 SW 기초 기술 활용(3)","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 10-응용 SW 기초 기술 활용(3)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-17T21:03:00.000Z","summary":"2020 정보 처리 기사 응용 SW 기초 기술 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 10-응용 SW 기초 기술 활용(2)","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 10-응용 SW 기초 기술 활용(2)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-17T21:02:00.000Z","summary":"2020 정보 처리 기사 응용 SW 기초 기술 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 10-응용 SW 기초 기술 활용(1)","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 10-응용 SW 기초 기술 활용(1)/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-17T21:01:00.000Z","summary":"2020 정보 처리 기사 응용 SW 기초 기술 활용 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 9-소프트웨어 보안 구축","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 9-소프트웨어 보안 구축/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-17T19:00:00.000Z","summary":"2020 정보 처리 기사 소프트웨어 보안 구축 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 8-SQL 응용","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 8-SQL 응용/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-17T12:45:00.000Z","summary":"2020 정보 처리 기사 SQL 응용 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 6-화면 설계","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 6-화면 설계/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-16T17:00:00.000Z","summary":"2020 정보 처리 기사 화면 설계 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 7-애플리케이션 테스트 관리","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 7-애플리케이션 테스트 관리/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-16T17:00:00.000Z","summary":"2020 정보 처리 기사 애플리케이션 테스트 관리 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 5-서버 프로그램 구현","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 5-서버 프로그램 구현/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-16T06:31:00.000Z","summary":"2020 정보 처리 기사 서버 프로그램 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 4-통합 구현","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 4-통합 구현/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-16T05:31:00.000Z","summary":"2020 정보 처리 기사 통합 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 3-데이터 입출력 구현","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 3-데이터 입출력 구현/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-15T17:22:00.000Z","summary":"2020 정보 처리 기사 데이터 입출력 구현 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[2020] 정보 처리 기사 실기 2-요구 사항 확인","images":["images/1.jpg"],"path":"/[2020] 정보 처리 기사 실기 2-요구 사항 확인/","tags":["정보처리기사 실기","정보처리기사","정처기"],"date":"2020-07-15T17:21:00.000Z","summary":"2020 정보 처리 기사 요구 사항 확인 요약 입니다. 정처기 공부를 할 때 활용하세요."}}},{"node":{"frontmatter":{"type":null,"title":"[파이썬] itertools 에 대해서 알아보자","images":["images/4.jpg"],"path":"/[파이썬] itertools 에 대해서 알아보자/","tags":["파이썬","itertools","알고리즘"],"date":"2020-07-15T17:00:00.000Z","summary":"파이썬으로 순열, 조합을 빠르게 구해주는 라이브러리"}}},{"node":{"frontmatter":{"type":null,"title":"[백준 2042번] 구간 합","images":["images/baekjoon.png"],"path":"/[백준 2042번] 구간 합/","tags":["백준","세그먼트 트리","구간합"],"date":"2020-07-06T22:06:00.000Z","summary":"[백준 2042번] 구간 합 문제입니다."}}},{"node":{"frontmatter":{"type":null,"title":"[파이썬] 파이썬을 이용한 이진탐색트리 구현","images":["images/4.jpg"],"path":"/[파이썬] 파이썬을 이용한 이진탐색트리 구현/","tags":["파이썬","알고리즘","이진탐색트리"],"date":"2020-07-06T22:06:00.000Z","summary":"파이썬을 이용한 이진탐색트리 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(12)-제품 소프트웨어 패키징","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(12)-제품 소프트웨어 패키징/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-12T02:16:54.000Z","summary":"제품 소프트웨어 패키징"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(11)-응용 SW 기초 기술 활용","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(11)-응용 SW 기초 기술 활용/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-11T22:06:00.000Z","summary":"응용 SW 기초 기술 활용"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(10)-프로그래밍 언어 활용(3)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(10)-프로그래밍 언어 활용(3)/","tags":["정보처리기사 실기","정보처리기사","프로그래밍 언어 활용"],"date":"2020-06-10T02:16:03.000Z","summary":"프로그래밍 언어 활용 03. 프로그래밍 예제 및 알고리즘"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(10)-프로그래밍 언어 활용(2)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(10)-프로그래밍 언어 활용(2)/","tags":["정보처리기사 실기","정보처리기사","프로그래밍 언어 활용"],"date":"2020-06-10T02:16:02.000Z","summary":"프로그래밍 언어 활용 02. 언어 특성 활용하기"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(10)-프로그래밍 언어 활용(1)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(10)-프로그래밍 언어 활용(1)/","tags":["정보처리기사 실기","정보처리기사","프로그래밍 언어 활용"],"date":"2020-06-10T02:16:01.000Z","summary":"프로그래밍 언어 활용 01. 기본 문법 활용하기"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-06-10T02:01:00.000Z","summary":"소프트웨어 설계"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-06-10T01:00:00.000Z","summary":"프로그래밍 언어 활용"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-06-09T03:05:00.000Z","summary":"정보시스템 구축 관리"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(9)-소프트웨어 개발 보안 구축","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(9)-소프트웨어 개발 보안 구축/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-09T02:16:54.000Z","summary":"소프트웨어 개발 보안 구축"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(8)-SQL 응용(2)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(8)-SQL 응용(2)/","tags":["정보처리기사 실기","정보처리기사","SQL 응용"],"date":"2020-06-08T18:06:02.000Z","summary":"SQL 응용 01. 절차형 SQL 작성하기"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(8)-SQL 응용(1)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(8)-SQL 응용(1)/","tags":["정보처리기사 실기","정보처리기사","SQL 응용"],"date":"2020-06-08T18:06:01.000Z","summary":"SQL 응용 01. 절차형 SQL 작성하기"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-06-08T05:00:00.000Z","summary":"데이터베이스 구축"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(7)-애플리케이션 테스트 관리","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(7)-애플리케이션 테스트 관리/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-07T22:06:00.000Z","summary":"애플리케이션 테스트 관리"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(6)-화면설계","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(6)-화면설계/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-06T02:00:00.000Z","summary":"화면설계"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(5)-인터페이스 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(5)-인터페이스 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-05T12:00:00.000Z","summary":"인터페이스 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-04T15:15:00.000Z","summary":"서버 프로그램 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-04T15:15:00.000Z","summary":"서버 프로그램 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현(3)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현(3)/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-04T15:15:00.000Z","summary":"서버 프로그램 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현(4)","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(4)-서버 프로그램 구현(4)/","tags":["정보처리기사 실기","정보처리기사","서버 프로그램 구현"],"date":"2020-06-04T15:15:00.000Z","summary":"서버 프로그램 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(3)-통합 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(3)-통합 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-03T00:06:00.000Z","summary":"통합 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(3)-통합 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(3)-통합 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-03T00:06:00.000Z","summary":"통합 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(3)-통합 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(3)-통합 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-03T00:06:00.000Z","summary":"통합 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(2)-데이터 입출력 구현","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(2)-데이터 입출력 구현/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-02T22:06:00.000Z","summary":"데이터 입출력 구현"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 실기 요점 정리(1)-요구사항 확인","images":["images/1.jpg"],"path":"/2020 정보처리기사 실기 요점 정리(1)-요구사항 확인/","tags":["정보처리기사 실기","정보처리기사"],"date":"2020-06-01T18:06:00.000Z","summary":"요구사항 확인"}}},{"node":{"frontmatter":{"type":null,"title":"2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발","images":["images/2.jpg"],"path":"/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발/","tags":["정보처리기사 필기","정보처리기사"],"date":"2020-06-01T05:00:00.000Z","summary":"소프트웨어 개발"}}},{"node":{"frontmatter":{"type":"portfolio","title":"CAPTURE BLOG","images":["CaptureBlog/images/capture1.png","CaptureBlog/images/capture2.png","CaptureBlog/images/capture3.png","CaptureBlog/images/capture4.png","CaptureBlog/images/capture5.png","CaptureBlog/images/capture6.png"],"path":"/portfolios/CAPTURE BLOG/","tags":null,"date":"2020-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"LANGUAGE TOGETHER","images":["languageTogether/images/languagetogether.png","languageTogether/images/languagetogether2.png","languageTogether/images/languagetogether3.png","languageTogether/images/languagetogether4.png","languageTogether/images/languagetogether5.png","languageTogether/images/languagetogether6.png","languageTogether/images/languagetogether7.png","languageTogether/images/languagetogether8.png","languageTogether/images/languagetogether9.png"],"path":"/portfolios/LANGUAGE TOGETHER/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"portfolio","title":"MOVIE STAR","images":["moviestar/images/moviestar.png","moviestar/images/moviestar2.png","moviestar/images/moviestar3.png","moviestar/images/moviestar4.png"],"path":"/portfolios/MOVIE STAR/","tags":null,"date":"2018-01-01T00:00:00.000Z","summary":null}}},{"node":{"frontmatter":{"type":"resume","title":"Resume","images":null,"path":"/resume/","tags":null,"date":"2000-01-01T00:00:00.000Z","summary":null}}}]}},"pageContext":{}}}