{"version":3,"sources":["webpack:///./src/components/CategorizedList/index.jsx","webpack:///./src/templates/CategorizedList.jsx"],"names":["CategorizedList","data","location","page","getPage","category","pathname","split","allPosts","getPosts","filter","c","node","frontmatter","postCount","length","posts","slice","CONTENT_PER_PAGE","PostsWrapper","PREFIX","toUpperCase","name","content","map","images","tags","path","otherProps","Card","key","Pagination","prefix","propTypes","PropTypes","shape","isRequired","pageQuery","CategorizedListTemplate","props"],"mappings":"k7DAUA,IAAMA,EAAkB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzBC,EAAOC,YAAQF,GACVG,EAFmC,EAEvBH,EAASI,SAASC,MAAM,KAFD,MAGxCC,GAAQ,EACZP,EACGQ,YAFS,GAIJC,QACJ,gBAE6BC,EAF7B,EACEC,KACEC,YAAeR,SAFnB,OAIMA,IAAaM,MAEnBG,EAAYN,EAASO,OACrBC,EAAQR,EAASS,OACpBd,EAAO,GAAKe,mBACbf,EAAOe,oBAGT,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,yCAAWC,UAAX,OAAoBf,EAASgB,gBAC7B,0BACEC,KAAK,WACLC,QAAO,UAAKH,UAAL,OAAcf,EAASgB,kBAGhB,IAAjBL,EAAMD,OAAe,0CAAuB,KAC5CC,EAAMQ,KACL,oBACEZ,KACEC,YAAeY,EAFnB,EAEmBA,OAAQC,EAF3B,EAE2BA,KAAMC,EAFjC,EAEiCA,KAASC,EAF1C,qCAKE,kBAACC,EAAA,EAAD,GACEC,IAAKH,EACLA,KAAMA,EACNF,OAAQA,EACRC,KAAMA,GACFE,QAKZ,kBAACG,EAAA,EAAD,CACEC,OAAM,sBAAiB3B,EAAjB,KACNS,UAAWA,EACXZ,SAAUA,MAMlBF,EAAgBiC,UAAY,CAC1BhC,KAAMiC,IAAUC,MAAM,IAAIC,WAC1BlC,SAAUgC,IAAUC,MAAM,IAAIC,YAGjBpC,QC1DFqC,GAFEC,UANiB,SAAAC,GAAK,OACnC,kBAAC,IAAWA,EACV,kBAAC,EAAoBA,KAMH","file":"component---src-templates-categorized-list-jsx-6ae1d790929910677012.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport PostsWrapper from \"~/components/Common/PostsWrapper\";\r\nimport Card from \"~/components/Common/Card\";\r\nimport Pagination from \"~/components/Common/Pagination\";\r\nimport getPosts from \"~/utils/getPosts\";\r\nimport getPage from \"~/utils/getPage\";\r\nimport { PREFIX, CONTENT_PER_PAGE } from \"~/constants\";\r\n\r\nconst CategorizedList = ({ data, location }) => {\r\n  const page = getPage(location);\r\n  const [, , category] = location.pathname.split(\"/\");\r\n  const allPosts =\r\n    data\r\n    |> getPosts\r\n    |> ((posts) =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { category: c },\r\n          },\r\n        }) => category === c\r\n      ));\r\n  const postCount = allPosts.length;\r\n  const posts = allPosts.slice(\r\n    (page - 1) * CONTENT_PER_PAGE,\r\n    page * CONTENT_PER_PAGE\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <PostsWrapper>\r\n        <Helmet>\r\n          <title>{`${PREFIX}${category.toUpperCase()}`}</title>\r\n          <meta\r\n            name=\"og:title\"\r\n            content={`${PREFIX}${category.toUpperCase()}`}\r\n          />\r\n        </Helmet>\r\n        {posts.length === 0 ? <div>No posts.</div> : null}\r\n        {posts.map(\r\n          ({\r\n            node: {\r\n              frontmatter: { images, tags, path, ...otherProps },\r\n            },\r\n          }) => (\r\n            <Card\r\n              key={path}\r\n              path={path}\r\n              images={images}\r\n              tags={tags}\r\n              {...otherProps}\r\n            />\r\n          )\r\n        )}\r\n      </PostsWrapper>\r\n      <Pagination\r\n        prefix={`/categories/${category}/`}\r\n        postCount={postCount}\r\n        location={location}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nCategorizedList.propTypes = {\r\n  data: PropTypes.shape({}).isRequired,\r\n  location: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default CategorizedList;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '~/components/layout';\r\nimport CategorizedList from '~/components/CategorizedList';\r\n\r\nconst CategorizedListTemplate = props => (\r\n  <Layout {...props}>\r\n    <CategorizedList {...props} />\r\n  </Layout>\r\n);\r\n\r\nexport default CategorizedListTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query CategorizedListQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n        homepage\r\n      }\r\n    }\r\n    posts: allMarkdownRemark (\r\n      filter: { frontmatter: { hide: { ne: true } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            type\r\n            title\r\n            category\r\n            images\r\n            path\r\n            tags\r\n            date\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}