{"version":3,"sources":["webpack:///./src/components/TaggedList/moon.png","webpack:///./src/components/TaggedList/index.jsx","webpack:///./src/templates/TaggedList.jsx"],"names":["module","exports","TagWrapper","styled","div","TaggedList","data","location","page","getPage","tag","pathname","split","allPosts","getPosts","filter","node","frontmatter","tags","indexOf","decodeURI","postCount","length","posts","slice","CONTENT_PER_PAGE","tagSet","type","Object","entries","map","item","push","tagResult","reduce","object","currentValue","key","tagResults","i","PostsWrapper","name","content","Grid","container","className","xs","to","src","moon","images","path","otherProps","Card","Pagination","prefix","propTypes","PropTypes","shape","isRequired","pageQuery","TaggedListTemplate","props"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,oD,27DCc3C,IAAMC,EAAaC,IAAOC,IAAV,yEAAGD,CAAH,y7BA6EVE,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACpBC,EAAOC,YAAQF,GACVG,EAF8B,EAEvBH,EAASI,SAASC,MAAM,KAFD,MAUnCC,EAPUC,YAASR,GAAMS,QAC7B,mBAIwC,IAJxC,EACEC,KACEC,YAAeC,KAERC,QAAQC,UAAUV,OAGzBW,EAAYR,EAASS,OACrBC,EAAQV,EAASW,OACpBhB,EAAO,GAAKiB,mBACbjB,EAAOiB,oBAGHC,EAAS,GACfZ,YAASR,GAAMS,QAAO,oBAAGC,KAAQC,YAAeU,EAA1B,EAA0BA,KAAMT,EAAhC,EAAgCA,KAAhC,OACX,OAATS,EACIC,OAAOC,QAAQX,GAAMY,KAAI,SAACC,GAAD,OAAUL,EAAOM,KAAKD,EAAK,OACpD,MAGN,IAAME,EAAYP,EAAOQ,QAAO,SAACC,EAAQC,GAKvC,OAJKD,EAAOC,KACVD,EAAOC,GAAgB,CAAEC,IAAKD,EAAcd,OAAQ,IAEtDa,EAAOC,GAAP,SACOD,IACN,IACGG,EAAa,GACnB,IAAK,IAAIC,KAAKN,EACZK,EAAWN,KAAKC,EAAUM,IAE5B,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,+BAAQpB,UAAUV,IAClB,0BAAM+B,KAAK,WAAWC,QAAStB,UAAUV,MAE3C,kBAACR,EAAD,KACE,kBAACyC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,gBACvBP,EAAWR,KAAI,gBAAGO,EAAH,EAAGA,IAAH,EAAQf,OAAR,OACd,kBAACqB,EAAA,EAAD,CAAMZ,MAAI,EAACe,GAAI,EAAGT,IAAKA,GACrB,wBAAIQ,UAAU,gBACZ,kBAAC,OAAD,CAAME,GAAE,gBAAWV,EAAX,OAAqBA,SAKrC,yBAAKW,IAAKC,MAEV,wBAAIJ,UAAU,iBAAiBzB,UAAUV,IACzC,wBAAImC,UAAU,kBAAd,OAGgB,IAAjBtB,EAAMD,OAAe,0CAAuB,KAC5CC,EAAMO,KACL,oBACEd,KACEC,YAAeiC,EAFnB,EAEmBA,OAAQhC,EAF3B,EAE2BA,KAAMiC,EAFjC,EAEiCA,KAASC,EAF1C,qCAKE,kBAACC,EAAA,EAAD,GACEhB,IAAKc,EACLA,KAAMA,EACNjC,KAAMA,EACNgC,OAAQA,GACJE,QAKZ,kBAACE,EAAA,EAAD,CACEC,OAAM,gBAAW7C,EAAX,KACNW,UAAWA,EACXd,SAAUA,MAMlBF,EAAWmD,UAAY,CACrBlD,KAAMmD,IAAUC,MAAM,IAAIC,WAC1BpD,SAAUkD,IAAUC,MAAM,IAAIC,YAGjBtD,QCvKFuD,GAFEC,UANY,SAAAC,GAAK,OAC9B,kBAAC,IAAWA,EACV,kBAAC,EAAeA,KAME","file":"component---src-templates-tagged-list-jsx-60596e5a44674ade85ef.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/moon-62a08f42ca1f8af3cd82ef580e951ba4.png\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport PostsWrapper from \"~/components/Common/PostsWrapper\";\r\nimport Card from \"~/components/Common/Card\";\r\nimport Pagination from \"~/components/Common/Pagination\";\r\nimport getPosts from \"~/utils/getPosts\";\r\nimport getPage from \"~/utils/getPage\";\r\nimport { CONTENT_PER_PAGE } from \"~/constants\";\r\nimport styled from \"styled-components\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport moon from \"./moon.png\";\r\nimport { Link } from \"gatsby\";\r\n\r\nconst TagWrapper = styled.div`\r\n  .Wrapper {\r\n    width: 40%;\r\n    margin: 10px auto;\r\n    position: relative;\r\n  }\r\n\r\n  img {\r\n    width: 40%;\r\n    opacity: 0.4;\r\n    vertical-align: middle;\r\n    position: relative;\r\n    left: 50%;\r\n    margin-top: 40vh;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  .Wrapper-Grid {\r\n    display: flex;\r\n    align-items: center;\r\n    text-align: center;\r\n    justify-content: center;\r\n\r\n    position: absolute;\r\n    width: 400px;\r\n    z-index: 10;\r\n    margin-top: 400px;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n  .Wrapper-text {\r\n    color: white;\r\n    font-weight: 800;\r\n    text-shadow: 2px 2px 20px gray;\r\n    font-size: 12px;\r\n  }\r\n  .Wrapper-title {\r\n    color: white;\r\n    font-weight: 800;\r\n    margin-top: -80vh;\r\n\r\n    text-shadow: 4px 4px 40px white;\r\n    font-size: 40px;\r\n    position: relative;\r\n    text-align: center;\r\n    animation: blink 1.2s ease-in-out infinite alternate;\r\n\r\n    @keyframes blink {\r\n      50% {\r\n        opacity: 0.5;\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n  .Wrapper-titles {\r\n    color: white;\r\n    font-weight: 800;\r\n    margin-bottom: 50vh;\r\n\r\n    text-shadow: 4px 4px 40px white;\r\n    font-size: 20px;\r\n    position: relative;\r\n    text-align: center;\r\n    animation: blink 1.2s ease-in-out infinite alternate;\r\n\r\n    @keyframes blink {\r\n      50% {\r\n        opacity: 0.5;\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst TaggedList = ({ data, location }) => {\r\n  const page = getPage(location);\r\n  const [, , tag] = location.pathname.split(\"/\");\r\n  const edgeSet = getPosts(data).filter(\r\n    ({\r\n      node: {\r\n        frontmatter: { tags },\r\n      },\r\n    }) => tags.indexOf(decodeURI(tag)) !== -1\r\n  );\r\n  const allPosts = edgeSet;\r\n  const postCount = allPosts.length;\r\n  const posts = allPosts.slice(\r\n    (page - 1) * CONTENT_PER_PAGE,\r\n    page * CONTENT_PER_PAGE\r\n  );\r\n  // 태그셋\r\n  const tagSet = [];\r\n  getPosts(data).filter(({ node: { frontmatter: { type, tags } } }) =>\r\n    type === null\r\n      ? Object.entries(tags).map((item) => tagSet.push(item[1]))\r\n      : \"\"\r\n  );\r\n\r\n  const tagResult = tagSet.reduce((object, currentValue) => {\r\n    if (!object[currentValue]) {\r\n      object[currentValue] = { key: currentValue, length: 0 };\r\n    }\r\n    object[currentValue][\"length\"]++;\r\n    return object;\r\n  }, {});\r\n  const tagResults = [];\r\n  for (var i in tagResult) {\r\n    tagResults.push(tagResult[i]);\r\n  }\r\n  return (\r\n    <>\r\n      <PostsWrapper>\r\n        <Helmet>\r\n          <title>{decodeURI(tag)}</title>\r\n          <meta name=\"og:title\" content={decodeURI(tag)} />\r\n        </Helmet>\r\n        <TagWrapper>\r\n          <Grid container className=\"Wrapper-Grid\">\r\n            {tagResults.map(({ key, length }) => (\r\n              <Grid item xs={3} key={key}>\r\n                <h1 className=\"Wrapper-text\">\r\n                  <Link to={`/tags/${key}/1`}>{key}</Link>\r\n                </h1>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n          <img src={moon} />\r\n\r\n          <h1 className=\"Wrapper-title\">{decodeURI(tag)}</h1>\r\n          <h1 className=\"Wrapper-titles\">태그</h1>\r\n        </TagWrapper>\r\n\r\n        {posts.length === 0 ? <div>No posts.</div> : null}\r\n        {posts.map(\r\n          ({\r\n            node: {\r\n              frontmatter: { images, tags, path, ...otherProps },\r\n            },\r\n          }) => (\r\n            <Card\r\n              key={path}\r\n              path={path}\r\n              tags={tags}\r\n              images={images}\r\n              {...otherProps}\r\n            />\r\n          )\r\n        )}\r\n      </PostsWrapper>\r\n      <Pagination\r\n        prefix={`/tags/${tag}/`}\r\n        postCount={postCount}\r\n        location={location}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nTaggedList.propTypes = {\r\n  data: PropTypes.shape({}).isRequired,\r\n  location: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default TaggedList;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '~/components/layout';\r\nimport TaggedList from '~/components/TaggedList';\r\n\r\nconst TaggedListTemplate = props => (\r\n  <Layout {...props}>\r\n    <TaggedList {...props} />\r\n  </Layout>\r\n);\r\n\r\nexport default TaggedListTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query TaggedListQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n        homepage\r\n      }\r\n    }\r\n    posts: allMarkdownRemark (\r\n      filter: { frontmatter: { hide: { ne: true } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            type\r\n            title\r\n            images\r\n            path\r\n            tags\r\n            date\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}