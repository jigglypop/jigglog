{"version":3,"sources":["webpack:///./src/components/CategorizedList/styled.tsx","webpack:///./src/components/CategorizedList/index.tsx","webpack:///./src/customhooks/pagecount.tsx","webpack:///./src/templates/TaggedList.jsx"],"names":["TagButton","styled","div","ListImage","ListTitle","ListCategory","ListContent","ListPage","LargeWrapper","ListWrapper","ClipText","CategorizedList","title","data","location","postId","useSelector","state","pageList","posts","postAll","error","loading","dispatch","useDispatch","useEffect","pageListAll","cleanPageList","setPages","readCount","usePageCount","window","pathname","useState","page","setPage","category","split","tag","categoryEdge","getPosts","filter","c","node","frontmatter","decodeURI","tagEdge","tags","indexOf","allPosts","postCount","length","categorySet","slice","CONTENT_PER_PAGE","type","push","result","reduce","object","currentValue","key","results","i","setResult","post","PostsWrapper","name","content","map","style","display","to","item","Card","path","images","date","summary","count","Pagination","Math","ceil","size","onChange","_","value","listStyle","color","marginBottom","TaggedListTemplate","props","pageQuery"],"mappings":"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","file":"component---src-templates-tagged-list-jsx-7f479263ec2133ea4464.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const TagButton = styled.div`\r\n  transition: all 0.2s ease-in-out;\r\n  transition: 0.5s;\r\n  background-color: transparent;\r\n  h4 {\r\n    font-size: 14px;\r\n    font-weight: 800;\r\n    padding: 10px;\r\n    color:  #FF416C;\r\n  }\r\n  cursor: pointer;\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nexport const ListImage = styled.div`\r\n  grid-row: 1/2;\r\n  background-image: url(\"/back.jpg\");\r\n  background-size: cover;\r\n`;\r\n\r\nexport const ListTitle = styled.div`\r\n  grid-row: 2/3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  background-color: black;\r\n  h3 {\r\n    font-size: 32px;\r\n    font-weight: 800;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport const ListCategory = styled.div`\r\n  grid-row: 3/4;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  background-color: black;\r\n  overflow: scroll;\r\n  h3 {\r\n    font-size: 28px;\r\n    font-weight: 800;\r\n    color: white;\r\n  }\r\n  /* padding: 5%; */\r\n`;\r\n\r\nexport const ListContent = styled.div`\r\n  grid-row: 4/5;\r\n`;\r\n\r\nexport const ListPage = styled.div`\r\n  grid-row: 5/6;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n`;\r\n\r\n\r\n\r\nexport const LargeWrapper = styled.div`\r\n  width: 100%;\r\n  background: rgb(31, 31, 36);\r\n  box-shadow: 6px 6px 8px black;\r\n  .pagination {\r\n    margin-top: 5%;\r\n    margin-left: 45%;\r\n  }\r\n  padding-bottom: 1%;\r\n`;\r\n\r\nexport const ListWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-rows: 200px 100px 100px 1fr 200px;\r\n`;\r\n\r\n\r\nexport const ClipText = styled.div`\r\n  background-size: cover;\r\n  position: relative;\r\n  height: 100%;\r\n\r\n  h1 {\r\n    background-color: black;\r\n    color: white;\r\n    font-size: 10vw;\r\n    font-weight: 800;\r\n    margin: 0 auto;\r\n    padding: 10px;\r\n    width: 95%;\r\n    text-align: center;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    mix-blend-mode: multiply;\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport Card from \"../../components/Common/Card\";\r\nimport getPosts, { IData } from \"../../utils/getPosts\";\r\nimport { CONTENT_PER_PAGE } from \"../../constants\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { Link } from \"gatsby\";\r\nimport PostsWrapper from \"../Common/PostsWrapper\";\r\nimport { \r\n  TagButton,\r\n  LargeWrapper,\r\n  ClipText,\r\n  ListWrapper, \r\n  ListImage, \r\n  ListTitle, \r\n  ListContent, \r\n  ListPage, \r\n  ListCategory\r\n} from './styled'\r\nimport { usePageCount } from \"../../customhooks/pagecount\";\r\n\r\nconst CategorizedList = ({ title, data, location }: any) => {\r\n  const { posts, postAll, error, loading, setPages } = usePageCount({ postId : window.location.pathname })\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [, , category] = location.pathname.split(\"/\");\r\n  const [, , tag] = location.pathname.split(\"/\");\r\n\r\n  const categoryEdge : any = getPosts(data).filter(\r\n    ({\r\n      node: {\r\n        frontmatter: { \r\n          category: c \r\n        },\r\n      },\r\n    }) => decodeURI(category) === c\r\n  );\r\n  const tagEdge = getPosts(data).filter(\r\n    ({\r\n      node: {\r\n        frontmatter: { tags },\r\n      },\r\n    }) => tags.indexOf(decodeURI(tag)) !== -1\r\n  );\r\n  const edgeSet = title[0] === 'CATEGORY' ? categoryEdge : tagEdge\r\n\r\n  const allPosts = edgeSet;\r\n  const postCount = allPosts.length;\r\n  const postPage = allPosts.slice(\r\n    (page - 1) * CONTENT_PER_PAGE,\r\n    page * CONTENT_PER_PAGE\r\n  );\r\n  const handleChange = (_ : any, value : any) => {\r\n    setPage(value);\r\n  };\r\n\r\n  const categorySet : any = [];\r\n  getPosts(data).filter(({ node: { frontmatter: { type, category, tags } } }) =>\r\n    type === null ? title[0] === 'CATEGORY' ? categorySet.push(category) : categorySet.push(...tags) : \"\"\r\n  );\r\n  const result : any = categorySet.reduce((object : any, currentValue : any) => {\r\n    if (!object[currentValue]) {\r\n      object[currentValue] = { key: currentValue, length: 0 };\r\n    }\r\n    object[currentValue][\"length\"]++;\r\n    return object;\r\n  }, {});\r\n\r\n  const results: any = [];\r\n  for (var i in result) {\r\n    results.push(result[i]);\r\n  }\r\n\r\n  const setResult : any = []\r\n  for (let post of allPosts){\r\n    setResult.push(post.node.frontmatter)\r\n  }\r\n\r\n  useEffect(()=>{\r\n    setPages(setResult)\r\n  }, [])\r\n  if (postAll){\r\n    return (\r\n      <>\r\n        <PostsWrapper>\r\n          <Helmet>\r\n            <title>{decodeURI(category)}</title>\r\n            <meta name=\"og:title\" content={decodeURI(category)} />\r\n          </Helmet>\r\n          <LargeWrapper>\r\n            <ListWrapper>\r\n              <ListImage>\r\n                <ClipText>\r\n                  <h1>{title[0]}</h1>\r\n                </ClipText>\r\n              </ListImage>\r\n              <ListTitle>\r\n                  <h3>{title[1]}</h3>\r\n              </ListTitle>\r\n              <ListCategory>\r\n                <div>\r\n                {results && results.map(({ key, length }: any) => (\r\n                  <div style={{ display: \"inline-block\"}}>\r\n                    <Link to={title[0] === 'CATEGORY' ? `/categories/${key}/1` : `/tags/${key}/1`}>\r\n                      <TagButton>\r\n                        <h4>#{key}</h4>\r\n                      </TagButton>\r\n                    </Link>\r\n                  </div>\r\n                ))}\r\n                </div>\r\n              </ListCategory>\r\n              <ListContent>\r\n              {postAll.map ? postAll.map(\r\n                (item : any) => (\r\n                  <Card\r\n                    key={item.path}\r\n                    path={item.path}\r\n                    images={item.images}\r\n                    tags={item.tags}                  \r\n                    title={item.title}\r\n                    date={item.date}\r\n                    summary={item.summary}\r\n                    count={item.count}\r\n                  />\r\n                )\r\n              ) : <div></div>}\r\n              </ListContent>\r\n              <ListPage>\r\n              <Pagination\r\n                  count={Math.ceil(postCount / CONTENT_PER_PAGE)}\r\n                  page={page}\r\n                  size=\"large\"\r\n                  onChange={handleChange}\r\n                  style={{\r\n                    listStyle: \"none\",\r\n                    color: \"primary\",\r\n                    marginBottom: \"100px\",\r\n                  }}\r\n                />\r\n              </ListPage>\r\n            </ListWrapper>\r\n          </LargeWrapper>\r\n        </PostsWrapper>\r\n      </>\r\n    );\r\n  } else{\r\n    return <></>;\r\n  }\r\n\r\n\r\n};\r\n\r\n\r\nexport default CategorizedList;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../module\";\r\nimport { useEffect } from \"react\";\r\nimport { readCount, pageList, pageListAll, cleanPageList } from \"../module/pageList\";\r\n\r\nexport function usePageCount({ postId }: any) {\r\n    const { posts, postAll,  data, error, loading } = useSelector((state: RootState) => state.pageList);\r\n    const dispatch = useDispatch()\r\n\r\n    const setPages = (posts : any) => {\r\n        dispatch(readCount(posts))\r\n        dispatch(cleanPageList()) \r\n    }\r\n\r\n    useEffect(()=>{\r\n        if (data){\r\n            dispatch(pageListAll(data))\r\n        }\r\n        return () => {\r\n            dispatch(cleanPageList()) \r\n        }\r\n    }, [data])\r\n\r\n\r\n    return { posts, postAll, data, error, loading, setPages };\r\n}","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '~/components/layout';\r\nimport CategorizedList from '~/components/CategorizedList';\r\n\r\nconst TaggedListTemplate = props => (\r\n  <Layout {...props}>\r\n    <CategorizedList title={[\"TAG\", \"태그\"]} {...props} />\r\n  </Layout>\r\n);\r\n\r\nexport default TaggedListTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query TaggedListQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n        homepage\r\n      }\r\n    }\r\n    posts: allMarkdownRemark (\r\n      filter: { frontmatter: { hide: { ne: true } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            type\r\n            title\r\n            images\r\n            path\r\n            tags\r\n            date\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}