{"version":3,"sources":["webpack:///./src/components/Common/TagItem/index.js","webpack:///./src/components/TaggedList/index.jsx","webpack:///./src/templates/TaggedList.jsx"],"names":["TagItem","styled","div","TaggedList","data","location","useState","page","setPage","tag","pathname","split","allPosts","getPosts","filter","node","frontmatter","tags","indexOf","decodeURI","postCount","length","posts","slice","CONTENT_PER_PAGE","tagSet","type","Object","entries","map","item","push","tagResult","reduce","object","currentValue","key","tagResults","i","PostsWrapper","name","content","ImageWrapper","className","src","moon","Grid","container","style","justifyContent","to","images","path","otherProps","Card","Pagination","count","Math","ceil","size","onChange","event","value","listStyle","color","marginBottom","propTypes","PropTypes","shape","isRequired","pageQuery","TaggedListTemplate","props"],"mappings":"2eA4BeA,E,UA1BCC,QAAOC,IAAV,8DAAGD,CAAH,6U,0gDC6Hb,IAAME,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,IACjBC,mBAAS,GADQ,GAClCC,EADkC,KAC5BC,EAD4B,KAE9BC,EAF8B,EAEvBJ,EAASK,SAASC,MAAM,KAFD,MAUnCC,EAPUC,YAAST,GAAMU,QAC7B,mBAIwC,IAJxC,EACEC,KACEC,YAAeC,KAERC,QAAQC,UAAUV,OAGzBW,EAAYR,EAASS,OACrBC,EAAQV,EAASW,OACpBhB,EAAO,GAAKiB,mBACbjB,EAAOiB,oBAMHC,EAAS,GACfZ,YAAST,GAAMU,QAAO,oBAAGC,KAAQC,YAAeU,EAA1B,EAA0BA,KAAMT,EAAhC,EAAgCA,KAAhC,OACX,OAATS,EACIC,OAAOC,QAAQX,GAAMY,KAAI,SAACC,GAAD,OAAUL,EAAOM,KAAKD,EAAK,OACpD,MAGN,IAAME,EAAYP,EAAOQ,QAAO,SAACC,EAAQC,GAKvC,OAJKD,EAAOC,KACVD,EAAOC,GAAgB,CAAEC,IAAKD,EAAcd,OAAQ,IAEtDa,EAAOC,GAAP,SACOD,IACN,IACGG,EAAa,GACnB,IAAK,IAAIC,KAAKN,EACZK,EAAWN,KAAKC,EAAUM,IAE5B,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,+BAAQpB,UAAUV,IAClB,0BAAM+B,KAAK,WAAWC,QAAStB,UAAUV,MAoB3C,kBAACiC,EAAA,EAAD,KACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,KACE,yBAAKC,IAAKC,OAEZ,wBAAIF,UAAU,WAAWxB,UAAUV,IACnC,wBAAIkC,UAAU,YAAd,QAGJ,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAAEC,eAAgB,WACtCZ,EAAWR,KAAI,gBAAGO,EAAH,EAAGA,IAAH,EAAQf,OAAR,OACd,kBAACyB,EAAA,EAAD,CAAMhB,MAAI,EAACM,IAAKA,GACd,kBAAC,OAAD,CAAMc,GAAE,sBAAiBd,EAAjB,OACN,kBAAC,EAAD,KACE,gCAAMA,UAMhB,yBAAKO,UAAU,YACK,IAAjBrB,EAAMD,OAAe,0CAAuB,KAC5CC,EAAMO,KACL,oBACEd,KACEC,YAAemC,EAFnB,EAEmBA,OAAQlC,EAF3B,EAE2BA,KAAMmC,EAFjC,EAEiCA,KAASC,EAF1C,qCAKE,kBAACC,EAAA,EAAD,GACElB,IAAKgB,EACLA,KAAMA,EACNnC,KAAMA,EACNkC,OAAQA,GACJE,OAIV,kBAACE,EAAA,EAAD,CACEC,MAAOC,KAAKC,KAAKtC,EAAYI,oBAC7BjB,KAAMA,EACNoD,KAAK,QACLC,SAxFW,SAACC,EAAOC,GAC3BtD,EAAQsD,IAwFAd,MAAO,CACLe,UAAW,OACXC,MAAO,UACPC,aAAc,eAS5B9D,EAAW+D,UAAY,CACrB9D,KAAM+D,IAAUC,MAAM,IAAIC,WAC1BhE,SAAU8D,IAAUC,MAAM,IAAIC,YAGjBlE,QC5OFmE,GAFEC,UANY,SAAAC,GAAK,OAC9B,kBAAC,IAAWA,EACV,kBAAC,EAAeA,KAME","file":"component---src-templates-tagged-list-jsx-0acc679ea0c4a9269bd9.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst TagItem = styled.div`\r\n  background: linear-gradient(45deg, #ee0979, #bc4e9c);\r\n  margin: 3px;\r\n  padding-left: 6px;\r\n  padding-right: 6px;\r\n  padding-bottom: 3px;\r\n  padding-top: 3px;\r\n\r\n  border-radius: 10px;\r\n  h1 {\r\n    font-size: 10px;\r\n    font-weight: 800;\r\n  }\r\n  @media (max-width: 1000px) {\r\n    margin: 2px;\r\n    padding-left: 4px;\r\n    padding-right: 4px;\r\n    padding-bottom: 2px;\r\n    padding-top: 2px;\r\n    h1 {\r\n      font-size: 8px;\r\n      font-weight: 800;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default TagItem;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport Card from \"~/components/Common/Card\";\r\nimport getPosts from \"~/utils/getPosts\";\r\nimport { CONTENT_PER_PAGE } from \"~/constants\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"gatsby\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport MoonBackgroundAnimation from \"../base/common/LargeMoon.js\";\r\nimport moon from \"../../components/parallax/common/moon.webp\";\r\nimport styled from \"styled-components\";\r\nimport PostsWrapper from \"../Common/PostsWrapper\";\r\nimport ImageWrapper from \"../Common/ImageWrapper\";\r\nimport TagItem from \"../Common/TagItem\";\r\n// const ImageWrapper = styled.div`\r\n//   .jb-wrap {\r\n//     width: 400px;\r\n//     margin: 10px auto;\r\n//     position: relative;\r\n//   }\r\n//   .jb-wrap img {\r\n//     width: 100%;\r\n//     vertical-align: middle;\r\n//   }\r\n//   .jb-text {\r\n//     color: white;\r\n//     font-weight: 800;\r\n//     text-shadow: 2px 2px 20px gray;\r\n//     font-size: 35px;\r\n//     margin-top: -50px;\r\n//     text-align: center;\r\n//     position: absolute;\r\n//     top: 50%;\r\n//     left: 50%;\r\n//     transform: translate(-50%, -50%);\r\n//     animation: blink 1.2s ease-in-out infinite alternate;\r\n\r\n//     @keyframes blink {\r\n//       50% {\r\n//         opacity: 0.5;\r\n//       }\r\n//       100% {\r\n//         opacity: 1;\r\n//       }\r\n//     }\r\n//   }\r\n//   .jb-under {\r\n//     color: white;\r\n//     font-weight: 800;\r\n//     text-shadow: 2px 2px 20px gray;\r\n//     font-size: 25px;\r\n//     text-align: center;\r\n//     position: absolute;\r\n//     top: 50%;\r\n//     left: 50%;\r\n//     transform: translate(-50%, -50%);\r\n//   }\r\n//   .jb-tag {\r\n//     margin-top: 50px;\r\n//     color: white;\r\n//     z-index: 20;\r\n//     font-weight: 800;\r\n//     text-shadow: 2px 2px 20px gray;\r\n//     font-size: 12px;\r\n//   }\r\n//   h2 {\r\n//     margin: 2px;\r\n//   }\r\n//   @media (max-width: 1000px) {\r\n//     .jb-wrap {\r\n//       width: 300px;\r\n//       margin: 10px auto;\r\n//       position: relative;\r\n//     }\r\n//     .jb-wrap img {\r\n//       width: 100%;\r\n//       vertical-align: middle;\r\n//     }\r\n//     .jb-text {\r\n//       color: white;\r\n//       font-weight: 800;\r\n//       text-shadow: 2px 2px 20px gray;\r\n//       font-size: 20px;\r\n//       margin-top: -50px;\r\n//       text-align: center;\r\n//       position: absolute;\r\n//       top: 50%;\r\n//       left: 50%;\r\n//       transform: translate(-50%, -50%);\r\n//       animation: blink 1.2s ease-in-out infinite alternate;\r\n\r\n//       @keyframes blink {\r\n//         50% {\r\n//           opacity: 0.5;\r\n//         }\r\n//         100% {\r\n//           opacity: 1;\r\n//         }\r\n//       }\r\n//     }\r\n//     .jb-under {\r\n//       color: white;\r\n//       font-weight: 800;\r\n//       text-shadow: 2px 2px 20px gray;\r\n//       font-size: 15px;\r\n//       text-align: center;\r\n//       position: absolute;\r\n//       top: 50%;\r\n//       left: 50%;\r\n//       transform: translate(-50%, -50%);\r\n//     }\r\n//     .jb-tag {\r\n//       margin-top: 50px;\r\n//       color: white;\r\n//       z-index: 20;\r\n//       font-weight: 800;\r\n//       text-shadow: 2px 2px 20px gray;\r\n//       font-size: 10px;\r\n//     }\r\n//     h2 {\r\n//       margin: 2px;\r\n//     }\r\n//   }\r\n// `;\r\n\r\nconst TaggedList = ({ data, location }) => {\r\n  const [page, setPage] = useState(1);\r\n  const [, , tag] = location.pathname.split(\"/\");\r\n  const edgeSet = getPosts(data).filter(\r\n    ({\r\n      node: {\r\n        frontmatter: { tags },\r\n      },\r\n    }) => tags.indexOf(decodeURI(tag)) !== -1\r\n  );\r\n  const allPosts = edgeSet;\r\n  const postCount = allPosts.length;\r\n  const posts = allPosts.slice(\r\n    (page - 1) * CONTENT_PER_PAGE,\r\n    page * CONTENT_PER_PAGE\r\n  );\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n  // 태그셋\r\n  const tagSet = [];\r\n  getPosts(data).filter(({ node: { frontmatter: { type, tags } } }) =>\r\n    type === null\r\n      ? Object.entries(tags).map((item) => tagSet.push(item[1]))\r\n      : \"\"\r\n  );\r\n\r\n  const tagResult = tagSet.reduce((object, currentValue) => {\r\n    if (!object[currentValue]) {\r\n      object[currentValue] = { key: currentValue, length: 0 };\r\n    }\r\n    object[currentValue][\"length\"]++;\r\n    return object;\r\n  }, {});\r\n  const tagResults = [];\r\n  for (var i in tagResult) {\r\n    tagResults.push(tagResult[i]);\r\n  }\r\n  return (\r\n    <>\r\n      <PostsWrapper>\r\n        <Helmet>\r\n          <title>{decodeURI(tag)}</title>\r\n          <meta name=\"og:title\" content={decodeURI(tag)} />\r\n        </Helmet>\r\n        {/* <ImageWrapper>\r\n          <div className=\"jb-wrap\">\r\n            <MoonBackgroundAnimation>\r\n              <img src={moon} />\r\n            </MoonBackgroundAnimation>\r\n            <h1 className=\"jb-text\">{decodeURI(tag)}</h1>\r\n            <h1 className=\"jb-under\">태그</h1>\r\n            <Grid container className=\"jb-tag\">\r\n              {tagResults.map(({ key, length }) => (\r\n                <Grid key={key}>\r\n                  <h2>\r\n                    <Link to={`/tags/${key}/1`}>#{key}</Link>\r\n                  </h2>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </div>\r\n        </ImageWrapper> */}\r\n        <ImageWrapper>\r\n          <div className=\"jb-wrap\">\r\n            <MoonBackgroundAnimation>\r\n              <img src={moon} />\r\n            </MoonBackgroundAnimation>\r\n            <h1 className=\"jb-text\">{decodeURI(tag)}</h1>\r\n            <h1 className=\"jb-under\">태그</h1>\r\n          </div>\r\n        </ImageWrapper>\r\n        <Grid container style={{ justifyContent: \"center\" }}>\r\n          {tagResults.map(({ key, length }) => (\r\n            <Grid item key={key}>\r\n              <Link to={`/categories/${key}/1`}>\r\n                <TagItem>\r\n                  <h1>#{key}</h1>\r\n                </TagItem>\r\n              </Link>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <div className=\"cardpage\">\r\n          {posts.length === 0 ? <div>No posts.</div> : null}\r\n          {posts.map(\r\n            ({\r\n              node: {\r\n                frontmatter: { images, tags, path, ...otherProps },\r\n              },\r\n            }) => (\r\n              <Card\r\n                key={path}\r\n                path={path}\r\n                tags={tags}\r\n                images={images}\r\n                {...otherProps}\r\n              />\r\n            )\r\n          )}\r\n          <Pagination\r\n            count={Math.ceil(postCount / CONTENT_PER_PAGE)}\r\n            page={page}\r\n            size=\"large\"\r\n            onChange={handleChange}\r\n            style={{\r\n              listStyle: \"none\",\r\n              color: \"primary\",\r\n              marginBottom: \"100px\",\r\n            }}\r\n          />\r\n        </div>\r\n      </PostsWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nTaggedList.propTypes = {\r\n  data: PropTypes.shape({}).isRequired,\r\n  location: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default TaggedList;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '~/components/layout';\r\nimport TaggedList from '~/components/TaggedList';\r\n\r\nconst TaggedListTemplate = props => (\r\n  <Layout {...props}>\r\n    <TaggedList {...props} />\r\n  </Layout>\r\n);\r\n\r\nexport default TaggedListTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query TaggedListQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n        homepage\r\n      }\r\n    }\r\n    posts: allMarkdownRemark (\r\n      filter: { frontmatter: { hide: { ne: true } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            type\r\n            title\r\n            images\r\n            path\r\n            tags\r\n            date\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}