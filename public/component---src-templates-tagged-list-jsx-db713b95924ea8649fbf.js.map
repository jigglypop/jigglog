{"version":3,"sources":["webpack:///./src/components/base/common/moon.webp","webpack:///./src/components/base/common/Circle.js","webpack:///./src/components/base/common/LargeMoon.js","webpack:///./src/components/TaggedList/styled.js","webpack:///./src/components/TaggedList/index.jsx","webpack:///./src/templates/TaggedList.jsx"],"names":["module","exports","styled","animated","div","MoonBackgroundAnimation","keyframes","Circle","moon","CategoryWrapper","ListImage","ListTitle","ListCategory","ListContent","ListPage","TaggedList","data","location","useState","page","setPage","tag","pathname","split","allPosts","getPosts","filter","node","frontmatter","tags","indexOf","decodeURI","postCount","length","posts","slice","CONTENT_PER_PAGE","tagSet","type","Object","entries","map","item","push","tagResult","reduce","object","currentValue","key","tagResults","i","PostsWrapper","name","content","LargeWrapper","ClipText","Grid","to","OuterButton","images","path","otherProps","Card","Pagination","count","Math","ceil","size","onChange","event","value","style","listStyle","color","marginBottom","propTypes","PropTypes","shape","isRequired","pageQuery","TaggedListTemplate","props"],"mappings":"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","file":"component---src-templates-tagged-list-jsx-db713b95924ea8649fbf.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/moon-f3a8c40e82bf8b0f8d61a88ddb7d34e8.webp\";","import styled from \"styled-components\";\r\nimport { animated } from \"react-spring/renderprops\";\r\n\r\nexport default styled(animated.div)`\r\n  /*border: 4px solid ${(props) => props.color};*/\r\n  border-radius: 50%;\r\n`;\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nimport Circle from \"./Circle\";\r\nimport moon from \"./moon.webp\";\r\n// import moon from \"./moon.png\";\r\n\r\nconst MoonBackgroundAnimation = keyframes`\r\n  from {transform: rotate(0deg);}\r\n  to {transform: rotate(360deg);}\r\n`;\r\n\r\nexport default styled(Circle)`\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${moon});\r\n  background-size: cover;\r\n  animation: ${MoonBackgroundAnimation} 120s linear infinite;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const CategoryWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 200px 100px 100px 1fr 200px;\r\n`;\r\n\r\nexport const ListImage = styled.div`\r\n    grid-row: 1/2;\r\n`;\r\n\r\nexport const ListTitle = styled.div`\r\n    grid-row: 2/3;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    background-color: black;\r\n    h3 {\r\n        font-size: 32px;\r\n        font-weight: 800;\r\n        color: white;\r\n    }\r\n`;\r\n\r\nexport const ListCategory = styled.div`\r\n    grid-row: 3/4;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n    background-color: black;\r\n    overflow: scroll;\r\n    h3 {\r\n        font-size: 28px;\r\n        font-weight: 800;\r\n        color: white;\r\n    }\r\n`;\r\n\r\nexport const ListContent = styled.div`\r\n    grid-row: 4/5;\r\n`;\r\n\r\nexport const ListPage = styled.div`\r\n    grid-row: 5/6;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n`;","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport Card from \"~/components/Common/Card\";\r\nimport getPosts from \"~/utils/getPosts\";\r\nimport { CONTENT_PER_PAGE } from \"~/constants\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"gatsby\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport MoonBackgroundAnimation from \"../base/common/LargeMoon.js\";\r\nimport moon from \"../../components/parallax/common/moon.webp\";\r\n// import styled from \"styled-components\";\r\nimport PostsWrapper from \"../Common/PostsWrapper\";\r\nimport ImageWrapper from \"../Common/ImageWrapper\";\r\n// import TagItem from \"../Common/TagItem\";\r\nimport LargeWrapper from \"../Common/LargeWrapper\";\r\nimport OuterButton from \"../Common/OuterButton\";\r\nimport ClipText from \"../Common/ClipText\";\r\nimport { CategoryWrapper, ListImage, ListTitle, ListContent, ListPage, ListCategory } from './styled'\r\n\r\nconst TaggedList = ({ data, location }) => {\r\n  const [page, setPage] = useState(1);\r\n  const [, , tag] = location.pathname.split(\"/\");\r\n  const edgeSet = getPosts(data).filter(\r\n    ({\r\n      node: {\r\n        frontmatter: { tags },\r\n      },\r\n    }) => tags.indexOf(decodeURI(tag)) !== -1\r\n  );\r\n  const allPosts = edgeSet;\r\n  const postCount = allPosts.length;\r\n  const posts = allPosts.slice(\r\n    (page - 1) * CONTENT_PER_PAGE,\r\n    page * CONTENT_PER_PAGE\r\n  );\r\n  const handleChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n  // 태그셋\r\n  const tagSet = [];\r\n  getPosts(data).filter(({ node: { frontmatter: { type, tags } } }) =>\r\n    type === null\r\n      ? Object.entries(tags).map((item) => tagSet.push(item[1]))\r\n      : \"\"\r\n  );\r\n\r\n  const tagResult = tagSet.reduce((object, currentValue) => {\r\n    if (!object[currentValue]) {\r\n      object[currentValue] = { key: currentValue, length: 0 };\r\n    }\r\n    object[currentValue][\"length\"]++;\r\n    return object;\r\n  }, {});\r\n  const tagResults = [];\r\n  for (var i in tagResult) {\r\n    tagResults.push(tagResult[i]);\r\n  }\r\n  return (\r\n    <>\r\n      <PostsWrapper>\r\n        <Helmet>\r\n          <title>{decodeURI(tag)}</title>\r\n          <meta name=\"og:title\" content={decodeURI(tag)} />\r\n        </Helmet>\r\n        <LargeWrapper>\r\n          <CategoryWrapper>\r\n            <ListImage>\r\n              <ClipText>\r\n                <h1>TAGS</h1>\r\n              </ClipText>\r\n            </ListImage>\r\n            <ListTitle>\r\n                <h3>태그</h3>\r\n            </ListTitle>\r\n            <ListCategory>\r\n            {tagResults.map(({ key, length }) => (\r\n              <Grid item key={key}>\r\n                <Link to={`/tags/${key}/1`}>\r\n                  <OuterButton>\r\n                    <h4>#{key}</h4>\r\n                  </OuterButton>\r\n                </Link>\r\n              </Grid>\r\n            ))}\r\n            </ListCategory>\r\n            <ListContent>\r\n            {posts.length === 0 ? <div>No posts.</div> : null}\r\n            {posts.map(\r\n              ({\r\n                node: {\r\n                  frontmatter: { images, tags, path, ...otherProps },\r\n                },\r\n              }) => (\r\n                <Card\r\n                  key={path}\r\n                  path={path}\r\n                  tags={tags}\r\n                  images={images}\r\n                  {...otherProps}\r\n                />\r\n              )\r\n            )}\r\n            </ListContent>\r\n            <ListPage>\r\n            <Pagination\r\n                count={Math.ceil(postCount / CONTENT_PER_PAGE)}\r\n                page={page}\r\n                size=\"large\"\r\n                onChange={handleChange}\r\n                style={{\r\n                  listStyle: \"none\",\r\n                  color: \"primary\",\r\n                  marginBottom: \"100px\",\r\n                }}\r\n              />\r\n            </ListPage>\r\n          </CategoryWrapper>\r\n        </LargeWrapper>\r\n      </PostsWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nTaggedList.propTypes = {\r\n  data: PropTypes.shape({}).isRequired,\r\n  location: PropTypes.shape({}).isRequired,\r\n};\r\n\r\nexport default TaggedList;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '~/components/layout';\r\nimport TaggedList from '~/components/TaggedList';\r\n\r\nconst TaggedListTemplate = props => (\r\n  <Layout {...props}>\r\n    <TaggedList {...props} />\r\n  </Layout>\r\n);\r\n\r\nexport default TaggedListTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n  query TaggedListQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author\r\n        homepage\r\n      }\r\n    }\r\n    posts: allMarkdownRemark (\r\n      filter: { frontmatter: { hide: { ne: true } } }\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            type\r\n            title\r\n            images\r\n            path\r\n            tags\r\n            date\r\n            summary\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}