<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[jigglog]]></title><description><![CDATA[jigglog]]></description><link>https://jigglog.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 25 May 2021 11:51:33 GMT</lastBuildDate><item><title><![CDATA[MOIJA]]></title><link>https://jigglog.netlify.app/moija/</link><guid isPermaLink="false">https://jigglog.netlify.app/moija/</guid><pubDate>Wed, 02 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;noija&lt;/li&gt;
&lt;li&gt;개인프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;AWS S3, ec2, docker, route53&lt;/li&gt;
&lt;li&gt;node.js express&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;VUE/ VUEX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;기능 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기능&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;좋아요 기능&lt;/li&gt;
&lt;li&gt;팔로우 기능&lt;/li&gt;
&lt;li&gt;그룹 가입, 그룹 리스트&lt;/li&gt;
&lt;li&gt;프로필 업데이트&lt;/li&gt;
&lt;li&gt;CRUD 게시판 제공&lt;/li&gt;
&lt;li&gt;댓글, 대댓글기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[VUELOG]]></title><link>https://jigglog.netlify.app/vuelog/</link><guid isPermaLink="false">https://jigglog.netlify.app/vuelog/</guid><pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;vuelog&lt;/li&gt;
&lt;li&gt;개인프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;AWS S3, ec2&lt;/li&gt;
&lt;li&gt;node.js express&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;VUE/ VUEX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;전면 three.js 디자인&lt;/li&gt;
&lt;li&gt;CRUD 게시판 제공&lt;/li&gt;
&lt;li&gt;댓글기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[DT CENTER]]></title><link>https://jigglog.netlify.app/dtcenter/</link><guid isPermaLink="false">https://jigglog.netlify.app/dtcenter/</guid><pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;DT 물류센터 시뮬레이터&lt;/li&gt;
&lt;li&gt;물류 시뮬레이션 프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;DATABASE&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;My SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;li&gt;NODE.JS EXPRESS&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;REACT&lt;/li&gt;
&lt;li&gt;REDUX&lt;/li&gt;
&lt;li&gt;THREE.JS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;기업 회원 로그인 기능&lt;/li&gt;
&lt;li&gt;전면 3D 디자인&lt;/li&gt;
&lt;li&gt;1층, 2층 카메라 바로가기&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[COLORBERRY]]></title><link>https://jigglog.netlify.app/ColorBerry/</link><guid isPermaLink="false">https://jigglog.netlify.app/ColorBerry/</guid><pubDate>Sun, 20 Feb 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;COLORBERRY 3D 웹 싸피 팀 프로젝트&lt;/li&gt;
&lt;li&gt;three.js 를 이용한 3D 웹 프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;DATABASE&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;My SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;li&gt;DJANGO&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;REACT&lt;/li&gt;
&lt;li&gt;REDUX&lt;/li&gt;
&lt;li&gt;THREE.JS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;3D 웹페이지 구현. 카메라 컨트롤 시점 이동, 포스트 6개에 따른 장소 이동 페이지네이션 구현&lt;/li&gt;
&lt;li&gt;포스트 6개 단위로 새로운 미술 관람실을 생성하면서 페이지네이션&lt;/li&gt;
&lt;li&gt;기타 조명 기능&lt;/li&gt;
&lt;li&gt;3D 포스트 기능&lt;/li&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;포스트 CRUD 기능&lt;/li&gt;
&lt;li&gt;댓글 기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(3)/</guid><pubDate>Fri, 07 May 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용(Vue) 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;vuex&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex&quot; aria-label=&quot;vuex permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VUEX&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue.js 애플리케이션을 위한 상태 관리 패턴 + 라이브러리(Flux에서 영감을 받은 애플리케이션 아키텍처)&lt;/li&gt;
&lt;li&gt;예측 가능한 방식으로만 상태가 변경될 수 있도록 보장하는 규칙을 가지고 있음&lt;/li&gt;
&lt;li&gt;애플리케이션의 모든 컴포넌트를 위한 중앙 집중식 저장소&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;상태 관리 패턴의 주요 구성 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상태 : 앱을 구동시키는 원천&lt;/li&gt;
&lt;li&gt;뷰 : 상태의 선언적 매핑&lt;/li&gt;
&lt;li&gt;액션 : 뷰에서 사용자 입력에 반응하여 상태가 변할 수 있도록 하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// state&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// view&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;div&gt;{{ count }}&amp;lt;/div&gt;
  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// actions&lt;/span&gt;
  methods&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;단방향 데이터 흐름 모델&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;props 속성을 통해 단방향 데이터 흐름 모델을 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/sudheerj/vuejs-interview-questions/raw/master/images/flow.png&quot; alt=&quot;img&quot; style=&quot;zoom: 33%;&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;vuejs-loader는-무엇입니까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuejs-loader%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9E%85%EB%8B%88%EA%B9%8C&quot; aria-label=&quot;vuejs loader는 무엇입니까 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuejs loader는 무엇입니까?&lt;/h3&gt;
&lt;p&gt;Vue loader는 Vue 컴포넌트를 싱글 파일 컴포넌트(SFC, SFCs)라고 하는 형식으로 작성할 수 있는 웹팩용 로더입니다. 예를 들어 &lt;code class=&quot;language-text&quot;&gt;HelloWorld&lt;/code&gt; 라는 SFC를 작성하면 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;
 &amp;lt;div class=&amp;quot;greeting&amp;quot;&amp;gt;{{ message }}&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
 data () {
   return {
     message: &amp;#39;Hello world for vueloader!&amp;#39;
   }
 }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
.greeting {
 color: blue;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;웹팩에서 vue loader 설정&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Vue-Loader&lt;/code&gt;의 설정은 웹팩 설정에 Vue Loader의 플러그인을 추가하기 때문에 다른 로더와는 약간 다릅니다. Vue 로더 플러그인은 정의된 다른 규칙(js 및 css 규칙)을 복제하여 &lt;code class=&quot;language-text&quot;&gt;.vue&lt;/code&gt; 파일에서 해당 언어 블록(&lt;code class=&quot;language-text&quot;&gt;script&lt;/code&gt; 및 &lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt;)에 적용하기 위해 필요합니다. Vue 로더에 대한 웹팩 구성의 간단한 예는 다음과 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; VueLoaderPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;vue-loader/lib/plugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.vue$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
       loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue-loader&apos;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
       loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;babel-loader&apos;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.css$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
       use&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
         &lt;span class=&quot;token string&quot;&gt;&apos;vue-style-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;token string&quot;&gt;&apos;css-loader&apos;&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VueLoaderPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue-loader의-asset-url-핸들링-규칙은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-loader%EC%9D%98-asset-url-%ED%95%B8%EB%93%A4%EB%A7%81-%EA%B7%9C%EC%B9%99%EC%9D%80&quot; aria-label=&quot;vue loader의 asset url 핸들링 규칙은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue-loader의 Asset URL 핸들링 규칙은?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;절대 경로(Absolute path)&lt;/strong&gt;: 만약 URL 경로가 &lt;code class=&quot;language-text&quot;&gt;/images/loader.png&lt;/code&gt;와 같은 절대 경로라면 그대로 보존됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;상대 경로(Relative path)&lt;/strong&gt;: 만약 URL 경로가 &lt;code class=&quot;language-text&quot;&gt;./images/loader.png&lt;/code&gt;와 같은 절대 경로라면 상대 모듈 요청(&lt;code class=&quot;language-text&quot;&gt;require(./images/loader.png)&lt;/code&gt;)으로 컴파일되고 파일 시스템의 폴더 구조를 기반으로 해결됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~로 시작하는 경로(URLs starts with ~ symbol)&lt;/strong&gt;: 만약 URL 경로가 &lt;code class=&quot;language-text&quot;&gt;./some-node-package/loader.png&lt;/code&gt;와 같은 &lt;code class=&quot;language-text&quot;&gt;~&lt;/code&gt;로 시작된다면, 모듈 요청으로 컴파일됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@로 시작하는 경로(URLs starts with @ symbol)&lt;/strong&gt;: 만약 URL 경로가 &lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt;로 시작된다면, 모듈 요청으로 컴파일됩니다. 이것은 웹팩 &lt;code class=&quot;language-text&quot;&gt;config&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;@&lt;/code&gt;에 대한 별칭이 있는 경우에 유용하며, 기본적으로 &lt;code class=&quot;language-text&quot;&gt;vue-cli&lt;/code&gt;가 만든 모든 프로젝트에서 &lt;code class=&quot;language-text&quot;&gt;/src&lt;/code&gt;를 가리킵니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue-loader에서-전처리기를-사용하는-경우라면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-loader%EC%97%90%EC%84%9C-%EC%A0%84%EC%B2%98%EB%A6%AC%EA%B8%B0%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EB%9D%BC%EB%A9%B4&quot; aria-label=&quot;vue loader에서 전처리기를 사용하는 경우라면 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue loader에서 전처리기를 사용하는 경우라면?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Vue-loader&lt;/code&gt;는 작성된 언어 블록의 &lt;code class=&quot;language-text&quot;&gt;lang&lt;/code&gt; 속성을 이용해 적절한 로더를 적용하고 웹팩 설정에 적용된 규칙을 따릅니다. &lt;code class=&quot;language-text&quot;&gt;Vue-loader&lt;/code&gt;에서 SASS, LESS, Stylus나 PostCSS 같은 전처리기를 사용할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;범위-cssscoped-css란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%94%EC%9C%84-cssscoped-css%EB%9E%80&quot; aria-label=&quot;범위 cssscoped css란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;범위 CSS(Scoped CSS)란?&lt;/h3&gt;
&lt;p&gt;범위를 가지는 CSS(Scoped CSS)는 Vue에서 싱글 파일 컴포넌트에서 해당 컴포넌트에 작성된 CSS가 다른 컴포넌트에 영향을 미치지 않도록 그 적용 범위를 제한하는 것을 의미합니다. 즉, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그가 &lt;code class=&quot;language-text&quot;&gt;scoped&lt;/code&gt; 속성을 가지고 있다면, 해당 CSS는 해당 컴포넌트에서만 영향을 미칩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style scoped&amp;gt;
.greeting {
 color: green;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;
 &amp;lt;div class=&amp;quot;greeting&amp;quot;&amp;gt;Let&amp;#39;s start Scoped CSS&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 코드는 아래로 변환됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style scoped&amp;gt;
.greeting[data-v-f3f3eg9] {
  color: green;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;
 &amp;lt;div class=&amp;quot;greeting&amp;quot; data-v-f3f3eg9&amp;gt;Let&amp;#39;s start Scoped CSS&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;범위-css와-전역-css&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%94%EC%9C%84-css%EC%99%80-%EC%A0%84%EC%97%AD-css&quot; aria-label=&quot;범위 css와 전역 css permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;범위 CSS와 전역 CSS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;범위가 지정된 스타일과 범위가 지정되지 않은 스타일은 동일한 컴포넌트에 포함 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/* global styles */&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;style scoped&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/* local styles */&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;범위-css가-자식-컴포넌트에-영향을-미치게-하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%94%EC%9C%84-css%EA%B0%80-%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EC%98%81%ED%96%A5%EC%9D%84-%EB%AF%B8%EC%B9%98%EA%B2%8C-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;범위 css가 자식 컴포넌트에 영향을 미치게 하는 방법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;범위 CSS가 자식 컴포넌트에 영향을 미치게 하는 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 연산자를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;style scoped&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;class1 &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;class2 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 CSS는 아래로 컴파일됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.class1[data-v-f3f3eg9] .class2 { /* ... */ }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SASS에서는 &lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 연산자가 제대로 작동하지 않을 수 있습니다. 이때는 &lt;code class=&quot;language-text&quot;&gt;/deep/&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;::v-deep&lt;/code&gt; 선택자를 대신 이용합니다.&lt;/p&gt;
&lt;h3 id=&quot;상위-컴포넌트의-범위-css가-하위-컴포넌트에-영향을-주는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%B2%94%EC%9C%84-css%EA%B0%80-%ED%95%98%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EC%98%81%ED%96%A5%EC%9D%84-%EC%A3%BC%EB%8A%94%EA%B0%80&quot; aria-label=&quot;상위 컴포넌트의 범위 css가 하위 컴포넌트에 영향을 주는가 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상위 컴포넌트의 범위 CSS가 하위 컴포넌트에 영향을 주는가?&lt;/h3&gt;
&lt;p&gt;일반적으로 상위 컴포넌트의 스타일은 하위 컴포넌트에 영향을 미치지 않습니다. 하지만 하위 컴포넌트의 루트 노드는 상위 컴포넌트와 하위 컴포넌트의 스타일에 모두 영향을 받습니다. 즉, 하위 컴포넌트의 루트 노드에 상위 컴포넌트에서 사용된 클래스가 사용된다면, 상위 컴포넌트의 스타일이 하위 컴포넌트에도 영향을 끼칩니다. 이는 상위 컴포넌트에서 레이아웃을 위해 하위 컴포넌트에 영향을 미칠 수 있도록 디자인된 것입니다. 아래의 예시는 상위 컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;background&lt;/code&gt;가 하위 컴포넌트에까지 영향을 미치는 예제입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// parent.vue
&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;parent&amp;lt;/p&amp;gt;
    &amp;lt;ChildMessageComponent/&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import ChildMessageComponent from &amp;quot;./components/child&amp;quot;;

export default {
  name: &amp;quot;App&amp;quot;,
  components: {
    ChildMessageComponent
  }
};
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
.wrapper {
  background: blue;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//child.vue
&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;child&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &amp;quot;Hello, Scoped CSS&amp;quot;,
};
&amp;lt;/script&amp;gt;
&amp;lt;style scoped&amp;gt;
.wrapper {
  background: red;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하위 컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;wrapper&lt;/code&gt; 클래스의 배경색은 빨간색이 아니라 파란색이 됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;동적으로-생성된-컨텐츠에-범위-css를-적용시키는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%BB%A8%ED%85%90%EC%B8%A0%EC%97%90-%EB%B2%94%EC%9C%84-css%EB%A5%BC-%EC%A0%81%EC%9A%A9%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;동적으로 생성된 컨텐츠에 범위 css를 적용시키는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적으로 생성된 컨텐츠에 범위 CSS를 적용시키는 방법은?&lt;/h3&gt;
&lt;p&gt;범위 CSS는 &lt;code class=&quot;language-text&quot;&gt;v-html&lt;/code&gt; 지시자로 동적으로 생성된 내용에 영향을 주지 않습니다. 이 경우, &lt;code class=&quot;language-text&quot;&gt;deep&lt;/code&gt; 선택자를 통해 문제를 해결할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue에서-css-모듈을-사용할-수-있을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue%EC%97%90%EC%84%9C-css-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;vue에서 css 모듈을 사용할 수 있을까 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue에서 CSS 모듈을 사용할 수 있을까?&lt;/h3&gt;
&lt;p&gt;CSS 모듈은 CSS를 모듈화하고 구성하는데 널리 사용되는 시스템입니다. &lt;code class=&quot;language-text&quot;&gt;vue-loader&lt;/code&gt;는 시뮬레이트된 범위 CSS의 대안으로 CSS 모듈과 함께 1급 클래스로의 통합을 제공합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;모든-템플릿에-대해-런타임-빌드를-할-수-있는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%A0-%ED%85%9C%ED%94%8C%EB%A6%BF%EC%97%90-%EB%8C%80%ED%95%B4-%EB%9F%B0%ED%83%80%EC%9E%84-%EB%B9%8C%EB%93%9C%EB%A5%BC-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B0%80&quot; aria-label=&quot;모든 템플릿에 대해 런타임 빌드를 할 수 있는가 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모든 템플릿에 대해 런타임 빌드를 할 수 있는가?&lt;/h3&gt;
&lt;p&gt;안 됩니다. Vue에서 사용되는 템플릿은 오직 &lt;code class=&quot;language-text&quot;&gt;.vue&lt;/code&gt; 파일에서만 사용되며, 다른 경우라면 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수가 필요합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue에서-css-모듈을-사용하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue%EC%97%90%EC%84%9C-css-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;vue에서 css 모듈을 사용하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue에서 CSS 모듈을 사용하는 방법은?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CSS 모듈 활성화:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;css-loader&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;modules: true&lt;/code&gt; 옵션을 활성화해줍니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// webpack.config.js
{
 module: {
   rules: [
     // ... other rules omitted
     {
       test: /\.css$/,
       use: [
         &amp;#39;vue-style-loader&amp;#39;,
         {
           loader: &amp;#39;css-loader&amp;#39;,
           options: {
             // enable CSS Modules
             modules: true,
             // customize generated class names
             localIdentName: &amp;#39;[local]_[hash:base64:8]&amp;#39;
           }
         }
       ]
     }
   ]
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;모듈 속성 추가:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그에 &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt; 속성을 추가합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style module&amp;gt;
.customStyle {
 background: blue;
}
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CSS 모듈 주입:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;computed&lt;/code&gt; 속성인 &lt;code class=&quot;language-text&quot;&gt;$style&lt;/code&gt;을 통해 CSS 모듈을 객체로 접근할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;
 &amp;lt;div :class=&amp;quot;$style.blue&amp;quot;&amp;gt;
   Background color should be in blue
 &amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;:class&lt;/code&gt;의 객체, 배열 문법에도 동작합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;css-모듈을-전처리기에서-사용할-수-있는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%A0%84%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B0%80&quot; aria-label=&quot;css 모듈을 전처리기에서 사용할 수 있는가 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS 모듈을 전처리기에서 사용할 수 있는가?&lt;/h3&gt;
&lt;p&gt;CSS 모듈을 전처리기에서 사용할 수 있습니다. 예를 들어, Sass 전처리기는 웹팩에서 아래와 같이 설정할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// webpack.config.js -&amp;gt; module.rules
{
 test: /\.scss$/,
 use: [
   &amp;#39;vue-style-loader&amp;#39;,
   {
     loader: &amp;#39;css-loader&amp;#39;,
     options: { modules: true }
   },
   &amp;#39;sass-loader&amp;#39;
 ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;css-모듈에-사용자-정의의-이름을-사용할-수-있는가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-%EB%AA%A8%EB%93%88%EC%97%90-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98%EC%9D%98-%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B0%80&quot; aria-label=&quot;css 모듈에 사용자 정의의 이름을 사용할 수 있는가 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS 모듈에 사용자 정의의 이름을 사용할 수 있는가?&lt;/h3&gt;
&lt;p&gt;주입된 CSS 모듈에 &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt; 속성을 부여해서, 모듈의 이름을 커스터마이징할 수 있습니다. &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일에서 둘 이상의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그가 존재할 때, 스타일이 서로 덮어쓰지 않게 하는 데 유용합니다. 예를 들어, 아래와 같이 속성을 줄 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style module=&amp;quot;a&amp;quot;&amp;gt;
 /* identifiers injected as a */
&amp;lt;/style&amp;gt;

&amp;lt;style module=&amp;quot;b&amp;quot;&amp;gt;
 /* identifiers injected as b */
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;핫-리로드hot-reload란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%93%9Chot-reload%EB%9E%80&quot; aria-label=&quot;핫 리로드hot reload란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;핫 리로드(Hot Reload)란?&lt;/h3&gt;
&lt;p&gt;핫 리로드는 &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일을 편집할 때 단순히 페이지를 다시 로드하는 것이 아닙니다. 핫 리로드 기능을 사용하면 &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일을 편집할 때 해당 컴포넌트의 모든 인스턴스가 페이지를 리로딩하지 않고 변경됩니다. 심지어 앱의 현재 상태와 변경된 컴포넌트를 보존합니다. 이것은 템플릿 또는 컴포넌트의 스타일을 수정할 때 개발 환경이 크게 개선됩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;핫-리로드가-비활성화-될-때는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%93%9C%EA%B0%80-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-%EB%90%A0-%EB%95%8C%EB%8A%94&quot; aria-label=&quot;핫 리로드가 비활성화 될 때는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;핫 리로드가 비활성화 될 때는?&lt;/h3&gt;
&lt;p&gt;핫 리로드는 아래의 상황에서는 비활성화 되어있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;웹팩의 &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;node&lt;/code&gt;일 때 (SSR)&lt;/li&gt;
&lt;li&gt;웹팩이 코드를 minify할 때&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;process.env.NODE_ENV === &amp;#39;production&amp;#39;&lt;/code&gt;일 때&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;핫-리로드를-명시적으로-비활성화하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%93%9C%EB%A5%BC-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;핫 리로드를 명시적으로 비활성화하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;핫 리로드를 명시적으로 비활성화하는 방법은?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;hotReload: false&lt;/code&gt; 옵션을 웹팩 로더에서 설정하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.vue$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       hotReload&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// disables Hot Reload&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;핫-리로드를-활성화하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%93%9C%EB%A5%BC-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;핫 리로드를 활성화하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;핫 리로드를 활성화하는 방법은?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vue-loader&lt;/code&gt; 플러그인은 내부적으로 핫 리로드를 사용하고 있습니다. 만약 &lt;code class=&quot;language-text&quot;&gt;vue-cli&lt;/code&gt;를 이용해 프로젝트를 시작했다면, 핫 리로드를 바로 사용할 수 있습니다. 만약 프로젝트를 직접 세팅했다면, &lt;code class=&quot;language-text&quot;&gt;webpack-dev-server --hot&lt;/code&gt;옵션으로 프로젝트를 시작해 활성화 할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;핫-리로드에서-상태가-보존되는-규칙은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%93%9C%EC%97%90%EC%84%9C-%EC%83%81%ED%83%9C%EA%B0%80-%EB%B3%B4%EC%A1%B4%EB%90%98%EB%8A%94-%EA%B7%9C%EC%B9%99%EC%9D%80&quot; aria-label=&quot;핫 리로드에서 상태가 보존되는 규칙은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;핫 리로드에서 상태가 보존되는 규칙은?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;을 수정할 때, 수정된 컴포넌트는 모든 상태를 보존한 채로 다시 렌더링됩니다.&lt;/li&gt;
&lt;li&gt;컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;를 수정할 때, 수정된 컴포넌트는 해체(destroy) 된 후 다시 생성(re-create)됩니다.&lt;/li&gt;
&lt;li&gt;컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt;을 수정할 때, 핫 리로드는 &lt;code class=&quot;language-text&quot;&gt;vue-style-loader&lt;/code&gt;에 의해 실행되며 상태에 영향을 끼치지 않습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue-loader를-이용해-함수형-컴포넌트를-생성하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-loader%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;vue loader를 이용해 함수형 컴포넌트를 생성하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue loader를 이용해 함수형 컴포넌트를 생성하는 방법은?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;functional&lt;/code&gt; 속성을 템플릿에 추가해 함수형 컴포넌트를 생성할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template functional&amp;gt;
 &amp;lt;div&amp;gt;{{ props.msg }}&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;함수형-컴포넌트에서-전역-속성에-접근하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%84%EC%97%AD-%EC%86%8D%EC%84%B1%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;함수형 컴포넌트에서 전역 속성에 접근하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수형 컴포넌트에서 전역 속성에 접근하는 방법은?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.prototype&lt;/code&gt;에 전역으로 정의된 속성에 접근해야 한다면, &lt;code class=&quot;language-text&quot;&gt;parent&lt;/code&gt; 속성을 이용해 접근할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template functional&amp;gt;
 &amp;lt;div&amp;gt;{{ parent.$someProperty }}&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue에서-테스트-하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;vue에서 테스트 하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue에서 테스트 하는 방법은?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;vue-cli:&lt;/strong&gt; 유닛 테스트와 e2e 테스트 환경이 미리 설정되어 제공됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;직접 세팅:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;@vue/test-utils&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;mocha-webpack&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;jest&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일을 대상으로 직접 설정합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;css에-lint를-설정하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css%EC%97%90-lint%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;css에 lint를 설정하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS에 Lint를 설정하는 방법은?&lt;/h3&gt;
&lt;p&gt;Stylelint를 이용해 Vue의 싱글 파일 컴포넌트의 스타일 부분의 Lint를 설정할 수 있습니다. 특정 &lt;code class=&quot;language-text&quot;&gt;.vue&lt;/code&gt; 파일의 Lint는 아래와 같이 실행합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;stylelint MyComponent.vue&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다른 방법은 웹팩에서 &lt;code class=&quot;language-text&quot;&gt;stylelint-webpack-plugin&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;dev-dependency&lt;/code&gt;로 설치하고, 웹팩 설정에서 아래와 같이 설정하는 방법입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// webpack.config.js
const StyleLintPlugin = require(&amp;#39;stylelint-webpack-plugin&amp;#39;);
module.exports = {
 // ... other options
 plugins: [
   new StyleLintPlugin({
     files: [&amp;#39;**/*.{vue,htm,html,css,sss,less,scss,sass}&amp;#39;],
   })
 ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;eslint-플러그인을-사용하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#eslint-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;eslint 플러그인을 사용하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;eslint 플러그인을 사용하는 방법은?&lt;/h3&gt;
&lt;p&gt;공식 &lt;code class=&quot;language-text&quot;&gt;eslint-plugin-vue&lt;/code&gt; 플러그인은 Vue의 싱글 파일 컴포넌트의 템플릿과 스크립트 부분에 대해 Lint를 제공합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// .eslintrc.js
module.exports = {
 extends: [
   &amp;quot;plugin:vue/essential&amp;quot;
 ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;특정 파일에 대한 Lint는 아래와 같이 실행할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;eslint --ext js,vue MyComponent.vue&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;eslint-loader를-사용하는-이유는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#eslint-loader%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94&quot; aria-label=&quot;eslint loader를 사용하는 이유는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;eslint-loader를 사용하는 이유는?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;eslint-loader&lt;/code&gt;를 이용하면 개발 도중에 자동으로 &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일들에 대해 Lint를 적용시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;우선 아래와 같이 NPM 모듈을 설치해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -D eslint eslint-loader&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후 웹팩의 설정에 추가해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// webpack.config.js
module.exports = {
  // ... other options
  module: {
    rules: [
      {
        enforce: &amp;#39;pre&amp;#39;,
        test: /\.(js|vue)$/,
        loader: &amp;#39;eslint-loader&amp;#39;,
        exclude: /node_modules/
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;css-단일-파일-추출이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css-%EB%8B%A8%EC%9D%BC-%ED%8C%8C%EC%9D%BC-%EC%B6%94%EC%B6%9C%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;css 단일 파일 추출이란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS 단일 파일 추출이란?&lt;/h3&gt;
&lt;p&gt;CSS 단일 파일 추출(CSS Extraction)은 모든 Vue 컴포넌트에서 사용된 CSS를 단일 CSS 파일로 추출하는 것을 의미합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -D mini-css-extract-plugin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그 후 웹팩의 설정에 추가해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// webpack.config.js
var MiniCssExtractPlugin = require(&amp;#39;mini-css-extract-plugin&amp;#39;)

module.exports = {
  // other options...
  module: {
    rules: [
      // ... other rules omitted
      {
        test: /\.css$/,
        use: [
          process.env.NODE_ENV !== &amp;#39;production&amp;#39;
            ? &amp;#39;vue-style-loader&amp;#39;
            : MiniCssExtractPlugin.loader,
          &amp;#39;css-loader&amp;#39;
        ]
      }
    ]
  },
  plugins: [
    // ... Vue Loader plugin omitted
    new MiniCssExtractPlugin({
      filename: &amp;#39;style.css&amp;#39;
    })
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;사용자-정의-블록이란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%EB%B8%94%EB%A1%9D%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;사용자 정의 블록이란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 정의 블록이란?&lt;/h3&gt;
&lt;p&gt;사용자 정의 블록(Custom block)은 &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일에서 사용할 수 있는 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그 블록 이외의 블록을 정의하는 것을 말합니다. &lt;code class=&quot;language-text&quot;&gt;lang&lt;/code&gt; 속성, 태그 이름, 웹팩 설정의 &lt;code class=&quot;language-text&quot;&gt;resourceQuery&lt;/code&gt; 속성에 의해 정의할 수 있습니다. 아래 예시는 &lt;code class=&quot;language-text&quot;&gt;*.vue&lt;/code&gt; 파일에서 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;message&amp;gt;&lt;/code&gt;로 정의된 태그를 찾는 방법입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  module: {
    rules: [
      {
        resourceQuery: /blockType=message/,
        loader: &amp;#39;loader-to-use&amp;#39;
      }
    ]
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;what-are-the-features-of-stylelint&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-are-the-features-of-stylelint&quot; aria-label=&quot;what are the features of stylelint permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What are the features of stylelint?&lt;/h3&gt;
&lt;p&gt;Below are the list of major stylelint features&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It has more than &lt;strong&gt;160 built-in rules&lt;/strong&gt; to catch errors, apply limits and enforce stylistic conventions&lt;/li&gt;
&lt;li&gt;Understands &lt;strong&gt;latest CSS syntax&lt;/strong&gt; including custom properties and level 4 selectors&lt;/li&gt;
&lt;li&gt;It &lt;strong&gt;extracts embedded styles&lt;/strong&gt; from HTML, markdown and CSS-in-JS object &amp;#x26; template literals&lt;/li&gt;
&lt;li&gt;Parses &lt;strong&gt;CSS-like syntaxes&lt;/strong&gt; like SCSS, Sass, Less and SugarSS&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;Plugins&lt;/strong&gt; for reusing community plugins and creating own plugins&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;what-are-the-principles-for-vuex-application-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-are-the-principles-for-vuex-application-structure&quot; aria-label=&quot;what are the principles for vuex application structure permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What are the principles for vuex application structure?&lt;/h3&gt;
&lt;p&gt;Vuex enforces below rules to structure any application.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Application-level state is centralized in the store.&lt;/li&gt;
&lt;li&gt;The only way to mutate the state is by committing mutations, which are synchronous transactions.&lt;/li&gt;
&lt;li&gt;Asynchronous logic should be encapsulated in, and can be composed with actions. The project structure for any non-trivial application would be as below,&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/sudheerj/vuejs-interview-questions/raw/master/images/vuex-app-structure.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;is-vuex-supports-hot-reloading&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#is-vuex-supports-hot-reloading&quot; aria-label=&quot;is vuex supports hot reloading permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Is Vuex supports hot reloading?&lt;/h3&gt;
&lt;p&gt;Yes, Vuex supports hot-reloading for mutations, modules, actions and getters during development. You need to use either webpack’s hot module replacement API or browserify’s hot module replacement plugin.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;vuex-store의-hotupdate-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex-store%EC%9D%98-hotupdate-api&quot; aria-label=&quot;vuex store의 hotupdate api permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex store의 hotUpdate API&lt;/h3&gt;
&lt;p&gt;The store.hotUpdate() API method is used for mutations and modules&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vue &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vuex&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; mutations &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./mutations&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; myModule &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./modules/myModule&apos;&lt;/span&gt;

Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Welcome to hot reloading&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  mutations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  modules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    moduleA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; myModule
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hot&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./mutations&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./modules/newMyModule&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newMutations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./mutations&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;default
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newMyModule &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./modules/myModule&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;default
    store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hotUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      mutations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newMutations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      modules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        moduleA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; newMyModule
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mutations-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mutations-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;mutations 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mutations 테스트&lt;/h3&gt;
&lt;p&gt;Since mutations are just functions that completely rely on their arguments it will be easier to test. You need to keep mutations inside your store.js file and should also export the mutations as a named export apart from default export. Let’s take an example of increment mutations,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And test them using mocha and chai as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; expect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;chai&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; mutations &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./store&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; increment &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mutations

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;mutations&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;INCREMENT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; counter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;getters 테스트&lt;/h4&gt;
&lt;p&gt;It is easier to test getters similar to mutations. It is recommended to test these getters if they have complicated computation. Let’s take a simple todo filter as a getter&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getters &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;filterTodos&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;todos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; status
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the test case for above getter as follows,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; expect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;chai&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; getters &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./getters&apos;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;getters&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;filteredTodos&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      todos&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;design&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Completed&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;testing&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;InProgress&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Completed&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; filterStatus &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Completed&apos;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; getters&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filterTodos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filterStatus&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;deep&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;design&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Completed&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Completed&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;node에서 테스트 절차&lt;/h4&gt;
&lt;p&gt;By proper mocking, you can bundle tests with webpack and run them on node without having depenceny on Browser API. It involves 2 steps,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;webpack config :  webpack config, .babelrc에 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  entry&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./test.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; __dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    filename&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;test-bundle.js&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    loaders&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.js$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;babel-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        exclude&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/node_modules/&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;번들링 후 mocha 테스트 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;webpack
mocha test-bundle.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;what-is-the-procedure-to-run-tests-in-browser&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-the-procedure-to-run-tests-in-browser&quot; aria-label=&quot;what is the procedure to run tests in browser permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is the procedure to run tests in browser?&lt;/h3&gt;
&lt;p&gt;Below are the steps to run tests in real browser,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code class=&quot;language-text&quot;&gt;mocha-loader&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Configure webpack config entry point to ‘mocha-loader!babel-loader!./test.js’.&lt;/li&gt;
&lt;li&gt;Start webpack-dev-server using the config.&lt;/li&gt;
&lt;li&gt;Go to localhost:8080/webpack-dev-server/test-bundle to see the test result&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;what-is-the-purpose-of-strict-mode-in-vuex&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-the-purpose-of-strict-mode-in-vuex&quot; aria-label=&quot;what is the purpose of strict mode in vuex permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is the purpose of strict mode in vuex?&lt;/h3&gt;
&lt;p&gt;In strict mode, whenever Vuex state is mutated outside of mutation handlers, an error will be thrown. It make sure that all state mutations can be explicitly tracked by debugging tools. You can just enable this by passing &lt;code class=&quot;language-text&quot;&gt;strict: true&lt;/code&gt; while creating the vuex store.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const store = new Vuex.Store({
  // ...
  strict: true
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;can-i-use-strict-mode-in-production-environment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#can-i-use-strict-mode-in-production-environment&quot; aria-label=&quot;can i use strict mode in production environment permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can I use strict mode in production environment?&lt;/h3&gt;
&lt;p&gt;No, it is not recommended to use strict mode in production environment. Strict mode runs a synchronous deep watcher on the state tree for detecting inappropriate mutations and it can be quite expensive when you perform large amount of mutations. i.e, It can impact performance if you enable in production mode. Hence it should be handled through build tools,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const store = new Vuex.Store({
  // ...
  strict: process.env.NODE_ENV !== &amp;#39;production&amp;#39;
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;what-is-vuex-plugin&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-vuex-plugin&quot; aria-label=&quot;what is vuex plugin permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is vuex plugin?&lt;/h3&gt;
&lt;p&gt;The vuex plugin is an option hat exposes hooks for each mutation. It is a normal function that receives the store as the only argument. You can create your own plugin or use built-in plugins. The plugin skeleton would be as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;myPlugin&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mutation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that plugin can be configured for plugins options as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const store = new Vuex.Store({
  // ...
  plugins: [myPlugin]
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;how-do-you-mutate-state-in-plugins&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-you-mutate-state-in-plugins&quot; aria-label=&quot;how do you mutate state in plugins permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do you mutate state in plugins?&lt;/h3&gt;
&lt;p&gt;Similar to components you can’t mutate state directly but they can trigger changes by by committing mutations. This way a plugin can be used to sync a data source to the store. For example, createWebSocketPlugin plugin is used to sync a websocket data source to the store.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createWebSocketPlugin&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;receiveData&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;UPDATE_DATA&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       socket&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;update&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mutation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then configure plugin in vuex store as below&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; plugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createWebSocketPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;socket&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 mutations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;plugin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;vuex-store&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex-store&quot; aria-label=&quot;vuex store permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex store&lt;/h3&gt;
&lt;p&gt;Vuex store : 애플리케이션 상태를 유지하는 컨테이너&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure vuex in vuejs ecosystem&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;vuex&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Provide an initial state object and some mutations&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  mutations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Trigger state change with commit and access state variables,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// -&gt; 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vuex-store와-plain-global-object의-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex-store%EC%99%80-plain-global-object%EC%9D%98-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;vuex store와 plain global object의 차이 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex store와 plain global object의 차이&lt;/h3&gt;
&lt;p&gt;Below are the two major differences between vuex store and plain global object&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Vuex stores are reactive:&lt;/strong&gt; If the store’s state changes then vue components will reactively and efficiently get updated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cannot directly mutate the store’s state:&lt;/strong&gt; The store’s state is changed by explicitly committing mutations to ensure that every state change leaves a track-able record for tooling purpose&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;what-is-the-reason-not-to-update-the-state-directly&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-the-reason-not-to-update-the-state-directly&quot; aria-label=&quot;what is the reason not to update the state directly permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is the reason not to update the state directly?&lt;/h3&gt;
&lt;p&gt;We want to explicitly track application state in order to implement tools that can log every mutation, take state snapshots, or even perform time travel debugging. So we need to commit a mutation instead of changing store’s state directly.&lt;/p&gt;
&lt;h3 id=&quot;single-state-tree&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#single-state-tree&quot; aria-label=&quot;single state tree permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single state tree&lt;/h3&gt;
&lt;p&gt;Vuex의 단일 상태 트리는 모든 응용 프로그램 수준 상태를 포함하는 단일 개체이며 “단일 진실 소스” 역할을 합니다. state 및 mutation을 하위 모듈로 분할할 때 모듈화와 충돌하지 않습니다.&lt;/p&gt;
&lt;h3 id=&quot;vuex-설치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;vuex 설치 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex 설치&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// npm install vuex --save&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 또는 yarn add vuex&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vue &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vuex&apos;&lt;/span&gt;

Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 또는&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://unpkg.com/vue.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;https://unpkg.com/vuex.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;do-i-need-promise-for-vuex&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#do-i-need-promise-for-vuex&quot; aria-label=&quot;do i need promise for vuex permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Do I need promise for vuex?&lt;/h3&gt;
&lt;p&gt;Yes, Vuex requires Promise. If your supporting browsers do not implement Promise (e.g. IE), you can use a polyfill library, such as es6-promise using npm or yarn.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install es6-promise --save # NPM
yarn add es6-promise # Yarn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that import into anywhere in your application,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import &amp;#39;es6-promise/auto&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;how-do-you-display-store-state-in-vue-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-you-display-store-state-in-vue-components&quot; aria-label=&quot;how do you display store state in vue components permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do you display store state in vue components?&lt;/h3&gt;
&lt;p&gt;Since Vuex stores are reactive, you can retrieve” state from store by simply returning store’s state from within a computed property. i.e, Whenever store state changes, it will cause the computed property to re-evaluate, and trigger associated DOM updates. Let’s take a hello word component which display store’s state in the template,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const Greeting = {
 template: `&amp;lt;div&amp;gt;{{ greet }}&amp;lt;/div&amp;gt;`,
 computed: {
   greet () {
     return store.state.msg
   }
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;how-do-you-inject-store-into-child-components&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-you-inject-store-into-child-components&quot; aria-label=&quot;how do you inject store into child components permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do you inject store into child components?&lt;/h3&gt;
&lt;p&gt;Vuex provides a mechanism to “inject” the store into all child components from the root component with the store option. It will be enabled by vue.use(vuex). For example, let’s inject into our app component as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const app = new Vue({
 el: &amp;#39;#app&amp;#39;,
 // provide the store using the &amp;quot;store&amp;quot; option.
 // this will inject the store instance to all child components.
 store,
 components: { Greeting },
 template: `
   &amp;lt;div class=&amp;quot;app&amp;quot;&amp;gt;
     &amp;lt;greeting&amp;gt;&amp;lt;/greeting&amp;gt;
   &amp;lt;/div&amp;gt;
 `
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the store will be injected into all child components of the root and will be available on them as &lt;strong&gt;this.$store&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// let&amp;#39;s create a hello world component
    const Greeting = {
      template: `&amp;lt;div&amp;gt;{{ greet }}&amp;lt;/div&amp;gt;`,
      computed: {
        greet () {
          return this.$store.state.msg
        }
      }
    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;mapstate-헬퍼&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mapstate-%ED%97%AC%ED%8D%BC&quot; aria-label=&quot;mapstate 헬퍼 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mapState 헬퍼&lt;/h3&gt;
&lt;p&gt;In Vuex application, creating a computed property every time whenever we want to access the store’s state property or getter is going to be repetitive and verbose, especially if a component needs more than one state property. In this case, we can make use of the mapState helper of vuex which generates computed getter functions for us. Let’s take an increment example to demonstrate mapState helper,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; mapState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vuex&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  computed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mapState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    usernameAlias&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;username&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localTitle &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also pass a string array to mapState when the name of a mapped computed property is the same as a state sub tree name&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;computed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mapState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;username&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;how-do-you-combine-local-computed-properties-with-mapstate-helper&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-you-combine-local-computed-properties-with-mapstate-helper&quot; aria-label=&quot;how do you combine local computed properties with mapstate helper permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do you combine local computed properties with mapState helper?&lt;/h3&gt;
&lt;p&gt;You can use object spread operator syntax in order to combine mapState helper(which returns an object) with other local computed properties. This way it simplify merging techniques using utilities.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;computed: {
  localComputed () { /* ... */ },
  // mix this into the outer object with the object spread operator
  ...mapState({
    // ...
  })
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;do-you-need-to-replace-entire-local-state-with-vuex&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#do-you-need-to-replace-entire-local-state-with-vuex&quot; aria-label=&quot;do you need to replace entire local state with vuex permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Do you need to replace entire local state with vuex?&lt;/h3&gt;
&lt;p&gt;No, if a piece of state strictly belongs to a single component, it could be just fine leaving it as local state. i.e, Eventhough vuex used in the application, it doesn’t mean that you need to keep all the local state in vuex store. Other the code becomes more verbose and indirect although it makes your state mutations more explicit and debuggable.&lt;/p&gt;
&lt;h3 id=&quot;vuex-getters&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex-getters&quot; aria-label=&quot;vuex getters permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex getters&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;store가 store 상태를 기반으로 파생 상태를 계산하기 위한 계산 속성으로 작동&lt;/li&gt;
&lt;li&gt;계산된 속성과 유사하게, 게터의 결과는 종속성에 기반하여 캐시되며, 일부 종속성이 변경되었을 때만 재평가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    todos&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Vue course&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; completed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Vuex course&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; completed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Vue Router course&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; completed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  getters&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;completedTodos&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;todos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;completed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;Getters receive state as first argument.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;what-is-a-property-style-access&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-a-property-style-access&quot; aria-label=&quot;what is a property style access permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is a property style access?&lt;/h3&gt;
&lt;p&gt;You can access values of store’s getter object(store.getters) as properties. This is known as property style access. For example, you can access todo’s status as a property,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;store.getters.todosStatus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The getters can be passed as 2nd argument for other getters. For example, you can derive completed todo’s count based on their status as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;getters: {
 completedTodosCount: (state, getters) =&amp;gt; {
   return getters.todosStatus === &amp;#39;completed&amp;#39;
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The getters accessed as properties are cached as part of Vue’s reactivity system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;what-is-a-method-style-access&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-a-method-style-access&quot; aria-label=&quot;what is a method style access permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is a method style access?&lt;/h3&gt;
&lt;p&gt;You can access store’s state in a method style by passing arguments. For example, you can pass user id to find user profile information as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;getters: {
 getUserProfileById: (state) =&amp;gt; (id) =&amp;gt; {
   return state.users.find(user =&amp;gt; user.id === id)
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that you can access it as a method call,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;store.getters.getUserProfileById(111); {id: &amp;#39;111&amp;#39;, name: &amp;#39;John&amp;#39;, age: 33}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;mapgetter-헬퍼&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mapgetter-%ED%97%AC%ED%8D%BC&quot; aria-label=&quot;mapgetter 헬퍼 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mapGetter 헬퍼&lt;/h3&gt;
&lt;p&gt;The mapGetters is a helper that simply maps store getters to local computed properties. For example, the usage of getters for todo app would be as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import { mapGetters } from &amp;#39;vuex&amp;#39;

export default {
 computed: {
   // mix the getters into computed with object spread operator
   ...mapGetters([
     &amp;#39;completedTodos&amp;#39;,
     &amp;#39;todosCount&amp;#39;,
     // ...
   ])
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;뮤테이션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AE%A4%ED%85%8C%EC%9D%B4%EC%85%98&quot; aria-label=&quot;뮤테이션 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뮤테이션&lt;/h3&gt;
&lt;p&gt;Vuex mutations are similar to any events with a string &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; and a &lt;code class=&quot;language-text&quot;&gt;handler&lt;/code&gt;. The handler function is where we perform actual state modifications, and it will receive the state as the first argument. For example, the counter example with increment mutation would be as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const store = new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment (state) {
      // mutate state
      state.count++
    }
  }
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can’t directly invoke mutation instead you need to call &lt;code class=&quot;language-text&quot;&gt;store.commit&lt;/code&gt; with its type. The above mutation would be triggered as folows&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;store.commit(&amp;#39;increment&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;how-do-you-commit-with-payload&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-do-you-commit-with-payload&quot; aria-label=&quot;how do you commit with payload permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How do you commit with payload?&lt;/h3&gt;
&lt;p&gt;You can also pass &lt;strong&gt;payload&lt;/strong&gt; for the mutation as an additional argument to &lt;code class=&quot;language-text&quot;&gt;store.commit&lt;/code&gt;. For example, the counter mutation with payload object would be as below,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mutations: {
 increment (state, payload) {
   state.count += payload.increment
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then you can trigger increment commit&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;store.commit(&amp;#39;increment&amp;#39;, {
 increment: 20
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also pass primitives as payload.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;what-is-object-style-commit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-is-object-style-commit&quot; aria-label=&quot;what is object style commit permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is object style commit?&lt;/h3&gt;
&lt;p&gt;You can also commit a mutation is by directly using an object that has a &lt;strong&gt;type&lt;/strong&gt; property.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;store.commit({
 type: &amp;#39;increment&amp;#39;,
 value: 20
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the entire object will be passed as the payload to mutation handlers(i.e, without any changes to handler signature).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mutations: {
 increment (state, payload) {
   state.count += payload.value
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;what-are-the-caveats-with-vuex-mutations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-are-the-caveats-with-vuex-mutations&quot; aria-label=&quot;what are the caveats with vuex mutations permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What are the caveats with vuex mutations?&lt;/h3&gt;
&lt;p&gt;Since a Vuex store’s state is made reactive by Vue, the same reactivity caveats of vue will apply to vuex mutations. These are the rules should be followed for vuex mutations,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is recommended to initialize store’s initial state with all desired fields upfront&lt;/li&gt;
&lt;li&gt;Add new properties to state Object either by set method or object spread syntax&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.set(stateObject, &amp;#39;newProperty&amp;#39;, &amp;#39;John&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(OR)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;state.stateObject = { ...state.stateObject, newProperty: &amp;#39;John&amp;#39; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;why-mutations-should-be-synchronous&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#why-mutations-should-be-synchronous&quot; aria-label=&quot;why mutations should be synchronous permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why mutations should be synchronous?&lt;/h3&gt;
&lt;p&gt;You need to remember that mutation handler functions must be synchronous. This is why because any state mutation performed in the callback is essentially un-trackable. It is going to be problematic when the devtool will need to capture a “before” and “after” snapshots of the state during the mutations.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;mutations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;someMutation&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;callAsyncMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mutation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mutation&quot; aria-label=&quot;mutation permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mutation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;this로 구성 요소의 mutations를 커밋할 수 있음&lt;/li&gt;
&lt;li&gt;$store.commit(‘mutation name’) 또는 Mutions 도우미를 매핑하여 구성 요소 메서드를 store.commit 호출에 매핑. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; mapMutations &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vuex&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  methods&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapMutations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;token string&quot;&gt;&apos;incrementBy&apos;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 또는&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapMutations&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      add&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mutation-types의-constant-선언&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mutation-types%EC%9D%98-constant-%EC%84%A0%EC%96%B8&quot; aria-label=&quot;mutation types의 constant 선언 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mutation types의 constant 선언&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Flux 및 Redux와 같은 상태 관리 구현에서는 mutations 유형에 constant를 사용&lt;/li&gt;
&lt;li&gt;linter와 같은 툴을 활용할 때 유용&lt;/li&gt;
&lt;li&gt;모든 constant를 단일 파일에 저장하면 공동작업자는 전체 애플리케이션에서 어떤 mutations가 가능한지 한눈에 파악할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SOME_MUTATION&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;SOME_MUTATION&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vuex&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;SOME_MUTATION&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./mutation-types&apos;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vuex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  mutations&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;SOME_MUTATION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token comment&quot;&gt;//.....&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vuex에서의-비동기-operations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuex%EC%97%90%EC%84%9C%EC%9D%98-%EB%B9%84%EB%8F%99%EA%B8%B0-operations&quot; aria-label=&quot;vuex에서의 비동기 operations permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vuex에서의 비동기 operations&lt;/h3&gt;
&lt;p&gt;Vuex에서  mutations는 동기식 트랜잭션이다. 그러나 비동기 작업을 처리하려면 &lt;strong&gt;actions&lt;/strong&gt;를 사용해야 합니다.&lt;/p&gt;
&lt;h3 id=&quot;mutations와-actions의-차이&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#mutations%EC%99%80-actions%EC%9D%98-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;mutations와 actions의 차이 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;mutations와 actions의 차이&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mutations는 state에서 mutations를 일으키고, actions은mutations를 일으킨다.&lt;/li&gt;
&lt;li&gt;actions에는 임의적인 비동기 작업이 포함될 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(2)/</guid><pubDate>Thu, 06 May 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용(Vue) 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;플러그인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8&quot; aria-label=&quot;플러그인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플러그인&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 전역 수준 기능을 Vue 어플리케이션에 추가&lt;/li&gt;
&lt;li&gt;전역 메소드 또는 속성 추가(&lt;code class=&quot;language-text&quot;&gt;&amp;lt;vue-custom-element&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;하나 이상의 글로벌 에셋 추가(지시자, 필터, 트랜지션)&lt;/li&gt;
&lt;li&gt;전역 믹스인으로 컴포넌트 옵션(vuex)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.prototype&lt;/code&gt;를 이용해 Vue에 인스턴스 메소드를 추가&lt;/li&gt;
&lt;li&gt;위의 기능과 함께 자체 API를 제공하는 라이브러리(vue-router)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 플러그인을 만드는 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;install&lt;/code&gt; 메소드를 정의. 이 메소드는 첫 번째 인자로 Vue 생성자와 외부에서 설정 가능한 옵션을 파라미터로 전달받음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;MyPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;myGlobalMethod&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;my-directive&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; binding&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; vnode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; oldVnode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;$myMethod&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;methodOptions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 사용법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.use()&lt;/code&gt; 전역 메소드를 호출하여 플러그인을 사용&lt;/li&gt;
&lt;li&gt;이 함수는 생성자 &lt;code class=&quot;language-text&quot;&gt;new Vue()&lt;/code&gt;로 Vue 인스턴스를 생성하기 전에 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyPlugin&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//... options&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;믹스인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AF%B9%EC%8A%A4%EC%9D%B8&quot; aria-label=&quot;믹스인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;믹스인&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue 컴포넌트에 재사용 가능한 기능을 배포하는 유연한 방법&lt;/li&gt;
&lt;li&gt;믹스인에 존재하는 기능들은 호출된 컴포넌트의 기능들과 합쳐짐&lt;/li&gt;
&lt;li&gt;모든 구성 요소 옵션을 포함 가능&lt;/li&gt;
&lt;li&gt;배열 형태로 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myMixin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Welcome to Mixins!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  mixins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;myMixin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) 전역 믹스인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue 어플리케이션의 모든 컴포넌트에 동일한 옵션이나 기능을 확장해 사용할 필요가 있을 때 사용&lt;/li&gt;
&lt;li&gt;모든 단일 Vue 인스턴스에 영향을 주기 때문에 적게 이용하고 신중하게 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 다음 전역 믹스인은 해당 Vue 인스턴스에서 각 컴포넌트가 생성될 때마다 `created` 훅에서 로그를 발생&lt;/span&gt;
Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mixin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Write global mixins&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) CLI 환경에서 믹스인을 사용하는 법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue CLI를 사용한다면, 믹스인은 일반적으로 &lt;code class=&quot;language-text&quot;&gt;/src/mixins&lt;/code&gt; 디렉토리에서 &lt;code class=&quot;language-text&quot;&gt;.js&lt;/code&gt;파일로 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt; 키워드로 외부에 내보낸다는 것을 선언해야 하며 사용할 Vue 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; 키워드로 불러올 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 믹스인의 옵션과 컴포넌트의 옵션의 충돌&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;믹스인과 컴포넌트에서 충돌하는 옵션이 있다면, 옵션은 몇 가지 방법을 통해 충돌하는 옵션을 병합&lt;/li&gt;
&lt;li&gt;data : 재귀적으로 병합하되, 충돌되는 속성은 컴포넌트의 데이터가 우선적&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mixin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello, this is a Mixin&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mixins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mixin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello, this is a Component&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; { message: &quot;Hello, this is a Component&apos;&quot; }&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;라이프사이클 훅 : 믹스인 함수가 먼저 실행되고, 그 다음에 컴포넌트의 함수가 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myMixin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Called from Mixin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  mixins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;myMixin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Called from Component&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Called from Mixin&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//Called from Component&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;methods, components, directives : 재귀적으로 병합하되, 이러한 객체에 충돌하는 키가 있을 경우 컴포넌트의 옵션이 우선순위&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; mixin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  methods&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;+65 99898987&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; vm &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mixins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mixin&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  methods&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Murray&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;+91 893839389&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
vm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;John&quot;&lt;/span&gt;
vm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;Murray&quot;&lt;/span&gt;
vm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &quot;+91 893839389&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 믹스인의 병합 방법 사용자 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue에서는 사용자 지정 옵션을 병합할 때 기본적으로 기존 값을 덮어는 방법을 이용합니다. &lt;/li&gt;
&lt;li&gt;만약 사용자 정의의 로직을 사용해 커스텀 옵션을 병합하려면,&lt;code class=&quot;language-text&quot;&gt;Vue.config.optionMergeStrategies&lt;/code&gt;에 함수를 추가할 필요가 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;optionMergeStrategies&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;myOption&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;toVal&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fromVal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// return mergedVal&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;더 고급 예제는 Vuex의 1.x 병합 전략에서 확인하실 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const merge = Vue.config.optionMergeStrategies.computed
Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {
  if (!toVal) return fromVal
  if (!fromVal) return toVal
  return {
    getters: merge(toVal.getters, fromVal.getters),
    state: merge(toVal.state, fromVal.state),
    actions: merge(toVal.actions, fromVal.actions)
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;사용자-정의-지시자custom-directive&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%EC%A7%80%EC%8B%9C%EC%9E%90custom-directive&quot; aria-label=&quot;사용자 정의 지시자custom directive permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 정의 지시자(Custom directive)&lt;/h2&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DOM 엘리먼트에 부착할 수 있는 명령어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;v-&lt;/code&gt;로 시작하는 문법을 사용해 Vue가 이 명령어를 인식할 수 있도록 해야함&lt;/li&gt;
&lt;li&gt;하위 수준의 DOM을 제어하기 위해 직접 접근해야 할 필요가 있을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;focus&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input v&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;focus&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) 지시자 지역 등록&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;directives 옵션 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;directives&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  focus&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;inserted&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input v&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;focus&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 지시자의 라이프 사이클 훅&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;지시자 객체가 등록될 때 몇 개의 라이프 사이클 훅을 제공&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt;: 지시자가 처음 엘리먼트에 부착될 때 한 번 호출&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;inserted&lt;/code&gt;: 지시자가 부착된 엘리먼트가 DOM에 삽입되었을 때 호출&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt;: 해당 엘리먼트가 업데이트 될 때 호출됩니다. 하지만 아직 하위 엘리먼트는 업데이트 되지 않은 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;componentUpdated&lt;/code&gt;: 하위 컴포넌트까지 업데이트 된 상태일 때 호출&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;unbind&lt;/code&gt;: 지시자가 엘리먼트에서부터 삭제될 때 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 위의 훅에서는 특정한 전달인자(Argument)를 받는다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;디렉티브-훅의-전달인자는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C-%ED%9B%85%EC%9D%98-%EC%A0%84%EB%8B%AC%EC%9D%B8%EC%9E%90%EB%8A%94&quot; aria-label=&quot;디렉티브 훅의 전달인자는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디렉티브 훅의 전달인자는?&lt;/h3&gt;
&lt;p&gt;모든 훅에서는 전달인자로 &lt;code class=&quot;language-text&quot;&gt;el&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;binding&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;vnode&lt;/code&gt;를 갖고 있습니다. 그와 함께, &lt;strong&gt;update&lt;/strong&gt;와 &lt;strong&gt;componentUpdated&lt;/strong&gt;훅에서는 새 값과 이전 값을 비교하기 위해 &lt;code class=&quot;language-text&quot;&gt;oldVnode&lt;/code&gt;를 추가적으로 갖고 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;el&lt;/code&gt;: 해당 지시자가 부착된 엘리먼트로, 이를 이용해 DOM을 조작할 수 있습니다.&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;binding&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  : 아래의 속성을 가진 객체입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt;: 지시자의 이름으로, &lt;code class=&quot;language-text&quot;&gt;v-&lt;/code&gt; 접두사가 제거된 이름입니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;: 지시자에서 전달 받은 값입니다. 만약 &lt;code class=&quot;language-text&quot;&gt;v-my-directive=&amp;quot;1 + 1&amp;quot;&lt;/code&gt;라면 &lt;code class=&quot;language-text&quot;&gt;2&lt;/code&gt;가 됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;oldValue&lt;/code&gt;: 이전 값으로, &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;componentUpdated&lt;/code&gt;훅에서만 사용할 수 있습니다. 이를 통해 값이 변경되었는지 아닌지를 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;expression&lt;/code&gt;: 문자열로 바인딩된 표현식입니다. 만약 &lt;code class=&quot;language-text&quot;&gt;v-my-directive=&amp;quot;1 + 1&amp;quot;&lt;/code&gt;라면 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;1 + 1&amp;quot;&lt;/code&gt;이 됩니다..&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;arg&lt;/code&gt;: 지시자의 전달인자입니다. 만약 &lt;code class=&quot;language-text&quot;&gt;v-my-directive:foo&lt;/code&gt;라면 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;foo&amp;quot;&lt;/code&gt;가 됩니다..&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;modifiers&lt;/code&gt;: 수식어가 포함된 객체입니다. 만약 &lt;code class=&quot;language-text&quot;&gt;v-my-directive.foo.bar&lt;/code&gt;라면 &lt;code class=&quot;language-text&quot;&gt;{ foo: true, bar: true }&lt;/code&gt;가 됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;vnode&lt;/code&gt;: Vue의 컴파일러에 의해 생성된 가상 노드입니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;oldVnode&lt;/code&gt;: 이 전의 가상 노드로, &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;componentUpdated&lt;/code&gt;훅에서만 사용할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/sudheerj/vuejs-interview-questions/blob/master/images/custom-directives.svg&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;img src=&quot;https://github.com/sudheerj/vuejs-interview-questions/raw/master/images/custom-directives.svg&quot; alt=&quot;custom-directives&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;지시자에-여러-값들을-전달하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EC%8B%9C%EC%9E%90%EC%97%90-%EC%97%AC%EB%9F%AC-%EA%B0%92%EB%93%A4%EC%9D%84-%EC%A0%84%EB%8B%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;지시자에 여러 값들을 전달하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지시자에 여러 값들을 전달하는 방법은?&lt;/h3&gt;
&lt;p&gt;지시자는 유효한 자바스크립트 표현식은 모두 수용할 수 있습니다. 따라서 지사자에 여러 값들을 전달하려면, 자바스크립트 객체 리터럴을 이용해 전달할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div v-avatar=&amp;quot;{ width: 500, height: 400, url: &amp;#39;path/logo&amp;#39;, text: &amp;#39;Iron Man&amp;#39; }&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 &lt;code class=&quot;language-text&quot;&gt;v-avatar&lt;/code&gt; 지시자를 전역으로 설정해봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.directive(&amp;#39;avatar&amp;#39;, function (el, binding) {
 console.log(binding.value.width) // 500
 console.log(binding.value.height)  // 400
 console.log(binding.value.url) // path/logo
 console.log(binding.value.text)  // &amp;quot;Iron Man&amp;quot;
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;지시자-훅에서-함수-약어는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EC%8B%9C%EC%9E%90-%ED%9B%85%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98-%EC%95%BD%EC%96%B4%EB%8A%94&quot; aria-label=&quot;지시자 훅에서 함수 약어는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지시자 훅에서 함수 약어는?&lt;/h3&gt;
&lt;p&gt;드문 경우지만, 다른 훅과는 상관없이 &lt;code class=&quot;language-text&quot;&gt;bind&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; 훅에서 같은 동작을 하기 원할 수 있습니다. 이 경우에는 함수 약어를 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.directive(&amp;#39;theme-switcher&amp;#39;, function (el, binding) {
 el.style.backgroundColor = binding.value
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;render-함수를-사용하는-이유는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#render-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94&quot; aria-label=&quot;render 함수를 사용하는 이유는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;render 함수를 사용하는 이유는?&lt;/h3&gt;
&lt;p&gt;일반적인 경우 Vue의 템플릿을 이용해 HTML을 작성하는 것을 권장합니다. 하지만 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;slot&lt;/code&gt;의 값을 이용해 동적인 컴포넌트를 생성하는 것처럼, 일부 특별한 경우에는 JavaScript가 필요한 경우가 있습니다. 이때 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수를 사용하며, &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;함수는 JavaScript로 작성하기 때문에 프로그래밍 환경을 온전히 이용할 수 있다는 장점이 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;render-함수란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#render-%ED%95%A8%EC%88%98%EB%9E%80&quot; aria-label=&quot;render 함수란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;render 함수란?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수는 &lt;code class=&quot;language-text&quot;&gt;createElement&lt;/code&gt;라는 함수를 첫 번째 인자로 받아 가상 노드를 생성하는 함수입니다. 내부적으로 Vue의 템플릿은 빌드 타임에서 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수를 이용해 컴파일하고 있습니다. 그러므로 템플릿은 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수를 문법적으로 보기 쉽게 만들어 놓은 것에 가깝습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;
&amp;lt;div :class=&amp;quot;{&amp;#39;is-rounded&amp;#39;: isRounded}&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Welcome to Vue render functions&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 템플릿을 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수로 작성하면 아래와 같습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;render: function (createElement) {
  return createElement(&amp;#39;div&amp;#39;, {
    &amp;#39;class&amp;#39;: {
        &amp;#39;is-rounded&amp;#39;: this.isRounded
    }
  }, [
    createElement(&amp;#39;p&amp;#39;, &amp;#39;Welcome to Vue render functions&amp;#39;)
  ]);
 },&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;createelement-함수란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#createelement-%ED%95%A8%EC%88%98%EB%9E%80&quot; aria-label=&quot;createelement 함수란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;createElement 함수란?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;createElement&lt;/code&gt; 함수는 몇 가지의 약속된 전달인자를 받는데, 이를 이용해 템플릿에서 사용되는 기능을 JavaScript 코드로 작성할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
 &lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     attrs&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;someId&apos;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       myProp&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;somePropValue&apos;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     domProps&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       innerHTML&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;This is some text&apos;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     on&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         click&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;clickHandler
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
         fontSize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;14px&apos;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          classsName1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          classsName2&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
   &lt;span class=&quot;token string&quot;&gt;&apos;Learn about createElement arguments.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;h1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Headline as a child virtual node&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       someProp&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;This is a prop value&apos;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;가상-노드를-여러-번-사용할-수-있는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81-%EB%85%B8%EB%93%9C%EB%A5%BC-%EC%97%AC%EB%9F%AC-%EB%B2%88-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;가상 노드를 여러 번 사용할 수 있는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상 노드를 여러 번 사용할 수 있는 방법은?&lt;/h3&gt;
&lt;p&gt;컴포넌트 트리의 모든 가상 노드(VNodes)는 고유해야 합니다. 즉, 직접 가상 노드를 여러 번 사용할 수는 없습니다. 만약 같은 엘리먼트나 컴포넌트를 여러 번 반복해서 사용해야 한다면, 팩토리 패턴을 이용해 작성해야 합니다.&lt;/p&gt;
&lt;p&gt;아래의 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수는 &lt;code class=&quot;language-text&quot;&gt;h1&lt;/code&gt; 엘리먼트를 세 번 반복하려 했기 때문에 유효하지 않습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;render: function (createElement) {
  var myHeadingVNode = createElement(&amp;#39;h1&amp;#39;, &amp;#39;This is a Virtual Node&amp;#39;)
  return createElement(&amp;#39;div&amp;#39;, [
    myHeadingVNode, myHeadingVNode, myHeadingVNode
  ])
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;팩토리 패턴을 이용하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;render: function (createElement) {
  return createElement(&amp;#39;div&amp;#39;,
    Array.apply(null, { length: 3 }).map(function () {
      return createElement(&amp;#39;h1&amp;#39;, &amp;#39;This is a Virtual Node&amp;#39;)
    })
  )
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;render-함수와-템플릿을-비교한다면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#render-%ED%95%A8%EC%88%98%EC%99%80-%ED%85%9C%ED%94%8C%EB%A6%BF%EC%9D%84-%EB%B9%84%EA%B5%90%ED%95%9C%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;render 함수와 템플릿을 비교한다면 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;render 함수와 템플릿을 비교한다면?&lt;/h3&gt;
&lt;p&gt;Vue에서 HTML을 작성하는데 사용되는 템플릿과 render 함수를 비교해봅시다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;템플릿(Templates)&lt;/th&gt;
&lt;th&gt;렌더 함수(Render function)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;v-if&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;v-for&lt;/code&gt;를 이용해 조건문/반복문 실행&lt;/td&gt;
&lt;td&gt;JavaScript의 &lt;code class=&quot;language-text&quot;&gt;if else&lt;/code&gt;문과 &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; 메소드로 조건문/반복문 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;로 양방향 바인딩&lt;/td&gt;
&lt;td&gt;바인딩과 이벤트를 직접 설정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Capture 이벤트 수식어는 &lt;code class=&quot;language-text&quot;&gt;.passive&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.capture&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.once,&lt;/code&gt; &lt;code class=&quot;language-text&quot;&gt;.capture.once&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.once.capture&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;#x26;, !, ~, ~!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;이벤트 수식어와 키 수식어: &lt;code class=&quot;language-text&quot;&gt;.stop&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.prevent&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.self&lt;/code&gt;, keys(&lt;code class=&quot;language-text&quot;&gt;.enter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.13&lt;/code&gt;) and Modifiers Keys(&lt;code class=&quot;language-text&quot;&gt;.ctrl&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.alt&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.shift&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;.meta&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;JavaScript로 해결, &lt;code class=&quot;language-text&quot;&gt;event.stopPropagation()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;event.preventDefault()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;if (event.target !== event.currentTarget) return&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;if (event.keyCode !== 13) return&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;if (!event.ctrlKey) return&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;슬롯 속성 활용&lt;/td&gt;
&lt;td&gt;렌더 함수의 &lt;code class=&quot;language-text&quot;&gt;this.$slots&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;this.$scopedSlots&lt;/code&gt; 활용&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;컴포넌트functional-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8functional-component&quot; aria-label=&quot;컴포넌트functional component permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트(Functional component)&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 함수형 컴포넌트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;context를 통해 전달받은 정보로만 생성되는 간단한 컴포넌트&lt;/li&gt;
&lt;li&gt;상태 없음(Stateless): data 가 없음&lt;/li&gt;
&lt;li&gt;인스턴스 없음(Instanceless):  this가 없음&lt;/li&gt;
&lt;li&gt;functional: true속성을 이용해 컴포넌트를 함수형으로 작성.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;my-component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  functional&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;createElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) 동적 컴포넌트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;component&gt; 태그에서 v-bind:is로 바인딩된 컴포넌트를 동적으로 전환&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    currentPage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;home&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  components&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    home&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;Home&amp;lt;/p&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    about&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;About&amp;lt;/p&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    contact&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;Contact&amp;lt;/p&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;v-bind:&lt;/span&gt;is&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;currentPage&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) keep-alive 태그&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트의 상태를 보존해서 재 렌더링을 막아주는 추상 컴포넌트입니다. &lt;/li&gt;
&lt;li&gt;만약 동적인 컴포넌트를 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 태그로 감싼다면, 컴포넌트 인스턴스를 없애지 않고 메모리에 유지해 보존합니다.&lt;/li&gt;
&lt;li&gt;DOM에 렌더링 되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;v-bind:&lt;/span&gt;is&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;currentTabComponent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;만약 조건문이 있다면, 해당 조건의 하위 컴포넌트만 렌더링됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comp-a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-if&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a &gt; 1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comp-a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;comp-b&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;comp-b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) 비동기 컴포넌트(Async component)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;대규모 응용 프로그램에서는 응용 프로그램을 더 작은 덩어리로 나누고 실제로 필요할 때만 서버에서 컴포넌트를 로드해야 할 수도 있습니다. &lt;/li&gt;
&lt;li&gt;Vue를 사용하면 컴포넌트 정의를 비동기식으로 해결하는 팩토리 함수로 컴포넌트를 정의 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;async-webpack-example&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Webpack automatically split your built code into bundles which are loaded over Ajax requests.&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./my-async-component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; resolve&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vue는 Vue는 컴포넌트가 렌더링되어야 할 때만 팩토리 함수를 실행시키고, 이후의 나중에 있을 리렌더링을 위해 결과를 캐시합니다.&lt;/p&gt;
&lt;h4&gt;5) 비동기 컴포넌트 팩토리 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비동기 컴포넌트 팩토리는 다음 형태의 객체를 반환.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;AsyncComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./MyComponent.vue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  loading&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; LoadingComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  error&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ErrorComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  delay&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  timeout&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;6) 인라인 템플릿(inline templates)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;하위 컴포넌트에 &lt;code class=&quot;language-text&quot;&gt;inline-template&lt;/code&gt; 속성이 존재할 때, 컴포넌트는 내부 컨텐츠를 템플릿으로 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;inline-template&lt;/code&gt;은 템플릿의 범위를 추론하기 어렵게 만듦&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;template&lt;/code&gt; 옵션을 사용하거나 &lt;code class=&quot;language-text&quot;&gt;.vue&lt;/code&gt; 파일의 &lt;code class=&quot;language-text&quot;&gt;template&lt;/code&gt; 엘리먼트를 사용하여 컴포넌트 내부에 템플릿을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;my-component&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;inline-template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Inline templates&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Treated as component component owne content&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;my-component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;7) X-Templates이란?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;템플릿를 정의하는 또 다른 방법은 &lt;code class=&quot;language-text&quot;&gt;text/x-template&lt;/code&gt; 유형의 스크립트 엘리먼트 내부의 ID로 템플릿을 참조하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/x-template&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;script-template&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Welcome to &lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;Template feature&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;x-template-example&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#script-template&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;8) 재귀 컴포넌트(recursive components)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트는 자신의 템플릿에서 자기 자신을 재귀적으로 호출 가능&lt;/li&gt;
&lt;li&gt;재귀 컴포넌트는 블로그의 덧글이나 메뉴처럼 상위 컴포넌트와 하위 컴포넌트가 동등한 기능을 할 때 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;recursive-component&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;!--Invoking myself!--&gt;
             &amp;lt;recursive-component&gt;&amp;lt;/recursive-component&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;9) 컴포넌트 사이의 순환 참조&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;복잡한 어플리케이션에서 Vue 컴포넌트가 서로가 서로를 호출하고 있는 상황이 발생할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;beforeCreate&lt;/code&gt; 라이프 사이클 훅 시점까지 기다렸다가 해당 컴포넌트를 등록하거나, 웹팩의 비동기 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;를 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;//ComponentA
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component-b&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

//ComponentB
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component-b&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;해결법 1&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;beforeCreate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$options&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;components&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;componentB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./component-b.vue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;default
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;해결법 2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;components&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token function-variable function&quot;&gt;componentB&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./component-b.vue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;하위-컴포넌트-상위-컴포넌트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%83%81%EC%9C%84-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8&quot; aria-label=&quot;하위 컴포넌트 상위 컴포넌트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하위 컴포넌트, 상위 컴포넌트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상위 컴포넌트에서는 하위 컴포넌트들을 &lt;code class=&quot;language-text&quot;&gt;$children&lt;/code&gt; 배열로 참조하며, &lt;/li&gt;
&lt;li&gt;하위 컴포넌트에서 상위 컴포넌트를 &lt;code class=&quot;language-text&quot;&gt;$parent&lt;/code&gt; 속성으로 참조합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vue-의-장단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;vue 의 장단점 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue 의 장단점&lt;/h2&gt;
&lt;h4&gt;1) Vue와 React&lt;/h4&gt;
&lt;h5&gt;(1) 공통점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;두 프레임워크 모두 가상 DOM모델을 사용&lt;/li&gt;
&lt;li&gt;반응적이고 조합 가능한 컴포넌트를 제공&lt;/li&gt;
&lt;li&gt;코어 라이브러리에만 집중하고 있고, 라우팅 및 상태 관리와 같은 라이브러리가 부가적으로 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 차이점&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;타입&lt;/td&gt;
&lt;td&gt;JavaScript MVC 프레임워크&lt;/td&gt;
&lt;td&gt;JavaScript 라이브러리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;플랫폼&lt;/td&gt;
&lt;td&gt;웹을 우선적으로&lt;/td&gt;
&lt;td&gt;웹과 네이티브 모두&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;복잡도&lt;/td&gt;
&lt;td&gt;상대적으로 간단&lt;/td&gt;
&lt;td&gt;상대적으로 복잡&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;빌드 어플리케이션&lt;/td&gt;
&lt;td&gt;Vue-cli&lt;/td&gt;
&lt;td&gt;CRA (&lt;code class=&quot;language-text&quot;&gt;Create-React-App&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;(3) Vue가 React에 비해 나은 점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;가볍고 빠름&lt;/li&gt;
&lt;li&gt;템플릿이 개발 과정을 쉽게 만들어줌&lt;/li&gt;
&lt;li&gt;JSX에 비해 가벼운 JavaScript 문법을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) React가 Vue에 비해 나은 점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모바일 앱 제작에도 적합&lt;/li&gt;
&lt;li&gt;생태계가 크고 풍부&lt;/li&gt;
&lt;li&gt;큰 규모의 어플리케이션을 유연하게 만들 수 있음&lt;/li&gt;
&lt;li&gt;테스트가 쉬움&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Vue와 Angular&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;th&gt;Angular&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;복잡도&lt;/td&gt;
&lt;td&gt;배우기 쉬운 API와 디자인&lt;/td&gt;
&lt;td&gt;프레임워크가 꽤 크고 타입스크립트 등의 지식 필요&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 바인딩&lt;/td&gt;
&lt;td&gt;양방향 바인딩&lt;/td&gt;
&lt;td&gt;단방향 바인딩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;초기 릴리즈&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;모델&lt;/td&gt;
&lt;td&gt;가상 DOM 기반&lt;/td&gt;
&lt;td&gt;MVC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;작성된 언어&lt;/td&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td&gt;TypeScript&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;csp-환경에서-vue-어플리케이션을-빌드하는-법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#csp-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-vue-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-%EB%B9%8C%EB%93%9C%ED%95%98%EB%8A%94-%EB%B2%95%EC%9D%80&quot; aria-label=&quot;csp 환경에서 vue 어플리케이션을 빌드하는 법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSP 환경에서 Vue 어플리케이션을 빌드하는 법은?&lt;/h3&gt;
&lt;p&gt;Google 크롬 앱과 같은 일부 환경에서는 CSP(컨텐츠 보안 정책)를 적용하여 표현식을 평가하는 데 &lt;code class=&quot;language-text&quot;&gt;new Function()&lt;/code&gt; 을 사용할 수 없습니다. 전체 빌드는 이 기능을 사용하여 템플릿을 컴파일하므로 이러한 환경에서는 사용할 수 없습니다.&lt;/p&gt;
&lt;p&gt;반면 런타임 전용 빌드는 CSP와 완벽하게 호환됩니다. Webpack + vue-loader 또는 Browserify + vueify로 런타임 전용 빌드를 사용하는 경우 템플릿은 CSP 환경에서 완벽하게 작동하는 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수로 미리 컴파일됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;전체-빌드와-런타임-빌드의-차이점은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%B4-%EB%B9%8C%EB%93%9C%EC%99%80-%EB%9F%B0%ED%83%80%EC%9E%84-%EB%B9%8C%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80&quot; aria-label=&quot;전체 빌드와 런타임 빌드의 차이점은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전체 빌드와 런타임 빌드의 차이점은?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1. 전체 빌드(Full):&lt;/strong&gt; 컴파일러와 런타임 빌드를 동시에 포함합니다. 템플릿을 작성한 경우 필요합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 런타임 빌드(Runtime):&lt;/strong&gt; Vue 인스턴스 생성과 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수, 가상 돔을 포함하고 있지만 컴파일러 빌드를 포함하고 있지 않습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue의-빌드-종류는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue%EC%9D%98-%EB%B9%8C%EB%93%9C-%EC%A2%85%EB%A5%98%EB%8A%94&quot; aria-label=&quot;vue의 빌드 종류는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue의 빌드 종류는?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;타입&lt;/th&gt;
&lt;th&gt;UMD&lt;/th&gt;
&lt;th&gt;CommonJS&lt;/th&gt;
&lt;th&gt;ES Module (for bundlers)&lt;/th&gt;
&lt;th&gt;ES Module (for browsers)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;전체 빌드&lt;/td&gt;
&lt;td&gt;vue.js&lt;/td&gt;
&lt;td&gt;vue.common.js&lt;/td&gt;
&lt;td&gt;vue.esm.js&lt;/td&gt;
&lt;td&gt;vue.esm.browser.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;런타임 빌드&lt;/td&gt;
&lt;td&gt;vue.runtime.js&lt;/td&gt;
&lt;td&gt;vue.runtime.common.js&lt;/td&gt;
&lt;td&gt;vue.runtime.esm.js&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;전체 빌드 (배포 모드)&lt;/td&gt;
&lt;td&gt;vue.min.js&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;vue.esm.browser.min.js&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;런타임 빌드 (배포 모드)&lt;/td&gt;
&lt;td&gt;vue.runtime.min.js&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;td&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;웹팩에서-vue-설정을-하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%B9%ED%8C%A9%EC%97%90%EC%84%9C-vue-%EC%84%A4%EC%A0%95%EC%9D%84-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;웹팩에서 vue 설정을 하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹팩에서 Vue 설정을 하는 방법은?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;alias&lt;/code&gt;를 이용해 Vue를 설정할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
 resolve&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   alias&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token string&quot;&gt;&apos;vue$&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue/dist/vue.esm.js&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;vue/dist/vue.common.js&apos; for webpack 1&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue-컴파일러의-목적은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%9D%98-%EB%AA%A9%EC%A0%81%EC%9D%80&quot; aria-label=&quot;vue 컴파일러의 목적은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue 컴파일러의 목적은?&lt;/h3&gt;
&lt;p&gt;Vue는 컴파일러를 이용해 템플릿을 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수로 변환합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// this requires the compiler&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;{{ message }}&amp;lt;/div&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// this does not&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vuejs의-브라우저-지원은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vuejs%EC%9D%98-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A7%80%EC%9B%90%EC%9D%80&quot; aria-label=&quot;vuejs의 브라우저 지원은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VueJS의 브라우저 지원은?&lt;/h3&gt;
&lt;p&gt;ECMAScript5를 지원하는 브라우저에서 동작 가능합니다. IE8 이하의 브라우저에서는 지원하지 않습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;cdn으로-vue를-사용하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cdn%EC%9C%BC%EB%A1%9C-vue%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;cdn으로 vue를 사용하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CDN으로 Vue를 사용하는 방법은?&lt;/h3&gt;
&lt;p&gt;Vue는 jsdelivr, unpkg, cdnjs에서 제공하는 CDN을 이용해서도 사용이 가능합니다. 일반적으로 초기 기획, 학습용으로 적합합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/vue@2.6.7/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;
 import Vue from &amp;#39;https://cdn.jsdelivr.net/npm/vue@2.6.7/dist/vue.esm.browser.js&amp;#39;
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 버전 정보를 지우면 항상 최신 버전을 가져옵니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;강제로-업데이트를-발생시키는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%95%EC%A0%9C%EB%A1%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;강제로 업데이트를 발생시키는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;강제로 업데이트를 발생시키는 방법은?&lt;/h3&gt;
&lt;p&gt;매우 드문 경우지만, 데이터가 변경되지 않았음에도 재 렌더링을 위해 강제로 업데이트를 발생시켜야 할 수도 있습니다. 이 경우 &lt;code class=&quot;language-text&quot;&gt;vm.$forceUpdate()&lt;/code&gt; API 메소드를 이용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 모든 하위 컴포넌트에는 영향이 미치지 않으며, 슬롯 그 자체가 삽입된 슬롯 자체 및 하위 컴포넌트에만 영향을 미칩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;템플릿에서-once-지시자를-쓰는-이유는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%9C%ED%94%8C%EB%A6%BF%EC%97%90%EC%84%9C-once-%EC%A7%80%EC%8B%9C%EC%9E%90%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0%EB%8A%94&quot; aria-label=&quot;템플릿에서 once 지시자를 쓰는 이유는 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;템플릿에서 once 지시자를 쓰는 이유는?&lt;/h3&gt;
&lt;p&gt;많은 양의 정적 컨텐츠를 렌더링 할 때, 성능 향상을 위해 엘리먼트 및 컴포넌트를 한번만 렌더링하는 용도로 사용합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.component(&amp;#39;legal-terms&amp;#39;, {
  template: `
    &amp;lt;div v-once&amp;gt;
      &amp;lt;h1&amp;gt;Legal Terms&amp;lt;/h1&amp;gt;
      ... a lot of static content goes here...
    &amp;lt;/div&amp;gt;
  `
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 정적 컨텐츠가 많아서 느려지는 일이 발생하지 않는 한, 과다하게 사용하지 않는 것이 좋습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;루트-vue-인스턴스에-접근&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A3%A8%ED%8A%B8-vue-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EA%B7%BC&quot; aria-label=&quot;루트 vue 인스턴스에 접근 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;루트 Vue 인스턴스에 접근&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;$root&lt;/code&gt; 속성을 이용해 접근&lt;/li&gt;
&lt;li&gt;상태 관리를 위한 용도라면 Vuex를 사용하는 것이 낫습니다.&lt;/li&gt;
&lt;li&gt;루트 인스턴스의 데이터와 메소드들을 하위 컴포넌트에서 아래와 같은 방법으로 접근&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  computed&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  methods&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;interest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$root&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$root&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$root&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fullName
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$root&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;interest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;rendererror-메소드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rendererror-%EB%A9%94%EC%86%8C%EB%93%9C&quot; aria-label=&quot;rendererror 메소드 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;renderError 메소드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기본 &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt; 함수가 렌더링 도중 에러가 발생하면, 대체되는 렌더링 결과를 제공&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;renderError&lt;/code&gt;의 두 번째 전달인자로 에러가 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;An error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;renderError&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;h&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; style&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; color&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;red&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node]]></title><link>https://jigglog.netlify.app/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node/</link><guid isPermaLink="false">https://jigglog.netlify.app/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - node/</guid><pubDate>Tue, 20 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt; 백엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;worker_thread-모듈&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#worker_thread-%EB%AA%A8%EB%93%88&quot; aria-label=&quot;worker_thread 모듈 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;worker_thread 모듈&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Node.js는 이벤트 루프가 싱글 스레드에서 동작하지만 내부적으로 스레드풀을 두어 I/O 작업에 스레드를 사용할 수 있도록 하고 이를 통해 병렬적으로 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;requestHandler&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; server &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requestHandler&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
server&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;node.js가 사용하는 libuv의 모듈은 내부적으로 thread pool을 두어 I/O 작업을 thead pool에 존재하는 thread를 사용해 처리하기 때문에 event loop는 Block 당하지 않고 빠르게 작업을 계속 진행할 수 있음&lt;/li&gt;
&lt;li&gt;Node.js는 싱글 스레드다 라는 말은 거짓&lt;/li&gt;
&lt;li&gt;하지만 일반적인 javascript 코드들은 싱글 스레드인 이벤트 루프에서 작업&lt;/li&gt;
&lt;li&gt;CPU 작업량이 많은 코드는 다른 자바스크립트 코드를 Block하게 만들어 다른 작업이 중단된 것처럼 보일 수 있음&lt;/li&gt;
&lt;li&gt;Node.js 버전 10.5부터 thread pool에 worker_thread라는 모듈을 통해 스레드를 생성&lt;/li&gt;
&lt;li&gt;node를 실행시킬 때 다음 플래그&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;node index.js&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; --experimental-worker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Nuxt/</guid><pubDate>Thu, 15 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용(Nuxt) 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;asyncdata&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#asyncdata&quot; aria-label=&quot;asyncdata permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;asyncData()&lt;/h2&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트 데이터를 세팅하기 전에 비동기 처리를 할 수 있음&lt;/li&gt;
&lt;li&gt;컴포넌트를 로드하기 전에 호출&lt;/li&gt;
&lt;li&gt;페이지 컴포넌트에서만 사용 가능&lt;/li&gt;
&lt;li&gt;컨텍스트 객체를 첫번째 인수로 받으며, 이를 사용해 일부 데이터를 가져와 컴포넌트 데이터를 반환&lt;/li&gt;
&lt;li&gt;asyncData()의 return값은 컴포넌트의 data와 병합&lt;/li&gt;
&lt;li&gt;asyncData()는 컴포넌트를 초기화 하기 전에 실행되기 때문에 메서드 내부에서는 this를 통해 컴포넌트 인스턴스에 접근할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 사용 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Promise 객체 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;asyncData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; params &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://my-api/posts/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;async/await 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; params &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://my-api/posts/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&quot;fetch&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#fetch&quot; aria-label=&quot;fetch permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;fetch()&lt;/h2&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;페이지가 랜더링되기 전에 데이터를 스토어에 넣기위해서 사용&lt;/li&gt;
&lt;li&gt;컴포넌트를 로드하기 전에 호출&lt;/li&gt;
&lt;li&gt;모든 컴포넌트에서 사용 가능&lt;/li&gt;
&lt;li&gt;컨텍스트객체를 첫번째 인수로 받으며, 그 데이터를 스토어에 넣을 수 있음&lt;/li&gt;
&lt;li&gt;return값은 Promise&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Nuxt.js&lt;/code&gt;는 컴포넌트가 랜더링 되기 전에 Promise가 종료되기를 기다림&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 사용방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Promise 객체 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://my-api/posts/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;setPosts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;async/await 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://my-api/posts/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;setPosts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - Vue(1)/</guid><pubDate>Thu, 15 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용(Vue) 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;vue-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;vue 개요 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue 개요&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) vue란&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자 인터페이스를 만들기 위한 진보적인 프레임워크&lt;/li&gt;
&lt;li&gt;핵심 라이브러리는 &lt;code class=&quot;language-text&quot;&gt;뷰 레이어&lt;/code&gt;만 초점을 맞추어, 다른 라이브러리나 기존 프로젝트와의 통합이 쉬움&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가상 DOM(Virtual DOM): 가상 DOM은 원본 HTML DOM을 표현하는 메모리 상의 가벼운 DOM 트리로, 원본 DOM에 영향을 미치지 않고 업데이트 가능&lt;/li&gt;
&lt;li&gt;컴포넌트(Components):  VueJS 어플리케이션에서 재사용할 수 있는 엘리먼트들을 만들 수 있음&lt;/li&gt;
&lt;li&gt;템플릿(Templates):  VueJS는 Vue 인스턴스 데이터와 DOM에 접근할 수 있는 HTML 기반의 템플릿을 제공&lt;/li&gt;
&lt;li&gt;라우팅(Routing): 페이지의 전환은 vue-router를 이용&lt;/li&gt;
&lt;li&gt;저용량(Light weight): VueJS는 다른 프레임워크와 비교해 저용량&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vue-라이프사이클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4&quot; aria-label=&quot;vue 라이프사이클 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue 라이프사이클&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용중인 라이브러리가 어떤 순서로 동작하는지를 알려주는 역할&lt;/li&gt;
&lt;li&gt;훅을 이용해 컴포넌트가 언제 생성되고, 언제 DOM에 추가되며, 언제 업데이트되고 언제 사라지는지 알 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://github.com/sudheerj/vuejs-interview-questions/raw/master/images/vuelifecycle.png&quot; alt=&quot;img&quot; style=&quot;zoom: 33%;&quot;&gt;
&lt;h4&gt;2) Creation(초기화)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 DOM에 추가되기 전에 실행되는 단계&lt;/li&gt;
&lt;li&gt;클라이언트와 서버가 렌더링 단계 전에 컴포넌트에 설정해야 할 것들이 있을 때 사용하는 단계&lt;/li&gt;
&lt;li&gt;다른 훅과는 다르게, Create 훅은 서버 사이드 렌더링에서도 지원되는 훅&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) beforeCreate&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트 초기화 단계 중 가장 처음으로 실행&lt;/li&gt;
&lt;li&gt;컴포넌트의 data를 관찰하고, 이벤트를 초기화&lt;/li&gt;
&lt;li&gt;data는 아직까지 반응적이지 않으며, 컴포넌트의 라이프사이클에서 발생하는 이벤트 역시 설정되지 않은 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
       count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;beforeCreate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nothing gets called at this moment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// `this` points to the view model instance&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;count is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;token comment&quot;&gt;// count is undefined&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) created&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Vue 인스턴스가 이벤트를 설정하고 data를 관찰할 때 발생&lt;/li&gt;
&lt;li&gt;템플릿은 아직 마운트되거나 렌더링되지 않았지만 이벤트들이 활성화되며 data에 반응적으로 접근하는 것이 가능&lt;/li&gt;
&lt;li&gt;DOM에 직접 접근하거나 마운트할 엘리먼트(&lt;code class=&quot;language-text&quot;&gt;this.$el&lt;/code&gt;)에 직접 접근할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;count is: &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) Mounting(DOM 추가)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가장 많이 사용되는 단계로, 컴포넌트가 렌더링되기 직전이나 직후에 컴포넌트에 접근할 수 있는 단계&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) beforeMount&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 DOM에 추가되기 직전에 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;beforeMount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;this.$el is yet to be created&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) mounted&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;반응적인 data, 템플릿, 렌더링된 DOM(this.$el) 모두에 접근할 수 있어서 가장 많이 사용되는 훅&lt;/li&gt;
&lt;li&gt;흔히 컴포넌트에서 필요한 데이터를 외부에서 가져오는(fetch) 용도로 많이 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;p&amp;gt;I’m text inside the component.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
  new Vue({
    el: &amp;#39;#app&amp;#39;,
    mounted: function() {
      console.log(this.$el.textContent);
    }
  })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) Updating (재 렌더링)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Update 훅은 컴포넌트 내부의 반응적인 속성이 변했거나, 그 외의 것들이 재 렌더링을 일으킬 때 실행되는 단계&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) beforeUpdate&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트의 data가 변경되어 업데이트 사이클이 시작될 때 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// rest of the code&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        counter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;token function-variable function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;token function-variable function&quot;&gt;beforeUpdate&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) updated&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트의 data가 변하여 재 렌더링이 일어난 후에 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dom&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        counter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$refs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;dom&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5) Destruction(해체)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트를 더 이상 사용하지 않을 때 사용하는 단계&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) beforeDestroy&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 해체되기 직전에 실행&lt;/li&gt;
&lt;li&gt;반응적인 이벤트들이나 data들을 해체하는 훅으로 적합&lt;/li&gt;
&lt;li&gt;컴포넌트는 여전히 문제없이 잘 동작&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Welcome VueJS developers&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;beforeDestroy&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) destroyed&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트가 해체되고 난 직후에 호출&lt;/li&gt;
&lt;li&gt;모든 지시자들의 바인딩이 해제되었으며, 이벤트 리스너가 제거된 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;destroyed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Nothing to show here&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;조건부-지시자conditional-directives&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EB%B6%80-%EC%A7%80%EC%8B%9C%EC%9E%90conditional-directives&quot; aria-label=&quot;조건부 지시자conditional directives permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조건부 지시자(conditional directives)&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;조건에 따라 엘리먼트를 보여주거나 숨길 수 있는 지시자&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) v-if&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;조건에 따라 DOM 엘리먼트를 추가하거나 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-if&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;isLoggedIn&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Logout&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;엘리먼트들을 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 태그로 감싼다면, 하나의 v-if만으로 여러 엘리먼트들의 조건을 설정할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template v-if=&amp;quot;isLoggedIn&amp;quot;&amp;gt;
  &amp;lt;label&amp;gt; Logout &amp;lt;/button&amp;gt;
  &amp;lt;button&amp;gt; Logout &amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) v-else&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인접한 v-if 지시자 또는 v-else-if 지시자가 false일 때만 그 내용이 나타남&lt;/li&gt;
&lt;li&gt;조건을 지정할 필요가 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-if&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;isLoggedIn&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Logout &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Log In &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) v-else-if&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;v-if 이외의 다른 조건을 추가로 확인해야 할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-if&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;isLoggedIn&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Logout &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-else-if&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;isLoginDisabled&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; User login disabled &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Log In &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) v-show&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;v-if 지시자와 비슷한 기능을 하지만, DOM에 엘리먼트가 추가된 상태에서 CSS의 display 값을 이용해 보여주고 숨김을 결정&lt;/li&gt;
&lt;li&gt;조건문이 자주 토글될 때 권장&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-show&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;user.name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Welcome user,{{user.name}}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5) v-show와 v-if의 차이점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;v-if는 조건이 일치하는 엘리먼트만 DOM에 렌더링하는 반면, v-show는 모든 엘리먼트를 DOM에 렌더링한 후 CSS를 이용해 내용을 보여주거나 숨김&lt;/li&gt;
&lt;li&gt;v-if와 v-else-if에서는 v-else를 사용할 수 있지만, v-show에서는 사용할 수 없음&lt;/li&gt;
&lt;li&gt;v-if는 토글할 때 높은 렌더링 비용이 들지만, v-show는 초기의 렌더링 작업에서 높은 비용이 듦&lt;/li&gt;
&lt;li&gt;v-show는 요소를 자주 켜고 끄는 경우 성능 상의 이점이 있지만, 초기 렌더링 작업에서는 v-if가 더 효율적&lt;/li&gt;
&lt;li&gt;v-if는 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;태그에서 사용할 수 있지만 v-show는 사용할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;v-for&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v-for&quot; aria-label=&quot;v for permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;v-for&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;h3 id=&quot;v-for를-쓰는-목적은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v-for%EB%A5%BC-%EC%93%B0%EB%8A%94-%EB%AA%A9%EC%A0%81%EC%9D%80&quot; aria-label=&quot;v for를 쓰는 목적은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;v-for를 쓰는 목적은&lt;/h3&gt;
&lt;p&gt;v-for 지시자는 배열이나 객체를 순환하면서 반복적인 렌더링을 가능하게 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;배열의 경우:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul id=&amp;quot;list&amp;quot;&amp;gt;
  &amp;lt;li v-for=&amp;quot;(item, index) in items&amp;quot;&amp;gt;
    {{ index }} - {{ item.message }}
  &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

var vm = new Vue({
  el: &amp;#39;#list&amp;#39;,
  data: {
    items: [
      { message: &amp;#39;John&amp;#39; },
      { message: &amp;#39;Locke&amp;#39; }
    ]
  }
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자바스크립트 순환문과 유사하게, &lt;code class=&quot;language-text&quot;&gt;in&lt;/code&gt; 외에도 &lt;code class=&quot;language-text&quot;&gt;of&lt;/code&gt;를 사용할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;객체의 경우:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&amp;quot;object&amp;quot;&amp;gt;
  &amp;lt;div v-for=&amp;quot;(value, key, index) in user&amp;quot;&amp;gt;
    {{ index }}. {{ key }}: {{ value }}
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

var vm = new Vue({
  el: &amp;#39;#object&amp;#39;,
  data: {
    user: {
      firstName: &amp;#39;John&amp;#39;,
      lastName: &amp;#39;Locke&amp;#39;,
      age: 30
    }
  }
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;v-for에서-key-속성이-필요한-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v-for%EC%97%90%EC%84%9C-key-%EC%86%8D%EC%84%B1%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;v for에서 key 속성이 필요한 이유 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;v-for에서 key 속성이 필요한 이유&lt;/h3&gt;
&lt;p&gt;Vue에서 개별 DOM 노드들을 추적하고 기존 엘리먼트의 재사용/재정렬을 위해, v-for의 요소에 고유한 key 속성을 제공해야 합니다. key에 대한 이상적인 값은 각 항목을 식별할 수 있는 고유한 ID입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div v-for=&amp;quot;item in items&amp;quot; :key=&amp;quot;item.id&amp;quot;&amp;gt;
  {{item.name}}
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;반복되는 DOM 내용이 단순한 경우나 의도적인 성능 향상을 위해 기본 동작에 의존하지 않는 경우를 제외하면, 가능하면 언제나 v-for에 key를 추가하는 것이 좋습니다. &lt;strong&gt;Note:&lt;/strong&gt; 객체나 배열처럼, 기본 타입(Primitive value)이 아닌 값을 키로 사용해서는 안됩니다. 문자열이나 숫자를 사용하세요.&lt;/p&gt;
&lt;h3 id=&quot;vue-인스턴스란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%9E%80&quot; aria-label=&quot;vue 인스턴스란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue 인스턴스란&lt;/h3&gt;
&lt;p&gt;모든 Vue 어플리케이션은 Vue 함수를 이용해 Vue 인스턴스를 생성하면서 동작합니다. 일반적으로 &lt;code class=&quot;language-text&quot;&gt;vm&lt;/code&gt;(ViewModel의 축약형)이라는 변수를 이용해 Vue 인스턴스를 참조합니다. 아래와 같은 방법으로 Vue 인스턴스를 생성할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var vm = new Vue({
  // options
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;key-속성을-이용해-엘리먼트를-재사용하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#key-%EC%86%8D%EC%84%B1%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EB%A5%BC-%EC%9E%AC%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;key 속성을 이용해 엘리먼트를 재사용하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key 속성을 이용해 엘리먼트를 재사용하는 방법은&lt;/h3&gt;
&lt;p&gt;Vue는 가능한 한 엘리먼트를 효율적으로 렌더링하려 합니다. 그래서 엘리먼트를 처음부터 다시 만들기보다는 재사용하려 합니다. 그러나 이는 몇 가지 상황에서 문제를 일으킬 수 있습니다. 예를 들어, &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 엘리먼트를 &lt;code class=&quot;language-text&quot;&gt;v-if&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;v-else&lt;/code&gt; 블록 양쪽에서 사용하면, &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 엘리먼트는 조건문에 따라 바뀌지 않고 최초에 렌더링 된 엘리먼트의 상태를 유지하고 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template v-if=&amp;quot;loginType === &amp;#39;Admin&amp;#39;&amp;quot;&amp;gt;
 &amp;lt;label&amp;gt;Admin&amp;lt;/label&amp;gt;
 &amp;lt;input placeholder=&amp;quot;Enter your ID&amp;quot;&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;template v-else&amp;gt;
 &amp;lt;label&amp;gt;Guest&amp;lt;/label&amp;gt;
 &amp;lt;input placeholder=&amp;quot;Enter your name&amp;quot;&amp;gt;
&amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우에서 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 엘리먼트는 재사용되어서는 안 되기 때문에, &lt;strong&gt;key&lt;/strong&gt; 속성을 이용해 두 개의 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 엘리먼트를 별개의 것으로 취급하도록 선언할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;   &amp;lt;template v-if=&amp;quot;loginType === &amp;#39;Admin&amp;#39;&amp;quot;&amp;gt;
     &amp;lt;label&amp;gt;Admin&amp;lt;/label&amp;gt;
     &amp;lt;input placeholder=&amp;quot;Enter your ID&amp;quot; key=&amp;quot;admin-id&amp;quot;&amp;gt;
   &amp;lt;/template&amp;gt;
   &amp;lt;template v-else&amp;gt;
     &amp;lt;label&amp;gt;Guest&amp;lt;/label&amp;gt;
     &amp;lt;input placeholder=&amp;quot;Enter your name&amp;quot; key=&amp;quot;user-name&amp;quot;&amp;gt;
   &amp;lt;/template&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 경우는 두 개의 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 엘리먼트가 별개의 것으로 취급되며 서로에게 어떤 영향도 끼치지 않습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;같은-엘리먼트에서-v-for와-v-if를-함께-쓰면-안-되는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%99%EC%9D%80-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8%EC%97%90%EC%84%9C-v-for%EC%99%80-v-if%EB%A5%BC-%ED%95%A8%EA%BB%98-%EC%93%B0%EB%A9%B4-%EC%95%88-%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;같은 엘리먼트에서 v for와 v if를 함께 쓰면 안 되는 이유 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;같은 엘리먼트에서 v-for와 v-if를 함께 쓰면 안 되는 이유&lt;/h3&gt;
&lt;p&gt;v-for 지시자는 v-if 보다 더 높은 우선 순위를 갖고 있기 때문에, 한 엘리먼트 내에서 v-for와 v-if를 함께 쓰는 것은 권장되지 않습니다. 일반적으로 다음과 같은 이유 때문에 두 지시자를 함께 쓰곤 합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;리스트의 요소를 필터링하기 위해 예를 들어, v-if 지시자를 이용해 리스트에 있는 아이템을 필터링하고 싶은 경우입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li
    v-for=&amp;quot;user in users&amp;quot;
    v-if=&amp;quot;user.isActive&amp;quot;
    :key=&amp;quot;user.id&amp;quot;
  &amp;gt;
    {{ user.name }}
  &amp;lt;li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우는 아래와 같이 사전에 computed 속성을 이용해 필터링된 리스트를 만들어 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;computed: {
  activeUsers: function () {
    return this.users.filter(function (user) {
      return user.isActive
    })
  }
}
...... //
...... //
&amp;lt;ul&amp;gt;
  &amp;lt;li
    v-for=&amp;quot;user in activeUsers&amp;quot;
    :key=&amp;quot;user.id&amp;quot;&amp;gt;
    {{ user.name }}
  &amp;lt;li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;리스트 자체가 숨겨져야 할 때 예를 들어, v-if를 이용해 반복되는 리스트를 숨기고 싶은 경우입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li
    v-for=&amp;quot;user in users&amp;quot;
    v-if=&amp;quot;shouldShowUsers&amp;quot;
    :key=&amp;quot;user.id&amp;quot;
  &amp;gt;
    {{ user.name }}
  &amp;lt;li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우는 아래와 같이 조건문을 상위 엘리먼트로 옮김으로써 해결할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul v-if=&amp;quot;shouldShowUsers&amp;quot;&amp;gt;
  &amp;lt;li
    v-for=&amp;quot;user in users&amp;quot;
    :key=&amp;quot;user.id&amp;quot;
  &amp;gt;
    {{ user.name }}
  &amp;lt;li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;배열을-변화시키는-함수mutation-method란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%B3%80%ED%99%94%EC%8B%9C%ED%82%A4%EB%8A%94-%ED%95%A8%EC%88%98mutation-method%EB%9E%80&quot; aria-label=&quot;배열을 변화시키는 함수mutation method란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열을 변화시키는 함수(Mutation method)란&lt;/h3&gt;
&lt;p&gt;이름에서 볼 수 있듯, 배열을 변화시키는 함수(mutation methods)는 원본 배열을 변경시킵니다. 아래의 함수는 뷰(view) 업데이트를 일으킵니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;push()&lt;/li&gt;
&lt;li&gt;pop()&lt;/li&gt;
&lt;li&gt;shift()&lt;/li&gt;
&lt;li&gt;unshift()&lt;/li&gt;
&lt;li&gt;splice()&lt;/li&gt;
&lt;li&gt;sort()&lt;/li&gt;
&lt;li&gt;reverse()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어, 아래와 같이 &lt;code class=&quot;language-text&quot;&gt;todos&lt;/code&gt; 배열에 &lt;code class=&quot;language-text&quot;&gt;push&lt;/code&gt; 함수를 실행시키면 뷰 업데이트가 일어납니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vm.todos.push({ message: &amp;#39;Baz&amp;#39; })&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;배열을-대체하는-함수non-mutation-method란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%8C%80%EC%B2%B4%ED%95%98%EB%8A%94-%ED%95%A8%EC%88%98non-mutation-method%EB%9E%80&quot; aria-label=&quot;배열을 대체하는 함수non mutation method란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열을 대체하는 함수(Non-mutation method)란&lt;/h3&gt;
&lt;p&gt;배열을 대체하는 함수는 원본 배열을 수정하지 않고, 항상 새로운 배열을 반환합니다. 아래의 함수는 배열을 대체하는 함수입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;filter()&lt;/li&gt;
&lt;li&gt;concat()&lt;/li&gt;
&lt;li&gt;slice()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어, 아래와 같이 &lt;code class=&quot;language-text&quot;&gt;status&lt;/code&gt; 속성에 따라 &lt;code class=&quot;language-text&quot;&gt;todos&lt;/code&gt; 배열을 필터링한 새로운 배열을 반환받을 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vm.todos = vm.todos.filter(function (todo) {
 return todo.status.match(/Completed/)
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vue가 DOM을 효율적으로 재사용하기 때문에, 전체 리스트가 새로 렌더링되지는 않습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;배열-변경을-탐지할-때-주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4-%EB%B3%80%EA%B2%BD%EC%9D%84-%ED%83%90%EC%A7%80%ED%95%A0-%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;배열 변경을 탐지할 때 주의할 점 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열 변경을 탐지할 때 주의할 점&lt;/h3&gt;
&lt;p&gt;Vue는 아래의 두 가지 경우의 변경 사항을 감지할 수 없습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인덱스로 배열에 있는 항목을 직접 할당하는 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vm.todos[indexOfTodo] = newTodo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;배열의 길이를 수정하는 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vm.todos.length = todosLength&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이는 &lt;code class=&quot;language-text&quot;&gt;set&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;splice&lt;/code&gt; 함수를 이용해 해결할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;첫 번째 경우&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// Vue.set
Vue.set(vm.todos, indexOfTodo, newTodoValue)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// Array.prototype.splice
vm.todos.splice(indexOfTodo, 1, newTodoValue)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;두 번째 경우&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vm.todos.splice(todosLength)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;객체-변경을-탐지할-때-주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EB%B3%80%EA%B2%BD%EC%9D%84-%ED%83%90%EC%A7%80%ED%95%A0-%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;객체 변경을 탐지할 때 주의할 점 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 변경을 탐지할 때 주의할 점&lt;/h3&gt;
&lt;p&gt;Vue는 추가되거나 삭제된 속성에 반응형으로 접근할 수 없습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var vm = new Vue({
 data: {
   user: {
     name: &amp;#39;John&amp;#39;
   }
 }
})

// `vm.name` is now reactive

vm.email = john@email.com // `vm.email` is NOT reactive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우는 &lt;code class=&quot;language-text&quot;&gt;Vue.set(object, key, value)&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;Object.assign()&lt;/code&gt;를 이용함으로써 반응형 속성을 추가할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.set(vm.user, &amp;#39;email&amp;#39;, john@email.com);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vm.user = Object.assign({}, vm.user, {
 email: john@email.com
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;v-for를-특정-횟수만큼-반복하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v-for%EB%A5%BC-%ED%8A%B9%EC%A0%95-%ED%9A%9F%EC%88%98%EB%A7%8C%ED%81%BC-%EB%B0%98%EB%B3%B5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;v for를 특정 횟수만큼 반복하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;v-for를 특정 횟수만큼 반복하는 방법은?&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;v-for&lt;/code&gt; 지시자에 정수를 사용해 특정 횟수만큼 반복해 렌더링 할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div&amp;gt;
 &amp;lt;span v-for=&amp;quot;n in 20&amp;quot;&amp;gt;{{ n }} &amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우 1부터 20까지 숫자가 출력됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;v-for로-템플릿을-반복하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v-for%EB%A1%9C-%ED%85%9C%ED%94%8C%EB%A6%BF%EC%9D%84-%EB%B0%98%EB%B3%B5%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;v for로 템플릿을 반복하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;v-for로 템플릿을 반복하는 방법은&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;에서 v-if를 사용한 것과 유사하게, &lt;code class=&quot;language-text&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt;에서 v-for 문법을 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;ul&amp;gt;
 &amp;lt;template v-for=&amp;quot;todo in todos&amp;quot;&amp;gt;
   &amp;lt;li&amp;gt;{{ todo.title }}&amp;lt;/li&amp;gt;
   &amp;lt;li class=&amp;quot;divider&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
 &amp;lt;/template&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;이벤트-핸들러를-사용하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%95%B8%EB%93%A4%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;이벤트 핸들러를 사용하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이벤트 핸들러를 사용하는 방법은?&lt;/h3&gt;
&lt;p&gt;VueJS에서는 순수 자바스크립트와 유사하게 이벤트 핸들러를 사용할 수 있습니다. 함수에서 &lt;code class=&quot;language-text&quot;&gt;$event&lt;/code&gt; 변수를 호출해 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;button v-on:click=&amp;quot;show(&amp;#39;Welcome to VueJS world&amp;#39;, $event)&amp;quot;&amp;gt;
 Submit
&amp;lt;/button&amp;gt;

methods: {
 show: function (message, event) {
   if (event) event.preventDefault()
   console.log(message);
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;vue에서-이벤트-수식어event-modifier란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue%EC%97%90%EC%84%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%88%98%EC%8B%9D%EC%96%B4event-modifier%EB%9E%80&quot; aria-label=&quot;vue에서 이벤트 수식어event modifier란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue에서 이벤트 수식어(Event modifier)란?&lt;/h3&gt;
&lt;p&gt;일반적으로 자바스크립트에서는 이벤트 핸들러 내부에서 &lt;code class=&quot;language-text&quot;&gt;event.preventDefault()&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;event.stopPropagation()&lt;/code&gt;를 제공합니다. Vue의 메소드 내부에서도 이 작업을 할 수 있지만, DOM에서 발생한 이벤트와 메소드의 로직은 별개로 구분하는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;이 문제를 해결하기 위해, Vue는 &lt;code class=&quot;language-text&quot;&gt;v-on&lt;/code&gt; 이벤트에 이벤트 수식어를 제공합니다. 수식어는 점으로 표시된 접미사 입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.prevent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.capture&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.self&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.once&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.passive&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;.stop&lt;/code&gt; 수식어를 예로 들어보겠습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!-- the click event&amp;#39;s propagation will be stopped --&amp;gt;
&amp;lt;a v-on:click.stop=&amp;quot;methodCall&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;수식어는 연속해서 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!-- modifiers can be chained --&amp;gt;
&amp;lt;a v-on:click.stop.prevent=&amp;quot;doThat&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;키-수식어key-modifiers란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%82%A4-%EC%88%98%EC%8B%9D%EC%96%B4key-modifiers%EB%9E%80&quot; aria-label=&quot;키 수식어key modifiers란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;키 수식어(Key modifiers)란?&lt;/h3&gt;
&lt;p&gt;Vue는 키보드 이벤트를 제어하기 위해 &lt;code class=&quot;language-text&quot;&gt;v-on&lt;/code&gt; 지시자에 키 수식어를 제공합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!-- only call `vm.show()` when the `keyCode` is 13 --&amp;gt;
&amp;lt;input v-on:keyup.13=&amp;quot;show&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모든 키 코드를 외우는 것은 어렵기 때문에, Vue에서는 자주 사용되는 키들은 별칭을 제공하고 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.enter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.tab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.delete&lt;/code&gt; (“Delete”와 “Backspace” 포함)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.right&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 예시의 키 코드는 아래와 같이 별칭으로 다시 쓸 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;input v-on:keyup.enter=&amp;quot;submit&amp;quot;&amp;gt;
// (OR)
&amp;lt;!-- with shorthand notation--&amp;gt;
&amp;lt;input @keyup.enter=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;키 코드 이벤트의 사용은 최신 브라우저에서는 지원되지 않을 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;키-수식어를-커스터마이징하는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%82%A4-%EC%88%98%EC%8B%9D%EC%96%B4%EB%A5%BC-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;키 수식어를 커스터마이징하는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;키 수식어를 커스터마이징하는 방법은?&lt;/h3&gt;
&lt;p&gt;전역 &lt;code class=&quot;language-text&quot;&gt;config.keyCodes&lt;/code&gt; 객체를 통해 키 수식어를 커스터마이징할 수 있습니다. 여기에는 몇 가지 규칙들이 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;카멜 케이스(camelCase)를 대신 쌍따옴표로 감싸진 케밥 케이스(Kebab-case)를 사용해야 합니다.&lt;/li&gt;
&lt;li&gt;배열을 이용해 한 번에 여러 값들을 정의할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.config.keyCodes = {
  f1: 112,
  &amp;quot;media-play-pause&amp;quot;: 179,
  down: [40, 87]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;시스템-수식어-키system-modifier-key란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%88%98%EC%8B%9D%EC%96%B4-%ED%82%A4system-modifier-key%EB%9E%80&quot; aria-label=&quot;시스템 수식어 키system modifier key란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 수식어 키(System modifier key)란?&lt;/h3&gt;
&lt;p&gt;Vue에서는 다음 수식어를 사용해 해당 수식어 키가 눌러진 경우에만 마우스 또는 키보드 이벤트를 발생시킬 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.ctrl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.alt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.shift&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.meta&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;아래는 컨트롤 키가 눌린 상태에서 클릭 이벤트를 활성화 하는 예시입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;!-- Ctrl + Click --&amp;gt;
&amp;lt;div @click.ctrl=&amp;quot;doSomething&amp;quot;&amp;gt;Do something&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&quot;마우스-버튼-수식어mouse-button-modifier란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%9A%B0%EC%8A%A4-%EB%B2%84%ED%8A%BC-%EC%88%98%EC%8B%9D%EC%96%B4mouse-button-modifier%EB%9E%80&quot; aria-label=&quot;마우스 버튼 수식어mouse button modifier란 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마우스 버튼 수식어(Mouse button modifier)란?&lt;/h3&gt;
&lt;p&gt;Vue는 특정한 마우스 버튼으로 발생한 이벤트를 제어할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.middle&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;마우스 이벤트로 &lt;code class=&quot;language-text&quot;&gt;.right&lt;/code&gt;를 이용한 예시입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; &amp;lt;button
   v-if=&amp;quot;button === &amp;#39;right&amp;#39;&amp;quot;
   v-on:mousedown.right=&amp;quot;increment&amp;quot;
   v-on:mousedown.left=&amp;quot;decrement&amp;quot;
 /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;v-model&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#v-model&quot; aria-label=&quot;v model permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;v-model&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) v-model의 역할&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;textarea&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;select&lt;/code&gt; 엘리먼트의 데이터를 양방향으로 제어할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;input v-model=&amp;quot;message&amp;quot; placeholder=&amp;quot;Enter input here&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;The message is: {{ message }}&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;은 모든 &lt;code class=&quot;language-text&quot;&gt;form&lt;/code&gt; 엘리먼트에서 HTML 속성(attribute)으로 선언된 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;checked&lt;/code&gt; 그리고 &lt;code class=&quot;language-text&quot;&gt;selected&lt;/code&gt;를 무시합니다. 그 대신 Vue 인스턴스에서 &lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;로 바인딩한 값을 이용합니다. 따라서 컴포넌트의 data에서 초기값을 선언해야 합니다.&lt;/p&gt;
&lt;h4&gt;2) v-model에서 지원되는 수식어&lt;/h4&gt;
&lt;h5&gt;(1) lazy&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;은 하나의 키 입력 이벤트가 발생할 때마다 data가 업데이트&lt;/li&gt;
&lt;li&gt;이를 방지하기 위해서 &lt;code class=&quot;language-text&quot;&gt;.lazy&lt;/code&gt; 수식어를 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-model.lazy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) number&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;.number&lt;/code&gt; 수식어를 붙이면 자동적으로 사용자의 입력의 자료형이 &lt;code class=&quot;language-text&quot;&gt;Number&lt;/code&gt;로 변환&lt;/li&gt;
&lt;li&gt;HTML &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 태그의 속성이 &lt;code class=&quot;language-text&quot;&gt;type=&amp;quot;number&amp;quot;&lt;/code&gt;일지라도 반환되는 값의 자료형은 문자열이기 때문에, 숫자 자료형이 필요하다면 &lt;code class=&quot;language-text&quot;&gt;.number&lt;/code&gt; 수식어를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-model.number&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(3) trim&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;.trim&lt;/code&gt; 수식어를 사용자 입력에서 처음과 끝에 들어있는 공백을 자동으로 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-model.trim&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 컴포넌트에서 v-model을 사용자 정의하는 방법&lt;/h4&gt;
&lt;p&gt;일반적인 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt; 지시자는 &lt;strong&gt;value&lt;/strong&gt;를 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;로 사용하고 &lt;strong&gt;input&lt;/strong&gt;을 이벤트로 사용하지만, &lt;/p&gt;
&lt;p&gt;체크 박스나 라디오 버튼같은 일부 입력 타입은 다른 목적으로 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt; 속성을 사용할 수 있습니다. &lt;/p&gt;
&lt;p&gt;이런 경우에는 &lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;을 커스터마이징해서 사용하는 것이 좋습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;Vue.component(&amp;#39;custom-checkbox&amp;#39;, {
  model: {
    prop: &amp;#39;checked&amp;#39;,
    event: &amp;#39;change&amp;#39;
  },
  props: {
    checked: Boolean
  },
  template: `
    &amp;lt;input
      type=&amp;quot;checkbox&amp;quot;
      v-bind:checked=&amp;quot;checked&amp;quot;
      v-on:change=&amp;quot;$emit(&amp;#39;change&amp;#39;, $event.target.checked)&amp;quot;
    &amp;gt;
  `
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;은 다음과 같이 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;custom-checkbox v-model=&amp;quot;selectFramework&amp;quot;&amp;gt;&amp;lt;/custom-checkbox&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;selectFramework&lt;/code&gt; 속성은 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; 중 &lt;code class=&quot;language-text&quot;&gt;checked&lt;/code&gt;로 넘어갈 것이고, 체크 박스 컴포넌트에서 값이 변경되면 이벤트를 발생시킬 것입니다.&lt;/p&gt;
&lt;h4&gt;4) 사용자 정의의 input 컴포넌트에서 v-model을 사용하는 법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자 정의 input 컴포넌트에서도 &lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;을 활용할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;value&lt;/code&gt;를 props를 이용해 바인딩합니다.&lt;/li&gt;
&lt;li&gt;새로운 값이 입력되는 &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; 이벤트 발생 시, 해당 값을 &lt;code class=&quot;language-text&quot;&gt;emit&lt;/code&gt;하여 상위 컴포넌트로 이벤트를 전달합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Vue.component(&amp;#39;custom-input&amp;#39;, {
  props: [&amp;#39;value&amp;#39;],
  template: `
    &amp;lt;input
      v-bind:value=&amp;quot;value&amp;quot;
      v-on:input=&amp;quot;$emit(&amp;#39;input&amp;#39;, $event.target.value)&amp;quot;
    &amp;gt;
  `
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우 상위 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;v-model&lt;/code&gt;을 이용해 값을 바인딩할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;custom-input v-model=&amp;quot;searchInput&amp;quot;&amp;gt;&amp;lt;/custom-input&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;컴포넌트component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8component&quot; aria-label=&quot;컴포넌트component permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트(Component)&lt;/h3&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;재사용 가능하면서 이름이 명명된 Vue 인스턴스&lt;/li&gt;
&lt;li&gt;컴포넌트는 Vue처럼 data, computed, watch, methods, 라이프사이클 옵션을 갖고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;button-counter&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;button v-on:click=&quot;count++&quot;&gt;You clicked me {{ count }} times.&amp;lt;/button&gt;&apos;&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이 컴포넌트는 전역으로 선언되었기 때문에 Vue 인스턴스에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
  &amp;lt;button-counter&amp;gt;&amp;lt;/button-counter&amp;gt;
&amp;lt;/div&amp;gt;

var vm = new Vue({ el: &amp;#39;#app&amp;#39; });&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;템플릿이 여러 개의 엘리먼트들로 구성되어 있을 때 컴포넌트의 최상단 템플릿은 반드시 단일 엘리먼트로 감싸져 있어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todo-item&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ title }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-html&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2)하위 컴포넌트에서 상위 컴포넌트로 이벤트 전달&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;하위 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;$event&lt;/code&gt; 객체를 이용해 상위 컴포넌트로 이벤트를 발생킬 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;Vue.component(&amp;#39;todo-tem&amp;#39;, {
  props: [&amp;#39;todo&amp;#39;],
  template: `
    &amp;lt;div class=&amp;quot;todo-item&amp;quot;&amp;gt;
      &amp;lt;h3&amp;gt;{{ todo.title }}&amp;lt;/h3&amp;gt;
      &amp;lt;button v-on:click=&amp;quot;$emit(&amp;#39;increment-count&amp;#39;, 1)&amp;quot;&amp;gt;
        Add
      &amp;lt;/button&amp;gt;
      &amp;lt;div v-html=&amp;quot;todo.description&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  `
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상위 컴포넌트에서는 &lt;code class=&quot;language-text&quot;&gt;v-on&lt;/code&gt; 지시자를 이용해 하위 컴포넌트에서 명명한 이벤트와 값을 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todo in todos&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;todo-item&lt;/span&gt;
     &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;v-bind:&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todo.id&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
     &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;v-bind:&lt;/span&gt;todo&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;todo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
     &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;v-on:&lt;/span&gt;increment-count&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;total += 1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;todo-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Total todos count is {{total}}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;slots&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#slots&quot; aria-label=&quot;slots permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;slots&lt;/h3&gt;
&lt;p&gt;Vue에서는 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;을 이용해 상위 컴포넌트에서 하위 컴포넌트 내부에 사용자 정의의 컨텐츠를 집어 넣을 수 있습니다. 하위 컴포넌트에 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;을 이용해 문구를 동적으로 넣을 수 있는 컴포넌트를 만들어봅시다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;Vue.component(&apos;alert&apos;, {
  template: `
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;alert-box&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Error!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;slot&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  `
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;alert&amp;gt;&lt;/code&gt; 태그 안에 넣은 값은 컴포넌트 내부의 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;의 컨텐츠로 들어가게 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  There is an issue with in application.
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;컴포넌트 전역 등록&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트를 전역으로 등록하게 되면 모든 Vue 인스턴스에서 해당 컴포넌트를 사용할 수 있음&lt;/li&gt;
&lt;li&gt;컴포넌트는 &lt;code class=&quot;language-text&quot;&gt;Vue.component()&lt;/code&gt; 함수를 이용해 전역 등록&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;my-component-name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ... options ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;component-a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;component-b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;component-c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; el&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사용(전역으로 등록한 컴포넌트들은 하위 컴포넌트에서도 사용이 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component-a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;component-a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component-b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;component-b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component-c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;component-c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;컴포넌트의 지역 등록&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;전역 등록으로 인해 사용되지 않는 컴포넌트가 빌드 시에 여전히 남아있을 수 있음&lt;/li&gt;
&lt;li&gt;우선 자바스크립트 객체로 컴포넌트를 정의합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var ComponentA = { /* ... */ }
var ComponentB = { /* ... */ }
var ComponentC = { /* ... */ }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;지역 등록한 컴포넌트는 다른 컴포넌트의 하위에서는 사용할 수 없습니다. 이 경우, &lt;code class=&quot;language-text&quot;&gt;components&lt;/code&gt; 속성으로 컴포넌트를 추가해 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;var ComponentA = { /* ... */ }

var ComponentB = {
  components: {
    &amp;#39;component-a&amp;#39;: ComponentA
  },
  // ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Vue 인스턴스에서 &lt;code class=&quot;language-text&quot;&gt;components&lt;/code&gt; 속성에 사용할 컴포넌트들을 정의할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;new Vue({
  el: &amp;#39;#app&amp;#39;,
  components: {
    &amp;#39;component-a&amp;#39;: ComponentA,
    &amp;#39;component-b&amp;#39;: ComponentB
  }
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;모듈-시스템에서-전역-등록과-지역-등록의-차이점은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C-%EC%A0%84%EC%97%AD-%EB%93%B1%EB%A1%9D%EA%B3%BC-%EC%A7%80%EC%97%AD-%EB%93%B1%EB%A1%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80&quot; aria-label=&quot;모듈 시스템에서 전역 등록과 지역 등록의 차이점은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 시스템에서 전역 등록과 지역 등록의 차이점은?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;지역 등록&lt;/strong&gt;의 경우, 각 컴포넌트를 디렉토리에 생성하고 각각의 컴포넌트는 다른 컴포넌트 안에서 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt; 하여 사용하는 것이 권장됩니다. 만약 여러분들이 컴포넌트 C에서 컴포넌트 A와 B를 사용하고 싶다면 아래와 같은 설정을 해야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import ComponentA from &amp;#39;./ComponentA&amp;#39;
import ComponentB from &amp;#39;./ComponentC&amp;#39;

export default {
 components: {
   ComponentA,
   ComponentB
 }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 경우 컴포넌트 A와 컴포넌트 B는 컴포넌트 C의 템플릿에서 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;전역 등록&lt;/strong&gt;의 경우, 공통적으로 사용되는 컴포넌트를 각각의 파일에서 &lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;해야합니다. 하지만 &lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;과 같은 유명한 번들러들은 &lt;code class=&quot;language-text&quot;&gt;require.context&lt;/code&gt;라는 문법을 이용해서 컴포넌트를 쉽게 전역적으로 등록할 수 있게 해줍니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Vue from &amp;#39;vue&amp;#39;
import upperFirst from &amp;#39;lodash/upperFirst&amp;#39;
import camelCase from &amp;#39;lodash/camelCase&amp;#39;

const requireComponent = require.context(
 &amp;#39;./components&amp;#39;,
 false,
 /Base[A-Z]\w+\.(vue|js)$/
)

requireComponent.keys().forEach(fileName =&amp;gt; {
 const componentConfig = requireComponent(fileName)
 const componentName = upperFirst(
   camelCase(
     fileName.replace(/^\.\/(.*)\.\w+$/, &amp;#39;$1&amp;#39;)
   )
 )
 Vue.component(
   componentName,
   componentConfig.default || componentConfig
 )
})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;prop&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#prop&quot; aria-label=&quot;prop permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Prop&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상위 컴포넌트의 정보를 하위 컴포넌트로 전달할 수 있는 사용자 지정의 속성&lt;/li&gt;
&lt;li&gt;상위 컴포넌트에서 전달되는 props는 하위 컴포넌트의 속성으로 여겨지며, 하위 컴포넌트에서는 props 옵션을 사용하여 수신할 것으로 예상되는 props를 명시적으로 선언&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;todo-item&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;title&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;h2&gt;{{ title }}&amp;lt;/h2&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;하위 컴포넌트에서 props가 등록되고 나면, 상위 컴포넌트에서는 사용자 지정 속성을 이용해 값을 전달할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;todo-item&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Learn Vue conceptsnfirst&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;todo-item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) Prop 타입의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;에는 타입을 지정할 수도, 지정하지 않을 수도 있음&lt;/li&gt;
&lt;li&gt;하지만 일반적으로 타입을 지정하면 다른 개발자들이 해당 코드에서 잘못된 타입의 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;를 넘겨주는 실수를 줄여주기 때문에, 가능하면 타입을 지정해주는 것이 좋음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; 객체의 속성과 값을 선언함으로서 타입을 선언&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  isAuthenticated&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Boolean&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  phoneNumbers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  address&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) props에 의한 데이터 흐름&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;모든 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;는 하위 속성과 상위 속성 사이에서 단방향 바인딩을 형성&lt;/li&gt;
&lt;li&gt;상위 속성이 변경되는 것은 하위 속성에게 전달되지만, 그 반대는 안됨&lt;/li&gt;
&lt;li&gt;원칙적으로, 하위 컴포넌트에서는 상위 컴포넌트에서 받은 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;을 수정해서는 안됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하위 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt; 수정의 필요성을 느낄 수 있는 몇 가지 경우가 있는데, 아래와 같은 방법으로 해결할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상위 컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;는 하위 컴포넌트의 초기값 설정에만 사용되고 그 이후에는 로컬 데이터 속성으로 활용되는 경우:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 경우, 하위 컴포넌트에서 사용할 속성을 &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt;에 선언하고, 그 값을 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;로 초기화하면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;props: [&amp;#39;defaultUser&amp;#39;],
data: function () {
  return {
    username: this.defaultUser
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;상위 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;로 전해주는 값이 수정되는 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 경우, 하위 컴포넌트에서 &lt;code class=&quot;language-text&quot;&gt;computed&lt;/code&gt; 속성을 이용해 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;의 값이 바뀔 때마다 신규 값을 얻을 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;props: [&amp;#39;environment&amp;#39;],
computed: {
  localEnvironment: function () {
    return this.environment.trim().toUpperCase()
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) Props가 아닌 속성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트에 전달되기는 하지만 해당 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;가 하위 컴포넌트에서 정의되지는 않은 속성&lt;/li&gt;
&lt;li&gt;만약 &lt;code class=&quot;language-text&quot;&gt;data-tooltip&lt;/code&gt; 속성을 요구하는 컴포넌트를 사용하고 있다고 가정해봅시다. &lt;/li&gt;
&lt;li&gt;이 속성을 컴포넌트 인스턴스에 다음과 같이 추가 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;custom-input data-tooltip=&amp;quot;Enter your input&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상위 컴포넌트에서부터 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;가 아닌 속성을 넘겨주려 한다면, 하위 컴포넌트에서 같은 이름을 가진 속성은 덮어씌워집니다. &lt;/li&gt;
&lt;li&gt;하지만 &lt;code class=&quot;language-text&quot;&gt;class&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;style&lt;/code&gt;같은 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;는 예외로, 이 값들은 하위 컴포넌트와 합쳐집니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;//Parent component
&amp;lt;custom-input class=&amp;quot;custom-class&amp;quot; /&amp;gt;

//Child component
&amp;lt;input type=&amp;quot;date&amp;quot; class=&amp;quot;date-control&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;5) props 검증&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;타입, 필수 여부, 디폴트 값 등 &lt;code class=&quot;language-text&quot;&gt;props&lt;/code&gt;의 유효성 검증을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;user-profile&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    age&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    identityNumber&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    email&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      required&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    minBalance&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Welcome to Vue&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    location&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;India&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Singapore&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Australia&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h3 id=&quot;트랜지션-효과를-넣을-수-있는-방법은&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%A7%80%EC%85%98-%ED%9A%A8%EA%B3%BC%EB%A5%BC-%EB%84%A3%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%80&quot; aria-label=&quot;트랜지션 효과를 넣을 수 있는 방법은 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜지션 효과를 넣을 수 있는 방법은?&lt;/h3&gt;
&lt;p&gt;Vue에서는 항목들이 DOM에서 추가, 갱신 또는 삭제될 때, 다양한 방법으로 트랜지션 효과를 입힐 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS 트랜지션과 애니메이션을 위한 클래스를 자동으로 적용&lt;/li&gt;
&lt;li&gt;Animate.css와 같은 써드파티 CSS 애니메이션 라이브러리 통합&lt;/li&gt;
&lt;li&gt;트랜지션 훅 중에 JavaScript를 사용하여 DOM을 직접 조작&lt;/li&gt;
&lt;li&gt;Velocity.js와 같은 써드파티 JavaScript 애니메이션 라이브러리 통합&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;싱글-파일-컴포넌트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%B1%EA%B8%80-%ED%8C%8C%EC%9D%BC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8&quot; aria-label=&quot;싱글 파일 컴포넌트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;싱글 파일 컴포넌트&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 싱글 파일 컴포넌트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;템플릿과 스타일, 로직들을 하나의 파일에 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Welcome {{ name }}!&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
    module.exports = {
       data: function() {
           return {
               name: &amp;#39;John&amp;#39;
           }
       }
    }
&amp;lt;/script&amp;gt;

&amp;lt;style scoped&amp;gt;
    h1 {
        color: #34c779;
        padding: 3px;
    }
&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) 관심사 분리(separation of concerns)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;관심사 분리가 파일 타입 분리는 다름&lt;/li&gt;
&lt;li&gt;현대적인 UI 개발에서 코드베이스를 서로 얽혀있는 세 개의 거대한 레이어로 나누는 대신, 느슨하게 결합 된 컴포넌트로 나누고 구성하는 것이 더 중요&lt;/li&gt;
&lt;li&gt;컴포넌트 내부에서 템플릿, 로직 및 스타일이 본질적으로 결합되어 배치되면 컴포넌트의 응집력과 유지 보수성이 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;This section will be pre-compiled and hot reloaded&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script src=&amp;quot;./my-component.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;style src=&amp;quot;./my-component.css&amp;quot;&amp;gt;&amp;lt;/style&amp;gt;../0+.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 싱글 파일 컴포넌트 사용 이유&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;싱글 파일 컴포넌트가 아닐 경우 문제점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전역 정의 :  모든 구성 요소에 대해 고유한 이름을 지정하도록 강요&lt;/li&gt;
&lt;li&gt;문자열 템플릿 : 구문 강조가 약해 여러 줄로 된 HTML에 보기 안좋은 슬래시가 많이 필요&lt;/li&gt;
&lt;li&gt;CSS 지원 없음 : HTML 및 JavaScript가 컴포넌트로 모듈화 되어 있으나 CSS가 빠져 있는 것을 말함&lt;/li&gt;
&lt;li&gt;빌드 단계 없음 : Pug (이전의 Jade) 및 Babel과 같은 전처리기가 아닌 HTML 및 ES5 JavaScript로 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;싱글 파일 컴포넌트는 JavaScript 기반에서 발생하는 문제점을 해결하기 위해, 별도의 &lt;code class=&quot;language-text&quot;&gt;.vue&lt;/code&gt; 확장자의 파일로 작성&lt;/p&gt;
&lt;h2 id=&quot;vue-router&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#vue-router&quot; aria-label=&quot;vue router permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue Router&lt;/h2&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vue에서 동작하는 공식적인 라우팅 라이브러리&lt;/li&gt;
&lt;li&gt;중첩된 라우트/뷰 매핑&lt;/li&gt;
&lt;li&gt;모듈화된, 컴포넌트 기반의 라우터 설정&lt;/li&gt;
&lt;li&gt;라우터 파라미터, 쿼리, 와일드카드&lt;/li&gt;
&lt;li&gt;Vue의 트랜지션 시스템을 이용한 트랜지션 효과&lt;/li&gt;
&lt;li&gt;세밀한 네비게이션 컨트롤&lt;/li&gt;
&lt;li&gt;active CSS 클래스를 자동으로 추가해주는 링크&lt;/li&gt;
&lt;li&gt;HTML5 히스토리 모드 또는 해시 모드(IE9에서 자동으로 폴백)&lt;/li&gt;
&lt;li&gt;사용자 정의 가능한 스크롤 동작&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 사용법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;템플릿에서 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;태그를 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/vue/dist/vue.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;https://unpkg.com/vue-router/dist/vue-router.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Welcome to Vue routing app!&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;router-link to=&amp;quot;/home&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
    &amp;lt;router-link to=&amp;quot;/services&amp;quot;&amp;gt;Services&amp;lt;/router-link&amp;gt;
  &amp;lt;/p&amp;gt;
  &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;main.js에서 Vue와 Vue 라우터를 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;하고 &lt;code class=&quot;language-text&quot;&gt;Vue.use()&lt;/code&gt;함수를 이용해 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Vue &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; VueRouter &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;vue-router&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;VueRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;라우트 컴포넌트를 정의하거나 &lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Home &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;Home&amp;lt;/div&gt;&apos;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Services &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;Services&amp;lt;/div&gt;&apos;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;라우트를 정의. 각 라우트는 반드시 컴포넌트와 매핑&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; routes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/home&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Home &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/services&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Services &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;routes&lt;/code&gt; 옵션과 함께 router 인스턴스를 만듦&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  routes
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;루트 Vue 인스턴스를 만들고 &lt;code class=&quot;language-text&quot;&gt;mount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  router
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$mount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#app&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 동적 라우트 매칭&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;주어진 패턴을 가진 라우트를 동일한 컴포넌트에 매핑해야하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; User &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;User {{ $route.params.name }}, PostId: {{ route.params.postid }}&amp;lt;/div&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
        path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/user/:name/post/:postid&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
        component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; User 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) 라우터 params를 반응적으로 만드는 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;매개 변수와 함께 라우트를 사용할 때 주의 해야할 점은 사용자가 &lt;code class=&quot;language-text&quot;&gt;/user/foo&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;/user/bar&lt;/code&gt;로 이동할 때 동일한 컴포넌트 인스턴스가 재사용된다는 것&lt;/li&gt;
&lt;li&gt;두 라우트 모두 동일한 컴포넌트를 렌더링하므로 이전 인스턴스를 삭제 한 다음 새 인스턴스를 만드는 것보다 효율적&lt;/li&gt;
&lt;li&gt;그러나 이는 또한 컴포넌트의 라이프 사이클 훅이 호출되지 않음을 의미&lt;/li&gt;
&lt;li&gt;동일한 컴포넌트의 &lt;code class=&quot;language-text&quot;&gt;params&lt;/code&gt; 변경 사항에 반응하려면 &lt;code class=&quot;language-text&quot;&gt;$route&lt;/code&gt; 객체를 보면 됨&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;watch&lt;/code&gt;에서 &lt;code class=&quot;language-text&quot;&gt;$route&lt;/code&gt; 관찰하기:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; User &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;User {{ $route.params.name }} &amp;lt;/div&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  watch&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;$route&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;beforeRouteUpdate&lt;/code&gt; 네비게이션 가드를 사용하기 : &lt;code class=&quot;language-text&quot;&gt;beforeRouteEnter&lt;/code&gt; 가드에서는 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;에 접근할 권한이 없지만 &lt;code class=&quot;language-text&quot;&gt;next&lt;/code&gt; 콜백 함수를 이용해 인스턴스에 접근 가능&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; User &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  template&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&amp;lt;div&gt;User {{ $route.params.name }} &amp;lt;/div&gt;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;beforeRouteUpdate&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) 라우트의 우선 순위&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동일한 URL이 여러 라우트와 일치하는 경우가 있음&lt;/li&gt;
&lt;li&gt;일치하는 우선 순위는 라우트 정의의 순서에 따라 결정&lt;/li&gt;
&lt;li&gt;즉, 경로가 더 먼저 정의 될수록 우선 순위가 높아짐&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/user/:name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; User &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; 
       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/user/:name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Admin &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/user/:name&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Customer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) 중첩된 라우트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;URL의 세그먼트 역시 중첩된 컴포넌트의 특정 구조와 일치합니다. &lt;/li&gt;
&lt;li&gt;중첩된 아웃렛에서 컴포넌트를 렌더링하려면 &lt;code class=&quot;language-text&quot;&gt;VueRouter&lt;/code&gt; 생성자에서 &lt;code class=&quot;language-text&quot;&gt;config&lt;/code&gt;로 &lt;code class=&quot;language-text&quot;&gt;children&lt;/code&gt;을 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  routes&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/user/:id&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; User&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      children&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;profile&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; UserProfile
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;posts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; UserPosts
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
           component&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; UserHome &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;filter&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#filter&quot; aria-label=&quot;filter permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;filter&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;텍스트 형식화를 위해 사용&lt;/li&gt;
&lt;li&gt;자바스크립트 표현식에 파이프(&lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt;) 기호와 함께 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;filters&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
    value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이 필터를 중괄호 보간법 또는 &lt;code class=&quot;language-text&quot;&gt;v-bind&lt;/code&gt; 표현식 함께 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;vue&quot;&gt;&lt;pre class=&quot;language-vue&quot;&gt;&lt;code class=&quot;language-vue&quot;&gt;// 중괄호 보간법
{{ username | capitalize }}
// v-bind
&amp;lt;div v-bind:id=&amp;quot;username | capitalize&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) 전역, 지역필터&lt;/h4&gt;
&lt;h5&gt;(1) 지역 필터(Local filters)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트의 옵션에서 정의. 이 경우, 필터는 해당 컴포넌트에서만 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;filters&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
    value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(5) 전역 필터(Global filters)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Vue 인스턴스를 만들기 전에 전역적으로 필터를 정의할 수 있음&lt;/li&gt;
&lt;li&gt;이 경우 Vue 인스턴스 내의 모든 컴포넌트에서 필터를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;capitalize&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
  value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) filter 연속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;필터 뒤에 또 다른 필터를 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; filterA &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; filterB &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; filterC &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;각각의 필터는 파이프(&lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt;)로 구분되며, &lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;filterA&lt;/code&gt;의 결과가 &lt;code class=&quot;language-text&quot;&gt;filterB&lt;/code&gt;의 영향을 받고, 그 결과가 다시 &lt;code class=&quot;language-text&quot;&gt;filterC&lt;/code&gt;의 영향을 받음&lt;/li&gt;
&lt;li&gt;날짜 형식의 데이터를 변경한 뒤 대문자로 변경하고 싶다면 아래와 같이 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; birthday &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; dateFormat &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; uppercase &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) filter 파라미터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;필터는 기본적으로 자바스크립트 함수이기 때문에, 아래와 같이 두 개 이상의 인수를 받을 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;filterA&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;arg1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;filterA&lt;/code&gt;는 세 개의 인수를 받는 함수로 정의&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt;의 값은 첫번째 인수로 전달될 것이며, 순수 문자열인 &lt;code class=&quot;language-text&quot;&gt;&amp;#39;arg1&amp;#39;&lt;/code&gt;은 두번째 인수로 전달될 것이며, 자바스크립트 표현식인 &lt;code class=&quot;language-text&quot;&gt;arg2&lt;/code&gt;는 표현식이 실행된 이후에 세번째 인수로 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;exponentialStrength&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - React/</guid><pubDate>Wed, 14 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;react&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react&quot; aria-label=&quot;react permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-상태-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;1 상태 관리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 상태 관리&lt;/h2&gt;
&lt;h4&gt;(1) 상태 관리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;여러 컴포넌트 간의 데이터 전달과 이벤트 통신을 한곳에서 관리하는 패턴 &lt;/li&gt;
&lt;li&gt;리액트(React): Redux, Mobx, 뷰: Vuex&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 리액트의 상태관리?&lt;/h4&gt;
&lt;h5&gt;(1) Redux&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;리액트에서 전역의 상태를 관리하기 위해서 사용하는 방법&lt;/li&gt;
&lt;li&gt;컴포넌트간의 상태들을 한 곳에 모아놓고 공유해서 사용하는 방식&lt;/li&gt;
&lt;li&gt;Redux는 사실 다른 곳에서도 많이 쓰이는 기술이었지만, react-redux라는 것이 있어서 react에서 사용하기 편리&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;react-redux 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단일 스토어&lt;/li&gt;
&lt;li&gt;읽기 전용 상태 (기존의 객체는 건드리지 않고 새로운 객체를 생성해서 사용)&lt;/li&gt;
&lt;li&gt;리듀서는 순수 함수(파라미터 외의 값에는 의존하지 않아야 함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reduce 만드는 순서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;액션 타입을 정함&lt;/li&gt;
&lt;li&gt;액션 생성 함수를 만듦&lt;/li&gt;
&lt;li&gt;이 액션들을 사용하는 리듀서 함수(초기상태 포함)를 만듦&lt;/li&gt;
&lt;li&gt;index.js에서 스토어를 만들어 provider로 스토어를 props로 전달해줌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프레젠테이셔널 컴포넌트와 컨테이너 컴포넌트&lt;/li&gt;
&lt;li&gt;프레젠테이셔널 컴포넌트와 컨테이너 컴포넌트를 분리하여, 컨테이너 컴포넌트에서 connect함수를 사용해서 mapStateToProps(스토어 안의 상태를 컴포넌트의 props로 넘겨주기 위해 설정하는 함수),&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mapDispatchToProps(액션 생성 함수를 컴포넌트의 Props로 넘겨주기 위해 사용하는 함수) &lt;/p&gt;
&lt;p&gt;이 2가지를 다음과 같이 사용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;connect(mapStateToProps, mapDispatchToProps)(타깃컴포넌트)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;자세한 리덕스 내용은 아래를 참고&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리액트의 상태관리?  Context API, Redux, MobX 등의 상태관리가 있으며, Context API보다 Redux를 사용하는 이유는 대규모 개발에서 유지보수성이나 작업효율을 높이기에는 Redux를 사용하는것이 좋기 때문에 많은 사람들이 Redux를 사용한다. 리액트 16.3이후 버전에서는 그래도 Context API가 개선되어 사용하기 좋아졌다.&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;Redux-saga와 옵저버블에 대해 들어봤는가?&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Context-API? : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리액트에서 전역상태를 관리하기 위한 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-클래스--함수형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%81%B4%EB%9E%98%EC%8A%A4--%ED%95%A8%EC%88%98%ED%98%95&quot; aria-label=&quot;2 클래스  함수형 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 클래스 / 함수형&lt;/h2&gt;
&lt;h4&gt;1) 함수형 컴포넌트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;함수형 프로그래밍은 &lt;strong&gt;명령형(imperative)&lt;/strong&gt; 이 아닌 &lt;strong&gt;선언형(declarative)&lt;/strong&gt; 이며 애플리케이션의 상태는 순수 함수를 통해 전달된다. &lt;/li&gt;
&lt;li&gt;애플리케이션의 상태가 일반적으로 공유되고 객체의 메서드와 함께 배치 되는 객체 지향 프로그래밍과는 대조된다.&lt;/li&gt;
&lt;li&gt;함수형은 상태를 저장할 수 없음. 기본적으로 함수는 한번 실행되고 나면 메모리 상에서 사라진다. (가비지 컬렉팅)&lt;/li&gt;
&lt;li&gt;함수형 컴포넌트는 클래스형 컴포넌트보다 선언하기가 좀 더 편하고, 메모리 자원을 덜 사용한다는 장점&lt;/li&gt;
&lt;li&gt;함수형 컴포넌트에서만 사용할 수 있는 hooks는 로직을 state와 분리할 수 있게 해주기 때문에 로직을 재사용할 수 있게 해줌&lt;/li&gt;
&lt;li&gt;hooks 는 클로저 원리를 이용해서 state를 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;BlackDog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;흰둥이&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;검둥이&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;: 멍멍!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blackDog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Blackdog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
blackDog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 검둥이: 멍멍!&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;WhiteDog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;흰둥이&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;검둥이&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;: 멍멍!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; whiteDog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Whitedog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
whiteDog&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 흰둥이: 멍멍!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반 함수는 자신이 종속된 객체를 this로 가리키며, 화살표 함수는 자신이 종속된 인스턴스를 가리킴&lt;/p&gt;
&lt;h5&gt;(1) 장점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;선언이 간편&lt;/li&gt;
&lt;li&gt;메모리 자원을 덜 사용&lt;/li&gt;
&lt;li&gt;프로젝트 빌드 후 배포할 때 결과물의 파일 크기가 더 작음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;state 와 라이프사이클 API 사용이 불가능하나 hook을 사용하여 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 클래스형 컴포넌트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상태를 저장할 수 있고, React Life Cycle Method 를 사용할 수 있음&lt;/li&gt;
&lt;li&gt;render()함수가 필수적으로 있어야 함&lt;/li&gt;
&lt;li&gt;클래스가 인스턴스를 찍어내면 마치 그 인스턴스는 그 때부터 독자적인 생명체처럼 메모리에 상주하고 있기 때문&lt;/li&gt;
&lt;li&gt;State 와 Action을 분리하기 어렵다는 단점이 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 장점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;state및 라이프사이클 기능을 사용할 수 있음&lt;/li&gt;
&lt;li&gt;임의 메서드를 정의할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수형 컴포넌트보다 선언이 긺&lt;/li&gt;
&lt;li&gt;메모리 자원을 좀 더 사용&lt;/li&gt;
&lt;li&gt;배포할 때 결과물의 파일 크기가 좀 더 큼&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-라이프사이클-메소드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EB%A9%94%EC%86%8C%EB%93%9C&quot; aria-label=&quot;3 라이프사이클 메소드 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 라이프사이클 메소드&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cNfpEph.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h4&gt;1) 마운트(mount)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;constructor&lt;/li&gt;
&lt;li&gt;getDerivedStateFromProps &lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;componentDidMount &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 업데이트(update)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;getDerivedStateFromProps&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate &lt;/li&gt;
&lt;li&gt;render&lt;/li&gt;
&lt;li&gt;getSnapshotBeforeUpdate&lt;/li&gt;
&lt;li&gt;componentDidupdate &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 언마운트(unmount)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;componentWllUnmount&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 사용&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;mount에서 컴포넌트가 만들어질때 componetDidMount에서 비동기처리 같은것을 주로 함&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate에서 업데이트 직전에 랜더링시(상태가변경)에 조건으로 재랜더링을 하냐마냐 결정을 할 수 있음&lt;/li&gt;
&lt;li&gt;componentDidUpdate 업데이트 직후에 호출되는 메소드&lt;/li&gt;
&lt;li&gt;unmount에서 컴포넌트가 소멸된 시점에 타이머나 비동기 API를 제거 하는 곳&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-리액트-훅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%9B%85&quot; aria-label=&quot;5 리액트 훅 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 리액트 훅&lt;/h2&gt;
&lt;h4&gt;1) 이유&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트에서 상태관련 로직을 사용할 때 레이어 변화 없이 재사용할 수 있게하기 위함&lt;/li&gt;
&lt;li&gt;기존의 라이프사이클 메서드 기반이 아닌 로직 기반으로 나눌 수 있어서 컴포넌트를 함수 단위로 잘게 쪼갤 수 있다는 이점&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) useState&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;함수형 컴포넌트에서 가변적인 상태를 지닐 수 있게 해줌. &lt;/li&gt;
&lt;li&gt;함수형 컴포넌트에서 상태를 관리해야 할 때 사용&lt;/li&gt;
&lt;li&gt;state는 원시타입 뿐만 아니라 객체로 사용할 수도 있음&lt;/li&gt;
&lt;li&gt;여러개의 useState를 사용할 수도 있지만 하나의 state에 여러 프로퍼티를 추가해서 두 가지 이상의 상태를 관리할 수도 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 새로운 state 변수를 선언하고, count라 부르겠습니다.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// count의 초깃값은 0으로 지정합니다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;You clicked &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; times&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        Click me
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./styles.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setState&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;App&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello CodeSandbox&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Start editing to see some magic happen&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h3&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        Increase
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) useEffect&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정&lt;/li&gt;
&lt;li&gt;클래스형 컴포넌트의 componentDidMount와 componentDidUpdate, componentWillUnmount를 합친 형태&lt;/li&gt;
&lt;li&gt;함수형 컴포넌트에서 사이드 이펙트(side effect)를 수행(데이터 가져오기, 구독 설정, 수동으로 DOM 조작)&lt;/li&gt;
&lt;li&gt;useEffect는 리액트에서 컴포넌트 렌더링 이후 어떠한 일을 수행해야 하는지 말해줌&lt;/li&gt;
&lt;li&gt;우리가 넘긴 함수(effect라고 부름)를 기억했다가, DOM 업데이트 이후 불러온다. &lt;/li&gt;
&lt;li&gt;이렇게 컴포넌트 안에서 불러오게 될 경우 effect를 통해 state나 props에 접근할 수 있게 된다. &lt;/li&gt;
&lt;li&gt;useEffect는 컴포넌트의 첫 번째 렌더링과 그 이후 모든 업데이트에서 수행이 된다.&lt;/li&gt;
&lt;li&gt;만약에 useEffect에 설정한 함수를 매번 업데이트마다 수행시키지 않으려면 어떻게 해야 할까? 업데이트 될 때 실행하지 않으려면 함수의 두 번째 파라미터로 비어 있는 배열을 넣어 주면 된다. &lt;/li&gt;
&lt;li&gt;그리고 만약 특정 값이 업데이트 될 때만 useEffect를 실행하고 싶다면 두 번째 파라미터 배열에 해당 값들을 넣어주면 된다.&lt;/li&gt;
&lt;li&gt;컴포넌트가 언마운트 되기 전이나 업데이트 되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect에서 뒷정리 함수(clean-up)를 반환해 주어야 한다. &lt;/li&gt;
&lt;li&gt;예를 들면 외부 데이터에 구독(subscription) 설정을 해야 하는 경우 메모리 누수가 발생하지 않도록 clean-up을 해 주어야 한다.&lt;/li&gt;
&lt;li&gt;리액트에서 뒷정리를 하는 시점은 컴포넌트가 마운트를 해제하는 시점이다. &lt;/li&gt;
&lt;li&gt;effect는 렌더링이 실행될 때마다 실행되는데, 그렇기 때문에 다음 effect를 실행하기 전에 이전 렌더링에서 파생된 effect를 정리해 주어야 할 필요가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;You clicked &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; times&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;You clicked &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; times&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        Click me
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 첫 렌더링 때만 useEffect 실행&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;마운트 될 때만 실행&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 특정 값(name)이 바뀔 때만 useEffect 실행&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;이 바뀔 때만 실행&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FriendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;isOnline&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setIsOnline&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleStatusChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;setIsOnline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOnline&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    ChatAPI&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribeToFriendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friend&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleStatusChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ChatAPI&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unsubscribeFromFriendStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;friend&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; handleStatusChange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isOnline &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Loading...&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; isOnline &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Online&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Offline&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;4) useReducer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트 해주고 싶을 때 사용&lt;/li&gt;
&lt;li&gt;(state, action) =&gt; newState의 형태로 reducer를 받고 dispatch 메서드와 짝의 형태로 state를 반환&lt;/li&gt;
&lt;li&gt;하윗값이 복잡한 정적 로직을 만들거나, 다음 state가 이전 state에 의존적인 경우 보통 useState 대신 useReducer를 사용&lt;/li&gt;
&lt;li&gt;또한 useReducer는 자세한 업데이트를 트리거 하는 컴포넌트의 성능을 최적화 할 수 있는데, 이것은 Callback 대신 dispatch를 전달할 수 있기 때문&lt;/li&gt;
&lt;li&gt;useReducer의 첫 번째 파라미터에는 리듀서 함수를 넣고, 두 번째 파라미터에는 해당 리듀서의 기본값을 넣음&lt;/li&gt;
&lt;li&gt;이 Hook을 사용하면 state값과 dispatch 함수를 받아온다. 여기서 state는 현재 가리키고 있는 상태고, dispatch는 액션을 발생시키는 함수&lt;/li&gt;
&lt;li&gt;dispatch(action)과 같은 형태로 함수 안에 파라미터로 액션 값을 넣어주면 리듀서 함수가 호출되는 구조&lt;/li&gt;
&lt;li&gt;초기화를 조금 지연할 수도 있는데 init 함수를 세 번째 인자로 전달. 이는 reducer 외부에서 초기 state를 계산하는 로직을 추출할 수 있도록 하고 또한 어떤 행동에 대한 대응으로 나중에 state를 재설정하는 데에도 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialArg&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; init&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; initialState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;decrement&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dispatch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useReducer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reducer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      Count&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;decrement&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;increment&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;useMemo&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;함수형 컴포넌트 내부에서 발생하는 연산을 최적화. 메모이제이션 된 값을 반환&lt;/li&gt;
&lt;li&gt;의존성이 변경되었을 때만 메모이제이션 된 값을 다시 계산. 모든 렌더링 시 고비용 계산을 방지하게 해줌&lt;/li&gt;
&lt;li&gt;useMemo로 전달된 함수는 렌더링 중에 실행이 되므로 렌더링 중에 하지 않는 작업은 이 함수 내에서 할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; memoizedValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useMemo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;computeExpensiveValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;useCallback&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;메모이제이션 된 콜백을 반환&lt;/li&gt;
&lt;li&gt;주로 렌더링 성능을 최적화 해야 하는 상황에서 사용. 이벤트 핸들러 함수를 필요할 때만 생성 가능&lt;/li&gt;
&lt;li&gt;인라인 콜백과 그것의 의존성 값의 배열을 전달하면 useCallback은 콜백의 메모이제이션된 버전을 반환&lt;/li&gt;
&lt;li&gt;그 메모이제이션된 버전은 콜백의 의존성이 변경되었을 때만 변경&lt;/li&gt;
&lt;li&gt;이는 불필요한 렌더링을 방지하기 위해 참조의 동일성에 의존적인 최적화된 자식 컴포넌트에 콜백을 전달할 때 유용&lt;/li&gt;
&lt;li&gt;useMemo와 비슷한 역할을 하고 useCallback은 결국 useMemo로 함수를 반환하는 상황에서 더 편하게 사용할 수 있는 훅&lt;/li&gt;
&lt;li&gt;숫자, 문자열, 객체 처럼 일반 값을 재사용 :  useMemo를 사용, 함수를 재사용 : useCallback을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; memoizedCallback &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;useRef&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;함수형 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해줌 &lt;/li&gt;
&lt;li&gt;.current 프로퍼티로 전달된 인자(initialValue)로 초기화된 변경 가능한 ref 객체를 반환&lt;/li&gt;
&lt;li&gt;본질적으로 useRef는 .current 프로퍼티에 변경 가능한 값을 담고 있는 상자와 같음&lt;/li&gt;
&lt;li&gt;만약 리액트에서 ref 객체를 전달한다면 리액트는 모드가 변경될 때 마다 변경된 DOM 노드에 .current 프로퍼티를 설정할 것&lt;/li&gt;
&lt;li&gt;ref 속성을 사용하는 것보다 useRef() 훅을 사용하는게 더 유용한데, 그 이유는 useRef()가 순수 자바스크립트 객체를 생성하기 때문이다. useRef()와 {current: …} 객체를 생성하는 것의 차이점은 useRef는 매번 렌더링을 할 때 동일한 ref 객체를 제공한다는 점&lt;/li&gt;
&lt;li&gt;useRef는 내용이 변경될 때 그것을 알려주지는 않음(.current 프로퍼티를 변형하는 것이 리렌더링을 발생시키지는 않기 때문)&lt;/li&gt;
&lt;li&gt;만약 리액트가 DOM 노드에 ref를 attach 하거나 detach할 때 어떤 코드를 실행하고 싶다면 callback ref를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; refContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TextInputWithFocusButton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputEl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;onButtonClick&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    inputEl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;inputEl&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;onButtonClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Focus the input&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;useContext&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;useContext는 context 객체(React.createContext)를 받아 그 context의 현재 값을 반환&lt;/li&gt;
&lt;li&gt;context의 현재 값은 트리 안에서 이 Hook을 호출하는 컴포넌트의 가장 가까이에 있는 &amp;#x3C;MyContext.Provider&gt;의 value prop에 의해 결정&lt;/li&gt;
&lt;li&gt;컴포넌트에서 가장 가까운 &amp;#x3C;MyContext.Provider&gt;가 갱신되면 useContext는 &amp;#x3C;MyContext.Provider&gt;에게 전달된 가장 가까운 context value를 사용하여 렌더러를 트리거 한다.상위 컴포넌트에서 React.memo나 shouldComponentUpdate를 사용하더라도 useContext를 사용하고 있는 컴포넌트 자체에서부터 다시 렌더링이 된다. 항상 인자는 context 객체 그 자체여야 함&lt;/li&gt;
&lt;li&gt;useContext를 호출한 컴포넌트는 context 값이 변경되는 항상 리렌더링 된다. 따라서 이 비용이 많이 들면 메모이제이션을 통해 최적화를 할 수도 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CSS]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - css/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - css/</guid><pubDate>Wed, 14 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;css&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#css&quot; aria-label=&quot;css permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-class와-id&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-class%EC%99%80-id&quot; aria-label=&quot;1 class와 id permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) class와 id&lt;/h2&gt;
&lt;h4&gt;(1) id&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문서내에서 유일&lt;/li&gt;
&lt;li&gt;단, 여러 번 선언해도 오류가 나거나 렌더링되지 않거나 하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) class&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문서내에서 중복 사용 가능. &lt;/li&gt;
&lt;li&gt;문서내에서 중복 사용될 수 있으므로 재사용해야하는 경우 클래스를 주로 사용CSS 프레임워크 및 라이브러리들도 대부분 클래스를 기반으로 작동)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 선택자 우선 순위&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CSS는 중복 선언을 허용하며 중복되는 경우 아래와 같은 우선순위로 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성값 뒤에 !important를 붙인 속성&lt;/li&gt;
&lt;li&gt;HTML에서 style를 지정한 속성&lt;/li&gt;
&lt;li&gt;
&lt;h1 id=&quot;아이디로-지정한-속성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%84%EC%9D%B4%EB%94%94%EB%A1%9C-%EC%A7%80%EC%A0%95%ED%95%9C-%EC%86%8D%EC%84%B1&quot; aria-label=&quot;아이디로 지정한 속성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아이디로 지정한 속성&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;.클래스, :추상클래스로 지정한 속성&lt;/li&gt;
&lt;li&gt;요소 이름으로 지정한 속성&lt;/li&gt;
&lt;li&gt;상속된 속성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명시도 계산법&lt;/li&gt;
&lt;li&gt;!important &gt; id[100] &gt; class[10] &gt; tag[1] &gt; *[0]&lt;/li&gt;
&lt;li&gt;가상 엘리먼트는 모두 무시&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-float&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-float&quot; aria-label=&quot;2 float permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) float&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;요소를 떠다니도록 만들어주는 속성&lt;/li&gt;
&lt;li&gt;이미지와 텍스트가 나란히 있는 상태에서 이미지에 float 속성을 주면 텍스트가 이미지를 감싸는 형태가 됨&lt;/li&gt;
&lt;li&gt;최신 레이아웃 기술(Flexbox, grid)이 나오기 전에는 주로 레이아웃 배치를 위하여 사용&lt;/li&gt;
&lt;li&gt;최신 레이아웃 기술의 크로스브라우징 이슈로 인해 여전히 float로 레이아웃 설계를 많이 하고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-클리어링clearing-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%ED%81%B4%EB%A6%AC%EC%96%B4%EB%A7%81clearing-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;3 클리어링clearing 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 클리어링(Clearing) 기법&lt;/h2&gt;
&lt;p&gt;부모 &gt; 자식 관계에서 자식에 float가 추가되어있다면 부모에&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;overflow:hidden 설정&lt;/li&gt;
&lt;li&gt;height 값 설정&lt;/li&gt;
&lt;li&gt;요소 아래 clear: both 속성 추가&lt;/li&gt;
&lt;li&gt;가상 요소(::after, ::before)를 이용하여 clear: both 속성 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하여 문제를 해결할 수 있습니다. 클리어링 기법을 이용하는 이유는 자식에 float 속성을 주는 경우 자식이 부모 요소의 높이를 인지하지 못하는 문제가 있어서 이를 해결하고자 클리어링 기법을 이용합니다.&lt;/p&gt;
&lt;p&gt;.parent { overflow: hidden; } .parent::after { content:&quot;&quot;; display:block; clear:both; } .clear { clear:both; }&lt;/p&gt;
&lt;h2 id=&quot;4-padding과-margin&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-padding%EA%B3%BC-margin&quot; aria-label=&quot;4 padding과 margin permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) padding과 margin&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;padding : border와 content 사이&lt;/li&gt;
&lt;li&gt;margin : border 바깥&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-css-전처리기의-장점과-단점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-css-%EC%A0%84%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%9D%98-%EC%9E%A5%EC%A0%90%EA%B3%BC-%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;5 css 전처리기의 장점과 단점 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) CSS 전처리기의 장점과 단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CSS 전처리기를 사용하면 조건문, 반복문과 편리한 유틸 함수를 사용할 수 있으며 CSS를 마치 프로그래밍 하듯이 사용할 수 있음&lt;/li&gt;
&lt;li&gt;장점은 반복문과 조건문을 이용하면 긴 코드를 짧게 개발할 수 있으므로 유지보수상 유리&lt;/li&gt;
&lt;li&gt;단점은 브라우저가 이해하는 것은 CSS 뿐이므로 CSS로 따로 컴파일을 해주어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6. 박스 모델(box model)이 무엇이며, 브라우저에서 어떻게 동작하는지 설명해주세요.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;박스 모델은 브라우저에 배치하기 위한 규칙이며 W3C model과 IE model이 있는데 두 가지 박스 모델은 차이점이 있다. W3C 모델은 content 영역이 width에 해당하지만 IE 모델은 content + padding + border가 포함된다.&lt;/p&gt;
&lt;h2 id=&quot;7-display-속성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-display-%EC%86%8D%EC%84%B1&quot; aria-label=&quot;7 display 속성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7) display 속성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;영역의 성질을 설정하는 속성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) block&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;100% 영역을 모두 차지, width, height, margin, padding 값 모두 상하좌우 설정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) inline&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;content 크기만큼 차지&lt;/li&gt;
&lt;li&gt;padding 속성은 적용되나 margin의 경우 좌우에만 설정 가능&lt;/li&gt;
&lt;li&gt;추가적으로 padding 값이 적용이 되지만 실질적으로 크기에 영향을 주는 것은 좌우에만 해당되고 상하는 무시&lt;/li&gt;
&lt;li&gt;width, height 값을 설정할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) inline-block&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;iinline의 여러 단점들을 보완하기 위한 속성&lt;/li&gt;
&lt;li&gt;앞서 inline에서 불가능한 속성들을 모두 설정할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) none&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;영역을 보이지 않게 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;position&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#position&quot; aria-label=&quot;position permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;position&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;영역의 위치를 설정하는 속성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) static&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기본값&lt;/li&gt;
&lt;li&gt;별도의 변경없이 문서 흐름에 따라 요소들이 배치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) relative&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상대적인 위치로 설정&lt;/li&gt;
&lt;li&gt;현 위치에 원본을 그대로 두고 복제본을 설정&lt;/li&gt;
&lt;li&gt;주변 요소들은 영향 받지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) absolute&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;절대적인 위치로 설정&lt;/li&gt;
&lt;li&gt;relative와 다르게 기존 위치에서 벗어나 설정&lt;/li&gt;
&lt;li&gt;기존 위치에서 벗어나므로 주변 요소들이 영향을 받음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) fixed&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브라우저 창을 기준으로 위치를 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;9. flexbox와 grid에 대해 아는 것이 있다면 설명해주세요.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS 공식적으로 지원하는 레이아웃과 관련된 속성입니다. 기존에 여러 trick(트릭)으로 구현한 기능들을 손쉽게 구현할 수 있습니다. 예를 들면 요소를 상하좌우 중앙에 위치시키는 기능을 flexbox로 쉽게 구현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;\10. “reset” CSS와 “normalize” CSS에 대해 아는 것이 있다면 설명해주세요.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;reset.css&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;브라우저마다 제조사 스타일(CSS) 값이 설정되어있습니다. 각 브라우저마다 h1의 크기나 input의 모양이 다른건 이런 이유 때문입니다. 이런 브라우저간의 차이를 모두 동일하게 초기화하기 위해 reset.css를 사용합니다. 단점으로는 모든 태그가 초기화되어 크기가 다르기에 모든 태그에 각 각 css를 선언해야합니다. &lt;strong&gt;(0에서부터 시작해야합니다.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;normalize.css&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기본 스타일을 브라우저간 일관성을 유지하도록 돕는 css 파일이다. browser마다 조금씩 다르게 보이는 것들이 있는데, 그것을 하나의 기준으로 통일하여 모든 brower에서 동일한 스타일을 보이게 하는 것이다. reset.css 보다는 조금 더 완성된 형태에서 프로젝트를 시작할 수 있습니다. &lt;strong&gt;(유용한 기본값을 보존합니다.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. CSS 스프라이트(CSS Sprites)를 설명하고, 페이지나 사이트를 어떻게 향상시키는지 설명해주세요.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSS Sprite 기법은 여러 개의 이미지를 하나로 모아 이미지 파일의 요청 횟수를 줄이는 방법이다. 3개의 이미지를 하나로 압축하면 용량이 더 커질 것이라고 생각하지만 그렇지 않기에 용량을 줄이는 효과도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11. 대체 이미지(Image Replacement)를 사용해야 할 때, 선호하는 기술과 언제 사용할 수 있는지 설명하세요.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이미지 로드가 느리거나 2) 실패했을 때 3) CSS가 정상 적용되지 않았을 때 사용하며 또 시각장애인들이 스크린 리더를 통해 이미지에 대한 설명을 들을 수 있도록 하기 위해 사용한다. &lt;img&gt; 태그의 경우 alt 속성을 이용하고 배경으로 이미지가 들어간 경우 배경 이미지에 대한 내용을 html 태그로 표현하고 아래에서 선언한 .blind라는 클래스를 만들어 재사용한다. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.blind {    position: absolute;    clip: rect(0 0 0 0);    width: 1px;    height: 1px;    margin: -1px;    overflow: hidden; }&lt;/p&gt;
&lt;p&gt;자세한 내용은 아래 글을 참고하자.&lt;/p&gt;
&lt;h4&gt;컨텐츠 숨기기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;display: none; : 영역 자체가 없어지면서 화면에 보이지 않음&lt;/li&gt;
&lt;li&gt;visibility: hidden; : 영역 자체가 있지만 화면에 보이지 않음.&lt;/li&gt;
&lt;li&gt;text-indent, position 등에 음수값 설정&lt;/li&gt;
&lt;li&gt;.blind 클래스&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;14. DOCTYPE에 대해 설명해주세요.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML 문서에 대한 정보를 나타냅니다.&lt;/p&gt;
&lt;h2 id=&quot;컨텐츠-중앙-정렬&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%90%EC%B8%A0-%EC%A4%91%EC%95%99-%EC%A0%95%EB%A0%AC&quot; aria-label=&quot;컨텐츠 중앙 정렬 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨텐츠 중앙 정렬&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;요소 성질을 테이블로 변환하는 방법&lt;/li&gt;
&lt;li&gt;부모 :&lt;/li&gt;
&lt;li&gt;display: table;&lt;/li&gt;
&lt;li&gt;자식 : &lt;/li&gt;
&lt;li&gt;display: table-cell; &lt;/li&gt;
&lt;li&gt;text-align: center; &lt;/li&gt;
&lt;li&gt;vertical-align: middle;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부모&lt;/li&gt;
&lt;li&gt;position: relative;&lt;/li&gt;
&lt;li&gt;자식&lt;/li&gt;
&lt;li&gt;position: absolute; &lt;/li&gt;
&lt;li&gt;top: 50%; &lt;/li&gt;
&lt;li&gt;left: 50%; &lt;/li&gt;
&lt;li&gt;margin-top: -(자식 요소 높이 값의 절반) margin-left: -(자식 요소 너비 값의 절반)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부모&lt;/li&gt;
&lt;li&gt;position: relative;&lt;/li&gt;
&lt;li&gt;자식&lt;/li&gt;
&lt;li&gt;position: absolute; &lt;/li&gt;
&lt;li&gt;top:50%; &lt;/li&gt;
&lt;li&gt;left: 50%; &lt;/li&gt;
&lt;li&gt;transform: translate(-50%, -50%);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4)부모&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;height: (부모 높이 값); &lt;/li&gt;
&lt;li&gt;display: flex; &lt;/li&gt;
&lt;li&gt;justify-content: center; &lt;/li&gt;
&lt;li&gt;align-items: center;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;반응형과 적응형 웹&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;반응형 : 전적으로 클라이언트에서 변화를 처리&lt;/li&gt;
&lt;li&gt;적응형 : 서버에서 웹에 접근하는 디바이스를 체크하여 디바이스에 최적화된 마크업 호출&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;box-sizing-border-box에-대해서-설명&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#box-sizing-border-box%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85&quot; aria-label=&quot;box sizing border box에 대해서 설명 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;box-sizing: border-box에 대해서 설명&lt;/h2&gt;
&lt;p&gt;- 요소가 width를 계산 할 때 어디까지 포함할지 설정하는 속성입니다. 기본값은 content-box이며 컨텐츠 크기만 고려합니다.&lt;/p&gt;
&lt;p&gt;- box-sizing: border-box로 설정시 width 값에 border와 padding 값도 포함합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;17. 시맨틱 마크업에 대해서 설명해주세요.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“의미론적” 마크업을 의미합니다. 관련 태그로 &lt;table&gt;, &lt;header&gt;, &lt;footer&gt;, &lt;address&gt; 등이 있으며 개발자에게 태그를 통해 소스코드의 의미를 간접적으로 전달할 수 있습니다. 또한, 브라우저는 태그를 통해 웹페이지를 더 쉽게 이해할 수 있게 됩니다. 예를 들어 &lt;nav&gt; 태그가 있다면 네비게이션 역할을 하는 요소라는 것을 쉽게 알 수 있을 것입니다. &lt;/p&gt;
&lt;p&gt;시맨틱 마크업을 작성하면 아래와 같은 장점이 있습니다.&lt;/p&gt;
&lt;p&gt;\1. 접근성이 좋아진다.&lt;/p&gt;
&lt;p&gt;\2. SEO에 유리하다.&lt;/p&gt;
&lt;p&gt;\3. 코드 가독성이 높아집니다.&lt;/p&gt;
&lt;h2 id=&quot;18-브라우저-접두사&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#18-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%A0%91%EB%91%90%EC%82%AC&quot; aria-label=&quot;18 브라우저 접두사 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;18) 브라우저 접두사&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;최신의 CSS 기술을 구형 브라우저에 사용해야하는 경우 사용&lt;/li&gt;
&lt;li&gt;-webkit- : 구글, 사파리&lt;/li&gt;
&lt;li&gt;-moz- : 파이어폭스&lt;/li&gt;
&lt;li&gt;-ms- : 익스플로러&lt;/li&gt;
&lt;li&gt;-o- : 오페라&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;19-css의-단위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#19-css%EC%9D%98-%EB%8B%A8%EC%9C%84&quot; aria-label=&quot;19 css의 단위 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;19) CSS의 단위&lt;/h2&gt;
&lt;h4&gt;(1) em&lt;/h4&gt;
&lt;p&gt;body 태그에 em 값을 이용해 폰트 사이즈를 지정하면 모든 자식 요소들은 body의 폰트 사이즈에 영향을 받습니다.&lt;/p&gt;
&lt;p&gt;body {    font-size: 14px; } div {    font-size: 1.2em; // 14px * 1.2 = 16.8px }&lt;/p&gt;
&lt;p&gt;1.2em은 14px을 기준으로 1.2배의 폰트 사이즈로 표현됩니다.&lt;/p&gt;
&lt;p&gt;그런데 em을 정의한 요소를 중첩 선언하면 어떤 일이 생길까요? 아래에는 중첩한 마크업의 결과입니다.&lt;/p&gt;
&lt;div&gt; 
    Test (14 * 1.2 = 16.8px)
    &lt;div&gt; 
        Test (16.8 * 1.2 = 20.16px)
        &lt;div&gt;
            Test (20.16 * 1.2 = 24.192px)
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;각 각 계산된 font-size에 1.2배를 다시 계산하는 것을 확인할 수 있습니다. 경우에 따라 유용하지만 혼란스러울 수 있습니다. 이런 경우 아래의 rem을 사용하면 우리가 원하는 방식으로 표현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;- rem(root em)&lt;/p&gt;
&lt;p&gt;body {    font-size: 14px; } div {    font-size: 1.2rem; }&lt;/p&gt;
&lt;div&gt; 
    Test (14 * 1.2 = 16.8px)
    &lt;div&gt; 
        Test (14 * 1.2 = 16.8px)
        &lt;div&gt;
            Test (14 * 1.2 = 16.8px)
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;이전 예제와는 다르게 모두 16.8px로 표현됩니다.&lt;/p&gt;
&lt;p&gt;- vh &amp;#x26; vw(vertical height &amp;#x26; vertical width)&lt;/p&gt;
&lt;p&gt;CSS의 너비 값은 가장 가까운 부모 요소에 상대적인 영향을 받습니다. 만약 타겟 요소의 너비값과 높이값을 뷰포트의 너비값과 높이값에 맞게 사용할 수 있다면 어떨까요? 바로 vh와 vw를 사용하면 됩니다. vh 요소는 높이값의 100분의 1의 단위입니다.&lt;/p&gt;
&lt;p&gt;.vh {    height: 100vh; } .vw {    width: 100vw; }&lt;/p&gt;
&lt;p&gt;- vmin &amp;#x26; vmax&lt;/p&gt;
&lt;p&gt;vmin은 웹 브라우저 너비와 높이 중에 더 작은 값을 기준으로 하여 100분의 1의 값&lt;/p&gt;
&lt;p&gt;wmax은 웹 브라우저 너비와 높이 중에 더 큰 값을 기준으로 하여 100분의 1의 값&lt;/p&gt;
&lt;p&gt;vh &amp;#x26; vw는 이해할 수 있는데 vmin &amp;#x26; vmax는 어디에서 활용되는지 &lt;/p&gt;
&lt;h2 id=&quot;20-크로스-브라우징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#20-%ED%81%AC%EB%A1%9C%EC%8A%A4-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95&quot; aria-label=&quot;20 크로스 브라우징 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;20) 크로스 브라우징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IE의 경우 Promise 객체가 없어서 폴리필(Pollyfill)을 추가하여 문제를 해결 &lt;/li&gt;
&lt;li&gt;이를 해결하려면 babel과 같은 트랜스파일러가 필요(ES6 코드를 ES5로 변경) &lt;/li&gt;
&lt;li&gt;자동화를 위해 webpack과 같은 번들러 도입&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;21--css-성능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#21--css-%EC%84%B1%EB%8A%A5&quot; aria-label=&quot;21  css 성능 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;21 ) CSS 성능&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;이미지에 height, width 속성 값을 설정하여 렌더링 성능을 향상시키고 이미지 로드에 따른 화면 늘어남을 방지&lt;/li&gt;
&lt;li&gt;애니메이션이 들어간 요소는 position 속성을 fixed나 absolute로 설정하여 성능을 향상&lt;/li&gt;
&lt;li&gt;최소한의 선택자를 사용하여 CSS를 검색&lt;/li&gt;
&lt;li&gt;최소한의 마크업&lt;/li&gt;
&lt;li&gt;이미지 스프라이트 기법을 이용하여 요청 횟수를 줄임&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택]]></title><link>https://jigglog.netlify.app/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택/</link><guid isPermaLink="false">https://jigglog.netlify.app/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 기술스택/</guid><pubDate>Fri, 09 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt; 백엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-grpc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-grpc&quot; aria-label=&quot;1 grpc permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) gRPC&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;구글에서 개발한 어느 환경에서 실행할 수 있는 최신 오픈 소스 고성능 RPC 프레임워크&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) RPC (Remote Procedure Call)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 함수나 프로시저를 실행할 수 있게하는 프로세스 간 통신 기술&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;MSA(Micro Service Architecture) 에서 다양한 언어와 프레임워크를 RPC를 이용하여 언어에 구애받지 않고 원격에 있는 프로시저를 호출하여 고유 프로그램의 개발에 집중할 수 있게 해주는 기술&lt;/li&gt;
&lt;li&gt;gRPC를 이용하면 원격에 있는 애플리케이션의 메서드를 로컬 메서드인 것처럼 직접 호출할 수 있기 때문에 분산 애플리케이션과 서비스를 보다 쉽게 만들 수 있음&lt;/li&gt;
&lt;li&gt;gRPC는 RPC 시스템에서와 마찬가지로 서비스를 정의하고, 서비스를 위한 매개변수와 반환 값을 가지는 메서드를 만든다는 아이디어를 가지고 있음&lt;/li&gt;
&lt;li&gt;서버 측은 정의한 서비스 규격에 따라 인터페이스를 구현하고 gRPC 서버를 실행하여 클라이언트 호출을 처리한다. 클라이언트 측에서는 서버와 동일한 방법을 제공하는 stub이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) stub&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Parameter 객체를 Message로 Marshalling/Unmarshalling하는 레이어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;서버와 클라이언트는 서로 다른 주소 공간을 사용하므로 메모리 매개 변수에 대한 포인터가 다른 데이터를 가리키게 되기 때문에 함수 호출에 사용된 매개 변수를 꼭 변환해줘야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;client의 stub&lt;/code&gt; :  함수 호출에 사용된 파라미터의 변환(marshalling) 및 함수 실행 후 서버에서 전달된 결과의 변환 담당&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;server의 stub&lt;/code&gt; : 클라이언트가 전달한 매개 변수의 역변환(unmarshalling) 및 함수 실행 결과 변환을 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) protocol buffer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;gRPC는 IDL(Interface Definition Language)로 protocol buffer를 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;protocol buffer&lt;/code&gt; : 직렬화 데이터 구조. 어떤 언어나 플랫폼에서도 통신 프로토콜이나 데이터 저장을 사용할 때, 구조화된 데이터를 전환하게 해주는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;proto file&lt;/code&gt; : 직렬화하려는 데이터 구조를 정의. 프로토콜 버퍼는 여러 프로그래밍 언어를 지원하기 때문에, 특정 언어에 종속성이 없는 형태로 데이터 타입을 정의&lt;/li&gt;
&lt;li&gt;프로토콜 버퍼 데이터는 일련의 ‘이름-값’의 쌍을 포함하는 작은 논리적 레코드인 메시지로 구성. 이렇게 작성된 proto file을 protoc 컴파일러로 컴파일 하면 데이터에 접근할 수 있는 각 언어에 맞는 형태의 데이터 클래스를 생성해줌. 만들어진 클래스는 각 필드를 위한 접근자 뿐 아니라 전체 구조를 바이트로 직렬화하거나 바이트로부터 전체 구조를 파싱하는 메서드들을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(4) gRPC 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;높은 생산성과 다양한 언어 및 플랫폼 지원&lt;/code&gt; : gRPC는 서비스와 메시지를 정의하기 위해 Protocol Buffers를 사용. 프로토콜 버퍼의 IDL만 정의하면 서비스와 메세지에 대한 소스코드가 자동으로 생성되고 데이터를 주고 받을 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP/2 기반의 양방향 스트리밍&lt;/code&gt; : gRPC는 HTTP/2 기반으로 통신한다. HTTP/2는 하나의 TCP 연결이 여러 개의 양방향 스트리밍을 지원&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;성능 이점&lt;/code&gt; : HTTP/2 레이어 위에서 Protocol Buffers를 사용해 직렬화된 바이트 스트림으로 통신하여 JSON 기반의 통신보다 더 가볍고 통신 속도가 빠르다. 때문에 laytency 감소와 더 많은 트래픽을 처리할 수 있는 성능의 이점이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2--redis와-memcached&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2--redis%EC%99%80-memcached&quot; aria-label=&quot;2  redis와 memcached permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2 ) Redis와 Memcached&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;key-value store NOSQL DB입니다. &lt;/li&gt;
&lt;li&gt;싱글스레드로 동작하며 자료구조를 지원&lt;/li&gt;
&lt;li&gt;데이터의 스냅샷 혹은 AOF 로그를 통해 복구가 가능해서 어느정도 영속성도 보장&lt;/li&gt;
&lt;li&gt;스프링에서는 세션을 관리하거나, 캐싱을 할 때 사용&lt;/li&gt;
&lt;li&gt;Redis와 Memcached의 차이에 대해서 설명해주세요.&lt;/li&gt;
&lt;li&gt;Redis는 싱글 스레드 기반으로 동작하고, Memcached는 멀티스레드를 지원해서 멀티 프로세싱이 가능합니다.&lt;/li&gt;
&lt;li&gt;Redis는 다양한 자료구조를 지원하고, Memcached는 문자열 형태로만 저장합니다.&lt;/li&gt;
&lt;li&gt;Redis는 여러 용도로 사용할 수 있도록 다양한 기능을 지원합니다.&lt;/li&gt;
&lt;li&gt;Redis는 스냅샷, AOF 로그를 통해서 데이터 복구가 가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-elastic-search&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-elastic-search&quot; aria-label=&quot;3 elastic search permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) Elastic Search&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elastic Search는 자바로 개발된 오픈소스 검색엔진 입니다. 보통 단독으로 사용하기보다는 ELK 스택이라고 부르는 Logstash, Kibana, Beats를 추가적으로 사용합니다.&lt;/li&gt;
&lt;li&gt;Inverted Index 구조로 데이터를 저장해서, 전문(Full-text) 검색시에 RDBMS에 비해 뛰어난 성능을 보장합니다.&lt;/li&gt;
&lt;li&gt;다양한 용도로 사용할 수 있습니다. (데이터 저장, 문서 검색, 위치 검색, 머신 러닝 기반 검색, 로그 분석, 보안 감사 분석 등)&lt;/li&gt;
&lt;li&gt;Elastic Search의 인덱스구조와 RDBMS의 인덱스 구조의 차이에 대해 설명해주세요.&lt;/li&gt;
&lt;li&gt;Elastic Search는 Inverted-Index 구조로 데이터를 저장합니다. 이는 책의 색인을 생각해보면 쉬운데, 특정 단어가 출현하는 doc을 저장하는 것입니다. 반면 RDBMS는 B-Tree와 그와 유사한 인덱스를 사용합니다. 데이터가 어디에 존재하는지 어떤 순서로 저장하는 지의 차이라고 생각합니다. RDBMS에도 다양한 인덱스 구조가 있으나 여기서 예로 든 것은 B-Tree 인덱스입니다.&lt;/li&gt;
&lt;li&gt;Elastic Search의 키워드 검색과 RDBMS의 LIKE 검색의 차이에 대해 설명해주세요.&lt;/li&gt;
&lt;li&gt;Elastic Search의 키워드 검색은 document를 저장할 때 수행하는 알고리즘과 동일한 알고리즘으로 키워드를 분리합니다. 그 중에서 랭킹알고리즘을 통해서 가장 유사한 순서대로 결과를 나타냅니다. &lt;/li&gt;
&lt;li&gt;RDBMS에서의 LIKE 검색은 와일드카드로 시작하지 않는 경우에만 인덱스를 사용하고 나머지 경우는 전체를 탐색하기 때문에 상대적으로 느립니다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - CS]]></title><link>https://jigglog.netlify.app/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - cs/</link><guid isPermaLink="false">https://jigglog.netlify.app/벡엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - cs/</guid><pubDate>Thu, 08 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt; 백엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;cs-관련-지식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cs-%EA%B4%80%EB%A0%A8-%EC%A7%80%EC%8B%9D&quot; aria-label=&quot;cs 관련 지식 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CS 관련 지식&lt;/h1&gt;
&lt;h2 id=&quot;1-네트워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;1 네트워크 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 네트워크&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;2) Long-Polling과 Websocket, Server-Sent Event&lt;/h4&gt;
&lt;h5&gt;(1) Polling&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트가 서버에서 HTTP Request를 주기적으로 요청하고, 서버가 응답하는 방식 &lt;/li&gt;
&lt;li&gt;클라이언트가 주기적으로 요청을 하기 때문에 클라이언트의 수가 증가하면 요청의 수도 함께 증가하기 때문에 서버의 부담이 커짐&lt;/li&gt;
&lt;li&gt;또한, 요청과 응답후에는 연결이 끊어지기 때문에 요청할 때마다 항상 연결을 맺는 과정이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) Long Polling&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트가 서버에 HTTP Request를 요청하면, 서버는 대가하고 있다가 이벤트가 발생했을 때, 클라이언트에게 응답을 하는 방식&lt;/li&gt;
&lt;li&gt;Polling 처럼 불필요한 요청에 계속 응답하는 것이 아니기 때문에 요청에 따른 커넥션 맺는 과정에서 발생하는 비용이 줄어듦&lt;/li&gt;
&lt;li&gt;클라이언트의 수가 증가하면 그에 따른 응답을 해야하는 수도 증가하기 때문에 Polling과 큰 차이는 없게 됨&lt;/li&gt;
&lt;li&gt;다수의 클라이언트가 동시에 이벤트가 발생할 경우 서버는 각 클라이언트에게 응답을 하게 되고, 그 다수의 클라이언트는 서버에게 곧바로 요청을 하기 때문에 이 순간 서버의 부담이 커짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) Streaming&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트와 서버 사이의 연결을 끊지 않고 필요한 메세지를 계속 전달하여 커넥션을 맺는 과정에서 발생하는 부담 경감&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) WebSocket&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트와 서버간의 전이중 통신을 지원하기 위한 통신 프로토콜&lt;/li&gt;
&lt;li&gt;웹 소켓 프로토콜 핸드 쉐이크 : 클라이언트, 서버간 전이중 통신 시 클라이언트가 서버로 HTTP UPGRADE 요청을 보냄&lt;/li&gt;
&lt;li&gt;서버가 커넥션을 UPGRADE 할 수 있는 경우, HTTP 101 응답을 클라이언트에게 보냄&lt;/li&gt;
&lt;li&gt;서버는 핸드 쉐이크가 성공적으로 수행되었다고 판단하고 서버와 클라이언트 사이의 커넥션을 웹 소켓 프로토콜로 UPGRADE  &lt;/li&gt;
&lt;li&gt;클라이언트와 서버 사이의 HTTP 101 응답이 전달되는 순간, 서버와 클라이언트 사이의 커넥션은 HTTP 프로토콜이라고 하지 않음. 이순간 양방향 통신이 가능&lt;/li&gt;
&lt;li&gt;웹 소켓으로 연결된 모든 클라이언트는 다른 클라이언트에게 커넥션을 끊는 요청을 전송&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) TCP와 UDP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TCP와 UDP : 전송 계층에서 패킷을 보내기 위한 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) TCP (Transmission Control Protocol)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;연결형 서비스&lt;/li&gt;
&lt;li&gt;3-way handshaking 과정을 통해 연결을 설정하고, 4-way handshaking을 통해 해제&lt;/li&gt;
&lt;li&gt;높은 신뢰성과 전송 순서를 보장&lt;/li&gt;
&lt;li&gt;1:1 통신에서 사용&lt;/li&gt;
&lt;li&gt;UDP보다는 속도가 느림&lt;/li&gt;
&lt;li&gt;파일전송과 같은 신뢰성이 중요한 서비스에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) UDP (User Datagram Protocol)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;비연결형 서비스.&lt;/li&gt;
&lt;li&gt;패킷을 주고 받을 때 신호 절차를 거치지 않음&lt;/li&gt;
&lt;li&gt;신뢰성이 낮으며 전송 순서가 바뀔 수 있음&lt;/li&gt;
&lt;li&gt;1:N 이나 N:N 통신에서 사용&lt;/li&gt;
&lt;li&gt;TCP보다 속도가 빠름&lt;/li&gt;
&lt;li&gt;UDP도 개발자가 직접 신뢰성을 보장하도록 할 수 있음. HTTP/3은 QUIC이라는 프로토콜을 기반으로 하는데, QUIC은 UDP를 기반으로 함&lt;/li&gt;
&lt;li&gt;스트리밍, RTP와 같이 연속성이 더 중요한 서비스에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) TCP 3, 4 way handshake&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TCP 3way handshake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;가상회선을 수립하는 단계 &lt;/li&gt;
&lt;li&gt;클라이언트는 서버에 요청을 전송할 수 있는지, 서버는 클라이언트에게 응답을 전송할 수 있는지 확인하는 과정&lt;/li&gt;
&lt;li&gt;SYN, ACK 패킷을 주고받으며, 임의의 난수로 SYN 플래그를 전송하고, ACK 플래그에는 1을 더한값을 전송&lt;/li&gt;
&lt;li&gt;장치들 사이의 접속을 성립하기 위한 절차로 양 장치 모두 데이터 통신 준비가 되었다는 것을 보장&lt;/li&gt;
&lt;li&gt;SYN(n) -&gt; ACK(n + 1) / SYN(m) -&gt; ACK(m + 1) (S AS A)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) TCP 4way handshake&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;연결을 해제하는 단계&lt;/li&gt;
&lt;li&gt;클라이언트는 서버에게 연결해제를 통지하고 서버가 이를 확인하고 클라이언트에게 이를 받았음을 전송해주고 최종적으로 연결 해제&lt;/li&gt;
&lt;li&gt;단, 서버에서 소켓이 닫혔다고 통지해도 클라이언트 측에서는 일정시간 대기하는데, 혹시나 패킷이 나중에 도착할 수 있기 때문&lt;/li&gt;
&lt;li&gt;장치들 사이의 통신을 종료하기 위한 절차&lt;/li&gt;
&lt;li&gt;FIN (Client) -&gt; ACK (Server) -&gt; FIN (Server) -&gt; ACK(Client) (F A F A)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) HTTP와 HTTPS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;웹 프로토콜 : 웹에서 쓰이는 통신규약&lt;/li&gt;
&lt;li&gt;민감한 정보가 있는 페이지의 경우 Https 그렇지 않으면 http&lt;/li&gt;
&lt;li&gt;Http 1.1과 2.0: 속도의 차이 : 2.0같은 경우는 헤더를 압축해서 보내기도하고, 한번의 연결로 동시에 여러 메시지를 주고 받음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) HTTP&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;웹 프로토콜중 하나로 HTTP가 가장 많이 쓰임. 요청과 응답으로 이루어져 있어 어떤 데이터를 요청하면, 어느 데이터를 준다고 응답&lt;/li&gt;
&lt;li&gt;따로 암호화 과정을 거치지 않음&lt;/li&gt;
&lt;li&gt;http방식이 https방식보다 빠름&lt;/li&gt;
&lt;li&gt;중간에 패킷을 가로챌 수 있고, 수정할 수 있어 보안이 취약. 민감한 정보를 다룰 때 항상 변조, 해킹 가능성을 생각해야 함&lt;/li&gt;
&lt;li&gt;네트워크상에서 정보를 누군가가 마음대로 열람, 수정이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) HTTPS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;HTTP에 보안 계층을 추가한 것&lt;/li&gt;
&lt;li&gt;누가 볼수 없도록 막음. 중간에 암호화 계층을 거쳐서 패킷을 암호화. 제3자 인증, 공개키 암호화, 비밀키 암호화를 사용&lt;/li&gt;
&lt;li&gt;Https는 설치 및 인증서를 유지하는데 추가적인 비용이 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 암호화&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;제3자 인증은 믿을 수 있는 인증기관에 등록된 인증서만 신뢰하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공개키 암호화&lt;/code&gt; : 비밀키를 공유하기 위해 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;비밀키 암호화&lt;/code&gt; : 통신하는 데이터를 암호화하는데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) GET과 POST의 차이점&lt;/h4&gt;
&lt;h5&gt;(1) GET&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 존재하는 정보를 요청&lt;/li&gt;
&lt;li&gt;이 때 반환되는 정보는 정보 자체가 아니라 정보의 표현&lt;/li&gt;
&lt;li&gt;Request Body는 입력하지 않는 것이 일반적이며, 레거시 시스템의 경우 요청을 받아들이지 않을 수 있음&lt;/li&gt;
&lt;li&gt;캐싱을 수행하기 때문에 캐싱되지 않는 요청은 GET 요청이 맞지 않을 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) POST&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 정보를 생성하는 것을 요청&lt;/li&gt;
&lt;li&gt;예전 HTTP 통신은 POST 요청으로 데이터 삭제, 수정도 form 요청으로 같이 수행 &lt;/li&gt;
&lt;li&gt;POST 요청은 서버의 상태를 변경시키기 때문에 멱등성이 유지되지 않음&lt;/li&gt;
&lt;li&gt;Request Body에 요청하는 데이터를 담아 전송&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7) HTTP 메서드&lt;/h4&gt;
&lt;h5&gt;1) GET&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 존재하는 데이터를 요청하는 것 (CRUD의 R) &lt;/li&gt;
&lt;li&gt;요청된 자원을 수정할 때, 자원내 필드를 전체 수정할 때 사용 (만약 일부만 전달할 경우, 그외 필드들은 NULL or 초기값 처리).&lt;/li&gt;
&lt;li&gt;Http Request Message의 Header 부분의 URL에 담겨서 전송되며, BODY는 비어있는 상태 URL에 ?뒤에 데이터를 가져오기 위한 조건이 포함&lt;/li&gt;
&lt;li&gt;URL에 조건이 포함되었기 때문에 데이터의 제한이 존재하며, URL에 노출되기 때문에 보안의 위험존재&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2) POST&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 데이터를 생성하는 것을 요청 (CRUD의 C) &lt;/li&gt;
&lt;li&gt;Http Request Message의 BODY 부분에 클라이언트의 요청을 처리하기 위한 데이터가 존재&lt;/li&gt;
&lt;li&gt;URL에 노출되지 않기 때문에 보안의 위험이 존재하지 않으며 보내는 데이터의 제한이 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3) PUT&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 존재하는 데이터를 수정하거나 존재하지 않으면 생성 (CRUD의 C,U)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;4) DELETE&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 데이터를 제거할 것을 요청. 존재하지 않아도 동일하게 동작합 (CRUD의 D)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;5) PATCH&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버에 존재하는 데이터를 일부 수정(CRUD의 U)&lt;/li&gt;
&lt;li&gt;GET과 POST를 상황에 따라 써야하는 이유는, GET 요청은 캐싱이 된다. 그뜻은 웹 서버에 요청이 전달되지 않고, 캐시에서 데이터를 전달해준다는 것&lt;/li&gt;
&lt;li&gt;만약 글작성을 GET으로 처리한다면, 똑같은 요청을 처리했을 때, 캐싱으로 인해 두번째부터의 동일한 글작성은 서버에 전달되지 않고 첫번째 캐싱된 결과를 계속 전달받을 수 있기 때문에 METHOD를 명확하게 구분해서 써야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;8) RESTful&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTTP URI를 통해 자원을 표시하고 HTTP Method를 통해 자원에 대한 처리를 표현&lt;/li&gt;
&lt;li&gt;사람이 읽을 수 있는 API라는 것이 특징&lt;/li&gt;
&lt;li&gt;HTTP를 사용하기 때문에 HTTP의 특성을 그대로 반영하고 별도의 인프라 구축이 필요없음&lt;/li&gt;
&lt;li&gt;URI로 접근가능하고 내용이 JSON,XML 등으로 표현된 자원에 대한 행위를 HTTP Method로 정의&lt;/li&gt;
&lt;li&gt;RESTful하다라는 것은 REST API의 설계의도를 명확하게 지켜주는 것 &lt;/li&gt;
&lt;li&gt;슬래시를 통해 계층관계를 표시한다던가 숫자는 id를 나타낸다든가 동사보단 명사를 위주&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 장점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;검색엔진에 최대한 많은 페이지가 인덱싱되기를 원하는 경우 REST로 설계하고 html을 서버사이드 렌더링하여 sitemap을 형성하는 것이 쉬움&lt;/li&gt;
&lt;li&gt;API 명세서를 읽지 않고도 요청을 알아보기 쉬움&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;이 말은 공식화된 레퍼런스가 없기 때문에, 사람마다 다르게 해석하여 사용할 수도 있음&lt;/li&gt;
&lt;li&gt;특정 클라이언트에서는 HTTP Method나 상태코드 중에 사용할 수 없는 것들이 있음&lt;/li&gt;
&lt;li&gt;실제 API를 개발할 때 REST로 디자인하면 굉장히 복잡한 비즈니스가 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) HATEOAS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;동적인 API를 제공할 수 있음(모든 관련된 동작을 URI를 통해 알려줌) &lt;/li&gt;
&lt;li&gt;클라이언트가 API의 변화에 일일이 대응하지 않아도 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;9) CORS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 도메인간에 자원을 공유하는 것, 도메인 또는 포트가 다른 서버의 자원을 요청하면 발생하는 문제 &lt;/li&gt;
&lt;li&gt;웹 프론트 측에서 request header에 CORS 관련 옵션을 넣어주고 서버에서는 해당 프론트 요청을 허용&lt;/li&gt;
&lt;li&gt;대부분의 브라우저에서는 이를 기본적으로 차단하며 서버측에서 헤더를 통해서 사용가능한 자원을 알려줌&lt;/li&gt;
&lt;li&gt;preflight request는 실제 요청을 보내도 안전한지 판단하기 위해 사전에 보내는 요청&lt;/li&gt;
&lt;li&gt;OPTIONS 메서드로 요청하며 CORS를 허용하는지 확인&lt;/li&gt;
&lt;li&gt;CORS가 허용된 웹서버라면 사용 가능한 리소스를 헤더에 담아 응답&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10) OSI 7 Layer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네트워크에서 통신이 일어나는 과정을 7단계로 캡슐화하여 서로 다른 동작을 각 layer에서 담당하는 것&lt;/li&gt;
&lt;li&gt;통신이 일어나는 과정을 단계적으로 파악할 수 있으며 layer 별로 각기 다른 동작을 수행하기에 오류 탐지가 용이&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 물리 계층(Physical layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;전기적, 기계적 특성을 바탕으로 비트 흐름을 전송. 이 계층은 데이터를 전달만 할 뿐, 데이터가 무엇인지 전혀 신경쓰지 않음(케이블, 리피터, 허브 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 데이터 링크 계층(DataLink layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;안전한 정보 전달을 보장. 물리 계층에서 전달 받은 프레임의 오류를 찾고 필요시 재전송을 요청&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 네트워크 계층(Network layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;오류 없는 패킷을 목적지까지 안전하고 빠르게 전달하는 경로(라우팅)를 찾는 계층&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 전송 계층 (Transport layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;전송을 통해 통신을 활성화하는 계층. 패킷의 전송이 유효한지 확인하고 실패한 패킷을 재전송. end-to-end 통신의 신뢰성을 보장&lt;/li&gt;
&lt;li&gt;오류 검출, 흐름제어, 중복 검사를 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) 세션 계층(Session layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;포트를 연결하여 논리적인 통신을 가능하게 하는 계층&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(6) 표현 계층(Presentation layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;응용 프로그램을 위해 형식상 차이를 갖는 데이터를 인코딩하여 일관된 형태의 데이터를 표현하는 계층&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(7) 응용 계층(Application layer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자와 직접 상호작용하는 계층(크롬, 파이어폭스)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(11) CSR / SSR&lt;/h4&gt;
&lt;h5&gt;(1) CSR의 과정&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버가 브라우저에게 응답을 보냄 &lt;/li&gt;
&lt;li&gt;브라우저는 JS를 다운 받음 &lt;/li&gt;
&lt;li&gt;브라우저는 리액트를 실행 &lt;/li&gt;
&lt;li&gt;페이지가 보여지고 상호작용 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) SSR의 과정&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;서버가 브라우저에게 HTML 응답, 랜더링하기 위한 준비가 되었다고 보냄 &lt;/li&gt;
&lt;li&gt;브라우저가 페이지랜더링, 페이지가 보여지고 브라우저는 JS 다운받음 &lt;/li&gt;
&lt;li&gt;브라우저 리액트 실행 &lt;/li&gt;
&lt;li&gt;페이지 상호작용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) CSR과 SSR의 차이&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CSR은 마지막 단계 전까지 화면에 보여지지가 않고 로딩중 / SSR은 미리 페이지가 보여짐&lt;/li&gt;
&lt;li&gt;CSR은 초기로딩속도가 느리긴하지만, 화면전환에 있어서 클라이언트에서 이루어져서 빠른 전환이 가능&lt;/li&gt;
&lt;li&gt;SSR은 초기로딩속도가 빨라서 사용자가 느끼기엔 좋지만, 동작은 하지않음&lt;/li&gt;
&lt;li&gt;화면전환에 있어서 서버에 요청해야하므로 서버에 부담을 줄 수 있음. 서비스마다 사용자의 요구마다 다름&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(12) FOUC(Flash of Unstyled Content)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브라우저로 웹문서에 접근했을때 미처 CSS의 스타일이 모두 적용되지 못한 상태에서 화면이 표시되어 발생하는 화면 깜박임 스타일의 적용 전과 적용 후가 그대로 화면에 노출된 상태로 변경되는 현상&lt;/li&gt;
&lt;li&gt;FOUC를 최소화하기 위해서는 기본적으로 &amp;#x3C;head&gt; 요소안에 CSS를 링크하고, @import의 사용을 자제&lt;/li&gt;
&lt;li&gt;자바스크립트의 선언순서, 위치를 변경 (성능을 위해 &amp;#x3C;/body&gt; 요소 앞에 자바스크립트를 위치시키곤 하는데 이를 &amp;#x3C;head&gt; 안으로 위치를 변경)&lt;/li&gt;
&lt;li&gt;FOUC를 유발하는 구역을 숨겼다가 문서의 스타일이나 스크립트가 모두 적용되면 보여줌&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-운영체제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C&quot; aria-label=&quot;2 운영체제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 운영체제&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 가비지 컬렉터&lt;/h4&gt;
&lt;h5&gt;(1) 가비지와 가비지 컬렉터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Garbage : 정리되지 않은 메모리, 유효하지 않은 객체의 메모리&lt;/li&gt;
&lt;li&gt;Garbage collector (GC) : 프로그램이 사용할 수 있는 메모리 용량이 부족할 때 가비지들을 메모리에서 해제하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 메모리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 할당 : 자바스크립트는 값을 선언할 때 자동으로 메모리를 할당한다.&lt;/li&gt;
&lt;li&gt;메모리 사용 : 메모리를 읽고 쓰는 것을 의미. 메모리가 할당된 변수를 사용하면 읽기와 쓰기 작업이 이루어짐&lt;/li&gt;
&lt;li&gt;메모리 해제 : 더 이상 필요하지 않은 메모리를 해제하여 재사용 할 수 있도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 레퍼런스 카운팅(Reference Counting)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;해당 값이 얼마나 많이 참조되었는지 추적&lt;/li&gt;
&lt;li&gt;변수를 선언하고 참조값이 할당되면 레퍼런스 카운트는 1이 됨&lt;/li&gt;
&lt;li&gt;다른 변수가 같은 값을 참조하면 레퍼런스 카운트가 늘어남&lt;/li&gt;
&lt;li&gt;마찬가지로 해당 값을 참조하는 변수에 다른 값을 할당하면 레퍼런스 카운트가 줄어듦&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; objectA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; objectB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 2&lt;/span&gt;

objectA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 1&lt;/span&gt;
objectB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;값의 레퍼런스 카운트가 0이 되면 해당 값에 접근할 방법이 없으며 메모리를 회수해도 안전&lt;/li&gt;
&lt;li&gt;순환 참조 문제 : 객체가 두 개일 때 함수 실행이 끝날 때 두 객체는 모두 스코프를 벗어나게 될 것이고, 두 객체는 불필요해지므로 할당된 메모리는 회수되어야 하지만 함수 실행이 끝난 뒤에도 레퍼런스 카운트가 0이 되지 않으므로 두 객체는 계속 존재&lt;/li&gt;
&lt;li&gt;이런 함수를 여러 번 호출하면 메모리를 회수하지 못하고 낭비되는 메모리가 많이 늘어남&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 마크 앤 스위프(Mark and sweep)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 해제 여부를 결정하기 위해 루트(roots, 자바스크립트의 &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; 객체)부터 해당 객체까지 닿을 수 있는지를 판단&lt;/li&gt;
&lt;li&gt;루트부터 시작하여 루트가 참조하는 객체들과 그 객체가 참조하는 또 다른 객체들을 추적&lt;/li&gt;
&lt;li&gt;객체를 추적하면서 닿을 수 있는 객체는 표시(mark) 한 후, 표시가 없는 객체들은 메모리를 해제(sweep)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Call-by-value, Call-by-reference, Call-by-assignment&lt;/h4&gt;
&lt;h5&gt;(1) call-by-value(cbv):&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;변수의 &lt;em&gt;값&lt;/em&gt;을 복사하여 함수의 인자로 전달&lt;/li&gt;
&lt;li&gt;복사된 인자는 함수 내에서만 사용되는 local variable의 특성을 가짐&lt;/li&gt;
&lt;li&gt;함수 안에서 인자의 값이 변경되어도 외부의 변수의 값은 변경되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) call-by-reference(cbr)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;변수의 &lt;em&gt;주소값&lt;/em&gt;을 복사하여 함수의 인자로 전달&lt;/li&gt;
&lt;li&gt;함수 안에서 값이 인자의 값이 변경된다면 전체 코드에서 해당 변수의 값이 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) call-by-assignment (cba)(python)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;전달받는 객체에 따라 참조 방식이 결정. &lt;/li&gt;
&lt;li&gt;immutable object : (int, float, tuple)이 함수의 인자로 넘어갈 땐 call-by-value로 전달&lt;/li&gt;
&lt;li&gt;mutable object : (list, dic, set)이 함수의 인자로 넘어갈 땐 call-by-reference로 전달&lt;/li&gt;
&lt;li&gt;list, dic, set이 mutable object 인 이유 : 객체의 크기가 아주 큰 경우 복사 참조만 된다면 메모리 공간이 낭비&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 가상 메모리와 페이지 폴트&lt;/h4&gt;
&lt;h5&gt;(1) 가상 메모리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 실행에 필요한 메모리 용량 전체를 RAM에서 할당받는 것이 아니라, 최소한의 메모리를 RAM에서 할당받아 저장하고 나머지는 HDD (가상 메모리 공간)에 저장하는 것&lt;/li&gt;
&lt;li&gt;요구 페이징 : 페이지 폴트가 발생하면 운영 체제가 가상 메모리에서 해당 페이지를 찾아 물리 메모리의 불필요한 페이지와의 교체를 요구. 그리고 이 과정 동안은 모든 스레드가 대기&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 페이지 교체 알고리즘&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;요구 페이징이 발생했을 때 교체할 물리 메모리의 페이지를 선정하는 알고리즘&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FIFO (First In First Out)&lt;/code&gt; : 물리 메모리에 적재된지 가장 오래된 페이지를 교체. 페이지의 사용 빈도를 무시하기 때문에 활발하게 사용하는 페이지가 교체될 수 있다는 문제점이 있음. 페이지가 적재된 순서를 Queue에 저장하는 방식을 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LRU (Least Recently Used)&lt;/code&gt; : 가장 오랜 기간 사용되지 않은 페이지를 교체. 많은 운영체제가 사용하는 알고리즘&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LFU (Least Frequently Used)&lt;/code&gt; : 참조 횟수가 가장 적은 페이지를 교체. 만약 교체 대상이 여러 개일 경우에 LRU를 사용LFU는 초기에 한 페이지를 집중적으로 참조하다가 이후에 참조하지 않는 경우에 메모리에 계속 남아있을 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;MFU (Most Frequently Used)&lt;/code&gt; : LFU와 반대로 참조 횟수가 가장 많은 페이지를 교체하는 알고리즘&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 메모리 단편화 (Memory Fragmentation)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;내부 단편화 : 교체된 페이지의 크기 &amp;#x3C; 할당된 공간의 크기&lt;/li&gt;
&lt;li&gt;외부 단편화 :  교체된 페이지의 크기 &gt; 할당된 공간의 크기&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) 페이징과 세그먼테이션&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 단편화를 해결할 수 있는 기법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;페이징 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지가 연속적인 물리 메모리 공간에 들어가야하는 제약을 해결하기 위한 방법&lt;/li&gt;
&lt;li&gt;가상 메모리는 페이지, 물리 메모리는 프레임이라는 고정 크기의 블록으로 나눈 후, 페이지 테이블의 매핑을 통해 1:1 대응&lt;/li&gt;
&lt;li&gt;페이지 단위를 작게하면 내부 단편화(Internal fragmentation) 역시 해결할 수 있지만 페이지에 공간을 할당한 후, 남는 공간이 적어지기 때문에 그 만큼 page mapping 과정이 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세그멘테이션 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;method, function, object, variables 등 프로그램의 논리적 단위를 바탕으로 서로 다른 크기의 블록으로 나누는 방법&lt;/li&gt;
&lt;li&gt;세그먼트들의 크기가 서로 다르기 때문에 메모리를 페이징 기법처럼 미리 분할해 둘 수 없고, 메모리에 적재될 때 빈 공간을 찾아 할당하는 사용자 관점의 가상 메모리 관리 기법&lt;/li&gt;
&lt;li&gt;각 세그먼트 별로 길이 값을 가지고 있어 내부 단편화를 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 프로세스와 스레드&lt;/h4&gt;
&lt;h5&gt;(1) 프로세스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;실행 중인 프로그램&lt;/em&gt;, 운영체제로부터 자원을 할당, 한 프로세스 안에 여러개의 스레드가 생성될 수 있음&lt;/li&gt;
&lt;li&gt;운영체제로부터 프로세서, 주소 공간, 메모리과 같은 시스템 자원을 할당받는 작업의 단위로 실행된 프로그램&lt;/li&gt;
&lt;li&gt;프로세스는 실행될 때 운영 체제로부터 독립된 메모리 영역 (Code, Data, Heap, Stack)을 할당&lt;/li&gt;
&lt;li&gt;다른 프로세스의 자원에는 접근할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 프로세스 관련 용어&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;PCB : 프로세스 제어 블록, 프로세스에 대한 중요한 정보를 저장&lt;/li&gt;
&lt;li&gt;PC : 프로그램 카운터, 프로세스 실행을 위한 다음 명령의 주소를 표시&lt;/li&gt;
&lt;li&gt;캐시메모리 : 자주 사용되는 데이터가 저장되는 공간으로 CPU의 레지스터와 메모리 사이에서 병목 현상을 완화하는 장치&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 스레드&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;실행 제어만 분리한 것&lt;/em&gt;, 프로세스 내에서 동작되는 실행의 단위&lt;/li&gt;
&lt;li&gt;Stack 외에 프로세스가 할당받은 자원 (Code, Data, Heap)을 스레드끼리 공유하면서 실행&lt;/li&gt;
&lt;li&gt;컨텍스트 스위칭도 캐시 메모리를 비우지 않아도 되는 스레드쪽이 빠름&lt;/li&gt;
&lt;li&gt;자원 공유로 인해 문제가 발생할 수 있음&lt;/li&gt;
&lt;li&gt;하나의 프로세스가 실행되면 기본적으로 하나의 메인 스레드가 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 멀티 프로세스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로그램을 프로세스 여러 개로 구성하여 Context switching을 통해 실행하는 것&lt;/li&gt;
&lt;li&gt;하나의 프로세스에 문제가 생기더라도 다른 프로세스에 영향을 미치지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) 멀티 스레드&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로그램을 한 프로세스 내에 여러 개의 스레드로 구성하여 실행하는 것&lt;/li&gt;
&lt;li&gt;하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;멀티 프로세스에 비해 메모리 자원소모가 줄어듬&lt;/li&gt;
&lt;li&gt;힙 영역을 통해서 스레드간 통신이 가능해서 프로세스간 통신보다 간단&lt;/li&gt;
&lt;li&gt;스레드의 컨텍스트 스위칭은 프로세스의 컨텍스트 스위칭보다 빠름&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;힙 영역에 있는 자원을 사용할 때는 동기화를 해야 함&lt;/li&gt;
&lt;li&gt;동기화를 위해서 락을 과도하게 사용하면 성능이 저하&lt;/li&gt;
&lt;li&gt;하나의 스레드가 비정상적으로 동작하면 다른 스레드도 종료&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(6) Thread-safe&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;두 개 이상의 스레드가 race condition에 들어가거나 같은 객체에 동시에 접근해도 연산결과의 정합성이 보장될 수 있게끔 메모리 가시성이 확보된 상태를 의미&lt;/li&gt;
&lt;li&gt;java.util.concurrent 패키지 하위의 클래스를 사용&lt;/li&gt;
&lt;li&gt;인스턴스 변수를 두지 않음&lt;/li&gt;
&lt;li&gt;Singleton 패턴을 사용(이 때, 일반적으로 구현하는 Singleton Pattern은 Thread-safe 하지 않습니다.)&lt;/li&gt;
&lt;li&gt;동기화(syncronized) 블럭에서 연산을 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(7) ThreadLocal&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;스레드 내부에서 사용되는 지역변수&lt;/li&gt;
&lt;li&gt;각각의 thread scope 내에서 공유되어 사용될 수 있는 값으로 다른 스레드에서 공유 변수에 접근할 시 발생할 수 있는 동시성 문제의 예방을 위해 만들어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(8) 컨텍스트 스위칭&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;한 Task가 끝날 때까지 기다리는 것이 아니라 여러 작업을 번갈아가며 실행해서 동시에 처리될 수 있도록 하는 방법&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;프로세서가 멀티 프로세싱을 구성하여 어떤 하나의 프로세스를 실행하고 있는 상태에서 인터럽트 요청에 의해 다음 우선 순위의 프로세스가 실행되어야 할 때, 기존 프로세스의 상태 또는 레지스터 값 (context)을 저장하고 다음 프로세스를 수행하도록 새로운 프로세스의 상태 또는 레지스터 값을 교체하는 작업. &lt;/li&gt;
&lt;li&gt;인터럽트가 발생하면 현재 프로세스의 상태를 PCB에 저장하고 새로운 프로세스의 상태를 레지스터에 저장하는 방식으로 동작&lt;/li&gt;
&lt;li&gt;CPU는 아무런 일을 하지 않으므로  잦은 컨텍스트 스위칭은 성능저하 원인&lt;/li&gt;
&lt;li&gt;스레드는 캐시메모리나 PCB에 저장해야하는 내용이 적고 비워야 하는 내용도 적기때문에 상대적으로 더 빠른 컨텍스트 스위칭 가능&lt;/li&gt;
&lt;li&gt;멀티 프로세싱을 Computer multitasking을 통해 빠른 속도로 Task를 바꿔 가며 실행하여 실시간 처리에 근사하도록 하는 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(9) 프로세스 동기화&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;다중 프로세스 환경에서 자원등에 한 프로세스만이 접근가능하도록 하는 것&lt;/li&gt;
&lt;li&gt;프로세스 동기화를 하지 않으면 데이터의 일관성이 깨지기 때문에 연산결과가 잘못 반환될 가능성이 존재&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경쟁 상태(Race Condition)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로세스나 스레드가 동기화 메커니즘 없이 자원에 접근하려는 상황&lt;/li&gt;
&lt;li&gt;공유된 자원에 대한 접근 순서에 따라 실행 결과가 달라질 수 있는 상황&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계 구역(Critical Section)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 스레드가 동시에 접근해서는 안되는 공유자원에 접근하는 코드 블럭&lt;/li&gt;
&lt;li&gt;한 임계구역에 하나의 스레드 혹은 프로세스만 접근이 가능&lt;/li&gt;
&lt;li&gt;임계 구역에 접근하는 것을 제어하기 위해 세마포어, 뮤텍스와 같은 매커니즘을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계 구역 문제를 해결하기 위한 조건&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상호 배제(Mutual Exclusion): 한 프로세스가 임계구역에서 동작중이면 다른 프로세스는 접근할 수 없다.&lt;/li&gt;
&lt;li&gt;진행(Progress): 임계구역에서 작업중인 프로세스가 없다면 입계구역으로 진입하려는 프로세스를 적절히 선택해서 진입할 수 있도록 합니다.&lt;/li&gt;
&lt;li&gt;유한 대기(Bounded Waiting): 한 프로세스가 임계영역으로 진입을 요청한 후 다른 프로세스는 진입이 유한한 횟수로 제한되어야 합니다. (기아상태 방지)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 동기,  비동기 / 블로킹/논블로킹&lt;/h4&gt;
&lt;h5&gt;(1) 동기 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메서드 리턴과 결과를 전달받는 시간이 일치하는 명령 실행 방식&lt;/li&gt;
&lt;li&gt;동기 방식은 한 함수가 끝나는 시간과 바로 다음의 함수가 시작하는 시간이 같음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 비동기 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;여러 개의 처리가 함께 실행되는 방식&lt;/li&gt;
&lt;li&gt;동기 방식에 비해 단위시간 당 많은 작업을 처리할 수 있음&lt;/li&gt;
&lt;li&gt;CPU나 메모리를 많이 사용하는 작업을 비동기로 처리하게 되면 과부하가 걸릴 수 있고 프로그램의 복잡도도 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 블로킹 / 논블로킹 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;블로킹 : 대상의 작업이 끝날 때 까지 제어권을 대상이 가지고 있음&lt;/li&gt;
&lt;li&gt;논블로킹 : 대상의 작업 완료여부와 상관없이 새로운 작업을 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 동기 논블로킹&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;계속해서 polling을 수행하기 때문에 컨텍스트 스위칭이 지속적으로 발생해 지연이 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7) RISC와 CISC&lt;/h4&gt;
&lt;h5&gt;(1) RISC(Reduced Instruction Set Computer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;축소 명령어 세트 컴퓨터(명령어의 개수가 적은 것)&lt;/li&gt;
&lt;li&gt;핵심적인 명령어를 기반으로 최소한의 명령어 세트를 구성함으로써 파이프라이닝 이라는 획기적인 기술을 도입할 수 있어 빠른 동작 속도와 하드웨어의 단순화와 효율화를 시킬 수 있었고, 가격 경쟁력에서도 우위를 점함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;적은 명령어 세트&lt;/li&gt;
&lt;li&gt;간단한 명령어로 빠른 실행속도&lt;/li&gt;
&lt;li&gt;고정적인 명령어 길이&lt;/li&gt;
&lt;li&gt;워드, 데이터 버스 크기가 동일하고 실행 사이클도 모두 동일&lt;/li&gt;
&lt;li&gt;회로 구성이 단순&lt;/li&gt;
&lt;li&gt;프로그램을 구성할 때 상대적으로 많은 명령어가 필요&lt;/li&gt;
&lt;li&gt;파이프 라이닝을 사용함&lt;/li&gt;
&lt;li&gt;명령어 개수가 적어서 컴파일러가 단순하게 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) CISC(Complex Instruction Set Computer)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;연산을 처리하는 복잡한 명령어(명령어가 할 수 있는 일의 양이 RISC 대비하여 많다는 것)들을 수백개 이상 탑재하고 있는 프로세서&lt;/li&gt;
&lt;li&gt;CISC는 명령어 개수 증가에 따라 프로세서 내부구조가 매우 복잡해지고, 고속으로 작동되는 프로세서를 만들기 힘들어짐&lt;/li&gt;
&lt;li&gt;명령어마다 길이가 다르고  실행에 필요한 사이클 수도 다르기 때문에 파이프 라이닝설계가 어려움&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어의 개수가 많음&lt;/li&gt;
&lt;li&gt;명령어 길이가 다양하며, 실행 사이클도 명령어 마다 다름&lt;/li&gt;
&lt;li&gt;회로구성이 복잡함&lt;/li&gt;
&lt;li&gt;프로그램을 만들 때 적은 명령어로 구현 가능&lt;/li&gt;
&lt;li&gt;다양한 명령어를 사용하기 때문에 컴파일러가 복잡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용 이유&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아직 너무도 많은 프로세서가 CISC 모델로 구축되어 있고 이것을 전부 바꾸는 것은 비용이 큼&lt;/li&gt;
&lt;li&gt;CISC 성능의 취약점은 RISC와 같은 파이프라인을 일부 사용하고 집적도는 더 높임으로써 부분적으로 보완이 가능&lt;/li&gt;
&lt;li&gt;RISC에 비해 호환성이 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7) 교착상태(Deadlock)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 프로세스가 서로의 자원을 요구하며 무한정 기다리는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 상호배제 (Mutual exclusion)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;한번에 한 프로세스만이 자원을 점유할 수 있음&lt;/li&gt;
&lt;li&gt;하나의 프로세스가 자원을 사용할 경우 다른 프로세스는 그 자원을 사용할 수 없는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 점유와 대기, 보유 및 대기(Hold and wait)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 이미 자원을 점유하는 상태에서 다른 자원을 무한정 기다림&lt;/li&gt;
&lt;li&gt;프로세스가 자신이 가질 수 있는 자원은 가지고 있으면서 다른 자원이 오기를 기다리고 있는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 비선점(No Preemption)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 어떤 자원의 점유를 끝낼 때까지 그 자원을 뺏을 수 없음&lt;/li&gt;
&lt;li&gt;CPU 할당뿐만 아니라 모든 자원에 의해서 비선점이 된다는 것&lt;/li&gt;
&lt;li&gt;임의의 프로세스가 자원을 할당 받은 상태에서 다른 프로세스는 이 자원을 뺏어서 사용할 수 없는 형태&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 환형대기(Circular wait)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;각 프로세스들이 원형으로 구성되어 순환적으로 자원을 요구&lt;/li&gt;
&lt;li&gt;선형이 아니고 원형을 이루게 되어 프로세스의 자원 할당에서 첫 번째 프로세스와 마지막 프로세스의 자원할당이 겹치게 되어 원형에 있는 모든 프로세스가 자원 할당을 받고자 기다리는 형태가 만들어지는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 교착 상태 해결방법&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;예방 : 4가지 조건 중 하나라도 만족되지 않도록 함&lt;/li&gt;
&lt;li&gt;회피 : 알고리즘을 데드락이 발생하지 않도록 함&lt;/li&gt;
&lt;li&gt;회복 : 교착상태가 발생할 때 해결&lt;/li&gt;
&lt;li&gt;무시 : 회복과정의 성능저하가 심하다면 그냥 무시&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 기아상태(Starvation)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스가 영원히 자원 할당이 되지 않는 경우&lt;/li&gt;
&lt;li&gt;우선순위를 수시로 변경하거나 오래 기다린 프로세스의 우선순위를 높여주거나, Queue를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 세마포어와 뮤텍스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;뮤텍스와 세마포어 : 다수의 프로세스나 스레드가 공유 자원에 동시에 접근하는 것을 제어하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 세마포어&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;여러개의 프로세스가 접근 가능한 공유자원을 관리하는 방식&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;뮤텍스가 될 수 있음&lt;/li&gt;
&lt;li&gt;다른 프로세스가 세마포어를 해제할 수 있음&lt;/li&gt;
&lt;li&gt;현재 공유 자원에 접근할 수 있는 스레드, 프로세스의 수를 나타내는 값을 두는 상호 배제 기법. &lt;/li&gt;
&lt;li&gt;그 값만큼 동시에 스레드가 해당 공유 자원에 접근 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 뮤텍스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;한 번에 한 개의 프로세스만 접근 가능하도록 관리하는 방식&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;뮤텍스는 세마포어가 될 수 없음&lt;/li&gt;
&lt;li&gt;락을 획득한 프로세스만 락을 반환할 수 있음&lt;/li&gt;
&lt;li&gt;한 스레드, 프로세스에 의해 소유될 수 있는 Key를 기반으로 한 상호배제 기법&lt;/li&gt;
&lt;li&gt;한 스레드가 임계 영역에 들어갈 때 lock을 걸어 다른 스레드가 접근하지 못하도록 하고 임계 영역에서 나올 때 unlock&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(4) 가상 메모리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Swap 영역. 실제 메모리에서 공간이 부족한 경우 보조 기억 장치(auxiliary storage, secondary storage)에서 임시로 사용하는 영역&lt;/li&gt;
&lt;li&gt;OS 에서 관리하며 프로세스는 이것이 실제 메모리인지 Swap 영역인지 모름&lt;/li&gt;
&lt;li&gt;실제 메모리가 아니기 때문에 지연시간이 많이 발생하며 가급적이면 swap메모리를 사용하지 않도록 설계하는 것이 좋고 만약 계속해서 사용하는 양이 증가한다면 메모리 누수 의심&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(5) 캐시의 지역성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시간 지역성 : 최근에 접근한 데이터에 다시 접근하는 경향&lt;/li&gt;
&lt;li&gt;공간 지역성 : 최근 접근한 데이터의 주변 공간에 다시 접근하는 경향&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-데이터베이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;3 데이터베이스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 데이터베이스&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;(1) 데이터베이스 인덱스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;검색성능을 향상시키기 위함&lt;/li&gt;
&lt;li&gt;검색성능을 실질적으로 향상시키기 위해서는 해당 쿼리가 index를 사용하는지, 카디널리티, Selectivity 같은 요소들이 고려된 인덱스가 생성되어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;장점&lt;/code&gt; : 빠른 검색 성능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;단점&lt;/code&gt; : 인덱스를 구성하는 비용 즉, 추가, 수정, 삭제 연산시에 인덱스를 형성하기 위한 추가적인 연산이 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 트랜잭션&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;데이터베이스의 상태를 변화시키는 하나의 논리적인 작업 단위&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;트랜잭션에는 여러개의 연산이 수행될 수 있음&lt;/li&gt;
&lt;li&gt;트랜잭션은 수행중에 한 작업이라도 실패하면 전부 실패하고, 모두 성공해야 성공&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 트랜잭션의 특성(ACID)&lt;/h4&gt;
&lt;h5&gt;(1) Atomicity (원자성)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;트랜잭션과 관련된 일은 모두 실행 혹은 모두 실행되지 않음&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Transaction은 최소 작업 단위로 더이상 나눌 수 없음&lt;/li&gt;
&lt;li&gt;ex) 송금 transaction은 출금(A 계좌로 부터)과 입금(B 계좌로)이라는 두 가지 작업을 수행하고 있음, 하지만 이는 하나의 transaction으로 묶여있기 때문에 위의 두 작업은 나눠질 수 없음&lt;/li&gt;
&lt;li&gt;출금만 실행되고 입금이 수행되지 않는다면 이는 transaction이라 부를 수 없음&lt;/li&gt;
&lt;li&gt;출금만 실행되고 입금이 실행되지 않는다면 돈이 증발해버리는 심각한 문제가 발생&lt;/li&gt;
&lt;li&gt;이러한 문제를 방지하기 위해 출금과 입금을 하나의 transaction으로 정의하고 입금이 실행되지 않으면 출금 또한 취소해버림으로Tj(rollback) 출금과 입금 과정을 마치 하나의 작업처럼 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) Consistency(일관성)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;트랜잭션이 성공했다면, 데이터베이스는 그 일관성을 유지&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;일관성은 특정한 조건을 두고, 그 조건을 만족하는지를 확인하는 방식으로 검사&lt;/li&gt;
&lt;li&gt;일관성 : DBMS에서 제공하는 제약조건을 어기지 않고 데이터의 논리적 오류가 없음을 의미&lt;/li&gt;
&lt;li&gt;ex) 송금 예제에서, A가 만원을 이체했는데 B에서 오천원만 받았다면 이는 논리적 오류&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) Isolation(독립성)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;트랜잭션을 수행하는 도중에 다른 연산작업이 끼어들지 못하도록 함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;임계영역을 두는 것으로 달성할 수 있음&lt;/li&gt;
&lt;li&gt;ex ) A 계좌에서 B계좌로 이체하는 transaction이 실행되는 도중 A 계좌의 모든 잔액을 출금하는 transaction이 실행되었다고 가정&lt;/li&gt;
&lt;li&gt;만약 첫 번째 transaction이 A의 계좌에서 이체 금액을 출금한 상태에서 두 번째 transaction이 잔액을 조회하고 이를 출금하려고한다면 문제가 발생할 수 있음&lt;/li&gt;
&lt;li&gt;아직 첫 번째 transaction은 완료된 상태가 아니기 때문에 만약 도중에 문제가 생겨 이체가 취소된다면 두 번째 transaction이 조회한 금액은 잘못된 금액(이체 금액이 빠져있는)이기 때문&lt;/li&gt;
&lt;li&gt;table, 혹은 해당 row에 lock을 걸어버리는 것이지만 이러한 방법은 동시성을 떨어뜨려 성능에 악영향을 미칠 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) Durability (지속성)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;성공적으로 트랜잭션이 수행되었다면, 그 결과는 완전히 반영&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;완전히 반영되면 로그를 남기게 되는데 이 로그를 이용해서 트랜잭션 수행전 상태로 되돌릴 수 있어야 함&lt;/li&gt;
&lt;li&gt;트랜잭션은 로그저장이 완료된 시점에서 종료가 되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 트랜잭션 격리 수준(Transaction Isolation Levels)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;고립도와 성능의 트레이드 오프를 조절&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;READ UNCOMMITTED&lt;/code&gt; : 다른 트랜잭션에서 커밋되지 않은 내용도 참조&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;READ COMMITTED&lt;/code&gt; : 다른 트랜잭션에서 커밋된 내용만 참조&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;REPEATABLE READ&lt;/code&gt; : 트랜잭션에 진입하기 이전에 커밋된 내용만 참조&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SERIALIZABLE&lt;/code&gt;: 트랜잭션에 진입하면 락을 걸어 다른 트랜잭션이 접근하지 못하게 함&lt;/li&gt;
&lt;li&gt;정규화 : 데이터의 중복방지, 무결성을 충족시키기 위해 데이터베이스를 설계하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) RDBMS / NOSQL&lt;/h4&gt;
&lt;h5&gt;(1) RDBMS&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;데이터베이스를 이루는 객체들의 릴레이션을 통해서 데이터를 저장하는 데이터베이스&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;수정 (update)에 좋음&lt;/li&gt;
&lt;li&gt;SQL을 사용해 데이터의 저장, 질의, 수정, 삭제를 할 수 있으며 데이터를 효율적으로 보관하는 것을 목적으로 하고 구조화가 중요&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명확한 데이터 구조를 보장, 중복을 피할 수 있음. 중복 데이터가 존재하지 않아 저장 공간을 절약할 수 있으며, 데이터 수정 (update)이 용이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블 간의 관계를 통해서 큰 규모의 데이터를 여러 개의 테이블 (ex. user, item, buying)에 분산 저장 가능. &lt;/li&gt;
&lt;li&gt;분산 저장을 통해 보안을 철저히 하고, 테이블를 구조적으로 도식화하여 효율적으로 관리&lt;/li&gt;
&lt;li&gt;테이블 관계가 복잡해 질수록 JOIN이 많은 SQL 쿼리가 만들어 질 수 있음&lt;/li&gt;
&lt;li&gt;데이터 수정 (update)가 자주 발생하는 시스템이거나, 명확한 스키마가 중요한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) NOSQL&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;자유로운 형태로 데이터를 저장&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;쓰기 (write)와 읽기 (read)에 좋음&lt;/li&gt;
&lt;li&gt;수평확장을 할 수 있고 분산처리를 지원&lt;/li&gt;
&lt;li&gt;key-value store, bigtable, dynamo, document db, graph db&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스키마없이 유연하게 데이터를 저장/관리할 수 있는 데이터베이스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 중복이 허용되기에 수정 (update)을 위해서는 중복으로 저장된 데이터를 검색하여 모두 수정해야하는 번거로움이 있으며, 엄격한 스키마가 없다보니 데이터에 대한 규격화된 결과 값을 얻을 수 없음&lt;/li&gt;
&lt;li&gt;정확한 데이터 구조를 알지 못하거나, 데이터 수정 (update)보다는 쓰기 (write)와 읽기 (read)가 더 자주 발생하는 경우 NoSQL이 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-소프트웨어-공학&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B3%B5%ED%95%99&quot; aria-label=&quot;5 소프트웨어 공학 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 소프트웨어 공학&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 절차 지향과 객체 지향&lt;/h4&gt;
&lt;h5&gt;(1) 절차 지향 프로그래밍 (Procedural Programming)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시되는 프로그래밍 기법&lt;/li&gt;
&lt;li&gt;C가 대표적인 절차 지향 프로그래밍 언어&lt;/li&gt;
&lt;li&gt;컴퓨터의 처리구조와 유사해 실행속도가 빠르지만 디버깅이 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 객체 지향 프로그래밍 (Object Oriented Programming)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;실제 세계를 표방하여 데이터와 절차를 하나의 덩어리로 처리하는 프로그래밍 기법&lt;/li&gt;
&lt;li&gt;Java, Python, C++이 대표적인 객체 지향 프로그래밍 언어&lt;/li&gt;
&lt;li&gt;객체 지향 프로그래밍은 기존에 짜여진 코드를 재사용하기 용이하며 디버깅이 쉬움&lt;/li&gt;
&lt;li&gt;단, 처리 속도가 느리며 설계에 많은 노하우와 시간이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 객체 지향 프로그래밍 특징&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;추상화: 객체가 가진 공통의 속성이나 기능을 묶어 명시적인 이름을 부여하는 것&lt;/li&gt;
&lt;li&gt;캡슐화: 관련된 데이터와 코드를 하나로 묶은 것으로 데이터를 감추고 외부와의 상호작용은 메소드를 통하는 방법&lt;/li&gt;
&lt;li&gt;상속: 이미 작성된 클래스를 이어 받아서 새로운 클래스를 생성하는 것으로, 기존 코드를 재활용하는 것&lt;/li&gt;
&lt;li&gt;다형성 (Polymorphism): 같은 코드로 다른 행위를 하는 것(Overriding과 Overloading) &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 오버로딩과 오버라이딩&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;객체 지향 프로그래밍의 다형성을 지원하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 오버라이딩 (Overriding)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;부모 클래스가 가지고 있는 메소드를 자식 클래스가 재정의해서 사용&lt;/li&gt;
&lt;li&gt;메소드의 이름/매개변수/반환형이 같은 상속 받은 메소드를 덮어쓰는 것&lt;/li&gt;
&lt;li&gt;부모 클래스의 메소드는 무시하고 자식 클래스가 필요로하는 메소드를 추가하여 사용하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 오버로딩 (Overloading)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;같은 이름의 메소드 (함수)를 여러개 정의하되, 매개 변수의 유형과 개수를 달리하여 다양한 유형의 호출에 응답하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 점진적 향상법 / 우아한 성능저하법&lt;/h4&gt;
&lt;h5&gt;(1) 점진적 향상법 (Progressive enhancement)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;많은 테스트를 통해 말그대로 기능을 점진적으로 향상시키는 것&lt;/li&gt;
&lt;li&gt;기초부터 차곡차곡 쌓아서 발전해 나가는 방법. 노력과 시간이 필요&lt;/li&gt;
&lt;li&gt;ex ) 웹 페이지를 구성할 때  HTML로 마크업을 구성 / CSS로 스타일을 입힘 / JS로 사용자 경험을 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) 우아한 성능 저하법 (graceful degradation)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;최신 기술을 기반 또는 최신 기기에서 동작하는 기능을 만들고 나서, 오래된 기술 또는 오래된 기기에서 동작하게 하기 위해 유사한 기능을 만들어 동작하게 하는 것 &lt;/li&gt;
&lt;li&gt;사용자들의 기기를 위해 별도의 버전을 만들어 놓는 것. &lt;/li&gt;
&lt;li&gt;ex) 사용자의 브라우저가 javascript를 지원하지 않을 때 js를 지원하지 않는 기기를 위해 &lt;noscript&gt; 태그를 사용하여 사용자에게 “javascript가 지원되는 브라우저를 사용해 주세요!” 와 같은 알람을 띄워주는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 디자인 패턴&lt;/h4&gt;
&lt;h5&gt;(1) 싱글톤 (Signleton)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;코드 내 어디서든, 오직 하나의 인스턴스만 사용할 수 있도록 객체를 생성하는 방법&lt;/li&gt;
&lt;li&gt;객체는 여러 번 생성되지 않고 최초 하나의(Single) 인스턴스만 생성하고 이후에는 이 인스턴스를 참조&lt;/li&gt;
&lt;li&gt;전역적으로 하나의 인스턴스만 사용, 참조해야하는 경우에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;# 보통&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 싱글톤 객체의 &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_instance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 로 인스턴스를 받아온다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
singleton_1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_instance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
singleton_2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_instance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

# 이렇게 받아온 두 인스턴스는 동일한 인스턴스다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
singleton_1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; singleton_2  # &lt;span class=&quot;token class-name&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;활용 예시 : DB 커넥션과 Pool 을 담당하는 인스턴스, 시스템 전역의 로깅을 담당하는 로거&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 프로토타입 (Prototype)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;기존의 인스턴스를 그대로 복제(clone) 하여 새로운 객체를 생성하는 방법&lt;/li&gt;
&lt;li&gt;하나의 인스턴스를 사용하는 싱글톤과는 반대되는 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;# 보통&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 프로토타입 객체의 &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 으로 인스턴스를 복사한다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
original &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Prototype&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; original&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

# 이렇게 받아온 두 인스턴스는 동일한 객체는 아니지만&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 내부 데이터는 같다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
original &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; prototype  # &lt;span class=&quot;token class-name&quot;&gt;False&lt;/span&gt;
original&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data  # &lt;span class=&quot;token class-name&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;활용 예시 : DB 로부터 얻어온 데이터 인스턴스를 동일하게 하나 더 만들어야 하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 팩토리 (Factory)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인스턴스를 만들어내는 공장(Factory) 를 통해 객체를 생성하는 방법&lt;/li&gt;
&lt;li&gt;인스턴스를 직접 생성해내지 않고, 공장에서 제공하는 메소드를 통해 생성&lt;/li&gt;
&lt;li&gt;사용자는 객체를 생성하고 싶을 때, 공장에서 제공하는 메소드만 알고 있으면 되고,  구체적으로 인스턴스가 어떻게 생성되는지 신경 쓰지 않음&lt;/li&gt;
&lt;li&gt;한 집합 내에 있는 클래스들의 생성을 한 곳에서 처리하고 싶을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;# 보통&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Factory&lt;/span&gt; 객체의 `get` 메쏘드의 파라미터로 생성할 객체의 타입을 넘겨준다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
samsung_keyboard &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;KeyboardFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_keyboard&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;samsung&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
lg_keyboard &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;KeyboardFactory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_keyboard&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

# 생성된 객체는 다음과 같이 구체적인 클래스 인스턴스다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
samsung_keyboard  # &lt;span class=&quot;token class-name&quot;&gt;SamsungKeyboard&lt;/span&gt;
lg_keyboard  # &lt;span class=&quot;token class-name&quot;&gt;LgKeyboard&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;활용 예시 : 삼성, LG 키보드를 만드는 키보드 팩토리&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 추상 팩토리 (Abstract Factory)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;공장을 만들어내는 상위 공장을 먼저 정의하고 여기서 구체적인 공장을 만든 후, 이 공장에서 객체를 생성하는 방법&lt;/li&gt;
&lt;li&gt;팩토리의 위에 이 팩토리를 만드는 팩토리가 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# 키보드 팩토리의 팩토리(추상 팩토리)를 통해 키보드 팩토리를 얻는다.
CommonKeyboardFactory = AbstarctKeyboardFactory.get_keyboard_factory(&amp;quot;common&amp;quot;)

# 이후는 팩토리 패턴과 동일하다.
samsung_common_keyboard = CommonKeyboardFactory.get_keyboard(&amp;quot;samsung&amp;quot;)
lg_common_keyboard = CommonKeyboardFactory.get_keyboard(&amp;quot;lg&amp;quot;)

samsung_keyboard  # SamsungCommonKeyboard
lg_keyboard  # LgCommonKeyboard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;활용 예시 : 기계식 키보드 공장와 일반 키보드공장을 만드는 키보드 추상 팩토리&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) 빌더 (Builder)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;객체를 생성할 때 필요한 파라미터가 많은 경우, 각 파라미터가 무엇을 의미하는지 알기 힘들 수 있음&lt;/li&gt;
&lt;li&gt;빌더라는 형태를 통해 파라미터 의미를 명확히 하여 생성할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;# 빌더 패턴 사용 전 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;경우 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;WebBrowser&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebBrowser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;FlashPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 

# 사용 후
&lt;span class=&quot;token class-name&quot;&gt;WebBrowser&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BrowserBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;with_ssl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;with_flash_plugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;with_cookie_support&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;set_timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;활용 예시 : 파라미터가 너무 많아서 의미를 파악하기 힘들 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-보안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EB%B3%B4%EC%95%88&quot; aria-label=&quot;6 보안 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) 보안&lt;/h2&gt;
&lt;h4&gt;1) 로컬 스토리지, 세션 스토리지, 쿠키&lt;/h4&gt;
&lt;h5&gt;(1) 로컬 스토리지(LocalStorage)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;유통 기한 없이 저장할 수 있는 데이터 공간&lt;/li&gt;
&lt;li&gt;자바스크립트 또는 브라우저 캐시 삭제 등을 통해서만 데이터 삭제 가능&lt;/li&gt;
&lt;li&gt;SessionStorage 와 Cookie 에 비해 저장 공간이 큼.&lt;/li&gt;
&lt;li&gt;클라이언트 사이드에서만 저장 가능함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 세션 스토리지(SessionStorage)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;한 세션에만 저장되는 데이터로 브라우저/탭/앱을 껐을 때 데이터가 사라짐&lt;/li&gt;
&lt;li&gt;서버로 데이터 이전은 불가능&lt;/li&gt;
&lt;li&gt;쿠키보다 최소 5MB 더 큰 저장 공간 확보 가능&lt;/li&gt;
&lt;li&gt;클라이언트 사이드에서만 저장 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 쿠키(Cookie)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;다음에 이어지는 요청과 함께 서버로 보내지는 데이터를 저장&lt;/li&gt;
&lt;li&gt;보통 서버에서 데이터 유통기한을 세팅하고 관리&lt;/li&gt;
&lt;li&gt;쿠키는 4KB 이하의 아주 작은 데이터를 보관&lt;/li&gt;
&lt;li&gt;쿠키는 클라이언트에서도 읽을 수 있지만, 보통 서버 사이드에서 읽는 데이터&lt;/li&gt;
&lt;li&gt;보안을 위해 httpOnly 플래그를 true 로 설정하여 클라이언트에서 쿠키 접근을 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 사용 예시&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;로컬 스토리지 : 자동 로그인&lt;/li&gt;
&lt;li&gt;세션 스토리지 : 입력 폼 정보, 비로그인 장바구니 &lt;/li&gt;
&lt;li&gt;쿠키 : 다시 보지 않음 팝업 창 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(5) 가져오기&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;로컬 스토리지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localStorage.A (Key == A)&lt;/li&gt;
&lt;li&gt;localStorage.getItem(“A”)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션 스토리지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sessionStorage.A (Key == A)&lt;/li&gt;
&lt;li&gt;sessionStorage.getItem(“A”)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;쿠키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getCookie(“A”) (Key == A)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(6) 세팅하기&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;로컬 스토리지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localStorage.A = 1 (Key == A, Value = 1)&lt;/li&gt;
&lt;li&gt;localStorage.setItem(“A”, 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션 스토리지&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sessionStorage.A = 1 (Key == A, Value = 1)&lt;/li&gt;
&lt;li&gt;sessionStorage.setItem(“A”, 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;쿠키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setCookie(“A”, 1, 7) (Key == A, Value == 1, 유효기간 == 7초)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 요점 정리 - this2]]></title><link>https://jigglog.netlify.app/자바스크립트 요점 정리 - 콜백/</link><guid isPermaLink="false">https://jigglog.netlify.app/자바스크립트 요점 정리 - 콜백/</guid><pubDate>Wed, 07 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;java-script&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#java-script&quot; aria-label=&quot;java script permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Java Script&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-javascript-원시-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-javascript-%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85&quot; aria-label=&quot;1 javascript 원시 타입 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) JAVASCRIPT 원시 타입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;boolean&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;undefined :  선언만 되어있고 값은 없는 상태 &lt;/li&gt;
&lt;li&gt;null : 자료형이 객체이며 빈값을 의미&lt;/li&gt;
&lt;li&gt;자바스크립트의 Number Type :  number는 하나. 정수만을 위한 타입이 없고, 모든 수를 실수로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) 어트리뷰트(속성, Attribute)와 프로퍼티(요소, property)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;어트리뷰트 : element가 가지고 있는것. element의 형식 지정(&amp;#x3C;div id=D1…의 id)&lt;/li&gt;
&lt;li&gt;프로퍼티 : object가 가지고 있는 구성요소(name, parent, history, innerHeight 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) Immutable / Mutable&lt;/h4&gt;
&lt;h5&gt;(1) Immutable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;내용이 변하지 않는 객체&lt;/li&gt;
&lt;li&gt;자바스크립트 원시 타입은 Immutable&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용 이유&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성능을 향상시키기 위함 : 객체가 미래에 변할 계획이 없을 때&lt;/li&gt;
&lt;li&gt;메모리 사용을 줄이기 위함 : 전체 객체를 복사하지 않고 객체 참조를 만듦&lt;/li&gt;
&lt;li&gt;Thread-safety : 여러개의 쓰레드가 서로 간섭하지 않고 같은 객체를 참조할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) Mutable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;바뀔 수 있는 변수 타입&lt;/li&gt;
&lt;li&gt;자바스크립트 object와 array만 Mutable&lt;/li&gt;
&lt;li&gt;Mutable한 값을 Immutable하게 만들기 위해서 새로운 변수를 만들어 보관할 수 있지만, 이전 값은 여전히 메모리에 남아있기 때문에 GC가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) == 과 ===&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;==&lt;/code&gt; : 두 변수의 값 비교&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt; : 엄격한 비교(값 + 타입)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true 왜? js 에서 0 은 false 한 값이기 때문 &lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true 왜? 자동으로 타입을 캐스팅 해버림 &lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;

&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//false &lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;== 같은 경우는 피연산자가 서로 다른 타입이면 타입을 강제로 변환하여 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) null과 undefined&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;두 타입 모두 값이 없음을 의미&lt;/li&gt;
&lt;li&gt;둘 다 데이터 타입이자 그 변수의 값&lt;/li&gt;
&lt;li&gt;undefined : 자바스크립트에서 변수를 선언하면 초기값으로 undefined를 할당&lt;/li&gt;
&lt;li&gt;null : 값이 비어있음 ”값이 없다”는 값이 등록되어 있는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(4) Symbol&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;변경 불가능한 원시 타입의 값&lt;/li&gt;
&lt;li&gt;다른 값과 중복되지 않는 유일한 값&lt;/li&gt;
&lt;li&gt;이름 충돌이 없는 유일한 프로퍼티 키를 만들기 위해 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 용도&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로퍼티 은닉&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mySymbol&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 아무것도 출력되지 않음&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 심볼 프로퍼티 출력&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;표준 빌트인 객체 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-가비지-컬렉터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%ED%84%B0&quot; aria-label=&quot;2 가비지 컬렉터 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 가비지 컬렉터&lt;/h2&gt;
&lt;h4&gt;1) 가비지 컬렉터&lt;/h4&gt;
&lt;h5&gt;(1) 가비지와 가비지 컬렉터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Garbage : 정리되지 않은 메모리, 유효하지 않은 객체의 메모리&lt;/li&gt;
&lt;li&gt;Garbage collector (GC) : 프로그램이 사용할 수 있는 메모리 용량이 부족할 때 가비지들을 메모리에서 해제하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 메모리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 할당 : 자바스크립트는 값을 선언할 때 자동으로 메모리를 할당&lt;/li&gt;
&lt;li&gt;메모리 사용 : 메모리를 읽고 쓰는 것을 의미. 메모리가 할당된 변수를 사용하면 읽기와 쓰기 작업이 이루어짐&lt;/li&gt;
&lt;li&gt;메모리 해제 : 더 이상 필요하지 않은 메모리를 해제하여 재사용 할 수 있도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 레퍼런스 카운팅(Reference Counting)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;해당 값이 얼마나 많이 참조되었는지 추적&lt;/li&gt;
&lt;li&gt;변수를 선언하고 참조값이 할당되면 레퍼런스 카운트는 1이 됨&lt;/li&gt;
&lt;li&gt;다른 변수가 같은 값을 참조하면 레퍼런스 카운트가 늘어남&lt;/li&gt;
&lt;li&gt;마찬가지로 해당 값을 참조하는 변수에 다른 값을 할당하면 레퍼런스 카운트가 줄어듦&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; objectA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; objectB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 2&lt;/span&gt;

objectA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 1&lt;/span&gt;
objectB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;값의 레퍼런스 카운트가 0이 되면 해당 값에 접근할 방법이 없으며 메모리를 회수해도 안전&lt;/li&gt;
&lt;li&gt;순환 참조 문제 : 객체가 두 개일 때 함수 실행이 끝날 때 두 객체는 모두 스코프를 벗어나게 될 것이고, 두 객체는 불필요해지므로 할당된 메모리는 회수되어야 하지만 함수 실행이 끝난 뒤에도 레퍼런스 카운트가 0이 되지 않으므로 두 객체는 계속 존재&lt;/li&gt;
&lt;li&gt;이런 함수를 여러 번 호출하면 메모리를 회수하지 못하고 낭비되는 메모리가 많이 늘어남&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 마크 앤 스위프(Mark and sweep)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 해제 여부를 결정하기 위해 루트(roots, 자바스크립트의 &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; 객체)부터 해당 객체까지 닿을 수 있는지를 판단&lt;/li&gt;
&lt;li&gt;루트부터 시작하여 루트가 참조하는 객체들과 그 객체가 참조하는 또 다른 객체들을 추적&lt;/li&gt;
&lt;li&gt;객체를 추적하면서 닿을 수 있는 객체는 표시(mark) 한 후, 표시가 없는 객체들은 메모리를 해제(sweep)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-자바스크립트의-배열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;3 자바스크립트의 배열 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 자바스크립트의 배열&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트의 배열은 실제 자료구조의 배열과 다르게 HashMap으로 구현. &lt;/li&gt;
&lt;li&gt;HashMap을 구현하기 위해서는 연결리스트로 구현하게 되는데 연결리스트에서 값을 찾기 위해서는 탐색해나가면서 값을 찾는 불상사가 발생&lt;/li&gt;
&lt;li&gt;이를 해결하기 위해서 타이핑된배열(Int8Array, Float32Array 등) 이 추가되고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-클로저&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%81%B4%EB%A1%9C%EC%A0%80&quot; aria-label=&quot;4 클로저 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 클로저&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;클로저(Closure) : &lt;em&gt;내부 함수가 외부 함수의 컨텍스트에 접근할 수 있는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;MDN 정의 : &lt;em&gt;함수와 함수가 선언된 렉시컬 환경과의 조합&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;반환된 내부함수가 자신이 선언되었을 때의 환경인 스코프를 기억하여 자신이 선언되었을때의 환경 밖에서 호출되어도 그 환경에 접근할 수 있는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 렉시컬 스코프&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수를 어디에 정의했는지에 따라 상위 스코프를 결정(렉시컬 스코프, 정적 스코프)&lt;/li&gt;
&lt;li&gt;렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경에 의해 결정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클로저의 사용 이유:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 상태를 기억하고 변경된 최신 상태를 유지하기 위해&lt;/li&gt;
&lt;li&gt;전역 변수의 사용을 억제&lt;/li&gt;
&lt;li&gt;정보를 은닉하기 위해 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-es6&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-es6&quot; aria-label=&quot;6 es6 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) ES6&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ES&lt;/th&gt;
&lt;th&gt;년도&lt;/th&gt;
&lt;th&gt;추가 기능&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ES6 (ECMAScript 2015)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;let, const, class / 화살표 함수/ 템플릿 리터럴 / 디스트럭처링 할당/ spread 문법, rest 파라미터, Symbol, Promise/ Map, Set / iterator, generator /module import/export&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES7 (ECMAScript 2016)&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;지수(**) 연산자, Array.prototype.includes, String.prototype.includes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES8 (ECMAScript 2017)&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;async/await, Object 정적 메소드(Object.values, Object.entries, Object.getOwnPropertyDescriptors)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES9 (ECMAScript 2018)&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;Object Rest/Spread 프로퍼티&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;class&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Prototype, function의 ES5 스펙만으로 Class를 구현&lt;/li&gt;
&lt;li&gt;자바스크립트에는 프로토타입이라는 것이 존재하여 클래스처럼 구현할 수 있음&lt;/li&gt;
&lt;li&gt;클래스는 자바스크립트의 프로토타입 기반 패턴의 문법적 설탕&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;동기-비동기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0&quot; aria-label=&quot;동기 비동기 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동기, 비동기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.kakaocdn.net/dn/bMlLfs/btqFQ9i1iD3/ZQE2tqi7lx7LUhTwK1tDtK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;1) 작동 원리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트는 한 번에 하나의 작업을 수행&lt;/li&gt;
&lt;li&gt;한 작업이 실행되는 동안 다른 작업은 멈춘 상태를 유지하고 자신의 차례를 기다리는 것&lt;/li&gt;
&lt;li&gt;단일 스레드(싱글 스레드), 동기(Synchronous)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 브라우저 부분&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 엔진은 싱글스레드로 동작&lt;/li&gt;
&lt;li&gt;브라우저는 멀티 스레드로 동작&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;1) 힙(Memory Heap)(자바스크립트 엔진)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Memory Heap은 객체를 저장하는 곳. 예제에서 선언한 함수 func1, func2, func3는 모두 Memory Heap에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2) 콜 스택(call stack)(자바스크립트 엔진)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소스코드 평가 과정에서 생성된 실행 컨텍스트가 추가되고 제거되는 스택 자료구조인 실행 컨텍스트 스택&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3) Web API&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;브라우저에서 제공하는 API들&lt;/li&gt;
&lt;li&gt;DOM api, 타이머 함수, HTTP 요청 등 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 자바스크립트 엔진 구조&lt;/h4&gt;
&lt;h5&gt;1) 태스크 큐(Callback Que / task Queue / event Queue)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수를 저장하는 자료구조&lt;/li&gt;
&lt;li&gt;Call stack과 다르게 가장 먼저 들어온 함수를 가장 먼저 처리&lt;/li&gt;
&lt;li&gt;특정 이벤트에 따른 콜백 함수를 정의하면, 콜백 함수는 Callback Que에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2) 이벤트 루프(Event Loop)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;call stack이 다 비워지면 callback que에 존재하는 함수를 하나씩 호출 스택으로 옮기는 역할&lt;/li&gt;
&lt;li&gt;이벤트 루프를 통해 동시성을 지원&lt;/li&gt;
&lt;li&gt;이벤트 루프는 콜 스택에서 실행 중인 게 있는지 확인하고, Event queue에 작업이 있는지 확인해서 콜스택이 비어있다면 이벤트큐 내의 작업이 콜스택으로 이동되어서 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 동기(Synchronous) 동작 원리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;코드가 실행되면 순서대로 Call Stack에 실행할 함수가 쌓임&lt;/li&gt;
&lt;li&gt;쌓인 반대 순서로 함수가 실행&lt;/li&gt;
&lt;li&gt;실행이 된 함수는 Call Stack에서 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 비동기(asynchronous) 동작 원리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Call Stack에서 비동기 함수가 호출되면 Call Stack에 먼저 쌓였다가 Web API(혹은 백그라운드라고도 한다)로 이동한 후 해당 함수가 등록되고 Call Stack에서 사라짐&lt;/li&gt;
&lt;li&gt;Web API(백그라운드)에서 비동기 함수의 이벤트가 발생하면, 해당 콜백 함수는 Callback Queue에 push(이동) &lt;/li&gt;
&lt;li&gt;이제 Call Stack이 비어있는지 이벤트 루프(Event Loop)가 확인을 하는데 만약 비어있으면, Call Stack에 Callback Queue에 있는 콜백 함수를 넘겨줌(push)&lt;/li&gt;
&lt;li&gt;Call Stack에 들어온 함수는 실행이 되고 실행이 끝나면 Call Stack에서 사라짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-callback-promise-asyncawait&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-callback-promise-asyncawait&quot; aria-label=&quot;8 callback promise asyncawait permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8) Callback, Promise, async/await&lt;/h2&gt;
&lt;h4&gt;1) Callback&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다른 함수에게 인자로 전달되어 어느 시점에 실행될 수 있도록 던져주는 함수&lt;/li&gt;
&lt;li&gt;비동기 처리를 위해 만들어짐&lt;/li&gt;
&lt;li&gt;하지만 콜백 지옥이라 불리는 중첩문이 발생하면서 에러처리 한계가 생기기 시작했고 이를 해결하기 위해 Promise가 나옴&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Promise&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비동기 연산이 종료된 이후에 그 결과 값이나 에러를 처리할 수 있도록 처리기를 연결하는 역할을 하는 객체&lt;/li&gt;
&lt;li&gt;어떤 값이 생성 되었을 때 그 값을 대신하는 대리자이다. &lt;/li&gt;
&lt;li&gt;Promise 객체를 통해 성공, 실패, 오류에 따른 후속처리가 바로 가능해서 가독성도 좋고, 비동기 에러를 처리하기도 수월&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;// Promise 객체의 생성&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 비동기 작업을 수행한다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* 비동기 작업 수행 성공 */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;result&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* 비동기 작업 수행 실패 */&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;failure reason&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;비동기 처리에 성공 : resolve 메소드를 호출해서 비동기 처리 결과를 후속처리 메소드로 전달&lt;/li&gt;
&lt;li&gt;비동기 처리에 실패 : reject 메소드를 호출해서 에러메시지를 후속처리 메소드로 전달&lt;/li&gt;
&lt;li&gt;후속처리 메소드(then과 catch) :  Promise를 반환.&lt;/li&gt;
&lt;li&gt;then 을 가지고 메소드 체이닝을 통하여서 콜백 헬 문제를 해결&lt;/li&gt;
&lt;li&gt;Promise.all()을 사용해서 병렬로 실행되는 비동기 작업을 쉽게 작성할 수 있음&lt;/li&gt;
&lt;li&gt;프로미스가 있으면 콜백만 사용하는 코딩에서 발생하는 콜백을 너무 빨리/늦게/많이/적게 실행, 필요한 환경변수/파라미터의 전달 실패, 확인해야 하는 에러, 예외가 숨어버리는 등이 발생하지 않음&lt;/li&gt;
&lt;li&gt;ES2015를 지원하지 않는 구형 브라우저에서는 사용할 수 없으며 폴리필이나 Babel을 통한 컴파일이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) Async/await&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비동기 코드를 동기식으로 표현하는 더 나은 방법으로 ES2017에 등장&lt;/li&gt;
&lt;li&gt;Async와 await는 항상 같이 붙어 있어야 함&lt;/li&gt;
&lt;li&gt;await 모드는 Promise 객체를 받아 처리하고, 만약 비동기 함수가 아닌 동기적 함수라면 리턴 값을 그대로 받음&lt;/li&gt;
&lt;li&gt;Async 함수는 Promise 객체를 통해 비동기적으로 처리된 내용을 동기적인 코드 진행 순서로 보여주는 역할&lt;/li&gt;
&lt;li&gt;async, await를 사용할 경우 코드가 간결해지지만 에러처리를 잡기 위해 try catch를 사용해야 함&lt;/li&gt;
&lt;li&gt;동기적인 코드흐름으로 개발이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-이벤트-위임&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84&quot; aria-label=&quot;1 이벤트 위임 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 이벤트 위임&lt;/h2&gt;
&lt;h4&gt;(1) DOM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Angular의 경우 view와 model을 연결시키는 바인딩작업이 있고 변화감지를 통해서 상태를 보고 있다가 업데이트 되는 식&lt;/li&gt;
&lt;li&gt;React의 경우 가상 DOM이 있고, 가상 DOM이 실제 DOM과 비교하여 state가 변화되었는지 감지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 이벤트 버블링(Event Bubbling), 이벤트 캡쳐링(Event Capturing)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이벤트 버블링(하위 -&amp;gt; 상위)&lt;/code&gt; :  특정 화면 요소에서 이벤트가 발생했을 때 하위 -&gt; 상위 요소들로 전달&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이벤트 캡처링(상위 -&amp;gt; 하위)&lt;/code&gt; : 이벤트 버블링과 반대로 상위 요소 -&gt; 하위 요소로 탐색하며 이벤트를 전파&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) event delegation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;하나의 부모에 이벤트를 등록하여 부모가 이벤트를 위임하는 방식&lt;/li&gt;
&lt;li&gt;이 방법은 동적인 요소들에 대한 처리가 수월, 이벤트 핸들러를 더 적게 등록해 주기 때문에 메모리 절약&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트 위임:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동적으로 노드를 생성하고 삭제할 때 각 노드에 대해 이벤트를 추가 하지 않고, 상위 노드에서 하위 노드의 이벤트를 제어 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[자바스크립트 요점 정리 - this]]></title><link>https://jigglog.netlify.app/자바스크립트 요점 정리 - this/</link><guid isPermaLink="false">https://jigglog.netlify.app/자바스크립트 요점 정리 - this/</guid><pubDate>Wed, 07 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;자바스크립트 요점 정리 - this 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-this&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-this&quot; aria-label=&quot;1 this permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) this&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 내에서 함수 호출 컨텍스트(맥락)을 의미&lt;/li&gt;
&lt;li&gt;자바스크립트 런타임 시에 바인딩이 이루어지는 실행 컨텍스트 중 하나 &lt;/li&gt;
&lt;li&gt;해당 함수가 실행되는 동안에 사용할 수 있으며 함수 호출 부분에서 this가 가리키는 것이 무엇인지를 확인 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) 일반함수의 this와 화살표 함수의 this&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;내부함수는 일반 함수, 메소드, 콜백함수 어디에서 선언되었든지 this는 전역객체를 가르킴&lt;/li&gt;
&lt;li&gt;일반함수의 this는 window(전역) 을 가르키며,&lt;/li&gt;
&lt;li&gt;화살표 함수의 this는 언제나 상위스코프의 this를 가르킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) Call, Apply, Bind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;암시적 바인딩에 의해 혼란스러운 문제를 해결하기 위해서 call이나 apply 같은 내장 유틸리티를 사용하여 명시적으로 바인딩&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this를 바인딩하기 위한 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call : this를 바인딩하면서 함수를 호출하는 것, 두번째 인자를 하나씩 넘기는 것&lt;/li&gt;
&lt;li&gt;Apply : this를 바인딩하면서 함수를 호출하는 것, 두번째 인자가 배열&lt;/li&gt;
&lt;li&gt;Bind : 함수를 호출하는 것이 아닌 this가 바인딩 된 새로운 함수를 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// call&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Call&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;say1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; live &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;city&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;say1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;callcity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// apply&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Apply&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;say2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; live &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;city&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;say2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;applycity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// bind&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bind&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;say3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; live &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;city&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; boundSay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;say3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;boundSay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bindcity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;(3) this의 상황별 용법&lt;/h4&gt;
&lt;h5&gt;(1) 단독으로 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;global object를 가리킴&lt;/li&gt;
&lt;li&gt;브라우저에서 호출하는 경우 [object Window]&lt;/li&gt;
&lt;li&gt;strict mode(엄격 모드)에서도 동일&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Window&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) 함수 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수 안에서 this는 함수의 주인에게 바인딩 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Window&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  num&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 101&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 101&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//위 코드에서 this.num의 this는 window 객체를 가리킵니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//따라서 num은 전역 변수를 가리키게 됩니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;strict mode(엄격 모드)에서는 함수 내의 this에 디폴트 바인딩이 없기 때문에 undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ERROR! Cannot set property &apos;num&apos; of undefined&lt;/span&gt;
  num&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 따라서 this.num을 호출하면 undefined.num을 호출하는 것과 마찬가지기 때문에 에러가 납니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(3) 메서드 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메서드 호출 시 메서드 내부 코드에서 사용된 this는 해당 메서드를 호출한 객체로 바인딩&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  firstName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  lastName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Doe&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//&quot;John Doe&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;showNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;showNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//0&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  num&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  func&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; showNum&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//200&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(4) 이벤트 핸들러 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;이벤트를 받는 HTML 요소를 가리킴&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#btn&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//#btn&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(5) new 생성자 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;생성자 함수가 생성하는 객체로 this가 바인딩&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; kim &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;kim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lee &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;lee&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//kim&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//lee&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;new로 바인딩이 되지 않았을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;window&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; kim &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;kim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//kim&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(6) 명시적 바인딩을 한 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;apply() 와 call() 메서드는 Function Object에 기본적으로 정의된 메서드. 인자를 this로 만들어주는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;whoisThis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;whoisThis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//window&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;whoisThis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//{x:123}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;apply()에서 매개변수로 받은 첫 번째 값은 함수 내부에서 사용되는 this에 바인딩, 두 번째 값인 배열은 자신을 호출한 함수의 인자로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; job&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; job&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Magician&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;call() :  인수 목록을 받음&lt;/li&gt;
&lt;li&gt;apply() : 인수 배열을 받음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; job&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;me&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Magician&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;apply()나 call()은 보통 유사배열 객체에게 배열 메서드를 쓰고자 할 때 사용&lt;/li&gt;
&lt;li&gt;ex) arguments 객체는 함수에 전달된 인수를 Array 형태로 보여주지만 배열 메서드를 쓸 수가 없어서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  arguments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ERROR! (arguments.push is not a function);&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 1, 2, 3, &apos;hi!&apos; ]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Kim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Lee&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Park&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  length&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Choi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Array.from : Array인자를 얕게 복사해 새로운 배열 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; children &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HTMLCollection&lt;/span&gt;
 
children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;on&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ERROR! (children.forEach is not a function)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; children &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HTMLCollection&lt;/span&gt;
 
Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;on&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(6) 화살표 함수로 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;화살표 함수는 전역 컨텍스트에서 실행되더라도 this를 새로 정의하지 않고 바로 바깥 함수나 클래스의 this를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Person {name: &quot;Nana&quot;, age: 28}&lt;/span&gt;
 
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Window&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; years old&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
me&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//global is undefined years old&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// --------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// --------------------------------------------------------------------&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Person {name: &quot;Nana&quot;, age: 28}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Person {name: &quot;Nana&quot;, age: 28}&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; years old&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Nana is 28 years old&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)/</guid><pubDate>Wed, 07 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;java-script&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#java-script&quot; aria-label=&quot;java script permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Java Script&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-javascript-원시-타입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-javascript-%EC%9B%90%EC%8B%9C-%ED%83%80%EC%9E%85&quot; aria-label=&quot;1 javascript 원시 타입 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) JAVASCRIPT 원시 타입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;boolean&lt;/code&gt;,  &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;undefined :  선언만 되어있고 값은 없는 상태 &lt;/li&gt;
&lt;li&gt;null : 자료형이 객체이며 빈값을 의미&lt;/li&gt;
&lt;li&gt;자바스크립트의 Number Type :  number는 하나. 정수만을 위한 타입이 없고, 모든 수를 실수로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) 어트리뷰트(속성, Attribute)와 프로퍼티(요소, property)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;어트리뷰트 : element가 가지고 있는것. element의 형식 지정(&amp;#x3C;div id=D1…의 id)&lt;/li&gt;
&lt;li&gt;프로퍼티 : object가 가지고 있는 구성요소(name, parent, history, innerHeight 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) Immutable / Mutable&lt;/h4&gt;
&lt;h5&gt;(1) Immutable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;내용이 변하지 않는 객체&lt;/li&gt;
&lt;li&gt;자바스크립트 원시 타입은 Immutable&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용 이유&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성능을 향상시키기 위함 : 객체가 미래에 변할 계획이 없을 때&lt;/li&gt;
&lt;li&gt;메모리 사용을 줄이기 위함 : 전체 객체를 복사하지 않고 객체 참조를 만듦&lt;/li&gt;
&lt;li&gt;Thread-safety : 여러개의 쓰레드가 서로 간섭하지 않고 같은 객체를 참조할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) Mutable&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;바뀔 수 있는 변수 타입&lt;/li&gt;
&lt;li&gt;자바스크립트 object와 array만 Mutable&lt;/li&gt;
&lt;li&gt;Mutable한 값을 Immutable하게 만들기 위해서 새로운 변수를 만들어 보관할 수 있지만, 이전 값은 여전히 메모리에 남아있기 때문에 GC가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) == 과 ===&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;==&lt;/code&gt; : 두 변수의 값 비교&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;===&lt;/code&gt; : 엄격한 비교(값 + 타입)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true 왜? js 에서 0 은 false 한 값이기 때문 &lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true 왜? 자동으로 타입을 캐스팅 해버림 &lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;     &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;

&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;0&apos;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//true &lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//false &lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;//false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;== 같은 경우는 피연산자가 서로 다른 타입이면 타입을 강제로 변환하여 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) null과 undefined&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;두 타입 모두 값이 없음을 의미&lt;/li&gt;
&lt;li&gt;둘 다 데이터 타입이자 그 변수의 값&lt;/li&gt;
&lt;li&gt;undefined : 자바스크립트에서 변수를 선언하면 초기값으로 undefined를 할당&lt;/li&gt;
&lt;li&gt;null : 값이 비어있음 ”값이 없다”는 값이 등록되어 있는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(4) Symbol&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;변경 불가능한 원시 타입의 값&lt;/li&gt;
&lt;li&gt;다른 값과 중복되지 않는 유일한 값&lt;/li&gt;
&lt;li&gt;이름 충돌이 없는 유일한 프로퍼티 키를 만들기 위해 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 용도&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로퍼티 은닉&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mySymbol&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 아무것도 출력되지 않음&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 심볼 프로퍼티 출력&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;표준 빌트인 객체 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-가비지-컬렉터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%ED%84%B0&quot; aria-label=&quot;2 가비지 컬렉터 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 가비지 컬렉터&lt;/h2&gt;
&lt;h4&gt;1) 가비지 컬렉터&lt;/h4&gt;
&lt;h5&gt;(1) 가비지와 가비지 컬렉터&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Garbage : 정리되지 않은 메모리, 유효하지 않은 객체의 메모리&lt;/li&gt;
&lt;li&gt;Garbage collector (GC) : 프로그램이 사용할 수 있는 메모리 용량이 부족할 때 가비지들을 메모리에서 해제하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 메모리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 할당 : 자바스크립트는 값을 선언할 때 자동으로 메모리를 할당&lt;/li&gt;
&lt;li&gt;메모리 사용 : 메모리를 읽고 쓰는 것을 의미. 메모리가 할당된 변수를 사용하면 읽기와 쓰기 작업이 이루어짐&lt;/li&gt;
&lt;li&gt;메모리 해제 : 더 이상 필요하지 않은 메모리를 해제하여 재사용 할 수 있도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 레퍼런스 카운팅(Reference Counting)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;해당 값이 얼마나 많이 참조되었는지 추적&lt;/li&gt;
&lt;li&gt;변수를 선언하고 참조값이 할당되면 레퍼런스 카운트는 1이 됨&lt;/li&gt;
&lt;li&gt;다른 변수가 같은 값을 참조하면 레퍼런스 카운트가 늘어남&lt;/li&gt;
&lt;li&gt;마찬가지로 해당 값을 참조하는 변수에 다른 값을 할당하면 레퍼런스 카운트가 줄어듦&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; objectA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 1&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; objectB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; objectA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 2&lt;/span&gt;

objectA &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 1&lt;/span&gt;
objectB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 레퍼런스 카운트 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;값의 레퍼런스 카운트가 0이 되면 해당 값에 접근할 방법이 없으며 메모리를 회수해도 안전&lt;/li&gt;
&lt;li&gt;순환 참조 문제 : 객체가 두 개일 때 함수 실행이 끝날 때 두 객체는 모두 스코프를 벗어나게 될 것이고, 두 객체는 불필요해지므로 할당된 메모리는 회수되어야 하지만 함수 실행이 끝난 뒤에도 레퍼런스 카운트가 0이 되지 않으므로 두 객체는 계속 존재&lt;/li&gt;
&lt;li&gt;이런 함수를 여러 번 호출하면 메모리를 회수하지 못하고 낭비되는 메모리가 많이 늘어남&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 마크 앤 스위프(Mark and sweep)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메모리 해제 여부를 결정하기 위해 루트(roots, 자바스크립트의 &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; 객체)부터 해당 객체까지 닿을 수 있는지를 판단&lt;/li&gt;
&lt;li&gt;루트부터 시작하여 루트가 참조하는 객체들과 그 객체가 참조하는 또 다른 객체들을 추적&lt;/li&gt;
&lt;li&gt;객체를 추적하면서 닿을 수 있는 객체는 표시(mark) 한 후, 표시가 없는 객체들은 메모리를 해제(sweep)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-자바스크립트의-배열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;3 자바스크립트의 배열 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 자바스크립트의 배열&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트의 배열은 실제 자료구조의 배열과 다르게 HashMap으로 구현. &lt;/li&gt;
&lt;li&gt;HashMap을 구현하기 위해서는 연결리스트로 구현하게 되는데 연결리스트에서 값을 찾기 위해서는 탐색해나가면서 값을 찾는 불상사가 발생&lt;/li&gt;
&lt;li&gt;이를 해결하기 위해서 타이핑된배열(Int8Array, Float32Array 등) 이 추가되고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-클로저&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%81%B4%EB%A1%9C%EC%A0%80&quot; aria-label=&quot;4 클로저 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 클로저&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;클로저(Closure) : &lt;em&gt;내부 함수가 외부 함수의 컨텍스트에 접근할 수 있는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;MDN 정의 : &lt;em&gt;함수와 함수가 선언된 렉시컬 환경과의 조합&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;반환된 내부함수가 자신이 선언되었을 때의 환경인 스코프를 기억하여 자신이 선언되었을때의 환경 밖에서 호출되어도 그 환경에 접근할 수 있는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 렉시컬 스코프&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수를 어디에 정의했는지에 따라 상위 스코프를 결정(렉시컬 스코프, 정적 스코프)&lt;/li&gt;
&lt;li&gt;렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경에 의해 결정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클로저의 사용 이유:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 상태를 기억하고 변경된 최신 상태를 유지하기 위해&lt;/li&gt;
&lt;li&gt;전역 변수의 사용을 억제&lt;/li&gt;
&lt;li&gt;정보를 은닉하기 위해 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-es6&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-es6&quot; aria-label=&quot;6 es6 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) ES6&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ES&lt;/th&gt;
&lt;th&gt;년도&lt;/th&gt;
&lt;th&gt;추가 기능&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ES6 (ECMAScript 2015)&lt;/td&gt;
&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;let, const, class / 화살표 함수/ 템플릿 리터럴 / 디스트럭처링 할당/ spread 문법, rest 파라미터, Symbol, Promise/ Map, Set / iterator, generator /module import/export&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES7 (ECMAScript 2016)&lt;/td&gt;
&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;지수(**) 연산자, Array.prototype.includes, String.prototype.includes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES8 (ECMAScript 2017)&lt;/td&gt;
&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;async/await, Object 정적 메소드(Object.values, Object.entries, Object.getOwnPropertyDescriptors)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ES9 (ECMAScript 2018)&lt;/td&gt;
&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;Object Rest/Spread 프로퍼티&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;class&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Prototype, function의 ES5 스펙만으로 Class를 구현&lt;/li&gt;
&lt;li&gt;자바스크립트에는 프로토타입이라는 것이 존재하여 클래스처럼 구현할 수 있음&lt;/li&gt;
&lt;li&gt;클래스는 자바스크립트의 프로토타입 기반 패턴의 문법적 설탕&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;동기-비동기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0-%EB%B9%84%EB%8F%99%EA%B8%B0&quot; aria-label=&quot;동기 비동기 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동기, 비동기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.kakaocdn.net/dn/bMlLfs/btqFQ9i1iD3/ZQE2tqi7lx7LUhTwK1tDtK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;1) 작동 원리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트는 한 번에 하나의 작업을 수행&lt;/li&gt;
&lt;li&gt;한 작업이 실행되는 동안 다른 작업은 멈춘 상태를 유지하고 자신의 차례를 기다리는 것&lt;/li&gt;
&lt;li&gt;단일 스레드(싱글 스레드), 동기(Synchronous)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 브라우저 부분&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 엔진은 싱글스레드로 동작&lt;/li&gt;
&lt;li&gt;브라우저는 멀티 스레드로 동작&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;1) 힙(Memory Heap)(자바스크립트 엔진)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Memory Heap은 객체를 저장하는 곳. 예제에서 선언한 함수 func1, func2, func3는 모두 Memory Heap에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2) 콜 스택(call stack)(자바스크립트 엔진)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소스코드 평가 과정에서 생성된 실행 컨텍스트가 추가되고 제거되는 스택 자료구조인 실행 컨텍스트 스택&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;3) Web API&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;브라우저에서 제공하는 API들&lt;/li&gt;
&lt;li&gt;DOM api, 타이머 함수, HTTP 요청 등 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 자바스크립트 엔진 구조&lt;/h4&gt;
&lt;h5&gt;1) 태스크 큐(Callback Que / task Queue / event Queue)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수를 저장하는 자료구조&lt;/li&gt;
&lt;li&gt;Call stack과 다르게 가장 먼저 들어온 함수를 가장 먼저 처리&lt;/li&gt;
&lt;li&gt;특정 이벤트에 따른 콜백 함수를 정의하면, 콜백 함수는 Callback Que에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;2) 이벤트 루프(Event Loop)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;call stack이 다 비워지면 callback que에 존재하는 함수를 하나씩 호출 스택으로 옮기는 역할&lt;/li&gt;
&lt;li&gt;이벤트 루프를 통해 동시성을 지원&lt;/li&gt;
&lt;li&gt;이벤트 루프는 콜 스택에서 실행 중인 게 있는지 확인하고, Event queue에 작업이 있는지 확인해서 콜스택이 비어있다면 이벤트큐 내의 작업이 콜스택으로 이동되어서 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 동기(Synchronous) 동작 원리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;코드가 실행되면 순서대로 Call Stack에 실행할 함수가 쌓임&lt;/li&gt;
&lt;li&gt;쌓인 반대 순서로 함수가 실행&lt;/li&gt;
&lt;li&gt;실행이 된 함수는 Call Stack에서 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 비동기(asynchronous) 동작 원리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Call Stack에서 비동기 함수가 호출되면 Call Stack에 먼저 쌓였다가 Web API(혹은 백그라운드라고도 한다)로 이동한 후 해당 함수가 등록되고 Call Stack에서 사라짐&lt;/li&gt;
&lt;li&gt;Web API(백그라운드)에서 비동기 함수의 이벤트가 발생하면, 해당 콜백 함수는 Callback Queue에 push(이동) &lt;/li&gt;
&lt;li&gt;이제 Call Stack이 비어있는지 이벤트 루프(Event Loop)가 확인을 하는데 만약 비어있으면, Call Stack에 Callback Queue에 있는 콜백 함수를 넘겨줌(push)&lt;/li&gt;
&lt;li&gt;Call Stack에 들어온 함수는 실행이 되고 실행이 끝나면 Call Stack에서 사라짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-callback-promise-asyncawait&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-callback-promise-asyncawait&quot; aria-label=&quot;8 callback promise asyncawait permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8) Callback, Promise, async/await&lt;/h2&gt;
&lt;h4&gt;1) Callback&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다른 함수에게 인자로 전달되어 어느 시점에 실행될 수 있도록 던져주는 함수&lt;/li&gt;
&lt;li&gt;비동기 처리를 위해 만들어짐&lt;/li&gt;
&lt;li&gt;하지만 콜백 지옥이라 불리는 중첩문이 발생하면서 에러처리 한계가 생기기 시작했고 이를 해결하기 위해 Promise가 나옴&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Promise&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비동기 연산이 종료된 이후에 그 결과 값이나 에러를 처리할 수 있도록 처리기를 연결하는 역할을 하는 객체&lt;/li&gt;
&lt;li&gt;어떤 값이 생성 되었을 때 그 값을 대신하는 대리자이다. &lt;/li&gt;
&lt;li&gt;Promise 객체를 통해 성공, 실패, 오류에 따른 후속처리가 바로 가능해서 가독성도 좋고, 비동기 에러를 처리하기도 수월&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;// Promise 객체의 생성&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 비동기 작업을 수행한다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* 비동기 작업 수행 성공 */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;result&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* 비동기 작업 수행 실패 */&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;failure reason&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;비동기 처리에 성공 : resolve 메소드를 호출해서 비동기 처리 결과를 후속처리 메소드로 전달&lt;/li&gt;
&lt;li&gt;비동기 처리에 실패 : reject 메소드를 호출해서 에러메시지를 후속처리 메소드로 전달&lt;/li&gt;
&lt;li&gt;후속처리 메소드(then과 catch) :  Promise를 반환.&lt;/li&gt;
&lt;li&gt;then 을 가지고 메소드 체이닝을 통하여서 콜백 헬 문제를 해결&lt;/li&gt;
&lt;li&gt;Promise.all()을 사용해서 병렬로 실행되는 비동기 작업을 쉽게 작성할 수 있음&lt;/li&gt;
&lt;li&gt;프로미스가 있으면 콜백만 사용하는 코딩에서 발생하는 콜백을 너무 빨리/늦게/많이/적게 실행, 필요한 환경변수/파라미터의 전달 실패, 확인해야 하는 에러, 예외가 숨어버리는 등이 발생하지 않음&lt;/li&gt;
&lt;li&gt;ES2015를 지원하지 않는 구형 브라우저에서는 사용할 수 없으며 폴리필이나 Babel을 통한 컴파일이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) Async/await&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비동기 코드를 동기식으로 표현하는 더 나은 방법으로 ES2017에 등장&lt;/li&gt;
&lt;li&gt;Async와 await는 항상 같이 붙어 있어야 함&lt;/li&gt;
&lt;li&gt;await 모드는 Promise 객체를 받아 처리하고, 만약 비동기 함수가 아닌 동기적 함수라면 리턴 값을 그대로 받음&lt;/li&gt;
&lt;li&gt;Async 함수는 Promise 객체를 통해 비동기적으로 처리된 내용을 동기적인 코드 진행 순서로 보여주는 역할&lt;/li&gt;
&lt;li&gt;async, await를 사용할 경우 코드가 간결해지지만 에러처리를 잡기 위해 try catch를 사용해야 함&lt;/li&gt;
&lt;li&gt;동기적인 코드흐름으로 개발이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-이벤트-위임&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%9C%84%EC%9E%84&quot; aria-label=&quot;1 이벤트 위임 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 이벤트 위임&lt;/h2&gt;
&lt;h4&gt;(1) DOM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Angular의 경우 view와 model을 연결시키는 바인딩작업이 있고 변화감지를 통해서 상태를 보고 있다가 업데이트 되는 식&lt;/li&gt;
&lt;li&gt;React의 경우 가상 DOM이 있고, 가상 DOM이 실제 DOM과 비교하여 state가 변화되었는지 감지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 이벤트 버블링(Event Bubbling), 이벤트 캡쳐링(Event Capturing)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이벤트 버블링(하위 -&amp;gt; 상위)&lt;/code&gt; :  특정 화면 요소에서 이벤트가 발생했을 때 하위 -&gt; 상위 요소들로 전달&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이벤트 캡처링(상위 -&amp;gt; 하위)&lt;/code&gt; : 이벤트 버블링과 반대로 상위 요소 -&gt; 하위 요소로 탐색하며 이벤트를 전파&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) event delegation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;하나의 부모에 이벤트를 등록하여 부모가 이벤트를 위임하는 방식&lt;/li&gt;
&lt;li&gt;이 방법은 동적인 요소들에 대한 처리가 수월, 이벤트 핸들러를 더 적게 등록해 주기 때문에 메모리 절약&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이벤트 위임:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동적으로 노드를 생성하고 삭제할 때 각 노드에 대해 이벤트를 추가 하지 않고, 상위 노드에서 하위 노드의 이벤트를 제어 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(1)]]></title><link>https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/프론트엔드 개발자 면접 질문(기술면접) 질문 정리 모음 - 자바스크립트(2)/</guid><pubDate>Wed, 07 Apr 2021 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;프론트 엔드 면접 질문용 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 다시 책이나 자료를 참고하여 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-this&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-this&quot; aria-label=&quot;1 this permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) this&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 내에서 함수 호출 컨텍스트(맥락)을 의미&lt;/li&gt;
&lt;li&gt;자바스크립트 런타임 시에 바인딩이 이루어지는 실행 컨텍스트 중 하나 &lt;/li&gt;
&lt;li&gt;해당 함수가 실행되는 동안에 사용할 수 있으며 함수 호출 부분에서 this가 가리키는 것이 무엇인지를 확인 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) 일반함수의 this와 화살표 함수의 this&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;내부함수는 일반 함수, 메소드, 콜백함수 어디에서 선언되었든지 this는 전역객체를 가르킴&lt;/li&gt;
&lt;li&gt;일반함수의 this는 window(전역) 을 가르키며,&lt;/li&gt;
&lt;li&gt;화살표 함수의 this는 언제나 상위스코프의 this를 가르킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) Call, Apply, Bind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;암시적 바인딩에 의해 혼란스러운 문제를 해결하기 위해서 call이나 apply 같은 내장 유틸리티를 사용하여 명시적으로 바인딩&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this를 바인딩하기 위한 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call : this를 바인딩하면서 함수를 호출하는 것, 두번째 인자를 하나씩 넘기는 것&lt;/li&gt;
&lt;li&gt;Apply : this를 바인딩하면서 함수를 호출하는 것, 두번째 인자가 배열&lt;/li&gt;
&lt;li&gt;Bind : 함수를 호출하는 것이 아닌 this가 바인딩 된 새로운 함수를 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// call&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Call&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;say1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; live &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;city&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;say1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;callcity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// apply&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Apply&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;say2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; live &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;city&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;say2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;applycity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// bind&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bind&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;say3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; live &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;city&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; boundSay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;say3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;boundSay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bindcity&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;(3) this의 상황별 용법&lt;/h4&gt;
&lt;h5&gt;(1) 단독으로 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;global object를 가리킴&lt;/li&gt;
&lt;li&gt;브라우저에서 호출하는 경우 [object Window]&lt;/li&gt;
&lt;li&gt;strict mode(엄격 모드)에서도 동일&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Window&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) 함수 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;함수 안에서 this는 함수의 주인에게 바인딩 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Window&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  num&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 101&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 101&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//위 코드에서 this.num의 this는 window 객체를 가리킵니다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//따라서 num은 전역 변수를 가리키게 됩니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;strict mode(엄격 모드)에서는 함수 내의 this에 디폴트 바인딩이 없기 때문에 undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ERROR! Cannot set property &apos;num&apos; of undefined&lt;/span&gt;
  num&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;addNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 따라서 this.num을 호출하면 undefined.num을 호출하는 것과 마찬가지기 때문에 에러가 납니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(3) 메서드 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;메서드 호출 시 메서드 내부 코드에서 사용된 this는 해당 메서드를 호출한 객체로 바인딩&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  firstName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;John&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  lastName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Doe&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//&quot;John Doe&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;showNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;showNum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//0&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  num&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  func&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; showNum&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//200&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(4) 이벤트 핸들러 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;이벤트를 받는 HTML 요소를 가리킴&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#btn&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;click&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//#btn&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(5) new 생성자 안에서 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;생성자 함수가 생성하는 객체로 this가 바인딩&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; kim &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;kim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lee &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;lee&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kim&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//kim&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//lee&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;new로 바인딩이 되지 않았을 때&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;window&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; kim &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;kim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//kim&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(6) 명시적 바인딩을 한 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;apply() 와 call() 메서드는 Function Object에 기본적으로 정의된 메서드. 인자를 this로 만들어주는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;whoisThis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;whoisThis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//window&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  x&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;whoisThis&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//{x:123}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;apply()에서 매개변수로 받은 첫 번째 값은 함수 내부에서 사용되는 this에 바인딩, 두 번째 값인 배열은 자신을 호출한 함수의 인자로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; job&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; job&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Magician&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;call() :  인수 목록을 받음&lt;/li&gt;
&lt;li&gt;apply() : 인수 배열을 받음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; level&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; job&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;Player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;me&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Magician&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;apply()나 call()은 보통 유사배열 객체에게 배열 메서드를 쓰고자 할 때 사용&lt;/li&gt;
&lt;li&gt;ex) arguments 객체는 함수에 전달된 인수를 Array 형태로 보여주지만 배열 메서드를 쓸 수가 없어서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  arguments&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ERROR! (arguments.push is not a function);&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hi!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;token function&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [ 1, 2, 3, &apos;hi!&apos; ]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Kim&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Lee&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Park&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  length&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Choi&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Array.from : Array인자를 얕게 복사해 새로운 배열 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; children &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HTMLCollection&lt;/span&gt;
 
children&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;on&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//ERROR! (children.forEach is not a function)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; children &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HTMLCollection&lt;/span&gt;
 
Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;on&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(6) 화살표 함수로 쓴 this&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;화살표 함수는 전역 컨텍스트에서 실행되더라도 this를 새로 정의하지 않고 바로 바깥 함수나 클래스의 this를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Person {name: &quot;Nana&quot;, age: 28}&lt;/span&gt;
 
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Window&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; years old&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
me&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//global is undefined years old&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// --------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// --------------------------------------------------------------------&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Person {name: &quot;Nana&quot;, age: 28}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Person {name: &quot;Nana&quot;, age: 28}&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; is &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; years old&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; me &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Nana&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Nana is 28 years old&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-스코프&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%8A%A4%EC%BD%94%ED%94%84&quot; aria-label=&quot;2 스코프 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 스코프&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;정의 : &lt;em&gt;식별자가 유효한 범위&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;모든 식별자는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효 범위를 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;global&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// &quot;local&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &quot;global&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;(1) 스코프의 종류&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;th&gt;스코프&lt;/th&gt;
&lt;th&gt;변수&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;전역&lt;/td&gt;
&lt;td&gt;코드의 가장 바깥 영역&lt;/td&gt;
&lt;td&gt;전역 스코프&lt;/td&gt;
&lt;td&gt;전역 변수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;지역&lt;/td&gt;
&lt;td&gt;함수 몸체 내부&lt;/td&gt;
&lt;td&gt;지역 스코프&lt;/td&gt;
&lt;td&gt;지역 변수&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;(2) 스코프 체인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정의 : &lt;em&gt;스코프가 계층적으로 연결된 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프&lt;/li&gt;
&lt;li&gt;변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여 상위 스코프 방향으로 이동하며 선언된 변수를 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 블록 / 함수 레벨 스코프&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;블록 레벨 스코프 : 함수 몸체 뿐만 아니라 모든 코드 블록(if, for, while 등) 이 지역 스코프를 만듦&lt;/li&gt;
&lt;li&gt;함수 레벨 스코프 : var로 선언된 변수는 오로지 함수의 코드 블록(함수 몸체) 만을 지역 스코프로 인정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-실행-컨텍스트execution-context&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8execution-context&quot; aria-label=&quot;2 실행 컨텍스트execution context permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 실행 컨텍스트(Execution Context)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트의 코드가 실행되기 위해 정보들을 담고 있는 곳(변수 객체, 스코프 체인, this 정보)&lt;/li&gt;
&lt;li&gt;자바스크립트의 코드들이 실행되기 위한 환경(전역 컨텍스트 ,함수 컨텍스트)  &lt;/li&gt;
&lt;li&gt;전역 컨텍스트 하나 생성 후에 함수 호출할 때마다 함수 컨텍스트가 생성. &lt;/li&gt;
&lt;li&gt;컨텍스트를 생성시에 변수객체, 스코프 체인, this가 생성. 컨텍스트 생성 후 함수가 실행되는데 사용되는 변수들은 변수 객체 안에서 값을 찾고 없다면 스코프 체인을 따라 올라가며 찾음&lt;/li&gt;
&lt;li&gt;함수 실행이 마무리되면 해당 컨텍스트는 사라짐&lt;/li&gt;
&lt;li&gt;페이지가 종료되면 전역 컨텍스트가 사라짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) 전역 scope를 사용했을 때 장단점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;변수와 함수 이름의 충돌을 방지하기 위해&lt;/li&gt;
&lt;li&gt;모든 스크립트는 전역 스쿠프에 접근 가능&lt;/li&gt;
&lt;li&gt;만약 모든 사람이 변수 선언에 전역 네임스페이스를 사용한다면 충돌이 매우 많이 발생할 것&lt;/li&gt;
&lt;li&gt;모듈 패턴(IIFE 등)으로 직접 선언한 변수는 로컬 네임스페이스에 포함되도록 해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로퍼티&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0&quot; aria-label=&quot;프로퍼티 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로퍼티&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 엔진은 프로퍼티를 생성할 때 프로퍼티의 상태를 나타내는 프로퍼티 어트리뷰트를 기본값으로 자동 정의&lt;/li&gt;
&lt;li&gt;프로퍼티의 값(value), 값의 갱신 여부(writeable), 열거 가능 여부(enumerable), 재정의 가능 여부(configurable)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Lee&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// { value: &apos;Lee&apos;, writable: true, enumerable: true, configurable: true }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;(1) 프로퍼티&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 프로퍼티 : 키와 값으로 구성된 일반적인 프로퍼티&lt;/li&gt;
&lt;li&gt;접근자 프로퍼티 : 자체적으로는 값을 갖지 않고 다른 데이터 프로퍼티의 값을 읽거나 저장할 때 호출되는 접근자 함수로 구성된 프로퍼티&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-prototype&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-prototype&quot; aria-label=&quot;3 prototype permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) prototype&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트 객체에는 Prototype이라는 내부 프로퍼티가 있고, 이는 다른 객체를 참조할 때 사용&lt;/li&gt;
&lt;li&gt;자바스크립트에서 상속을 진행할 때는 프로토타입끼리 연결을 하는데  부모 프로토타입을 create()나 setPropertyOf() 메서드를 사용하여 자식 프로토타입과 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) 프로토타입&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트는 프로토타입을 기반으로 상속을 구현하여 불필요한 중복을 제거&lt;/li&gt;
&lt;li&gt;즉, 생성자 함수가 생성할 모든 인스턴스가 공통적으로 사용할 프로퍼티나 메소드를 프로토타입에 미리 구현해 놓음으로써 또 구현하는것이 아니라 상위(부모) 객체인 프로토타입의 자산을 공유하여 사용할 수 있음&lt;/li&gt;
&lt;li&gt;__proto__접근자 프로퍼티로 자신의 프로토타입, 즉 [[Prototype]] 내부슬롯에 접근 할 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 프로토타입 체인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;객체의 프로퍼티에 접근하려고 할때 객체에 접근하려는 프로퍼티가 없으면  __proto__접근자 프로퍼티가 가리키는 링크를 따라 자신의 부모역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색&lt;/li&gt;
&lt;li&gt;프로로타입 체인의 최상위 객체는 Object.prototype&lt;/li&gt;
&lt;li&gt;이 객체의 프로퍼티와 메소드는 모든 객체에게 상속&lt;/li&gt;
&lt;li&gt;prototype 프로퍼티 는 생성자함수가 생성할 인스턴스의 프로토타입을 가리킴&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-ajax&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-ajax&quot; aria-label=&quot;6 ajax permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) AJAX&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;자바스크립트를 이용해 비동기적으로 서버와 브라우저가 데이터를 교환할 수 있는 통신 방식&lt;/li&gt;
&lt;li&gt;AJAX는 비동기 자바스크립트 xml의 약자&lt;/li&gt;
&lt;li&gt;클라이언트와 서버가 xml 데이터를 주고 받는 기술&lt;/li&gt;
&lt;li&gt;기존에는 클라이언트에서 서버로 요청을 보내고 응답을 받으면 다시 화면을 갱신해야 했고 이 과정에서 많은 리소스가 낭비&lt;/li&gt;
&lt;li&gt;이 문제를 해결하기 위해 ajax는 페이지에서 필요한 일부만 갱신할 수 있도록 XMLHttpRequest 객체를 서버에 요청&lt;/li&gt;
&lt;li&gt;보통은 서버로부터 웹페이지가 반환되면 전체를 갱신해야하는데 / AJAX를 사용하면, 페이지 일부만을 갱신하고도 동일한 효과를 볼 수 있음&lt;/li&gt;
&lt;li&gt;갱신이 필요한 부분만 로드하여 갱신하면 되므로 빠르고, 부드러운 화면효과를 기대할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-호이스팅hoisting&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85hoisting&quot; aria-label=&quot;7 호이스팅hoisting permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7) 호이스팅(Hoisting)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 내에서 아래쪽에 존재하는 내용 중 필요한 값들을 끌어올리는 것&lt;/li&gt;
&lt;li&gt;자바스크립트 함수는 실행되기 전에 함수 안에 필요한 변수값들을 모두 모아서 유효 범위의 최상단에 선언&lt;/li&gt;
&lt;li&gt;자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑음&lt;/li&gt;
&lt;li&gt;함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시&lt;/li&gt;
&lt;li&gt;실제로 코드가 끌어올려지는 건 아니며, 자바스크립트 Parser 내부적으로 끌어올려서 처리하는 것&lt;/li&gt;
&lt;li&gt;실제 메모리에서는 변화가 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) 호이스팅의 대상&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;var 변수 선언과 함수선언문에서만 호이스팅이 일어남&lt;/li&gt;
&lt;li&gt;var 변수/함수의 선언만 위로 끌어 올려지며, 할당은 끌어 올려지지 않음&lt;/li&gt;
&lt;li&gt;let/const 변수 선언과 함수표현식에서는 호이스팅이 발생하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(2) 변수 생성 과정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;변수 선언&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;변수 초기화&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;변수에 지정한 값 할당(변수에 사용자가 지정한 값으로 초기화)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;여기서 변수에 지정한 값 할당은 해당 실행 컨텍스트의 변수 객체 생성이 완료된 뒤에 실행&lt;/li&gt;
&lt;li&gt;변수의 선언 + 초기화 와 사용자가 지정한 값 초기화가 발생되는 환경이 나뉘어 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(3) 함수의 호이스팅&lt;/h4&gt;
&lt;h5&gt;(1) 함수 선언문&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;변수 객체가 만들어지는 과정에서 함수 선언, 초기화, 사용자 지정 값으로 초기화 3단계가 모두 발생&lt;/li&gt;
&lt;li&gt;실행 단계에서 함수 선언문보다 함수 호출이 먼저 발생해도 에러가 나지 않고 정상적으로 실행&lt;/li&gt;
&lt;li&gt;함수 바디가 호이스트&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;FOOOOO&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FOOOOO&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(2) 함수 표현식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;익명함수를 생성하여 변수에 할당하는 방식(변수 호이스팅 적용)&lt;/li&gt;
&lt;li&gt;실행 단계에서 함수 표현식보다 함수 호출이 먼저 발생하게 된다면 TypeError 가 발생&lt;/li&gt;
&lt;li&gt;함수 바디는 호이스트되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Uncaught TypeError: foo는 함수가 아닙니다&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FOOOOO&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;let-var-const&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#let-var-const&quot; aria-label=&quot;let var const permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;let, var, const&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;let, const 중복이나 호이스팅을 선언하지 않음&lt;/li&gt;
&lt;li&gt;블록 단위의 변수타입&lt;/li&gt;
&lt;li&gt;var 와 let, const의 차이점 (function scope와 block scope의 개념에서) : &lt;/li&gt;
&lt;li&gt;var은 함수 레벨 스코프 &lt;/li&gt;
&lt;li&gt;let , const는 블록 레벨 스코프를 지원&lt;/li&gt;
&lt;li&gt;다음과 같이 블록레벨에 foo를 456으로 재선언하는 경우 foo를 456으로 인식. 하지만 let이나 const는 블록 안에 있는것을 읽지 않고 전역 변수를 읽음&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 전역 변수&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 123&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; foo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 전역 변수&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 456&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;use-strict&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#use-strict&quot; aria-label=&quot;use strict permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;use strict&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;엄격 모드. 전체 스크립트 또는 부분 함수에 적용이 가능&lt;/li&gt;
&lt;li&gt;기존에 무시되던 에러들이 throw 되며 JS 엔진 최적화 작업을 어렵게 만드는 실수들을 바로 잡고ECMAScript의 차기 버전에서 정의될 문법들을 금지하는 특성을 가지고 있음&lt;/li&gt;
&lt;li&gt;전체 코드나 함수에 strict mode를 적용하기 위해 사용. strict 모드의 선언은 자바스크립트 변형의 제한에 동의한다는 것&lt;/li&gt;
&lt;li&gt;서로 다른 strict mode로 작성된 코드를 연결했을 때 오류가 발생할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;(1) 금지 사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;전역 변수 생성&lt;/li&gt;
&lt;li&gt;NaN에 할당하는 것&lt;/li&gt;
&lt;li&gt;삭제할 수 없는 프로퍼티를 삭제하려고 할 때&lt;/li&gt;
&lt;li&gt;함수의 파라미터 이름 중복&lt;/li&gt;
&lt;li&gt;this 는 전역 컨텍스트에서 undefined&lt;/li&gt;
&lt;li&gt;function.caller 그리고 function.arguments 에 접근할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;call-by-value--call-by-ref&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#call-by-value--call-by-ref&quot; aria-label=&quot;call by value  call by ref permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Call by value &amp;#x26; call by ref&lt;/h2&gt;
&lt;h4&gt;1) call by value&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인자로 값이 넘어올때 복사된 값이 넘어오기 떄문에 중간에 어떤 연산을 해도 변하지 않음&lt;/li&gt;
&lt;li&gt;자바스크립트는 기본적으로 원시값을 넘겨주면 call by value 로 작동&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;q함수 내에서 값을 변경하면 함수에 전달된 데이터만 변경될 뿐 함수 전달된 원본 복사본에는 아무런 영향을 미치지 않음&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fun &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;funcion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) call by reference&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인자로 레퍼런스가 넘어올때 가리키는 값을 복사하는 것이 아니라 참조 값을 넘기는 것&lt;/li&gt;
&lt;li&gt;참조형 데이터는 그 값의 주소를 말 그대로 참조 할 값의 복사본이나 값 자체가 할당되지 않음&lt;/li&gt;
&lt;li&gt;참조에 의해 할당된 새 변수는 원본 변수가 가르키는 값과 동일한 값을 가리킴&lt;/li&gt;
&lt;li&gt;원본 변수와 할당된 변수는 모두 동등하며, 값을 조작하는데 사용될 수 있음. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그래서 할당된 변수(참조)가 변경되면 원본 변수에서도 동일하게 변경&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fun &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;funcion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;반응형-프로그래밍&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%98%EC%9D%91%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D&quot; aria-label=&quot;반응형 프로그래밍 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;반응형 프로그래밍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;데이터 스트림이라는 하나의 일관된 형식으로 만들고, 이 데이터 스트림을 구독하여 데이터 스트림의 상태 변화에 반응하는 방식으로 동작하는 애플리케이션을 만드는 것&lt;/li&gt;
&lt;li&gt;Tv와 Tv방송국이 있다고 가정했을때, Tv방송국이 일정한 시간 단위로 영상에 대한 프레임을 계속해서 방출(emit)하고 TV는 방송국을 관찰하고 있다가 새로운 영상을 방출하면 이를 획득하는 방식&lt;/li&gt;
&lt;li&gt;여기서 방송국의 역할이 옵저버블, Tv가 옵저버, 영상프레임이 Notification&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;typeof-instanceof&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#typeof-instanceof&quot; aria-label=&quot;typeof instanceof permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;typeof, instanceof&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;typeof 는 변수의 유형(type)을 반환&lt;/li&gt;
&lt;li&gt;instanceof 는 비교연산자로 prototype 객체를 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;zzz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;number&apos; &lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;string&apos; &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true &lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false str 는 원시타입 문자열이기 때문&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;객체-순회&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4-%EC%88%9C%ED%9A%8C&quot; aria-label=&quot;객체 순회 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체 순회&lt;/h2&gt;
&lt;p&gt;객체 안의 속성과 배열의 아이템을 순회할 때 사용하는 문법:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object: for in hasOwnProperty, Object.keys().forEach, for of&lt;/li&gt;
&lt;li&gt;Array: for, Array.forEach, for of&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for-in 루프&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for (var property in obj) { console.log(property); }&lt;/li&gt;
&lt;li&gt;하지만 상속받은 속성도 포함한다. 그래서 obj.hasOwnproperty(property) 를 사용해서 검사해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object.keys(obj).forEach(property ⇒ { … })&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object.keys 는 static 메서드이며 객체가 가진 열거 가능한(enumerable) 모든 속성을 배열로 만들어서 리턴한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object.getOwnPropertyNames()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object.getOwnPropertyNames(obj).forEach(property =&gt; { … })&lt;/li&gt;
&lt;li&gt;getOwnPropertyNames는 객체가 가진 모든 열거 가능한, 열거 불가능한(non-enumerable) 값을 배열에 담아 리턴한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;브라우저의-렌더링-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;브라우저의 렌더링 과정 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;브라우저의 렌더링 과정&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 브라우저의 렌더링 과정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브라우저는 HTML, CSS, 자바스크립트, 이미지, 폰트 파일 등 렌더링에 필요한 리소스를 요청, 서버 응답&lt;/li&gt;
&lt;li&gt;브라우저의 렌더링 엔진은 서버로부터 응답된 HTML과 CSS를 파싱하여 DOM과 CSSOM을 생성하고 이를 결합하여 렌더 트리를 생성&lt;/li&gt;
&lt;li&gt;브라우저의 자바스크립트 엔진은 서버로부터 응답된 자바스크립트를 파싱하여 AST를 생성하고 바이트코드를 변환하여 실행. 이때 자바스크립트는 DOM API를 통해 DOM이나 CSSOM을 변경할 수 있음. 변경된 DOM과 CSSOM은 렌더 트리로 결합&lt;/li&gt;
&lt;li&gt;렌더 트리를 기반으로 HTML 요소의 레이아웃(위치와 크기)를 계산하고 브라우저 화면에 HTML 요소를 페인팅&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 요청과 응답&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브라우저 주소창에 URL을 입력하면 호스트 이름이 DNS를 통해 IP로 변환되고 요청 전송&lt;/li&gt;
&lt;li&gt;HTTP : 웹에서 브라우저와 서버가 통신하기 위한 프로토콜&lt;/li&gt;
&lt;li&gt;HTTP/1.1 : 커넥션 당 하나의 요청과 응답&lt;/li&gt;
&lt;li&gt;HTTP/2 : 여러 리소스 동시에 전송 가능. 50% 정도 빠름&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) HTML 파싱과 DOM 생성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;HTML 문서를 바이트 형태로 응답받음&lt;/li&gt;
&lt;li&gt;meta 태그의 charset 어트리뷰트에 의해 지정된 인코딩 방식을 기준으로 문자열 변환&lt;/li&gt;
&lt;li&gt;응답 헤더를 통해 응답&lt;/li&gt;
&lt;li&gt;문자열로 변환된 HTML 문서를 읽어 token들로 분해&lt;/li&gt;
&lt;li&gt;토큰을 객체로 변환하여 node 들을 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 웹 통신&lt;/h4&gt;
&lt;h5&gt;(1) 브라우저 주소창에 주소 검색 이후의 렌더링 과정&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;DNS 서버가 연결해줄 곳을 찾음   &lt;/li&gt;
&lt;li&gt;http / https 여부 판단&lt;/li&gt;
&lt;li&gt;index.html 클라이언트로 보내고 브라우저가 index.html 파싱&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOM트리를 읽음:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css : link태그를 만나 css요청이 발생하면, 요청과 응답과정을 거치고 css를 파싱, 이후 중단된 html을 다시읽고 DOM트리를 완성&lt;/li&gt;
&lt;li&gt;js : HTML파서는 Script태그를 만나게 되면 javascript 코드를 실행하기 위해 파싱을 중단. 제어권한을 자바스크립트 엔진에게 넘기고, 자바스크립트 코드 또는 파일을 로드해서 파싱하고 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DOM트리 + CSSOM트리= Render Tree를 만들고 그림&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2210F643570307E233&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;ul&gt;
&lt;li&gt;DOM tree : 태그라고 불리는 HTML 문서의 구성 요소와 각 구성 요소간의 관계를 트리 구조로 나타낸 자료구조&lt;/li&gt;
&lt;li&gt;Styles struct : 브라우저에 기본으로 설정된 스타일이나 스타일시트에 정의된 코드를 바탕으로 스타일 구조체를 형성한 것&lt;/li&gt;
&lt;li&gt;브라우저 엔진 : DOM tree와 styles struct를 결합하여 HTML 문서를 구성하는 요소간의 관계와 각각의 요소가 갖는 스타일에 대한 정보를 구성하고 이 정보에 동적으로 실행되는 script code를 결합하여 render tree 생성&lt;/li&gt;
&lt;li&gt;브라우저 엔진은 render tree가 생성되면 랜더링을 수행하여 브라우저에 HTML 문서를 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;리페인트와-리플로우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%ED%8E%98%EC%9D%B8%ED%8A%B8%EC%99%80-%EB%A6%AC%ED%94%8C%EB%A1%9C%EC%9A%B0&quot; aria-label=&quot;리페인트와 리플로우 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리페인트와 리플로우&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;수정된 렌더 트리를 리렌더링 하는 과정에서 발생&lt;/li&gt;
&lt;li&gt;웹 애플리케이션의 성능을 저하시키는 주된 원인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) Reflow&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;리플로우(크기나 위치) : HTML 문서를 구성하는 요소의 크기나 위치가 변경되었을 때 각각의 요소를 재배치하는 작업&lt;/li&gt;
&lt;li&gt;모든 엘리먼트의 위치와 길이 등을 다시 계산하는 과정에서 발생&lt;/li&gt;
&lt;li&gt;dom 일부 혹은 전체 렌더링시에 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Repaint&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;리페인트(스타일) : HTML 문서의 전체 또는 일부 영역의 스타일이 변경되었을 때 브라우저가 변경된 스타일을 다시 적용하는 작업&lt;/li&gt;
&lt;li&gt;가시성에 영향을 주는 엘리먼트가 변경되면 발생 (background, display)&lt;/li&gt;
&lt;li&gt;무조건은 아니지만, Reflow가 발생하면 Repaint는 같이 발생&lt;/li&gt;
&lt;li&gt;브라우저가 DOM트리에 있는 다른 노드의 가시성을 모두 확인해야 하므로 리페인트는 비용이 비쌈&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) Reflow 가 발생 되는 경우&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DOM el 추가, 제거 또는 변경&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSS 스타일 추가, 제거 또는 변경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inline-style, class 변경이 일어남으로써 레이아웃이 변경 될 수 있음&lt;/li&gt;
&lt;li&gt;DOM el 길이를 변경하면 DOM트리에 있는 다른 노드에 영향을 줄 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSS 애니메이션, 트렌지션 : 애니메이션의 모든 프레임에서 리플로우 발생&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offsetWidth와 offsetHeight의 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 속성을 사용하면, 초기 reflow가 트리거되어 수치가 계산&lt;/li&gt;
&lt;li&gt;offset, computed, bounding 같은 속성 및 메소드들은 이미 렌더링 된 DOM기준으로 CSS속성을 &lt;code class=&quot;language-text&quot;&gt;계산만&lt;/code&gt;해서 내려주기 때문에 reflow + repaint가 아닌 순수 reflow만 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hover, 텍스트 입력, 창 크기 조절, 글꼴 크기 변경 등등&lt;/li&gt;
&lt;li&gt;활성화 되면 리플로우를 트리거 할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 성능 저하 최소화&lt;/h4&gt;
&lt;h5&gt;(1) 클래스 변경을 통해 스타일을 변경할 경우, 최대한 말단의 노드의 클래스를 변경&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;돔 구조에서 최 하단 노드의 클래스를 변경&lt;/li&gt;
&lt;li&gt;중간에 있는 class를 바꾸게 된다면) 위 아래 노드들에게 영향을 미치게 되고, 그 과정에서 리플로우 리페인트가 발생 할 수 있기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 인라인 스타일 자제&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인라인 스타일을 사용하면 HTML이 다운로드 될 때, 레이아웃에 영향을 미치면서 추가 리플로우를 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 애니메이션이 들어간 엘리먼트는 &lt;code class=&quot;language-text&quot;&gt;position: fixed&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;position: absolute&lt;/code&gt;로 지정&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;absolute&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;fixed&lt;/code&gt; 위치인 엘리먼트는 다른 엘리먼트 레이아웃에 영향을 미치지 않음&lt;/li&gt;
&lt;li&gt;리플로우가 아닌 리페인트 발생, 리페인트가 훨씬 적은 비용이 듦(리플로우 + 리페인트 &amp;#x3C; 리페인트)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) 레이아웃을 위한 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 자제&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;점진적으로 렌더링이 되지 않고, 모두 불려지고 계산된 다음에서야 렌더링이 됨, 작은 변경만으로 테이블의 다른 모든 노드에 대한 &lt;code class=&quot;language-text&quot;&gt;리플로우&lt;/code&gt;가 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webpack과-babel&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#webpack%EA%B3%BC-babel&quot; aria-label=&quot;webpack과 babel permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;webpack과 Babel&lt;/h2&gt;
&lt;h4&gt;1) Webpack&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;의존 관계에 있는 자바스크립트, css, 이미지 등의 리소스를 하나의 파일로 번들링하는 모듈 번들러&lt;/li&gt;
&lt;li&gt;모듈 번들러 : 웹 애플리케이션을 구성하는 자원(HTML, CSS, Javscript, Images 등)을 모두 각각의 모듈로 보고 이를 조합해서 병합된 하나의 결과물을 만드는 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Webpack 기본 세팅&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&apos;path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 모듈 네임&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;word-relay-setting&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 웹팩 실행 모드: development, production, none&lt;/span&gt;
    mode&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;development&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    devtool&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;eval&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    resolve&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// webpack에서 모듈을 읽어올 때 파일 확장자 체크&lt;/span&gt;
        extensions&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;.jsx&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 입력&lt;/span&gt;
    entry&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        app&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./client&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;WordRelay&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;/\.jsx?/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 적용할 파일 체크&lt;/span&gt;
            loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;babel-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                presets&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;babel/preset-env&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        targets&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                            browsers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;last 2 chrome versions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@babel/preset-react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;@babel/plugin-proposal-class-properties&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;token comment&quot;&gt;// class형 컴포넌트에서 state = {} 문법을 사용할 때 필요&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 입력받은 모듈에 모듈을 적용&lt;/span&gt;
    plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    output&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;dist&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        filename&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;app.js&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 출력&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;3) webpack기능&lt;/h4&gt;
&lt;h5&gt;(1) mode&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;mode의 설정값에 따라 웹팩이 다르게 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;none&lt;/code&gt;: 모드 설정 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;development&lt;/code&gt;: 개발에 좀 더 편하게 웹팩 로그나 결과물이 보임&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;production&lt;/code&gt;: 성능 최적화 작업(파일 압축, 빌드)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) entry&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;웹 애플리케이션이 실행될 수 있게 빌드를 하기 위해 모든 소스의 경로가 담겨져 있어야 할 영역&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) output&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;웹팩이 entry 속성을 참고하여 빌드를 한 후 결과물이 저장되는 경로&lt;/li&gt;
&lt;li&gt;filename과 path 속성을 추가해주어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(4) Loader&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;웹팩이 웹 애플리케이션을 해석할 때 자바스크립트가 아닌 소스(html, css, sass, images, babel 등)들을 변환할 수 있게 도와주는 속성&lt;/li&gt;
&lt;li&gt;webpack.config.js 내에선 &lt;code class=&quot;language-text&quot;&gt;module&lt;/code&gt; 속성으로 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.scss$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      use&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;css-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sass-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
module&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  rules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      test&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/\.css$/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      use&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;style-loader&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;css-loader&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; modules&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; loader&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sass-loader&apos;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;(5) Plugin&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;웹팩의 기본 기능에 추가적인 기능을 추가하는 속성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plugin과 Loader의 차이점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;로더는 파일을 해석하고 변환하는 과정에 관여한다면 플러그인은 결과물의 형태를 바꿈&lt;/li&gt;
&lt;li&gt;플러그인 속성은 배열의 성격을 띄고 있고 그 안엔 생성자 함수로 생성된 객체 인스턴스만 추가할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;webpack&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; HtmlWebpackPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;html-webpack-plugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  plugins&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;webpack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ProgressPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;babel&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#babel&quot; aria-label=&quot;babel permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Babel&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;트랜스파일러&lt;/li&gt;
&lt;li&gt;ES6이상의 문법의 코드들을 브라우저가 이해할 수 있게끔 ES5이하의 문법으로 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) 컴파일과 트랜스파일&lt;/h4&gt;
&lt;h5&gt;(1) 컴파일&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;한 언어로 작성된 소스 코드를 다른 언어로 바꾸는것 &lt;/li&gt;
&lt;li&gt;ex) C-&gt; 어셈블리어&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 트랜스파일&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;한언어로 작성된 소스코드를 비슷한 수준의 추상화를 가진 다른 언어로 변환&lt;/li&gt;
&lt;li&gt;ex) ES6-&gt;ES5&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) babel 적용 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;@babel/core: 바벨의 가장 핵심적인 내용이 담긴 모듈&lt;/li&gt;
&lt;li&gt;@babel/preset-env: 사용자의 브라우저에 맞게 최신 문법을 예전 문법으로 바꿔줌&lt;/li&gt;
&lt;li&gt;@babel/preset-react: 바벨을 리액트에서 사용할 수 있게해주는 모듈(jsx 지원)&lt;/li&gt;
&lt;li&gt;babel-loader: 바벨과 웹팩을 연결해줌&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;amd와-commonjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#amd%EC%99%80-commonjs&quot; aria-label=&quot;amd와 commonjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AMD와 CommonJS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;모든 모듈의 로딩이 완료된 후에 실행/ 로딩 완료 이전에 실행(동기 vs 비동기)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) Common.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;모든 모듈이 로컬에 다운로드가 된 이후에 실행하는 방식. &lt;/li&gt;
&lt;li&gt;node.js에서 사용하는 방식으로 server 환경에서 외부 모듈을 가져올 때 유리&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; lib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;package/lib&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	lib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foobar &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; foo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;2) AMD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비동기적으로 필요한 파일을 다운로드하는 방식&lt;/li&gt;
&lt;li&gt;client단(브라우저 환경)에서 외부 모듈을 가져올 때 유리한 방식 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt; &lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;package/lib&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
     	lib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      foobar &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; foo
     &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[history api 정리]]></title><link>https://jigglog.netlify.app/history api 정리/</link><guid isPermaLink="false">https://jigglog.netlify.app/history api 정리/</guid><pubDate>Wed, 03 Mar 2021 12:23:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-index&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-index&quot; aria-label=&quot;1 index permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. index&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;doctype html&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;html lang&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ko&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;History &lt;span class=&quot;token constant&quot;&gt;API&lt;/span&gt; Sample&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;meta charset&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      section &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;margin&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;px &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;style&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;head&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;push state&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;push-state1&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;pushState1&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;push-state2&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;pushState2&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;push-state3&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;pushState3&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;replace state&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;replace-state&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;replaceState&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;변경&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;body&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;module&quot;&lt;/span&gt; src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;./src/index.js&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;script&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;html&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-indexjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-indexjs&quot; aria-label=&quot;2 indexjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. index.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 현재의 history state 값을 출력합니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;currentHistoryState&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div&gt;
        &amp;lt;h1&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/h1&gt;
      &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;div&gt;
      &amp;lt;h1&gt;페이지가 없습니다.&amp;lt;/h1&gt;
    &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;currentHistoryState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pushState1Btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;push-state1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pushState2Btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;push-state2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pushState3Btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;push-state3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; replaceStateBtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;replace-state&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// pushState()&lt;/span&gt;
pushState1Btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pushState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pushState1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/push-state1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;currentHistoryState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pushState2Btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pushState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pushState2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/push-state2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;currentHistoryState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
pushState3Btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pushState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pushState3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/push-state3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;currentHistoryState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// replaceState()&lt;/span&gt;
replaceStateBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replaceState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;replaceState&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/replace-state&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;currentHistoryState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 브라우저의 뒤로가기 / 앞으로가기를 누르면 history state 값을 확인하여 출력합니다.&lt;/span&gt;
window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;popstate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;currentHistoryState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-store&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-store&quot; aria-label=&quot;3 store permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. store&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* 
  store.js 임시 구현
  
  context를 create하는 컴포넌트 =&gt; constructor에서 store.set(&apos;context&apos;, initialData)하기
  context의 update에 따라 리렌더링되는 컴포넌트 =&gt; constructor에서 store.subscribe(&apos;context&apos;, this)하기
  
  context를 set하는 코드 라인 =&gt; data를 업데이트하는 곳에서 store.set(&apos;context&apos;, data)하기
  context를 get하는 코드 라인 =&gt; data를 사용하는 곳에서 store.get(&apos;context&apos;)하기
*/&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    store&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;refs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ref&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; initialSet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialSet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      store&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        refs&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;new data&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    store&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    store&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;refs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; store&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// SearchHistory.js&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; store &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;../../store.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchHistory&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$el &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;ul&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;SearchHistory&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$el&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;search-history&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// create &apos;search-history&apos; context, initialData is []&lt;/span&gt;
    store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;search-history&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// subscribe &apos;search-history&apos; context&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;search-history&apos;가 다른 곳에서 업데이트될 경우 render()가 실행됨&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; store
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;search-history&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// get &apos;search-history&apos; context&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;searched&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;li&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;searched&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/li&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프로그래머스 데브매칭 고양이 정리]]></title><link>https://jigglog.netlify.app/프로그래머스 데브매칭 고양이 정리/</link><guid isPermaLink="false">https://jigglog.netlify.app/프로그래머스 데브매칭 고양이 정리/</guid><pubDate>Mon, 01 Mar 2021 12:23:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-indexhtml&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-indexhtml&quot; aria-label=&quot;1 indexhtml permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. index.html&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./src/style.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;src/main.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-mainjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-mainjs&quot; aria-label=&quot;2 mainjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. main.js&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./App.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#App&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-app&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-app&quot; aria-label=&quot;3 app permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. App&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SearchInput &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/SearchInput.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; SearchResult &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/SearchResult.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ImageInfo &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/ImageInfo.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Spinner &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Spinner.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Tags &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Tags.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; DarkButton &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/DarkButton.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Banner &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Banner.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; throttling &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./utils/throttle.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spinnerToggle &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./utils/spinnerToggle.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; api &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./api/api.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 스피너&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spinner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Spinner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 검색&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchInput&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;onSearch&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchCats&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setSearchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

      &lt;span class=&quot;token function-variable function&quot;&gt;onRandom&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchRandoms&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 다크모드&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;darkbutton &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DarkButton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 태그&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;onClickTag&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchCats&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setSearchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 배너&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;banner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Banner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;onRandom&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchRandoms&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 결과리스트&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; throttle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;throttling&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;scroll&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        scrollTop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        scrollHeight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        clientHeight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;documentElement&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scrollTop &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; clientHeight &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; scrollHeight &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        throttle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDummy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchRandoms&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setDummy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchResult&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      initialData&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          visible&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;isRandom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isRandom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scroll&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scroll&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scroll&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scroll&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 모달&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImageInfo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        visible&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        image&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nextData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;banner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nextData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setSearchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;banner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setSearchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;banner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setDummy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dummyToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;errorData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;4-stylecss&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-stylecss&quot; aria-label=&quot;4 stylecss permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. style.css&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Goyang&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&quot;fonts/Goyang.woff&quot;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;woff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; normal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; normal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body *&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Goyang&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;*,
*:before,
*:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inherit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;#App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.5em auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1200px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;column-gap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; only screen and &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 992px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; only screen and &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 768px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; only screen and &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 576px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;object-fit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cover&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult .img-outer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult .item&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #eee&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchInput&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 40px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; opacity 0.3s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.tooltip&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; opacity 0.3s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.fade-in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.fade-out&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .title&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; space-between&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .title,
.ImageInfo .description&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .content-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; -50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #eee&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .content-wrapper img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.spinner-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;#dummy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1000px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.isvisible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.imgs-container img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.imgs-container.banner-outer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 캐러셀 */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.imgs-container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; transform 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.carousel&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 500px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* dark mode 처리 */&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dark&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body[data-theme=&quot;light&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body[data-theme=&quot;dark&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;5-cache&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-cache&quot; aria-label=&quot;5 cache permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. cache&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    localStorage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;6-debounce&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-debounce&quot; aria-label=&quot;6 debounce permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. debounce&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;debouncing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; timer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;timer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      timer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; debouncing&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;7-spinnertoggle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-spinnertoggle&quot; aria-label=&quot;7 spinnertoggle permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. spinnerToggle&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;spinnerToggle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; spinner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.spinner-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  spinner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isvisible&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; spinnerToggle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;8-throttle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-throttle&quot; aria-label=&quot;8 throttle permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. throttle&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;throttling&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; timer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;timer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        timer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          timer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; throttling&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;9-banner&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-banner&quot; aria-label=&quot;9 banner permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. banner&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Banner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  onRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onRandom &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;carousel&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $outer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onRandom&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onRandom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nextData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imgsContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    imgsContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;imgs-container&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    imgsContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
          &amp;lt;div class=&quot;banner-outer&quot;&gt;
            &amp;lt;img src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; class=&quot;banner-img&quot;/&gt;
          &amp;lt;/div&gt;
        &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// 넘기기&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imgs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imgsContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; idx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;changeImg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;idx &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; imgs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        idx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;idx &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        idx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; imgs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      imgsContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;translateX(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;idx &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;px)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; leftBtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    leftBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;left-btn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    leftBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;이전&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    leftBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      idx&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;changeImg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rightBtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    rightBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;right-btn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    rightBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;다음&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    rightBtn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      idx&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;changeImg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imgsContainer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;leftBtn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rightBtn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;10-darkbutton&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-darkbutton&quot; aria-label=&quot;10 darkbutton permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. darkbutton&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DarkButton&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;darkmode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $outer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; originTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;theme&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;originTheme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      originTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;matchMedia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;(prefers-color-scheme: dark)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;matches
        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; originTheme&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;darkmode-btn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;다크모드&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;originTheme &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        originTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;light&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        originTheme &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;data-theme&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dark&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;btn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;11-imageinfo&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-imageinfo&quot; aria-label=&quot;11 imageinfo permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. imageinfo&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; api &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../api/api.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; spinnerToggle &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../utils/spinnerToggle.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ImageInfo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $imageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  catdata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  caterror &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $imageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ImageInfo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image-info&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $imageInfo&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onCatById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fetchCatById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;catdata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;caterror &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onCatById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;spinnerToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;visible &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;fadeIn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-in&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-out&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-out&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-in&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;visible&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fadeIn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;div class=&quot;content-wrapper&quot;&gt;
          &amp;lt;div class=&quot;title&quot;&gt;
            &amp;lt;span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;catdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/span&gt;
            &amp;lt;div class=&quot;close&quot;&gt;x&amp;lt;/div&gt;
          &amp;lt;/div&gt;
          &amp;lt;img src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;catdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; alt=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;catdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/&gt;        
          &amp;lt;div class=&quot;description&quot;&gt;
            &amp;lt;div&gt;성격: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;catdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;temperament&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
            &amp;lt;div&gt;태생: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;catdata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;origin&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/div&gt;
          &amp;lt;/div&gt;
        &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$imageInfo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;image-info&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keyup&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;visible &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;key &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Escape&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fadeOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;12-searchinput&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-searchinput&quot; aria-label=&quot;12 searchinput permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. searchinput&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchInput&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onSearch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onRandom &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $searchInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;section&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $searchInput&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onRandom&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onSearch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onSearch&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$searchInput&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
    &amp;lt;div class=&quot;search-wrapper&quot;&gt;
      &amp;lt;span&gt;
        &amp;lt;button class=&quot;random-button&quot;&gt;고양이&amp;lt;/button&gt;
      &amp;lt;/span&gt;
      &amp;lt;input class=&quot;SearchInput&quot; placeholder=&quot;고양이를 검색해보세요.|&quot; /&gt;
    &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchinput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.SearchInput&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    searchinput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchInput&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keyup&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyCode &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onSearch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randombutton &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.random-button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    randombutton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onRandom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;13-searchresult&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-searchresult&quot; aria-label=&quot;13 searchresult permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;13. searchresult&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $searchResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  $dummy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  isRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  onClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  onScroll &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initialData&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onClick&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onScroll &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SearchResult&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$dummy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$dummy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isvisible&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$dummy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dummy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$dummy&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; initialData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onClick &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onClick&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onScroll &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onScroll&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nextData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setError&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;errorData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; errorData&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setSearchData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRandom &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nextData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;dummyToggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dummy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#dummy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    dummy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isvisible&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRandom&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRandom &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;h1&gt;검색 결과가 없습니다&amp;lt;/h1&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IntersectionObserver&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lazyimage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IntersectionObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            entries&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isIntersecting&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; entry&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; img &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;img&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;lazy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                img&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                lazyimage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unobserve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;outer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;makeCat&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
              &amp;lt;div class=&quot;item&quot;&gt;
                &amp;lt;div class=&quot;img-outer&quot;&gt;
                  &amp;lt;img lazy=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; alt=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; /&gt;
                &amp;lt;/div&gt;
                &amp;lt;h6 class=&quot;tooltip&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/h6&gt;
              &amp;lt;/div&gt;
            &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;makeCat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cat&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.item&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tooltip &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.tooltip&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

            $item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mouseover&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              tooltip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-in&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              tooltip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-out&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            $item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mouseout&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              tooltip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-out&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
              tooltip&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fade-in&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            lazyimage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$searchResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;h1&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/h1&gt;
      &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;14-spinner&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#14-spinner&quot; aria-label=&quot;14 spinner permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;14. spinner&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Spinner&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $spinner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$spinner &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$spinner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;spinner-wrapper&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$spinner&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$spinner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;classList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;isvisible&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$spinner&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;span&gt;
        &amp;lt;h1&gt;잠시만 기다려주세요&amp;lt;/h1&gt;
      &amp;lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;15-tags&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#15-tags&quot; aria-label=&quot;15 tags permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;15. tags&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;export &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Tags&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  tags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  onClickTag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onClickTag &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $outer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onClickTag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; onClickTag&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    $target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;tags&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tag &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tag-item&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; `&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h4&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h4&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;`&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      tag&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;onClickTag&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tag&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;16-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#16-api&quot; aria-label=&quot;16 api permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;16. api&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; cache &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../utils/cache.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;API_ENDPOINT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;https://oivhcpn8r9.execute-api.ap-northeast-2.amazonaws.com/dev&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;errorMsg&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;리다이렉트 에러: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;클라이언트 에러: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;서버 에러: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; api &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;fetchCats&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;keyword&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cachedata &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedata&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; cachedata&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;API_ENDPOINT&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/api/cats/search?q=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;keyword&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errorMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;fetchRandoms&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;API_ENDPOINT&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/api/cats/random50&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errorMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;token function-variable function&quot;&gt;fetchCatById&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;API_ENDPOINT&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/api/cats/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ok&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;errorMsg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        isError&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          status&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; api&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프로그래머스 데브매칭 라우팅]]></title><link>https://jigglog.netlify.app/프로그래머스 데브매칭 라우팅/</link><guid isPermaLink="false">https://jigglog.netlify.app/프로그래머스 데브매칭 라우팅/</guid><pubDate>Mon, 01 Mar 2021 12:23:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-indexhtml&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-indexhtml&quot; aria-label=&quot;1 indexhtml permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. index.html&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./src/style.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;src/main.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-mainjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-mainjs&quot; aria-label=&quot;2 mainjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. main.js&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./App.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#App&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-app&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-app&quot; aria-label=&quot;3 app permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. App&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Header &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Header.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-stylecss&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-stylecss&quot; aria-label=&quot;4 stylecss permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. style.css&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@font-face&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Goyang&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&quot;fonts/Goyang.woff&quot;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;woff&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; normal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; normal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body *&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Goyang&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;*,
*:before,
*:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inherit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;#App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.5em auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1200px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;column-gap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; grid&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; only screen and &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 992px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; only screen and &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 768px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; only screen and &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 576px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.SearchResult&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1fr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;object-fit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cover&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult .img-outer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchResult .item&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #eee&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.SearchInput&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 40px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; opacity 0.3s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.tooltip&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; opacity 0.3s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.fade-in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.fade-out&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .title&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; space-between&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .title,
.ImageInfo .description&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .content-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;-50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; -50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid #eee&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.ImageInfo .content-wrapper img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.spinner-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;#dummy&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1000px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.isvisible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.imgs-container img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.imgs-container.banner-outer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* 캐러셀 */&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.imgs-container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;translate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; transform 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.carousel&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 500px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;/* dark mode 처리 */&lt;/span&gt;

&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;prefers-color-scheme&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; dark&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body[data-theme=&quot;light&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;body[data-theme=&quot;dark&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.5s ease-in-out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;5-mainjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-mainjs&quot; aria-label=&quot;5 mainjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Main.js&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Info &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Info.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; About &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./About.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Component.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pathname&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;About&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          $target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/info&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          $target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
          &amp;lt;div&gt;
            &amp;lt;h1&gt;앱 부분&amp;lt;/h1&gt;
          &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;6-info&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-info&quot; aria-label=&quot;6 info permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. info&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Info&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div&gt;
        &amp;lt;h1&gt;정보&amp;lt;/h1&gt;
      &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;7-header&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-header&quot; aria-label=&quot;7 header permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Header&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Component.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Main &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Header&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;h4 class=&quot;history&quot; route=&quot;/&quot;&gt;홈&amp;lt;/h4&gt;
        &amp;lt;h4 class=&quot;history&quot; route=&quot;/about&quot;&gt;ABOUT&amp;lt;/h4&gt;
        &amp;lt;h4 class=&quot;history&quot; route=&quot;/info&quot;&gt;INFO&amp;lt;/h4&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; header &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.header&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; main &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;route&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;history&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pushState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;origin &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;8-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-component&quot; aria-label=&quot;8 component permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. Component&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  $outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;9-about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-about&quot; aria-label=&quot;9 about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. About&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;About&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;div&gt;
        &amp;lt;h1&gt;어바웃&amp;lt;/h1&gt;
      &amp;lt;/div&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프로그래머스 데브매칭 상태관리]]></title><link>https://jigglog.netlify.app/프로그래머스 데브매칭 상태관리/</link><guid isPermaLink="false">https://jigglog.netlify.app/프로그래머스 데브매칭 상태관리/</guid><pubDate>Mon, 01 Mar 2021 12:23:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-indexhtml&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-indexhtml&quot; aria-label=&quot;1 indexhtml permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. index.html&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UTF-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;viewport&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;X-UA-Compatible&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ie=edge&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;stylesheet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;./src/style.css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;src/main.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-mainjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-mainjs&quot; aria-label=&quot;2 mainjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. main.js&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./App.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#App&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-app&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-app&quot; aria-label=&quot;3 app permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. App&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Main &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./components/Main.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$target&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; $target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;4-stylecss&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-stylecss&quot; aria-label=&quot;4 stylecss permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. style.css&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;*,
*:before,
*:after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inherit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.spinner-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.isvisible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.header&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token selector&quot;&gt;.header h4&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pointer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;#app&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;margin-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;5-main&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-main&quot; aria-label=&quot;5 main permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Main&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./Component.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Count &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./count.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; List &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./list.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; store &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../store/index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      $target&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
      &amp;lt;form&gt;
        &amp;lt;div class=&quot;boilerform&quot;&gt;
          &amp;lt;input type=&quot;text&quot; class=&quot;input&quot; autocomplete=&quot;off&quot; /&gt;
          &amp;lt;button&gt;추가&amp;lt;/button&gt;
        &amp;lt;/div&gt;
      &amp;lt;/form&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; formEl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputEl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; formEl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.input&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    formEl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; inputEl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addItem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        inputEl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        inputEl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;6-listjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-listjs&quot; aria-label=&quot;6 listjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. list.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Component &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./component.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; store &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;../store/index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; $target &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;items&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      $target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;p class=&quot;no-items&quot;&gt;리스트 없음&amp;lt;/p&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        &amp;lt;ul&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;li&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;item&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;button&gt;×&amp;lt;/button&gt;&amp;lt;/li&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/ul&gt;
    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;button&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      button&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;clearItem&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; index &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;8-componentjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-componentjs&quot; aria-label=&quot;8 componentjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. Component.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  $target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  $outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; self &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$outer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;$target&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stateChange&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;9-storeindexjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-storeindexjs&quot; aria-label=&quot;9 storeindexjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. store/index.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; mutations &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./mutations.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; state &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./state.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Store &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./store.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mutations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;10-storemutationsjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-storemutationsjs&quot; aria-label=&quot;10 storemutationsjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. store/mutations.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;addItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; payload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;clearItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; payload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;payload&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;11-storepubsubjs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-storepubsubjs&quot; aria-label=&quot;11 storepubsubjs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. store/pubsub.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PubSub&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  events &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;event&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;12-storestatejs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-storestatejs&quot; aria-label=&quot;12 storestatejs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. store/state.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;export &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  items&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;예시 1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;예시 2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;13-storestorejs&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-storestorejs&quot; aria-label=&quot;13 storestorejs permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;13. store/store.js&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PubSub &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./pubsub.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Store&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  mutations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  events &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PubSub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mutations &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mutations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function-variable function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        state&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;현재 상태: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;key&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;value&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;stateChange&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; payload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mutations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mutations&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; payload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[ANGULOG]]></title><link>https://jigglog.netlify.app/angulog/</link><guid isPermaLink="false">https://jigglog.netlify.app/angulog/</guid><pubDate>Tue, 23 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;angulog&lt;/li&gt;
&lt;li&gt;개인프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;AWS S3, ec2&lt;/li&gt;
&lt;li&gt;node.js express&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;ANGULAR/ NGRX/ RXJS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;게시판 제공&lt;/li&gt;
&lt;li&gt;댓글기능&lt;/li&gt;
&lt;li&gt;좋아요 기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[MBTI WORLD]]></title><link>https://jigglog.netlify.app/mbtiworld/</link><guid isPermaLink="false">https://jigglog.netlify.app/mbtiworld/</guid><pubDate>Fri, 19 Feb 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;mbtiworld&lt;/li&gt;
&lt;li&gt;개인프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;AWS ec2&lt;/li&gt;
&lt;li&gt;node.js express&lt;/li&gt;
&lt;li&gt;DJANGO&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;REACT/REDUX&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;LANGUAGE&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;typescript&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;next.js 없는 서버사이드 랜더링 구현&lt;/li&gt;
&lt;li&gt;회원가입/로그인/로그아웃, 댓글/대댓글, mbti테스트/정보보기 기능&lt;/li&gt;
&lt;li&gt;MBTI 각 카테고리별 게시판 제공&lt;/li&gt;
&lt;li&gt;멤버 팔로우/팔로워 기능&lt;/li&gt;
&lt;li&gt;프로필 편집 기능&lt;/li&gt;
&lt;li&gt;좋아요 기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 네트워크 관리사 2급 실기 요점 정리 - 리눅스_TCPIP_신경향]]></title><link>https://jigglog.netlify.app/2020 네트워크 관리사 2급 실기 요점 정리 - 리눅스_TCPIP_신경향/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 네트워크 관리사 2급 실기 요점 정리 - 리눅스_TCPIP_신경향/</guid><pubDate>Sat, 02 Jan 2021 12:01:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;네트워크-관리사-2급-실기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B4%80%EB%A6%AC%EC%82%AC-2%EA%B8%89-%EC%8B%A4%EA%B8%B0&quot; aria-label=&quot;네트워크 관리사 2급 실기 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;네트워크 관리사 2급 실기&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;라우터&lt;/th&gt;
&lt;th&gt;케이블 제작&lt;/th&gt;
&lt;th&gt;Windows 2008 Server R2&lt;/th&gt;
&lt;th&gt;Linux&lt;/th&gt;
&lt;th&gt;TCP/IP 네트워크 장비&lt;/th&gt;
&lt;th&gt;신경향 및 보안&lt;/th&gt;
&lt;th&gt;합계&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;6.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;1-linux-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-linux-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;1 linux 문제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Linux 문제&lt;/h1&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;리눅스에서 IP address 정보를 확인하는 명령어&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ifconfig&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;리눅스에서 파일이나 폴더를 찾을 때 사용하는 명령어는 무엇인가?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;find&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;리눅스에서 현재 설치된 하드디스크와 용량을 확인하는 명령어는 무엇인가?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;df&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;리눅스에서 현재 위치를 확인하고 싶을 때 사용하는 명령어는 무엇인가?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;리눅스에서 도움말-메뉴얼을 확인하는 명령어는 무엇인가?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;man&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;리눅스 명령어 중 포트/프로토콜 정보를 확인할 수 있는 명령어&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;etc/services&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-단답형-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%8B%A8%EB%8B%B5%ED%98%95-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;2 단답형 문제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 단답형 문제&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;IPv4와 IPv6을 함께 사용할 수 있는 장비는 무엇인가 : &lt;code class=&quot;language-text&quot;&gt;듀얼스택(Dual Stack)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;다음 괄호 안에 들어갈 IP 주소는 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;(가) 8, (나) 16, (다) 24&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;.x.x.x / &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;가&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
* &lt;span class=&quot;token number&quot;&gt;172.16&lt;/span&gt;.x.x / &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;나&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
* &lt;span class=&quot;token number&quot;&gt;192.168&lt;/span&gt;.9.x / &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;다&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;3 ) 아래의 내용과 그림에서 설명하는 것은 무엇인가?  : &lt;code class=&quot;language-text&quot;&gt;라우터(Router)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* OSI &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; Layer에서 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;계층인 네트워크 계층에 속한다
* LAN과 LAN 또는 LAN과 WAN 등을 연결하는 인터네트워킹 장치이다
* 네트워크 계층 간을 연결하여 접속할 호스트의 최적 경로를 설정한다&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;4 ) 아래&amp;#x3C;그림&gt;은 Switching Hub에서 해당 포트를 물리적 변경을 하지 않고, 소프트웨어에 의해 LAN 망을 구분한 것이다. 이것을 무엇이라 하는가? : &lt;code class=&quot;language-text&quot;&gt;VLAN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;5 ) Cisco Router의 Interface란 Router 접속 포트를 말한다. 아래 &amp;#x3C;설명&gt;의 (가)와 (나)에 해당하는 용어는 무엇인가? : &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;(가) Ethernet, (나) Serial&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(가) 포트는 내부 네트워크, 즉 랜(LAN)을 위한 접속 포트로 내부의 허브나 스위치 등과 연결을 위한 포트이다. 요즘 많이 쓰는 UTP 케이블과 연결하기 위해서 MAU라는 트랜시러를 사용한다.&lt;/li&gt;
&lt;li&gt;(나) 포트는 외부 네트워크 접속을 위한 포트로 DSU/CSU와 연결 위한 V.35 케이블을 사용한다. WAN 포트라고도 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;6 ) 다음 &amp;#x3C;네트워크 구성도&gt;를 보고 &amp;#x3C;설명&gt;하는 기술이 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;클러스터링(Clustering)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* 서버 한대 이상이 고장 났을 경우에도 서비스 운영이 계속되도록 여러 대의 서버를 서로 연결하여 거대한 하나의 시스템으로 보이게 만드는 기술이다.
* 두 개 이상의 서버를 마치 하나의 서버처럼 작동하도록 서로 연결함으로써 병렬 처리나 부하 배분 및 공장 대비 등의 여러 가지 목적에 맞도록 대비하기 위해서 사용하는 기술이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;7 ) 아래 &amp;#x3C;설명&gt;에 해당하는 인터넷 사기 수법은? : &lt;code class=&quot;language-text&quot;&gt;피싱&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 은/는 불특정 다수의 이메일 사용자에게 신용카드나 은행 계좌 정보에 문제가 발생해 수정이 필요하다는 거짓 이메일을 발송해 가짜 웹사이트로 유인하여 관련 금융기관의 신용카드 정보나 계좌 정보 등을 빼내는 해킹 기법이다.
* A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 은/는 점점 거 복잡한 미끼들을 사용해서 사용자의 금융 정보와 패스워드를 낚는다는 데서 유래되었다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;8 ) 아래 &amp;#x3C;설명&gt;에 해당하는 인터넷 사기 수법은? : &lt;code class=&quot;language-text&quot;&gt;파밍&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 은/는 합법적으로 사용되고 있는 사용자의 도메인을 탈취하거나 도메인 네임 시스템&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DNS&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 이름을 속여 사용자들이 진짜 사이트로 온 인하도록 유인하여 개인 정보를 훔치는 새로운 수법이다.
* &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;B&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 은/는 아예 해당 사이트가 공식적으로 운영하고 있던 도메인 자체를 탈취하여 사용자들이 의심 없이 개인 ID, 패스워드, 계좌 정보 등을 빼내는 신종 해킹 기법이다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;9 ) 아래 &amp;#x3C;화면&gt;을 보고 현재 사용하고 있는 IP Address와 SubnetMask 값을 답인 란에 입력하시오&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IP Address - 192.168.10.13, SubnetMask - 255.255.255.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10 ) &amp;#x3C;네트워크 구성도&gt;의 (A)에 대한 &amp;#x3C;설명&gt;이다. (A)는 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;AP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;브리지나 스위치, 라우터 등 네트워크 장비에서 스패닝 트리 알고리즘을 사용하는 이유를 아래 &amp;#x3C;그림&gt;과 &amp;#x3C;설명&gt;을 참조하여 답하시오 : &lt;code class=&quot;language-text&quot;&gt;루프방지&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* Segment a~d &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 브리지, 라우터, 허브 또는 스위치 등에 의해 묶여 있는 네트워크의 한 부분을 말함.
* B1 ~ B4 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 브리지&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Bridge&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;12 ) 다음 &amp;#x3C;보기&gt;중 서비스 포트 번호를 연결한 것이다. 틀린 것 두 개만 선택하시오&lt;code class=&quot;language-text&quot;&gt;FTP(21), POP3(110)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* SSH - &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;번     
* FTP - &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;번
* Telnet - &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;번   
* TFTP - &lt;span class=&quot;token number&quot;&gt;89&lt;/span&gt;번
* WWW - &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;번   
* POP3 - &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;번&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;13 ) 다음은 두 개의 네트워크가 서로 연결된 그림이다. &amp;#x3C;그림&gt;에서 원형 안의 역할만 하는 장비는? : &lt;code class=&quot;language-text&quot;&gt;Router&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;14 ) 아래 &amp;#x3C;네트워크 구성도&gt;와 같은 환경에서 슈퍼넷(Supernet)을 구성하려고 한다. 이때 가능한 슈퍼넷 마스크(Supernetn Mask)에 해당하는 값을 보기에서 하나 선택하시오 : &lt;code class=&quot;language-text&quot;&gt;255.255.252.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;15&quot;&gt;
&lt;li&gt;아래에서 OUI(Organizationally Unique Identifler)에 해당하는 값은? : &lt;code class=&quot;language-text&quot;&gt;06-01-02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;06-01-02-01-2C-4B&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;16 ) PKI에 기반하여 전자 우편의 암호화 및 디지털 서명 기능을 제공하는 프로토콜은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;S/MIME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;17 ) 아래 &amp;#x3C;그림&gt;과 관련된 네트워크 기술은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;VPN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* 공중 통신망 기반 시설을 터널링 프로토콜과 보안 절차 등을 사용하여 개별 기업의 목적에 맞게 구성한 네트워크이다.
* 오직 한 회사에 의해서만 사용될 수 있는 자체망이나 전용회선과 대비되는 개념이다.
* 오늘날 회사들은 주로 엑스트라넷이나 넓은 지역에 퍼져있는 자사들 간의 인트라넷에 이 기술을 이용한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;18 ) 이것은 무엇인가 : SSL(Secure Socket Layer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 안전하게 주고받기 위한 업계 표준 프로토콜이다.&lt;/li&gt;
&lt;li&gt;미국 넷스케이브 커뮤니케이션즈가 개발하였고, 마이크로소프트 사등 주요 웹 제품 업체가 채택하고 있다.&lt;/li&gt;
&lt;li&gt;웹서버뿐만 아니라 FTP 등 다른 TCP/IP 애플리케이션에 적용할 수 있으며, 인증 암호화 기능이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL 부분에서 HTTP:// 가 HTTPS://로 변경된다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;19 ) 아래에서 설명하는 것은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;Blretooth(블루투스)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;무선 통신 기기 간에 근거리에서 저 전력으로 무선통신을 하기 위한 표준(IEEE802.15)&lt;/li&gt;
&lt;li&gt;인텔, IBM, 노키아, 에릭슨 등 업체 공동 개발&lt;/li&gt;
&lt;li&gt;이동 컴퓨터, 휴대폰, 헤드셋, 개인휴대정보단말기(PDA), PC 및 프린터 등의 기기 간에 정보 전송 등을 목적으로 사용&lt;/li&gt;
&lt;li&gt;통신이 가능한 최대 범위는 10M이며, 데이터전송은 1Mbps의 속도 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;20 )  아래의 Network Layer에서 동작되는 &amp;#x3C;프로토콜&gt;은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;ARP, RARP, ICMP, IGMP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;21 ) 다음 표를 보고 빈칸(A)에 해당하는 내용을 입력하시오 : &lt;code class=&quot;language-text&quot;&gt;128bit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;IPv4&lt;/th&gt;
&lt;th&gt;IPv6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;주소체계&lt;/td&gt;
&lt;td&gt;32비트&lt;/td&gt;
&lt;td&gt;( A )&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;주소 개수&lt;/td&gt;
&lt;td&gt;Over 109 (42억 개)&lt;/td&gt;
&lt;td&gt;Over 1038 (무한개)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;주소 유형&lt;/td&gt;
&lt;td&gt;유니캐스트 멀티캐스트 브로드캐스트&lt;/td&gt;
&lt;td&gt;유니캐스트 멀티캐스트 애니캐스트&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;22 ) TCP와 UDP의 특징 중 TCP 특징에 해당하는 것을 모두 선택하시오&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연결형 프로토콜이다.&lt;/li&gt;
&lt;li&gt;비연결형 프로토콜이다.&lt;/li&gt;
&lt;li&gt;수신순서는 송신순서와 동일하다.&lt;/li&gt;
&lt;li&gt;수신순서는 송신순서와 다를 수 있다.&lt;/li&gt;
&lt;li&gt;신뢰성이 있다.&lt;/li&gt;
&lt;li&gt;신뢰성이 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TCP - 연결형, 순서동일, 신뢰성&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UDP - 비연결형, 다른순서, 신뢰성 없음&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;23 ) 아래에 무선 네트워크에서 사용하는 보안 프로토콜에 대한 설명이다. 이 프로토콜은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;WEP&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유선랜에서 기대할 수 있는 것과 같은 보안과 프라이버시 수준의 무선랜의 보안 프로토콜이다.&lt;/li&gt;
&lt;li&gt;데이터 암호화는 노출되기 쉬운 회선 접속을 보호하고, 비밀번호, 단말 간 암호, 가살 사설 통신망(VPN) 인증 등 전형적인 랜 보안 체계가 프라이버시를 보호하고 있다.&lt;/li&gt;
&lt;li&gt;IEEE Wi-Fi 표준 802.11b에 기술되어 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;24 ) 아래의 설명을 보고 (A)에 들어갈 공통된 용어는 : &lt;code class=&quot;language-text&quot;&gt;쿠키&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹사이트 접속 시 개인 정보 유출 가능성이 있어 인터넷 익스플로러 5.0 이상에서는 (A) 거부 기능을 추가하였다.&lt;/li&gt;
&lt;li&gt;(A)는 웹서버가 사용자의 브라우저 저장하는 작은 텍스트 파일로서 ID 번호, 암호, 웹 사이트에서의 쇼핑 방법, 해당 사이트에 방문한 횟수 등 사용자에 대한 정보를 포함하게 된다.&lt;/li&gt;
&lt;li&gt;사용자가 웹서버에 연결할 때마다 웹서버가 (A) 정보를 액세스할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;25 ) 아래에서는 Telnet과 SSH를 비교한 것이다. 올바른 것을 고르시오&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;패킷이 암호화 전송 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;패킷이 비 암호화 전송&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;기본 포트는 22번    &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;기본 포트는 23번&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Telnet - 2, 4 (패킷이 비암호화되어 전송, 포트는 23번)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SSH - 1, 3 (패킷이 암호화되어 전송, 포트는 22번)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;26 ) 아래 설명과 &amp;#x3C;개념도&gt;를 보고 (A)는 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;DMB&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이동 중에도 개인정보단말기나 차량용 단말기를 통해 CD, DVD 급의 고음질 고화질 방송을 즐길 수 있다.&lt;/li&gt;
&lt;li&gt;음성/영상 등 다양한 멀티미디어 신호를 제공하는 방송서비스로 “내 손안의 TV”라 불린다.&lt;/li&gt;
&lt;li&gt;우리나라 지상파 (A)은/는 2005년 12월 1일 첫 방송을 시작하였다.&lt;/li&gt;
&lt;li&gt;신호 송신 방식에 따라 위성파 또는 지상파 로 나누어진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;27 ) 아래 IP 주소가 속한 Class에 해당하는 사설 IP 주소 중 임의의 주소 하나를 답안란에 입력하시오&lt;/li&gt;
&lt;li&gt;IP Address : 132.23.101.99&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;B class이므로 172.16.1.1 ~ 172.31.255.254 사이에서 1개 적는다&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;28 ) 아래에서 &amp;#x3C;설명&gt;하는 인터넷 서비스 제공 시스템은? : &lt;code class=&quot;language-text&quot;&gt;DDNS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;유동 IP Address를 고정된 IP Address 처럼 사용할 수 있도록 해주는 서비스를 위한 시스템&lt;/li&gt;
&lt;li&gt;이 시스템의 역할은 유동 IP Address를 도메인과 연결해주는 역할을 한다.&lt;/li&gt;
&lt;li&gt;컴퓨터는 먼저 할당된 유동 IP Address를 이 시스템에 알려주고 시스템에서는 도메인 이름과 IP Address 정보를 관리하며 외부에서 요청이 오면 해당 정보를 알려준다.&lt;/li&gt;
&lt;li&gt;29 ) 아래 &amp;#x3C;그림&gt;의 (A)는 OSI 7 Layer 모델에서 모든 계층의 기능(프로토콜 변환기)을 수행하는 장치이다. (A)는 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;Gateway&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;30 ) 아래에서 설명하는 보안장비는?: &lt;code class=&quot;language-text&quot;&gt;침입방지시스템&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;차세대 능동형 보안 네트워크 솔루션으로서 인터넷 웜과 같은 악성코드 및 해킹 등에 기인한 유해 트래픽을 차단해 준다.&lt;/li&gt;
&lt;li&gt;침입탐지시스템은 특정 패턴을 기반으로 공격자의 침입을 탐지하는 반면 이 시스템은 실제 피해를 주기 전에 미리 능동적으로 공격을 차단한다.&lt;/li&gt;
&lt;li&gt;특히 정상적으로 작동하는 네트워크의 트래픽 상태를 기억해주어 비정상적인 트래픽이 발생할 때 이를 기반으로 알려지지 않은 공격까지 차단할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;31 ) 특정 포트로 흐르는 패킷을 다른 임의의 포트로 Copy 해 보내는 기술로써, 아래 &amp;#x3C;네트워크 구성도&gt;와 같이 네트워크 기반 IDS(침입탐지시스템)를 구축하기 위해 Switching Hub에서 사용하는 &amp;#x3C;기능&gt;이 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;Port Mirroring&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;32 ) 원격 호스트에 접속하기 위해 Telnet을 사용할 경우 스니핑을 이용한 패스워드 유출이 가능하다. 이를 방지하기 위해 사용하는 Telnet과 유사한 암호화 접속 방식”을 무엇이라 하는가? : &lt;code class=&quot;language-text&quot;&gt;SSH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;33 ) 아래 &amp;#x3C;네트워크 구성도&gt;에서 슈퍼넷을 구성하고자 한다. 적합한 슈퍼넷 마스크는? : &lt;code class=&quot;language-text&quot;&gt;255.255.252.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;34 ) 가정에 들어오는 50~60hz의 교류 전기에다 1~30Mhz의 고주파 대역 통신 신호를 함께 실어 보내는 방식으로 전기가 공급되는 전력선 위에다 데이터를 얹어 보내는 디지털 통신 기술을 무엇이라 하는가? : &lt;code class=&quot;language-text&quot;&gt;PLC(Power Line Communication) 전력선 통신&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;35 ) 아래 &amp;#x3C;홈 네트워크 구성도&gt;의 (A)는 댁내 네트워크와 댁외 네트워크를 상호 접속 중재하는 장치이다. (A)에 들어갈 가장 적절한 장비는 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;홈 게이트웨이&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;36 ) 이것은 아래 &amp;#x3C;그림&gt;과 같이 무선 환경에서 사용되는 프로토콜이다. 채널의 반송파를 감지한 후 충돌이 일어나지 않도록 충돌을 회피하는 프로토콜은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;CSMA/CA&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;37 ) 아래 내용은 Class 별 사설 IP 범위를 보여주고 있다. (가), (나), (다)에 맞는 것을 기술하시오&lt;/li&gt;
&lt;li&gt;A Class : 10.0.0.0 ~ 10.255.255.255&lt;/li&gt;
&lt;li&gt;B Class : 172.(가).0.0 ~ 172.(나).255.255&lt;/li&gt;
&lt;li&gt;C Class : 192.(다).0.0 ~ 192.(다).255.255&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;가(16), 나(31), 다(168)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;38 ) 아래 &amp;#x3C;설명&gt;을 보고 &amp;#x3C;네트워크 구성도&gt;의 (A)를 적으시오 : &lt;code class=&quot;language-text&quot;&gt;DMZ&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;* 방화벽에 의해 보호받고 있는 네트워크에서 어쩔 수 없이 외부에 노출되어야 하는 서버들의 네트워크 지역
* &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;A&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 지역에는 기본적으로 FTP, WEB, FILE 서버들 구성
* 관리자는 방화벽에서 FTP, WEB, FILE 서버의 서비스를 위해 네트워크 일부분을 해제
* 외부에 노출시켜야 하는 서버들을 한곳에 모아두고 네트워크를 따로 관리하여 보안 사고 시에도 내부 네트워크 PC들을 방화벽에 의해 안전하게 보호됨&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;39 ) 아래에서 설명하는 휴대 인터넷의 기술 표준은 무엇인가? : &lt;code class=&quot;language-text&quot;&gt;와이브로&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;정보통신부, 한국정보통신기술협회, 이동통신업체 등이 중심이 되어 2006년 상용서비스를 목표로 개발하고 있는 무선 휴대 인터넷 서비스이다.&lt;/li&gt;
&lt;li&gt;휴대전화처럼 이동하면서 초고속 인터넷을 이용할 수 있는 서비스로 휴대전화와 무선랜 중간 영역에 위치한다.&lt;/li&gt;
&lt;li&gt;IEEE 802.16e의 표준을 준수하며 60Km 이내로 이동하면서 초고속 인터넷을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;40 ) 아래 &amp;#x3C;그림&gt;과 &amp;#x3C;설명&gt;에 해당하는 (A)은? : &lt;code class=&quot;language-text&quot;&gt;랙(Rack)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(A)는 서버나 네트워크 장비 등을 수용하기 위해 사용되는 철제 프레임이다.&lt;/li&gt;
&lt;li&gt;표준 (A)는 폭 19인치이지만, 좀 더 폭이 넓은 장비를 수용하기 위해 폭이 23인치인 광폭(A)도 있다.&lt;/li&gt;
&lt;li&gt;(A)의 높이는 다양하지만, 대게 1.75높이의 RU 24개 또는 42개이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;41&quot;&gt;
&lt;li&gt;개인정보를 불법적으로 획득하려는 사람이 금융기관을 사칭하여 불특정 다수의 사용자에게 “신용 카드나 은행 계좌 정보에 문제가 발생하여 수정이 필요” 하다는 등에 거짓 이메일을 발송하여 금융기관의 카드나 계좌 번호 등을 빼내 불법적으로 이용하는 것을 무엇이라 하는가 : &lt;code class=&quot;language-text&quot;&gt;피싱&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;42 ) 대형 라우터 기능에서 전원이 온 되어있는 상태에서 모듈을 교체 가능하게 해 주는 기능 : &lt;code class=&quot;language-text&quot;&gt;핫스왑(HOT SWAP)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;43 ) 침입탐지시스템은 오용탐지와 비정상행위탐지로 크게 분류하고있다. 이 분류 방법에 의해 구분할 때 아래 보기 중 오용탐지에 해당하는 것을 모두 고르시오 : &lt;code class=&quot;language-text&quot;&gt;2, 3&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;새로운 침입 유형 탐지 가능&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;새로운 침입 유형 탐지 불가능&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;3)비정상 행위를 정의라고 이해 해당하는 행위를 찾음&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;정상 행위를 정의하고 이를 벗어나는 행위를 찾음&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;44 ) 아래 설명에서 (A)는 무엇인지 &amp;#x3C;네트워크 구성도&gt;를 참조 하여 답을 입력하시오 : &lt;code class=&quot;language-text&quot;&gt;슈퍼넷&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(A)를 이용하여 C 클래스에 x.y.32.0 ~ x.y.35.255의 범위를 하나의 네트워크 대역으로 설계하여 보다 많을 주소를 사용 가능&lt;/li&gt;
&lt;li&gt;서브넷팅 반대개념&lt;/li&gt;
&lt;li&gt;네트워크 ID의 비트를 호스트 ID의 비트로 취급&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=jbhjjjjj&amp;#x26;logNo=221393353935&amp;#x26;parentCategoryNo=&amp;#x26;categoryNo=&amp;#x26;viewDate=&amp;#x26;isShowPopularPosts=false&amp;#x26;from=postView#&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;img src=&quot;http://postfiles2.naver.net/MjAxODExMDJfNjIg/MDAxNTQxMTQ5MjUwMTgw.3YiHnDPi1nJ48qrPZUf6wMufGmkXLjFfo1SPckIIV9Yg.Y9FRaycivRbctzcd6XowacHdfQjOAZt67S09OaOIb_8g.JPEG.jbhjjjjj/image_2098360471541149177825.jpg?type=w580&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;45 ) IP 주소 사용의 낭비를 막기 위해 내부네트워크에 모든 호스트에 인터넷 전체에서 유일한 공인 IP 주소를 설정 하지 않고 내부적으로는 사설 IP 주소를 설정하여 사용하다가 인터넷에 접속할 때만 공인 IP 주소로 변환하는 기술이 무엇인지 입력하시오 : &lt;code class=&quot;language-text&quot;&gt;NAT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;46 ) C 클래스에 해당하는 사설 IP 주소를 모두 선택하시오 : &lt;code class=&quot;language-text&quot;&gt;2, 4&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 ) 10.20.30.40      &lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;192.168.2.11&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;125.225.215.234  &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;192.168.100.200&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;172.30.127.20    &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;203.238.100.200&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;47 ) (A)은 리눅스에서 사용자나 운영 프로그램이 내린 명령을 해석하고 이해한 후 운영체제에 전달하는 역할의 프로그램이다. 여러 하드웨어 장치에 상태나 운영체제에 메시지들을 사용자에게 전달하는 역할을 한다.
즉, (A)은 사용자와 운영체제 사이에서 명령을 전달하고 그 결과 값을 보여 주는 역할을 하는 것이다 리눅스에서 주로 기본으로 설정되어 사용하는 애인은 (A), C (A), Korn(A) 등이 있다 :&lt;code class=&quot;language-text&quot;&gt;Shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;48 ) 다음 설명하는 기능을 무엇인가?&lt;/li&gt;
&lt;li&gt;&amp;#x3C;화면1&gt;에서 A가 C로 보낸 패킷은 연결되어 있는 다른 모든 컴퓨터로 함께 전송되어 동시에 다른 컴퓨터들은 데이터 전송을 할수 없다.&lt;/li&gt;
&lt;li&gt;&amp;#x3C;화면2&gt;에서 A가 C로 파일을 전송하는 경우, A의 패킷은 C로만 전송되고, 동시에 B와 D도 네트워크 전송이 가능하다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=jbhjjjjj&amp;#x26;logNo=221393353935&amp;#x26;parentCategoryNo=&amp;#x26;categoryNo=&amp;#x26;viewDate=&amp;#x26;isShowPopularPosts=false&amp;#x26;from=postView#&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;&lt;img src=&quot;http://postfiles12.naver.net/MjAxODExMDJfMzMg/MDAxNTQxMTQ5MjUxOTMw.7MqKdJeCZtz8EzM1RbFW1yy6TbwLrzEFIwjyvDnat8Eg.8XVel-4-RUqtmXaL7lIAVsD8jhW4svO1A5r-_97sN1cg.JPEG.jbhjjjjj/image_1638700841541149196466.jpg?type=w580&quot; alt=&quot;img&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스위칭&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;49 ) 아래의 &amp;#x3C;설명&gt;을 보고 A에 들어갈 공통된 단어는? : &lt;code class=&quot;language-text&quot;&gt;쿠키&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(A)는 HTTP 프로토콜을 통해 서버나 스크립트가 클라이언트 컴퓨터의 정보를 유지 관리 하는 방법이다.&lt;/li&gt;
&lt;li&gt;(A)는 웹 서버가 사용자의 브라우저에 저장하는 작은 텍스트 파일로서 ID번호, 암호, 웹 사이트에서의 쇼핑 방법, 해당 사이트를 방문한 횟수 등 사용자에 대한 정보를 포함하게 된다.&lt;/li&gt;
&lt;li&gt;사용자가 웹 서버에 연결할 때마다 웹서버가 (A)를 액세스할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;50 ) 아래 &amp;#x3C;설명&gt;을 보고 (A)에 들어갈 단어를 적으시오 : &lt;code class=&quot;language-text&quot;&gt;VLAN&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(A)란 물리적인 네트워크 구성에 제한을 받지않고 네트워크 구성요소가 삭제나 변경이 발생 했을 경우 논리 네트워크를 구성함으로써 유연하게 대응 할 수 있는 LAN 기능&lt;/li&gt;
&lt;li&gt;(A)는 네트워크 자원 액세스를 제한함으로써 보안을 향상시키고, Brodcast Domain의 크기를 줄여서 Brodcast Traffic량을 줄이는 효과를 발생하여, 전체적으로 네트워크 성능을 향상시킴&lt;/li&gt;
&lt;li&gt;(A)는 접속 포트나 MAC(IP) Address 또는 Protocol을 이용하여 그룹화 하는 방식을 사용.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;51&quot;&gt;
&lt;li&gt;아래 &amp;#x3C;설명&gt;은 어떤 장비에 대한 설명인가 : &lt;code class=&quot;language-text&quot;&gt;스테커블 또는 스테커블 스위치&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;백플레인이 훨씬 빨라지고 연결된 장비중 하나가 고장 나도 다른 장비에 영향을 주지 않는 등의 많은 장점을 가지고 있다.&lt;/li&gt;
&lt;li&gt;즉, 혼자일때 보다 여러 대가 스택으로 연결되면 훨씬 더 좋은 성능을 발휘하도록 하는게 (이것)의 특징이다&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;52 ) OSI 7 Layer 에 맞는 &amp;#x3C;장비&gt;? : &lt;code class=&quot;language-text&quot;&gt;A(라우터), B(게이트웨이), C(리피터)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;53&quot;&gt;
&lt;li&gt;아래 &amp;#x3C;설명&gt;은 어떤 용어에 대한 설명인가?	: &lt;code class=&quot;language-text&quot;&gt;레이드&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(이것)은 중요한 데이터를 가지고 있는 서버에 주로 사용되며, 여러 대의 하드디스크가 있을 때 동일한 데이터를 다른 위치에 중복해서 저장하는 방법이다.&lt;/li&gt;
&lt;li&gt;데이터를 여러대의 디스크에 저장함에 따라 입출력 작업이 균형을 이루며 겹치게 되어 전체적인 성능이 개선된다.&lt;/li&gt;
&lt;li&gt;여러 대의 기스크는 MTBF를 증가시키기 때문에 데이터를 중복해서 저장하면 고장에 대비하는 능력도 향상된다&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;54 ) 네트워크 데이터를 무선으로 전파하는데 적당한 형태인, 신호로 변환하는 변조방식에 대한 &amp;#x3C;설명&gt;이다. &amp;#x3C;설명&gt;에 해당하는 용어는? : &lt;code class=&quot;language-text&quot;&gt;OFDM&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수백 개의 반송파를 사용하는 다반송파변조 방식&lt;/li&gt;
&lt;li&gt;반송파는 직교 관계에 있기 때문에 각 반송파의 주파수 성분이 서로 겹처 있어도 됨&lt;/li&gt;
&lt;li&gt;대역폭당 전송속도의 향상과 멀티패스 간섭의 방지를 위한 디지털 변조방식&lt;/li&gt;
&lt;li&gt;802.11b에서 지원하는 DSSS 기술보다 높은 대역폭을 지원하는 주파수 변조기법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;55&quot;&gt;
&lt;li&gt;DDos 공격에서 좀비PC들 끼리 형성된 네트워크를 무엇이라 하는가? &lt;code class=&quot;language-text&quot;&gt;봇넷(BOTNET)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;56 ) 아래의 &amp;#x3C;설명&gt;하는 용어는? :  &lt;code class=&quot;language-text&quot;&gt;홈 PNA&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가정에서 전화선을 이용하여 2대 이상의 컴퓨터들을 서로 공유할 수 있도록 하는 네트워킹 솔루션,&lt;/li&gt;
&lt;li&gt;전화선상의 방해 전파를 피할 수 있고, 신호는 집안에서 전화선을 통해 이동하기 때문에 외부 조건과 관계없이 신뢰성이 있으며 안전하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;57&quot;&gt;
&lt;li&gt;해당하는 RAID Level의 번호는? &lt;code class=&quot;language-text&quot;&gt;RAID-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;디스크 미러링 이라고도 한다.&lt;/li&gt;
&lt;li&gt;각 드라이브를 동시에 읽을 수 있어 읽기 성능이 좋다.&lt;/li&gt;
&lt;li&gt;쓰기 성능은 단일 디스크 드라이브의 경우와 같다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&quot;58&quot;&gt;
&lt;li&gt;Server Load Balancing 에서 가장 많이 사용되는 방식은? &lt;code class=&quot;language-text&quot;&gt;Round Robin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-케이블-문제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%BC%80%EC%9D%B4%EB%B8%94-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;3 케이블 문제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 케이블 문제&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;10분 안에 케이블 조립하는 문제.&lt;/p&gt;
&lt;p&gt;몇 년 연속 다이렉트 케이블만 출제되고 잇다.&lt;/p&gt;
&lt;p&gt;PC - Hub : 다이렉트 케이블&lt;/p&gt;
&lt;p&gt;PC - PC : 크로스 케이블&lt;/p&gt;
&lt;p&gt;Hub - Switch : 크로스 케이블&lt;/p&gt;
&lt;p&gt;다이렉트 케이블 - 양쪽 동일하게&lt;/p&gt;
&lt;p&gt;주띠 - 주 - 녹띠 - 파 - 파띠 - 녹 - 갈띠 - 갈&lt;/p&gt;
&lt;p&gt;크로스 케이블은 하나는 다이렉트로 하고 하나는 아래처럼&lt;/p&gt;
&lt;p&gt;녹띠 - 녹 - 주띠 - 파 - 파띠 - 주 - 갈띠 - 갈&lt;/p&gt;
&lt;p&gt;암기하는 방식은 주황색이랑 녹색은 바꾼다고 생각하고,&lt;/p&gt;
&lt;p&gt;주주녹파파녹갈갈을 적은 후 index 0부터 띠를 그려주면 끝.&lt;/p&gt;
&lt;p&gt;주 주 녹 파 파 녹 갈 갈&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 네트워크 관리사 2급 실기 요점 정리 - 라우터]]></title><link>https://jigglog.netlify.app/2020 네트워크 관리사 2급 실기 요점 정리 - 라우터/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 네트워크 관리사 2급 실기 요점 정리 - 라우터/</guid><pubDate>Fri, 01 Jan 2021 12:23:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;네트워크-관리사-2급-실기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B4%80%EB%A6%AC%EC%82%AC-2%EA%B8%89-%EC%8B%A4%EA%B8%B0&quot; aria-label=&quot;네트워크 관리사 2급 실기 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;네트워크 관리사 2급 실기&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;라우터&lt;/th&gt;
&lt;th&gt;케이블 제작&lt;/th&gt;
&lt;th&gt;Windows 2008 Server R2&lt;/th&gt;
&lt;th&gt;Linux&lt;/th&gt;
&lt;th&gt;TCP/IP 네트워크 장비&lt;/th&gt;
&lt;th&gt;신경향 및 보안&lt;/th&gt;
&lt;th&gt;합계&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;6.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;5.5&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;1-라우터-명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%9D%BC%EC%9A%B0%ED%84%B0-%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;1 라우터 명령어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 라우터 명령어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;설정 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;enable/en&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;관리자 모드로 -&gt; Router#&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;configure terminal/conf t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;관리자 모드에서 설정모드로 -&gt; Router(config)#&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;hostname 이름&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;호스트 이름 명명&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;login&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;로그인 명령&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;이전모드로 돌아감&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;end&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;무조건 관리자 모드로 돌아감&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;line console 0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;콘솔라인 모드 전환 명령&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;line vty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;텔넷 등 가상 터미널 전환 명령&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;enable password 암호명&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;관리자모드로 엑세스할 때 암호 설정(암호화되지 않고 저장)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;enable secret 암호명&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;관리자모드로 엑세스할 때 암호 설정(암호화되어 저장)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;erase startup-config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;라우터 설정 명령을 지우고 초기화&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;clock set 시간&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;장비의 시간을 설정할 때 사용&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;exec-timeout 시간&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;콘솔 종료대기 시간변경(exec-timeout 0 0: 종료시간 없음)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;copy r s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;라우터 셋팅 내용을 NVRAM에 저장&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;확인 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show clock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;라우터에 설정된 시간을 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;IOS의 버전정보 확인과 S/W, H/W정보 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show startup-config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;NVRAM 정보 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show config&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;라우터 장비설정의 저장내용을 확인하는 명령&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show run&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;설정된 인터페이스 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show ip interface brief&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;인터페이스 정보 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show history&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;사용했던 전체 명령어 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show ip route&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;라우팅 테이블 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show flash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;플래쉬 확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code class=&quot;language-text&quot;&gt;show process&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;프로세스 정보확인&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;2-예제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%98%88%EC%A0%9C&quot; aria-label=&quot;2 예제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 예제&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;호스트 이름을 ‘ICQA’로 설정하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#hostname ICQA&lt;/span&gt;

ICQA&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
ICQA&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 정보를 확인하고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#show interface&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;접속한 사용자를 확인하고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#show user&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;라우팅 테이블을 확인하고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#show ip route&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;플래쉬를 확인하고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#show flash&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;아래와 같이 Router 1의 FastEthernet 0 인터페이스를 설정하고, NVRAN에 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#int fa0/0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ip add 192.168.200.2 255.255.255.252&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ip directed-broadcast&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Serial 0의 대역폭을 2048k로 설정하고, NVRAM에 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#int s2/0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ban 2048&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Serial 0의 clock rate을 72k로 설정하고, NVRAM에 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#int s2/0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#clock rate 72000&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;FastEthernet 0의 description을 설정하고 NVRAM에 저장하시오.&lt;/li&gt;
&lt;li&gt;Description : ICQA&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#int fa0/0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#des ICQA&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;FastEthernet 0의 IP Address를 192.168.2.1/30과 192.168.3.1/30 Secondary로 설정하고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#int fa0/0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ip add 192.168.2.1 255.255.255.252&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ip add 192.168.3.1 255.255.255.252 secondary&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Default-Gateway를 설정하고, 저장하시오.&lt;/li&gt;
&lt;li&gt;IP : 192.168.0.10&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ip default-gateway 192.168.0.10&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Router1 Telnet에 접근하는 Password를 “TELPass”로 설정하고, 상태를 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#li v 0 4&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#password TELPass&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#login&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Telnet에 5분 50초 동안 신호가 없을 시 해당 세션을 자동으로 종료하도록 라우터를 설정하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#li v 0 4&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exec-t 05 50&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#login&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Router1 console의 패스워드를 ICQACon으로 설정하고, 저장하시오 (대소문자는 구분한다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#li c 0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#password ICQACon&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#login&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Router2의 Interface Serial 0을 활성화 시키고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#int s2/0&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#no sh&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-if&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Hostname을 network2로 변경하고, Console 0의 Password를 route5로 변경하고 login하라.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#host network2&lt;/span&gt;
network2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#li c 0&lt;/span&gt;
network2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#password route5&lt;/span&gt;
network2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#login&lt;/span&gt;

network2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config-line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
network2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
network2&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;domain-name을 ‘DOMAIN’으로 설정하고 저장하시오.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Router&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;en
Router&lt;span class=&quot;token comment&quot;&gt;#conf t&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#ip domain-name DOMAIN&lt;/span&gt;

Router&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#exit&lt;/span&gt;
Router&lt;span class=&quot;token comment&quot;&gt;#copy r s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[2020 리눅스 마스터 2급 2차 요점 정리 - 리눅스 일반]]></title><link>https://jigglog.netlify.app/2020 리눅스 마스터 2급 2차 요점 정리 - 리눅스 일반/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 리눅스 마스터 2급 2차 요점 정리 - 리눅스 일반/</guid><pubDate>Thu, 03 Dec 2020 12:21:00 GMT</pubDate><content:encoded>&lt;p&gt;RPM : Redhat package manager
자동설치/업그레이드/시스템 검증 가능
-i  설치(install)옵션
-e 지우기(erase)옵션
-v 상세내용 출력
-V 제대로 설치되었는지 검증
-U 업그레이드
-h 설치과정을 확인할수있도록 # 으로 표시&lt;/p&gt;
&lt;p&gt;rpm -qf &lt;file&gt; : file을 포함하고있는 패키지정보표시
rpm -qc : 패키지 내 설정 파일이나 문서파일, 스크립트확인
rpm -ql : 패키지의 모든 파일목록
rpm -qa : 설치된 모든 패키지의 목록
rpm -qi rpm : 특정 패키지의 정보를 출력한다.
rpm -q gcc : 간단하게 ‘q’ 옵션을 사용한다. 이 경우 패당 패키지가 설치되어 있을 경우 패키지의 버전, 릴리즈등이 나온다.
rpm -qf /usr/bin/dothefrob : 어떤 파일이 어느 패키지에 속하는지 알아낸다.
rmp -qpl SuperFrob-5.i386.rpm : 특정 패키지파일이 설치할 파일을 출력한다
rpm -Fvh ftp://url.rpm : ftp로 연결하여 원격으로 업그레이드하고자 할 때&lt;/p&gt;
&lt;p&gt;RPM 패키지 검증문자
5 : MD5 체크섬, M : 파일허가권, 파일형식모드
L : 심볼릭 링크, G : 그룹
S : 파일 크기, T : 파일최종변경시간
U : 사용자, D : 장치&lt;/p&gt;
&lt;p&gt;RPM 패키지 아키텍쳐
i386(intel), ia64(IA-64Itanium), alpha(digital 알파서버), ppc(power pc)
dfkg : 데비안 에서의 rpm 기능
dfkg —purge = rpm -e
dfkg —install = rpm -i&lt;/p&gt;
&lt;p&gt;리눅스 디렉토리 구조
/bin : 기본실행파일
/boot : 부팅시 필요한파일
/dev  : 각종장치
/etc : 시스템 관리시 필요한 설정파일
/home : 사용자 계정의 홈디렉토리
/lib : 각종 라이브러리가 저장
/mnt : 마운트 될 파일시스템의 마운트 포인터
/proc : 시스템 관리를 목적으로 멤모리상에 만들어놓은 가상 디렉토리
/root : 루트 사용자의 홈디렉토리
/tmp : 임시파일을 만들고 삭제하는 디렉토리
/var :가변 저장디렉토리, 자료 데이터가 변경될때 저장되는 디렉토리로 시스템 작동 기록들과 네트워크에 관련된 기록파일들, 보안 기록을 저장하고 메일서버를 운영하는 경우 메일을 받아 저장.
/proc : 시스템 관리를 목적으로 메모리상에 만들어 놓은 가상 디렉토리로, 디렉토리 안의 파일들은 현재 시스템 설정을 보여줌
/sbin : 시스템 점검 및 복구명령, 네트워크 인터페이스 설정명령, 시스템 초기 및 종료명령, 커널 모듈 등 시스템 관리에 관련된 실행 파일들이 포함.
/usr : 시스템이 정상적으로 가동되는 데 필요한 모든 명령들과 라이브러리.  매뉴얼 파일들&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/include 라는 디렉토리는 없는 디렉토리다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;/etc/services : domain 54/tcp 등 내용 확인, 서버 포트 정의되어있음&lt;/p&gt;
&lt;p&gt;쉘SHELL
사용자가 내린 명령을 해석/실행, 사용중 다른쉘로 변경가능 , 스크립트작성하여 배치로 실행가능
쉘명령어해석기와 같은 스타일은 php
/ect/profile : 시스템 전체에 영향을 미치는 환경설정과 시작관련 프로그램설정
/etc/profile.d : 몇몇 응용프로그램을위한 시작 스크립트들이 위치하는 디렉토리
/etc/bashrc : 시스템 전체에 영향을 미치는 함수와 alias 설정
~/.bashrc : 각 사용자가 자신만의 앨리어스를 저장
~/bash&lt;em&gt;profile : 개인 사용자가 로그인할 때 수행하는 설정파일, 사용자에 대한 PATH 환경변수
~/bashrc : bash 쉘에 대한 기본 환경변수와 alias가 설정
~/bash&lt;/em&gt;history : bash 쉘에서 사용한 명령어 기록
/etc/shells : 현재 시스템에서 사용가능한 쉘목록&lt;/p&gt;
&lt;p&gt;쉘변수
SHELL : 현재쉘 이름
TZ : date 명령에 대한 시간대
TERM : 사용중인 터미널 유형&lt;/p&gt;
&lt;p&gt;chsh : 쉘변경명령어 = exec csh = csh= chsh -s /bin/csh
bash : GNU 프로젝트 일환으로 적상됨, Bourn Agai Shell, tab키를 이용한 명령완성기능, 명령어 히스토리기능, 앨리어스 기능 ( * 작업자동저장기능 없음)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bash 쉘로 변경명령 = /bin/bash = chsh -s /bin/bash = /etc/passwd 파일수정
?  단일문자와 일치하는 파일치환문자&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0개이상의 문자외 일치하는 치환문자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;파일 리다이렉션
파이프 : 프로그램의 표준 출력을 다른 프로그램의 표준입력으로 보낼때 사용&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ksh , tch, zsh&lt;/p&gt;
&lt;p&gt;chgrp 소유그룹변경 -R 하위까지
chown 소유자변경  -R 하위까지
chown -v : 명령의 결과를 자세히
chown -c
chmod -R : 소유권 변경
umask 027 : 새로 만들어지는 파일에 그룹은 쓰기원한이없고, 타인은 모든 권한이 없도록 하기위한 설정문(순서는 소유자, 그룹, 타인)&lt;/p&gt;
&lt;p&gt;FDISK / MKFS / FSCK
fdisk :파티션 관리, 파티션 생성명력
mkfs : make file system
fsck : file system check 파일시스템점검, 사용자가 지정하는 유형과 일치하는 파일시스템 점검, 점검하기전에 파일시스템은 umount해야함, 루스파일시스템을 점검하려면 별도의 부팅디스켓또는 cd로 부팅하여야함.
fsck -l ” 파일시스템에 있는 모든 파일명 나열
fsck -s : 파일시스템을 점검하기 전 슈퍼블럭 나열
fsck -t : 점검할 파일 시스템 유형지정&lt;/p&gt;
&lt;p&gt;리눅스에서 새하드디스크 추가과정
= 파티션생성 fdisk &gt; 파일시스템생성 mkfs &gt; 마운드 mnt&lt;/p&gt;
&lt;p&gt;저널링 파일 시스템 : 파일 복구와 관련, 저널링 파일시스템으로는  XFS , JTF, ReiserFS, Ext3Fs 등이 있다.&lt;/p&gt;
&lt;p&gt;whatis : 리눅스 명령어의 설명을 간단히 보여줌&lt;/p&gt;
&lt;p&gt;xinetd : 자신은 메모리에 상주하여 대기하다가 서비스요청을 받으면 해당 서비스 프로그램을 구동시켜 서비스를 제공하는 데몬으로 인터넷 슈퍼데몬으로 불림
데몬 deamon : 프로세스중에서 background로 항상 실행되면서 서버의 역할을 하거나 그 기능을 도와주는 프로세서&lt;/p&gt;
&lt;p&gt;DF/ DU
DU : 현재디렉토리를 포함하여 하위에 있는 디렉토라 파일용량까지 한꺼번에 보여줌
du - s : 디렉토리의 총용량 출력
DF : 파일 시스템의 사용한 용량과 사용가능한 디스크용량 정보
df -Th
df -k : 파일시스템의 크기를 킬로바이트 단위로
df -i : 블록 사용 정보대신 I-node정보를 보려면
df -a : 파일 시스템의 크기가 0인것도 표시
df -c : 마지막에 모든 파일 디스크의 사용량을 보여줌.
i-node : 파일의 소유주, 권한, 시간, 디스크에서의 위치 등 정보를 담은 특별한 종류의 디스크 블록&lt;/p&gt;
&lt;p&gt;AT : 작업시간 지정
at -l 큐에있는 작업리스트출력
at -m 실행결과를 메일로
at -d 작업을 삭제
at -r 작업번호 ; 큐에서 해당작업 삭제&lt;/p&gt;
&lt;p&gt;프로세스 : 실행중인 프로그램, 커널은 자신에게 등록된 프로세스를 관리하기 위하여 프로세스마다 하나씩 PCB를 할당, 프로세스의 실행은 프로세스가 CPU를 차지하고있을때&lt;/p&gt;
&lt;p&gt;프로세스 시그널
3 : QUIT 실행종료
9 : KILL 무조건 종료
15 : TERM 가능한한 정상종료
SIGHUP(HUP) 프로세스재시작
SIGHNT(INT) 프로세스 인터럽트= ctrl+c
SIGTERM(TERM) 프로레스 정상종료
SIGKILL(KILL)  프로세스 강제종료
kill : 프로세스에게 시그널을 보낼때 사용하는 명령&lt;/p&gt;
&lt;p&gt;TOP / PS / PSTREE / JOBS
TOP : 프로세스의 상태와 CPU사용률을 실시간으로
TOP -P : CPU 사용률에 따라서 정렬
TOP결과중
S sleeping, R: running,
Z: Zombi T:Stoppted or traced,
D: uninterrupted sleeping
top -h : top 명령어에 대한 help
top -m : 메모리와 관련된 항목을 on/off
top -r : 지정한 프로세스의 nice 값을 재조정
top -k : 지정한 프로세스에 시그널을 보냄
top - P : cpu사용률에 따라 정렬&lt;/p&gt;
&lt;p&gt;PS : 현재 프로세스
ps - f : 프로세스 상태중 PPID 확인
PS 명령 결과 중 PPID는 부모프로세스의 PID, PID 프로세스 식별번호, STAT 프로세스 현재상태, %CPU cpu 사용비율추정치, RSS 실제메모리사용량
ps -aux : 프로세스식별번호, 프로세스현재상태, 프로세스시작시간
PSTREE : 프로세스를 계층적 트리구조(부모자식관계)로 출력
JOBS : 수행중 프로세스, suspend 모드로 대기하고있는 프로세시의 정보 확인시 사용.&lt;/p&gt;
&lt;p&gt;NICE : 프로세스의 우선순위를 부여
RENICE : 프로세스의 우선순위를 조정할 때 사용&lt;/p&gt;
&lt;p&gt;FG : 지정된 작업을 fore ground로
명령실행시 &amp;#x26;를 붙이면 back ground로 작업함 예) fg &amp;#x26;5
Ctrl +Z: 동작중인 프로세스를 suspend(메모리에 올라있지만 정지된 상태) 이때 프로세스 상태는 TSTP&lt;/p&gt;
&lt;p&gt;NOHUP : 사용자가 로그아웃하거나 터미널창을 닫아도 해당프로세스를 백그라운드로 전환하여 계속작업수행&lt;/p&gt;
&lt;p&gt;CRONTAB
1번째 필드 : 분
2번째 : 시
3번째 : 일
4번째 : 월
5번째 : 요일
6번째 : 실행될 명령어내용&lt;/p&gt;
&lt;p&gt;00 03 * * * &amp;#x3C;명령어&gt;
0분 3시 매일 매월 매주 명령어실행&lt;/p&gt;
&lt;p&gt;VI / EMACS / pico : 화면 에디터
vi : ex 모드/  명령모드 / 입력모드
vi 중 :e! 수정한 것 모두 무사하고 다시 편집상태로
vi 입력모다
I : 현재줄의 앞에 삽입,  I : 현재 커서위치
A : 현재줄의 끝          a :  현재커서 뒤에 삽입
O  : 현재줄의 두이에     o : 현재줄의 아래
명령모드 u :vi 에디터를 실행중 작업내용을 이전으로 .
EX모드 dG : 커서가 위치한 곳부터 그파일의 마지막까지 삭제
EX모드 dd : 커서 위치한 한줄삭제
n(숫자)x : 현재 커서부터 n 개만큼 문자삭제
vi 편집중 유닉스명령을 실행시키려면 ! 유닉스명령
vi +/문자열 파일 : 파일을 열면서 바로 문자열있는위치로
vi -R : 읽기전용으로
emacs : 비모드형편집기로 텍스트편집 및 컴파일, 강력한 도움말
C-d : emacs삭제명령중 한글자만 삭제
Alt+e 문장 끝으로 이동
Alt+a 문장 처음으로 이동
Ctrl+e 라인 끝으로 이동
pico : 현재커서위치에 tab 삽입, Ctrl - I&lt;/p&gt;
&lt;p&gt;파일 압축
compress ↔ uncompress
bzip2 : 뛰어난 압축률, 시간은 오래걸림. 압축해제시 -d 플래그 사용 ↔ bunzip2
gzip ↔ gzip -d
dir1.tgz 압축풀는 방법 = gzip -d dir1.tgz = gunzip dir1.tgz | tar xvf - = tar xvzf dir1.tgz
gzip 으로 압축한 파일의 내용을 보기위한 명령어 = zmore, zless, zcat
tar와 bzip2를 동시에 = tar -cjvf
tar -cvfz ↔ tar -xvzf &lt;/p&gt;
&lt;p&gt;모듈
/etc/modprobe.conf : 부팅시 랜카드, 사운트 카드 등의 드라이버(모듈)이 자동으로 커널에 적재되게 설정하는 파일
/lib/modules/&amp;#x3C;커널버젼&gt;/kernel/dirvers : 커널에서 사용하기 위해 부팅시 메모리에 적재하는 각종 하드웨어 모듈이 저장되어있는 디렉토리&lt;/p&gt;
&lt;p&gt;lsmod : 적재된 모듈의 리스트출력
insmod : 동작중인 커널에 모듈적재
rmmod : 모듈을 커널에서 제거&lt;/p&gt;
&lt;p&gt;리눅스에서 CD ROM 장치 디바이스/dev/hdc를 /mnt/cdrom으로 마운트하는 명령 : mount -t iso9660 /dev/hdc /mnt/cdrom&lt;/p&gt;
&lt;p&gt;하드링크 : 원본파일과 inode값이 같고, 동일한 파일시스템내에서 링크가능
소프트링크 : 디렉토리도 심볼릭링크로 가능, 원본파일이 삭제되면 사용불가, 다른 파일시스템에서도가능&lt;/p&gt;
&lt;p&gt;리눅스에서의 프린터 사용방식
Local
Unix printer
samba printer
Remote lpd
JecDirect&lt;/p&gt;
&lt;p&gt;/etc/printcap : 프린터 설정파일
ihd.txt파일을 lp0로 프린터 출력 = cat ihd.txt | lpr = cat ihd.txt &gt; /dev/lp0 = pr -l 5 ihd.txt | lpr&lt;/p&gt;
&lt;p&gt;LP 리눅스 프린터 명령 인쇄시작
lprm : 프린터큐에 대기중인 작업을 삭제, 모든작업삭제
lpq : 프린터큐에 있는 목록출력
lpc : 프린터 현재작업 관련사항 출력
lpd : 프린터 데몬
lpr : 인쇄 관련 초기화프 제어권을 lpd 데몬에게 넘김&lt;/p&gt;
&lt;p&gt;리피터/ 라우터 / 게이트웨이/ 브릿지
리피터 : 장거리 전송을 위하여 신호를 새로이 재생하거나 출력을 높여주는 장치
게이트웨이 : 프로토콜이 서로다른 통신망을 연결할 때
브릿지 : 근거리 통신망 연결. 통신망의 범위과 길이를 확장할 때 사용, 과다하게 연결된 컴퓨터들로 인한 병목현상을 줄이고자 할때 사용, 이더넷과 토큰 링 같은 서로 다른 구조의 통신망
라우팅 테이블 : 목적지호스트가 로컬네트워크에 있으면 데이터는 목적지 호스트로전달, 목적지 호스트가 원격네트워크에 있으면 데이터는 로컬 게이트웨이로전달, 패킷들은 라우팅 테이블에 지시한 목적지대로 경로 지정.
route 명령 : 라우팅 엔트리를 추가 또는 삭제, 케이트웨이를 추가또는 삭제, 특정 넷마스크를 설정&lt;/p&gt;
&lt;p&gt;/etc/resolv.conf : DNS서버 변경시 수정해야하는 파일&lt;/p&gt;
&lt;p&gt;NETSTAT
네트워크의 연결된 상태나 활성화된 소켓등을 확인
시스템에 설정되어있는 게이트웨이를 확인&lt;/p&gt;
&lt;p&gt;IFCONFIG
네트워크 인터페이스의 브로드캐스트, 맥어드레스, 넷마스크 정보, 이더넷 네트웤스 인터페이스에 IP 주소설명명령&lt;/p&gt;
&lt;p&gt;SSH 기본 포트 22번
원격지 서버의 내용을 로컬시스템에 복사가능.
rsh처럼 원격으로 쉘명령어 사용가능
telnet과 같이 원격지 서버에 접속가능
https는 80번, SMTP는 25번, POP3은 110번
/etc/service에 서버포트 정의됨&lt;/p&gt;
&lt;p&gt;LAN : 근거리 통신망, 낮은 오류율에 의한 고속 데이터 전송 가능.&lt;/p&gt;
&lt;p&gt;네트워크토폴로지 : 성형, 버스형, 링평
버스형 토폴로지 : 단방향통신, 노드는 동등, CDMA/CD 방식이 대표적, 토큰패싱방식에 사용, 가장 일반적
패킷 : 정보를 일정 크기로 분할, 각각에 송수신 주소를 부가하여 만든 데이터 블록을 의미, 패킷간 상호간섭을 최소화 하면서 망을 경유하여 이동&lt;/p&gt;
&lt;p&gt;패킷교환방식 : 패킷 전송은 고정된 물리적 연결은 없으며 데이터 전송에 적합.
회선교환방식 : 전체전송을 위해 전송로를 설립, 고정대역폭 사용, 호출후 오버헤드비트가 없다.&lt;/p&gt;
&lt;p&gt;OSI Open System Interconnect 7계층
-의 참조모델과 프로토콜주관 기관은 ISO
물리계층 : SCSI 물리 전기적 신호체계 정의, 토큰링 FDDO
데이터링크계층 : ethernet 흐름/오류/접근제어
네트워크계층:IP, ARP, ICMP 송/수신자 패킷전송
전송계층(transport layer) : TCP UDP
*TCP :접속기반 프로토콜, 바이트스트림 프로토콜
*UDP : 불안정한 비접속 데이터그램 프로토
세션계층: 대화제어자로 상호작용을 설정 유지, 동기화역할 수행, 사용자의 연결이 유효한 지를 확인하고 설정
표현계층 : 각종 프로토콜 정의
응용계층 : TELNET, FTP, HTTP, SMTP, 응용프로그램간 통신
(물리-데이터-네트워크-전송-세션-표현-응용)&lt;/p&gt;
&lt;p&gt;PPP : 모뎀 전화선 SLIP&lt;/p&gt;
&lt;p&gt;SMPT : 이메일을 보낼때 제일 많이 사용하는 프로토콜
프로토콜  구성요소 : 구문, 의미, 순서.타이밍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주소, 에러제어는 프로토콜에 해당안됨
프로토콜의 기본 기능 : sequencing/ ordering, flow control, interrupt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VoIP : IP를 이용하여 음성정보를 전달하는 일련의 설비들을 위한 기술.&lt;/p&gt;
&lt;p&gt;NFS : 네트워크상 다양한 호스트들이 파일을 공유할수 있도록 해주는 프로토콜&lt;/p&gt;
&lt;p&gt;FTP 21 번
FTP에서 파일송수신시 전송상태 확인 - hash
ftp 클라이언트프로그램 : ncftp, lftp, gftp&lt;/p&gt;
&lt;p&gt;TCP/IP : 개방형 프로토콜 표준, 특정 하드웨어나 OS에 관계없이 자유롭게 사용가능, 일관성있고 널리 사용가능한 사용자서비스를 위해서 표준화된 하이레벨의 프로토콜, 공통적인 주소체계 인터넷과 같은 거대네트워크에서도 TCP/IP장치를 유일하게 찾아낼 수 있는 공통적인 주소체계&lt;/p&gt;
&lt;p&gt;C 클래스에서 호스트개수를 64개로 설정시
255.255.255.192&lt;/p&gt;
&lt;p&gt;TELNET  23번 : 명령을 사용할 수 있는 가상터미널(VT)기능
디렉토리생성가능, 파일삭제가능, 실행파일실행가능
파일다운로드는 안됨&lt;/p&gt;
&lt;p&gt;127.0.0.1 = loopback = localhost : 자신에게 연결할수 있도록 해주는 특별한 인터페이스로 네트워크의 다른 사람을 방해하지 않고 실험가능&lt;/p&gt;
&lt;p&gt;HTTPD : service httpd restart : 웹서버 재시작.&lt;/p&gt;
&lt;p&gt;리눅스 웹 접속용 브라우저 : Netscape, Opera, Konqueror, 파이어폭스(fire fox)&lt;/p&gt;
&lt;p&gt;블루투스 : 근거리 무선 쌍방향 실시간 통신, 간섭방지를 위한 주파수 호핑방식 사용
HCI : 블루투스 모듈과 host간의 중개연결담당 프로토콜&lt;/p&gt;
&lt;p&gt;유비쿼터스 : 언제 어디서나  존재한다.&lt;/p&gt;
&lt;p&gt;Xen : 물리적으로 하나의 시스템에 여러 운영제체를 설치가능한 ,  리눅스에서 사용하는 가상화 소프트웨어&lt;/p&gt;
&lt;p&gt;Beowulf Cluster : 패러다임의 평이함과 구성의 용이함, 오픈소스 운영체제 선택, 대규모 시장을 대상으로 판매되는 하드웨어를 기본으로 제작됨, CPU 연산속도를 높이기위하여 여러대의 시스템을 병렬로 구성. 한대의 메모리로 다루수없는 대용량 데이터 문제 처리, 여러대의 컴퓨터를 연결하여 슈퍼컴퓨터 구성시 사용하는 기법&lt;/p&gt;
&lt;p&gt;X윈도우&lt;/p&gt;
&lt;p&gt;/etc/inittab 부팅시 레벨설정
id:5:initdefault : 부팅시 X윈도우모드로 부팅
0 : 시스템중지,  1 : 단일사용자관리자만로긴,
2 : NFS 제외 다중사용자, 3 : 다중사용자(콘솔)
4 : 사용안함 , 5 : X윈도우모드
6 : 리부팅&lt;/p&gt;
&lt;p&gt;ctrl + alt + F7 : X윈도우에서 가상터미널을 사용하기 위하여 콘솔로 전환하였다가 다시 X윈도우로 복귀하는 명령&lt;/p&gt;
&lt;p&gt;X윈도우 스크립트 구동순서
xinitrc &gt; .Xrecources &gt; .Xmodmap &gt; Xclients
X윈도우시스템
프로그램 작성시 다른컴퓨터에서 구동될수있을정도로 이식정 뛰어나다
사용자가 원하는 모양의 인터페이스를 만들수있음
서도 다른 기종을 함께 사용가능&lt;/p&gt;
&lt;p&gt;startx : text 환경으로 부팅한 후 X window를 구동하는 명령어
ctrl + alt + backspace : X윈도우 강제종료&lt;/p&gt;
&lt;p&gt;데스크톱 환경
KDE와 GNOME은 단순히 윈도우의 외관을 관리해주는 윈도우매니저가 아니라. 데스크톱환경이라부른다. 데스크톱 환경은 윈도우매니저를 포함하여, 파일매니저, 도움말 시스템, 제어판,바탕화면 등의 다양한 도구를 제공하고 있다.
KDE :
리눅스, 유닉스 솔라리스등에서도 사용가능
파일매니저, 윈도우매니저, 설정시스템, 각종 애플리케이션 집합체
노르웨이 Troll Tech사에서 개발
패털, 태스크바, 데스크톱으로 구성
GNOME : GNU Network Object Model Environment
GTK+라이브러리 기반으로 작성,패널, 표준데스크톱, 응용프로그램과 서로 협동동작&lt;/p&gt;
&lt;p&gt;/etc/sysconfig/desktop : .Xclinets 스크립트가 어떤 데스크톱환경을 사용할지 찾아서 실행시키는 파일&lt;/p&gt;
&lt;p&gt;X윈도우매니저
X윈도우시스템의 형태를 갖추어주는 프로그램
X 인터페이스 모양과 느낌 결정
윈도우를 특정화면 위치에 놓는 것, 윈도우 크기 변화/아이콘화/이동 등의 인터페이스 제공, 윈도우 테두리의 외양을 다루는 일등을 담당
대표적으로 fvwm, twm, mw, windowmaker, afterstep(fvwm을 기반으로), enlignment
윈도우메이커 windowmaker : 오른쪽에 나타나는 아이콘을 도크라하며 도크밑에 점의 유무로 실행여부파악가능, 사용자가 드래그앤드롭으로 도크 위치설정가능, 도크에 설정된 아이콘 제거가능, 오른쪽 마우스를 누르면 기본메뉴와 응용소프트웨어가 들어있어 편리&lt;/p&gt;
&lt;p&gt;리눅스용 그래픽환경
GIMP : 리눅스용 포토샵, xv,xmms&lt;/p&gt;
&lt;p&gt;리눅스에서 음악재생
XMMS , BMP, REal Player&lt;/p&gt;
&lt;p&gt;리눅스 동영상 재생 : mplayer, realplayer, xine&lt;/p&gt;
&lt;p&gt;리눅스 사운드 관련 드라이버 유틸리티
ALSA 드라이버, OSS　드라이버, sndconfig , OSS/Free&lt;/p&gt;
&lt;p&gt;IRC : 인터넷상 채팅, 실시간 대화가능 클라이언트/서버모델의 서비스&lt;/p&gt;
&lt;p&gt;xv : X윈도우 그래픽 뷰어 프로그램.&lt;/p&gt;
&lt;p&gt;Xlib 와 Xtoolkit 관련 부분.&lt;/p&gt;
&lt;p&gt;스타 토폴로지 = 중앙에 위치한 컴퓨터가 각 컴퓨터와 통신하는 방식으로 중앙의 제어기(허브 또는 교환기)를 중심으로 모든 기기는 포인트 투 포인트 형태로 연결하는 통신망 구조&lt;/p&gt;
&lt;p&gt;버스 토폴로지 = 하나의 통신회선에 컴퓨터(노드)를 접속하는 형태이고 신호 반사에 의한 상호 간섭을 막기 위해 종단기(Terminator)가 존재&lt;/p&gt;
&lt;p&gt;링 토폴로지 = 고속의 네트워크가 필요하면서 네트워크 환경을 자주 바꾸지 않을 경우 구성하면 좋은 토폴로지&lt;/p&gt;
&lt;p&gt;망(Mesh) 토폴로지&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;IP와 도메인 : ICANN&lt;/p&gt;
&lt;p&gt;전기 전송 표준 = EIA&lt;/p&gt;
&lt;p&gt;OSI 프로토콜 = ISO&lt;/p&gt;
&lt;p&gt;LAN의 접속규격과 처리에 대한 표준 : IEEE&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;게이트웨이 = 컴퓨터 네트워크에서 서로 다른 통신망, 프로토콜을 사용하는 네트워크 간의 통신을 가능하게 하는 장치로 일종의 입구역할을 하는 것&lt;/p&gt;
&lt;p&gt;라우터 = LAN과 LAN을 연결하거나 LAN과 WAN을 연결하기 위한 장치로 최적의 경로를 설장하는 역할&lt;/p&gt;
&lt;p&gt;리피터 = 디지털 방식의 통신선로에서 전송신호를 재생하여 전달하는 전자통신 장치&lt;/p&gt;
&lt;p&gt;브리지 = 두 개의 근거리 통신망을 상호 접속해 주는 통신망 연결 장치&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A Class = 1 ~ 127&lt;/p&gt;
&lt;p&gt;B Class = 128 ~ 191&lt;/p&gt;
&lt;p&gt;C Class = 192 ~ 223&lt;/p&gt;
&lt;p&gt;D Class = 224 ~ 239&lt;/p&gt;
&lt;p&gt;E Class = 240 ~ 255&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;POP3 = 메일 받기&lt;/p&gt;
&lt;p&gt;DHCP : Dynamic Host Control Protocol&lt;/p&gt;
&lt;p&gt;SLIP, PPP = 모뎀과 전화선을 이용하여 인터넷을 이용할 경우에 관계가 깊은 프로토콜&lt;/p&gt;
&lt;p&gt;IGMP : 인터넷 그룹 관리 프로토콜 (IPTV에서 사용)&lt;/p&gt;
&lt;p&gt;ICMP : 인터넷 제어 관리 프로토콜 (오류 관리 메시지)&lt;/p&gt;
&lt;p&gt;SNMP : TCP/IP 네트워크 관리 프로토콜&lt;/p&gt;
&lt;p&gt;IMAP : 이메일 관련(POP3와 달리 가져온 이후 남겨두었다 삭제 가능)&lt;/p&gt;
&lt;p&gt;SCP : Secure copy : 네트워크 상의 다른 호스트에 파일 복사&lt;/p&gt;
&lt;p&gt;RDP : Remote Destop Protocol&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;게이트웨이 주소값 확인 : route , netstat&lt;/p&gt;
&lt;p&gt;도메인의 IP주소 확인 : nslookup, dig&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;/etc/sysconfig/network : 네트워킹 사용여부, 게이트웨이, IPv6, 호스트네임 설정 -&gt; 재부팅했을 때 수정해줘야하는 파일&lt;/p&gt;
&lt;p&gt;/etc/sysconfig/network-scripts/ifcfg-eth0 : 이더넷 카드에 할당되는 IP주소를 확인&lt;/p&gt;
&lt;p&gt;/etc/hosts : host 이름을 IP 주소에 매핑&lt;/p&gt;
&lt;p&gt;/etc/named.conf : 네임서버 데몬이 시작되면서 가장 먼저 읽어들이는 설정 파일&lt;/p&gt;
&lt;p&gt;/etc/fstab : 파일 시스템 관련&lt;/p&gt;
&lt;p&gt;/etc/login.defs : 메일 관련 설정파일 (디렉토리, PW등)&lt;/p&gt;
&lt;p&gt;/etc/sysctl.conf : 커널의 매개변수 설정&lt;/p&gt;
&lt;p&gt;/etc/inittab : 어떤 형태로 시스템을 부팅할지 설정하는 파일 &lt;/p&gt;
&lt;p&gt;/etc/host.conf : 사용자가 호스트 정보를 요청하였을 때 host파일 먼저할지 bind(dns 서버 소프트웨어) 먼저할지 설정하는 파일&lt;/p&gt;
&lt;p&gt;/etc/networks : 도메인 이름을 네트워크 주소에 매핑&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;xmms : MP3&lt;/p&gt;
&lt;p&gt;gimp : 이미지 편집&lt;/p&gt;
&lt;p&gt;sane : 스캐너&lt;/p&gt;
&lt;p&gt;ghostscript : 포스트 스크립트 파일을 일반 프린터에서 출력하고자 할 때 설치해야할 프로그램&lt;/p&gt;
&lt;p&gt;xv : 이미지 뷰어&lt;/p&gt;
&lt;p&gt;Mplayer : 동영상&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;aplay : ALSA 드라이버 표준 플레이어&lt;/p&gt;
&lt;p&gt;alsamixer , amixer : alsa mixer&lt;/p&gt;
&lt;p&gt;alsactl : ALSA 제어하는 명령&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;프린터 데몬&lt;/p&gt;
&lt;p&gt;LPGng : lpd 프로토콜 사용&lt;/p&gt;
&lt;p&gt;cups : IPP(Internet Printing Protocol) 사용&lt;/p&gt;
&lt;p&gt;samba : SMB(Server Message Block) 프로토콜 사용&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;lpr (인쇄 작업을 대기 행렬에 추가) 관련 옵션&lt;/p&gt;
&lt;p&gt; -P : 프린터 지정&lt;/p&gt;
&lt;p&gt; -p : pr 명령을 사용하여 파일 포맷&lt;/p&gt;
&lt;p&gt; -r : 프린트 완료하면 파일 삭제&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;gzip 관련 옵션 &lt;/p&gt;
&lt;p&gt; -d : 압축을 푼다&lt;/p&gt;
&lt;p&gt; -l : 현재 압축된 파일의 내용을 보여준다&lt;/p&gt;
&lt;p&gt; -v : 압축 진행 상황을 보여준다&lt;/p&gt;
&lt;p&gt; -t : 압축 파일 테스트&lt;/p&gt;
&lt;p&gt; -1 : 가장 빠른 압축 방법&lt;/p&gt;
&lt;p&gt; -9 : 가장 느린 압축 방법이지만 최대한 압축한다.&lt;/p&gt;
&lt;p&gt; -6 : 기본 압축 레벨&lt;/p&gt;
&lt;p&gt; -c : 압축 결과를 출력하고 원본파일은 그대로 둠&lt;/p&gt;
&lt;p&gt; -h : 도움말 출력&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;tar 관련 옵션&lt;/p&gt;
&lt;p&gt; -t : 파일의 내용을 확인&lt;/p&gt;
&lt;p&gt; -c ; 묶기&lt;/p&gt;
&lt;p&gt; -z : gzip으로 압축/해제&lt;/p&gt;
&lt;p&gt; -x : 풀기&lt;/p&gt;
&lt;p&gt; -r : 이전에 생성된 아카이브에 추가로 파일 추가&lt;/p&gt;
&lt;p&gt; -f : 파일명 지정&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;vi 관련 옵션&lt;/p&gt;
&lt;p&gt; 0 ; 줄이 시작하는 첫 칸으로 이동 (행의 시작)&lt;/p&gt;
&lt;p&gt; $ : 줄이 끝나는 마지막 칸으로 이동 (행의 끝)&lt;/p&gt;
&lt;p&gt; Ctrl + F : 한 화면 아래로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + B : 한 화면 위로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + D : 반 화면 아래로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + U : 반 화면 위로 이동&lt;/p&gt;
&lt;p&gt; i : 커서 위치 앞에서 삽입&lt;/p&gt;
&lt;p&gt; a : 커서 위치 뒤에서 삽입&lt;/p&gt;
&lt;p&gt; o : 현재 줄의 아래에 전개&lt;/p&gt;
&lt;p&gt; O : 현재 줄의 위에 전개&lt;/p&gt;
&lt;p&gt; h : 커서를 한 칸 왼쪽으로 이동&lt;/p&gt;
&lt;p&gt; j : 커서를 한 줄 아래로 이동&lt;/p&gt;
&lt;p&gt; k : 커서를 한 줄 위로 이동&lt;/p&gt;
&lt;p&gt; l : 커서를 한 칸 오른쪽으로 이동&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;emacs 관련 옵션&lt;/p&gt;
&lt;p&gt; Ctrl + a : 라인 처음으로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + e : 라인 끝으로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + v : 한 화면 앞으로 이동&lt;/p&gt;
&lt;p&gt; Alt + v : 한 화면 뒤로 이동&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ps 관련 옵션&lt;/p&gt;
&lt;p&gt; -e : 모든 프로세스 출력 (-A)&lt;/p&gt;
&lt;p&gt; e : 명령문이 실행된 후 프로세스 환경변수를 출력&lt;/p&gt;
&lt;p&gt; -a : 모든 사용자의 프로세스 출력&lt;/p&gt;
&lt;p&gt; -f : full-format list (절대 경로 출력)&lt;/p&gt;
&lt;p&gt; f : 프로세스 간 상속관계를 트리구조로 출력&lt;/p&gt;
&lt;p&gt; -j : 작업에 관련된 ID를 출력한다&lt;/p&gt;
&lt;p&gt; n: 사용자의 정보를 ID와 숫자로 표시한다.&lt;/p&gt;
&lt;p&gt; PID : 프로세스 식별 번호&lt;/p&gt;
&lt;p&gt; PPID : 부모프로세스 식별 번호&lt;/p&gt;
&lt;p&gt; VSZ : 가상 메모리 사용량&lt;/p&gt;
&lt;p&gt; RSS : 실제 메모리 사용량&lt;/p&gt;
&lt;p&gt; TIME : 프로세스에서 사용한 CPU 시간&lt;/p&gt;
&lt;p&gt; START : 프로세스 생성 시간&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;HUP = 1&lt;/p&gt;
&lt;p&gt;INT = 2 (CTRL + C)&lt;/p&gt;
&lt;p&gt;QUIT = 3 (CTLR + )&lt;/p&gt;
&lt;p&gt;KILL = 9&lt;/p&gt;
&lt;p&gt;SEGV = 11&lt;/p&gt;
&lt;p&gt;TERM = 15&lt;/p&gt;
&lt;p&gt;TSTP = 20 (CTRL + Z)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;프로세스 상태&lt;/p&gt;
&lt;p&gt; Z : Zombie&lt;/p&gt;
&lt;p&gt; S : Sleep&lt;/p&gt;
&lt;p&gt; D : 입출력 대기 상태&lt;/p&gt;
&lt;p&gt; X : 죽은 프로세스&lt;/p&gt;
&lt;p&gt; T : 정지상태(suspend)&lt;/p&gt;
&lt;p&gt; W : Swap out 된 상태&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;history&lt;/p&gt;
&lt;p&gt; -h : 번호없이 출력&lt;/p&gt;
&lt;p&gt; -r : 최근 기록에서 출력&lt;/p&gt;
&lt;p&gt; !문자열 : 문자열로 시작하는 가장 최근 명령어 실행&lt;/p&gt;
&lt;p&gt; ^문자열1^문자열2^ : 최근 사용 명령어 중 문자열1이 들어가는 명령어를 찾아서 문자열1을 문자열2로 치환하여 실행&lt;/p&gt;
&lt;p&gt; !! : 바로 전에 사용했던 명령어 재실행&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;rpm 관련 옵션&lt;/p&gt;
&lt;p&gt; -U : 업데이트&lt;/p&gt;
&lt;p&gt; -i : 설치&lt;/p&gt;
&lt;p&gt; -e : 제거&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ping 관련 옵션&lt;/p&gt;
&lt;p&gt; -s : 데이터 크기(size)&lt;/p&gt;
&lt;p&gt; -i : 패킷 지연 시간 설정(idle)&lt;/p&gt;
&lt;p&gt; -c : 보낼 패킷 수 지정(count)&lt;/p&gt;
&lt;p&gt; -q : 종합 결과 출력&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;bash쉘 단축키&lt;/p&gt;
&lt;p&gt; Ctrl + a : 줄의 처음으로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + e : 줄의 끝으로 이동&lt;/p&gt;
&lt;p&gt; Ctrl + l : 화면 클리어&lt;/p&gt;
&lt;p&gt; Ctrl + r : 히스토리 찾기&lt;/p&gt;
&lt;p&gt; &amp;#x26;&amp;#x26; : 앞의 명령어가 실행 성공하면 뒤의 명령어 실행&lt;/p&gt;
&lt;p&gt; || : 앞의 명령어 실행 성공여부 상관없이 뒤의 명령어 실행&lt;/p&gt;
&lt;p&gt; ; : 명령어 구분&lt;/p&gt;
&lt;p&gt; &amp;#x26; : 백그라운드 명령 실행&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;/home 영역에 Quota를 설정하는 순서&lt;/p&gt;
&lt;p&gt;/etc/fstab 설정(defaults 뒤에 usrquota 추가) -&gt; /home 영역 remount -&gt; Quota 파일 생성(aquota.user 혹은 aquota.group) -&gt; Quota 파일로 변환(quotacheck 명령) -&gt; 사용자 Quota 설정 -&gt; Quota 시작 -&gt; repquota /home&lt;/p&gt;
&lt;p&gt;예전(quota.user) -&gt; 현재(aquota.user)로 바꿀 때는 convertquota로 변환 가능&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;df(Disk Filesystem) 관련 옵션 &lt;/p&gt;
&lt;p&gt; -i : inode 사용정보&lt;/p&gt;
&lt;p&gt; -t : 특정 파일시스템을 지정하여 해당 파일시스템만 출력&lt;/p&gt;
&lt;p&gt; -T : 각 파일시스템의 형태 출력&lt;/p&gt;
&lt;p&gt; -P : POSIX에서 사용하는대로 한 줄에 모두 출력&lt;/p&gt;
&lt;p&gt; -a : 크기가 0인 것도 출력&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;d: 디렉터리&lt;/p&gt;
&lt;p&gt;c : 문자형 디바이스&lt;/p&gt;
&lt;p&gt;b : 블록형 디바이스&lt;/p&gt;
&lt;p&gt;l : 심볼릭 링크&lt;/p&gt;
&lt;p&gt;p : 파이프&lt;/p&gt;
&lt;p&gt;s : 소켓&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;클러스터 파일시스템 : Ceph , GlusterFS, GFS&lt;/p&gt;
&lt;p&gt;저널링 파일 시스템 : JFS, XFS, ReiserFS, ext3&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;포트번호&lt;/p&gt;
&lt;p&gt; ftp : 20(실제로 파일 전송) , 21(연결 제어)&lt;/p&gt;
&lt;p&gt; ssh : 22&lt;/p&gt;
&lt;p&gt; telnet : 23&lt;/p&gt;
&lt;p&gt; smtp : 25&lt;/p&gt;
&lt;p&gt; 53 : DNS&lt;/p&gt;
&lt;p&gt; 69 : TFTP&lt;/p&gt;
&lt;p&gt; 70 : gopher&lt;/p&gt;
&lt;p&gt; 80 : HTTP&lt;/p&gt;
&lt;p&gt; 110 : POP3&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;init 0 : 종류&lt;/p&gt;
&lt;p&gt;init 1 : 단일 사용자&lt;/p&gt;
&lt;p&gt;init 2 : NFS을 제외한 다중 사용자&lt;/p&gt;
&lt;p&gt;init 3 : 다중 사용자 &lt;/p&gt;
&lt;p&gt;init 4 : 사용X&lt;/p&gt;
&lt;p&gt;init 5 : X 윈도우&lt;/p&gt;
&lt;p&gt;init 6 : 재부팅&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;X toolkit 종류 : XView, Xaw, Motif, QT(KDE), GTK+(GNOME)&lt;/p&gt;
&lt;p&gt;윈도 메니저 종류 : Enlightenment, twm, fvwm(twm기반), AfterStep(fvwm기반), &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;새로운 디스크를 증설하여 사용 : 파티션 생성(fdisk) -&gt; 파일 시스템 생성(mkfs) -&gt; 마운트(mount)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;데이터 블록(Data Block) : 파일 및 디렉터리에 속하는 실제 데이터가 포함된 블록&lt;/p&gt;
&lt;p&gt;슈퍼블록(Super Block) : 전체 파일시스템에 대한 정보를 가지고 있는 블록&lt;/p&gt;
&lt;p&gt;아이노드 블록(Inode Block) : 각 파일이나 디렉터리에 대한 모든 정보를 저장하고 있는 블록&lt;/p&gt;
&lt;p&gt;부트블록(Boot Block) : 부팅시 필요한 코드가 있는 블록&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;/dev/hda = 마스터 IDE 하드 디스크&lt;/p&gt;
&lt;p&gt;/dev/hdb = 슬레이브 IDE 하드 디스크&lt;/p&gt;
&lt;p&gt;/dev/hd ; 하드 디스크&lt;/p&gt;
&lt;p&gt;/dev/sda : SCSI 혹은 SATA 하드 디스크&lt;/p&gt;
&lt;p&gt;/dev/fd : 플로피 디스크&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;프린터 설치 과정&lt;/p&gt;
&lt;p&gt; 프린터 종류 설정 -&gt; 프린터 큐 설정 -&gt; 프린터 기종 설정 -&gt; 프린터 드라이버 설정&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;add -network&lt;/p&gt;
&lt;p&gt;add -host&lt;/p&gt;
&lt;p&gt;add default gw&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Beowulf  클러스터 : CPU의 연산 속도를 높이기 위해 여러 시스템을 병렬로 연결하여 슈퍼컴퓨터 구성시 사용하는 방법&lt;/p&gt;
&lt;p&gt;HA(High Availability) 클러스터 : 시스템이 중단되어도 대기 상태에 있는 서버에서 항상 서비스가 가능하도록 시스템의 가용성을 높일 때 사용&lt;/p&gt;
&lt;p&gt;RAID : 여러 물리적 디스크를 논리적으로 하나의 디스크로 인식하도록 하는 방법&lt;/p&gt;
&lt;p&gt;LVM : Logical Volume &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Wi-Fi ;기본적으로 인터넷에 데이터를 전달해주는 기능을 하는 AP(액세스 포인트)와 노트북이나 스마트폰 같이 사용자가 서비스를 받는 단말기 간의 통신&lt;/p&gt;
&lt;p&gt;LTE : 3세대(3G) 이동통신기술을 장기적으로 진화시킨다는 의미로 3.9세대 무선통신규격으로 불린다.&lt;/p&gt;
&lt;p&gt;BLUETOOTH : 1994년 에릭슨이 최초로 개발한 개인 근거리 무선 통신(PANs)을 위한 산업 표준&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HCI (Host Controller Interface) : 블루투스 모듈과 host와의 중개적인 연결을 담당하는 Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NFC(NearField Communication) : 10cm 이내의 가까운 거리에서 다양한 무선 데이터를 주고 받는 통신 기술로 무선(RFID)를 사용하고, 13.56MHz의 주파수 대역을 사용하는 비접촉식 통신기술&lt;/p&gt;
&lt;p&gt;POSIC (이식 가능 운영 체제 인터페이스 ) : 이식성이 높은 유닉스 응용 프로그램을 개발하기 위한 목적으로 IEEE가 책정한 애플리케이션 인터페이스 구격&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 4-단답형 문제(4)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 4-단답형 문제(4)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 4-단답형 문제(4)/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 단답형 문제입니다 정처기 공부를 할 때 활용하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-단답형-문제-4&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8B%A8%EB%8B%B5%ED%98%95-%EB%AC%B8%EC%A0%9C-4&quot; aria-label=&quot;1 단답형 문제 4 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 단답형 문제 4&lt;/h1&gt;
&lt;p&gt;001 UI 개발을 위한 주요 비법 중 하나로 ‘ 불확실성이 높은 상황 변화를 사전에 예측하고 다양한 시나리오를 설계하는 방법으로 불확실성을 제거해나가려는 경영 전략의 한 방법’을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시나리오 플래닝(Scenario Planning)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;002 개발하는 소프트웨어가 복잡해짐으로 인해 보안상 취약점이 발생할 수 있는 부분을 보완하여 프로그래밍하는 것으로 안전한 소프트웨어를 개발하기 위해 지켜야 할 코딩 규칙과 소스 코드 취약 목록이 포함된 코딩을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시큐어 코딩(Secure Coding)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;003 전역 변수를 사용하지 않고 객체를 하나만 생성하도록 하여 생성된 객체를 어디에서든지 참조 할 수 있도록 하는 디자인 패턴은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;싱글톤 패턴(Singleton Pattern)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;004 고객의 요구사항을 정리해 놓은 시나리오를 4개의 분리된 구조로 구성된 아키텍처 개념으로 제시하여, 이들 4개 구조가 충돌되지 않는지, 시스템의 요구사항을 충족시키는지를 증명하기 위하여 유스케이스를 체크 방법으로 사용하는 소프트웨어적인 접근 방법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 아키텍처 4+1뷰&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;005 휴대전화를 비롯한 휴대용 장치를 위한 운영체제와 미들웨어, 사용자 인터페이스 그리고 표준 응용 프로그램(웹 브라우저, 이메일 클라이언트 등)을 포함하고 있는 운영체제는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;안드로이드(Android)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;006 컴퓨터 내부를 관리하는 커널(Kernel)과 사용자 간을 연결하는 명령어(command)창은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쉘(Shell)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;007 2계층 장비로서, 동일 네트워크 내에서 출발지에 들어온 데이터 프레임을 목적지 MAC 주소 기반으로 빠르게 전달하는 네트워크 장비는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스위치(Switch)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;008 애플리케이션에 대한 모니터링 및 DB Agent를 통해 오픈 소스 DB 모니터링 기능 및 인터페이스 감시 기능을 제공하는 인터페이스 도구는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스카우터(SCOUTER)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;009 다양한 플랫폼에서 쓸 수 있고, 라이브러리(모듈)가 풍부하고 유니코드 문자열을 지원하여 다양한 언어의 문자 처리가 가능하고, 들여쓰기를 사용하여 블록을 구분하는 문법을 채용한 스크립트 언어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;파이썬(python)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;010 정책, 프로세스, 콘텐츠 구성, 와이어 프레임(UI, UX), 기능 정의, 데이터베이스 연동 등 서비스 구축을 위한 모든 정보가 담겨 있는 설계 산출물을 (     )(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스토리보드(Storyboard)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;011 일방향 해시 함수에서 다이제스트를 생성할 때 추가되는 바이트 단위의 임의의 문자열을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;솔트(salt)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;012 윈도우 함수 중, 레코드의 순위를 계산하는 함수를 ‘순위 함수’라고 한다 순위 함수에는 RANK, DENSE RANK, ROW NUMBER의 3유형이 있는데, 동일 순위의 레코드 존재 시에도 후 순위를 넘어가지 않아 ‘2위가 3개인 레코드가 3개 있는 경우, &amp;#x3C;1위, 2위, 2위, 2위, 3위, 4위, … &gt;와 같이 계산하는 함수는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DENSE_RANK&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;013 컴퓨터 내부를 관리하는 커널(Kernel)과 사용자 간을 연결하는 명령어(command)창은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쉘(Shell)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;014 공격대상에게 직접 공격을 하지 않고 데이터만 몰래 들여다보는 수동적 공격기법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스니핑(Sniffing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;015 프로세스보다 가벼운, 독립적으로 수행되는 순차적인 제어의 흐름이며, 실행 제어만 분리하여 여러 개로 사용될 수 있는 실행 단위는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스레드(Thread)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;016 테스트 목적에 따른 분류 중 하나로 ‘사용자의 이벤트에 시스템이 응답하는 시간, 특정 시간 내에 처리하는 업무량, 사용 요구에 시스템이 반응하는 속도 등을 측정하는 테스트 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;성능 테스트(Performance Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;017 클라이언트와 서버의 논리적인 연결을 뜻하는 말로 통신에서는 사용자와 컴퓨터, 또는 두 대의 컴퓨터간의 활성화된 접속을 의미하며, 프로그램 사용과 관련해서는 한 응용프로그램의 기동을 시작해서 종료할 때까지의 시간을 가리키는 용어를 (  1  )(이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;세션(session)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;018 TCP 신뢰성 기반의 연결을 이용한 공격 방법으로, 통신 내용을 엿보거나 세션을 가로채어 정상적인 인증 과정을 무시하고, 불법으로 시스템에 접근할 수 있는 공격은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;세션 하이재킹(Session Hijacking)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;019 여러 가지 소프트웨어 구성요소와 그 구성요소가 가진 특성 중에서 외부에 드러나는 특성, 그리고 구성요소 간의 관계를 표현하는 시스템의 구조를 뜻하는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 아키텍처(Software Architecture)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;020 소프트웨어 집약적인 시스템에서 아키텍처가 표현해야 하는 내용 및 이들 간의 관계를 제공하는 아키텍처 기술 표준을 (   )(이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 아키텍처 프레임워크(Software Architecture Framework)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;021 객체지향프로그래밍(OOP)의 특성 중 하나로, 슈퍼 클래스의 멤버(변수 또는 메서드)를 서브 클래스에서 물려받아 선언없이 사용하는 성질을 ( 1 )(이)라고 하며 자바에서 서브 클래스가 슈퍼 클래스를 (  1  )하기 위해 사용하는 키워드(예약어)는 (  2  ) 이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 상속(Inheritance) 2 extends&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;022 애플리케이션 구조에서 최하위 레벨의 모듈 또는 컴포넌트로부터 위쪽 방향으로 제어의 경로를 따라 이동하면서 구축과 테스트를 수행하는 통합 방법은 무엇인가?  &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;상향식 통합&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;023 네트워크 리소스를 특정 사용층이 독점하도록 하는 통신 방식으로 네트워크를 독점하기 때문에 전송이 보장되고, 서킷을 확보하기 위한 작업 후, 실데이터를 전송하고 전성 후 서킷을 닫는 프로세스로 운영되어 서킷 확보 작업이 일어나는 동안 다른 기기들은 해당 경로를 이용하기 힘든 네트워크 전달방식은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;서킷 스위칭&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;024 집단적 창의적 발상 기법으로 집단에 소속된 인원들이 자발적으로 자연스럽게 제시된 아이디어 목록을 통해서 특정한 문제에 대한 해법을 찾고자 하는 회의 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;브레인스토밍(BrainStorming)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;025 보기 중 비대칭 키 암호화 알고리즘인 것을 모두 고르시오&lt;/p&gt;
&lt;p&gt;&amp;#x3C;보기&gt;SEED / SHA-256 / RSA / ARIA-128 / HAS-160 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RSA&lt;/code&gt; &lt;/p&gt;
&lt;p&gt; 026 사용자가 직접 제품을 사용하면서 미리 작성된 시나리오에 맞추어 과제를 수행한 후, 질문에 답하도록 하는 테스트이며, 현 제품에 대한 사용자의 요구사항과 행동을 관찰할 수 있는 유일한 진단방법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;사용성 테스트(Usability Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;027 배치 프로그램은 이벤트 배치, 온디맨드 배치, 정기 배치로 분류할 수 있는데, 정해진 시점에 정기적으로 실행되는 배치 유형을 ( 1 )라고 하고, 사전에 정의해 둔 조건 충족시 자동으로 실행되는 배치 유형은 ( 2 )라고 한다 그리고 앞의 두 유형과는 달리 사용자의 명시적 요구가 있을 때마다 실행되는 배치 프로그램은 ( 3 )라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 정기 배치 2 이벤트 배치 3 온디맨드배치&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;028 다양한 네트워크를 상호 연결하는 컴퓨터 네트워크의 일부로서, 각기 다른 LAN이나 부분망 간에 정보를 교환하기 위한 경로를 제공하는 망을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;백본망(backbone network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;029 조건/결정 커버리지를 향상시켜 ‘각 조건식이 다른 개별 조건식에 영향을 받지 않고 전체 조건식에 독립적으로 영향을 주도록 한’ 코드 커버리지는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;변경조건/결정 커버리지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;030 해킹 등 외부 공격으로 시스템의 보안정책을 침해하는 보안사고의 실제 원인이 되는 시스템상의 보안허점으로 운영 단계에서의 보안 리스크를 ( 1 )(이)라고 한다 그리고 (  1  )의 근본적인 원인이 되는 소프트웨어의 결함, 실수 버그 등의 오류이며 개발 단계의 보안 리스크를 (  2  )(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 보안 취약점(Vulnerability)  2 보안 약점(Weakness)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;031 컴퓨터 네트워크의 보안 취약점을 찾아내어 그 문제를 해결하고 이를 악의적으로 이용하는 것을 방지하는 행위에서 유래한 말로, 1950년대 말 미국 매사추세츠공과대학(MIT) 동아리 모임에서 ‘작업과정 그 자체에서 느껴지는 순수한 즐거움’이라는 뜻으로 사용되었으나, 오늘날에는 의미가 변질되어 컴퓨터 네트워크의 취약한 보안망에 불법적으로 접근하거나 정보 시스템에 유해한 영향을 끼치는 행위를 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;해킹(hacking)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;032 외부로부터 불법 침입과 내부의 불법 정보 유출을 방지하고, 내/외부 네트워크 상호간 영향을 차단하기 위한 보안 시스템을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;방화벽(Firewall)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;033 사용자와의 상호작용 없이 일련의 작업들을 작업 단위로 묶어 정기적으로 반복 수행하거나 정해진 규칙에 따라 일괄 처리하는 방법을 이르는 말은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;배치 프로그램(batch program)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;034 개발 과정의 각 단계의 산출물을 검토, 평가, 조정, 처리 등 변화를 통제하는 시점의 기준을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;베이스라인(Baseline)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;035 프로그래밍에서 계속 변하는 값이면서, 그 값을 저장하는 공간을 뜻하는 용어로 수많은 데이터를 컴퓨터에서 사용하기 위하여 선언 및 초기화를 통해 사용하는 값을 ( 1 )(이)라고 한다 그리고 메서드 수행에 필요한 값을 입력/저장하기 위한 입력  ( 1 )를/을 ( 2 )(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 변수(variable) 2 파라미터(parameter)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;036 테스트 목적에 따른 분류 중 하나로 ‘변경된 시스템과 기존 시스템에 동일한 데이터를 입력 후 결과를 비교하는 테스트 기법을 이르는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;병행 테스트(parallel Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;037 비밀번호나 데이터 암호 표준(DES)키를 풀기 위해 소모적인 방법으로 프로그램에 의해 사용되는 시행착오식의 침입방법으로, 프로그램을 사용하여 모든 가능한 문자의 조합을 시행하고 틀리면 다른 문자를 적용해 보는 반복에 의해 시도되는 침입방법이며, 네트워크 보안을 점검하기 위한 용도로도 사용되는 공격기법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;무차별 공격(brute force attack(cracking), 무차별대입공격)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;038 분산 컴퓨팅 환경에서 응용 프로그램과 프로그램이 운영되는 환경 간에 원만한 통신이 이루어질 수 있도록 제어해주는 소프트웨어로 운영체제와 소프트웨어 애플리케이션 사이에 위치하는 프로그램은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;미들웨어(Middleware)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;039 누출이나 훼손되었을 때 정보의 소유자에게 부정적 영향이 발생하고, 시스템의 계속적 운영이 불가능해지며 상당한 양의 자원을 다시 생성해야하는 상황을 유발하는 정보로서, 미국 정부의 정의(NTISSP2)에 따르면 어떤 정보의 누출, 변형, 파괴에 의해서 국가 안보나 지방 정부에 위해가 되는 상황이 발생하는 경우를 뜻한다 이러한 정보는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;민감 정보(sensitive information)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;040 정규화된 엔티티, 속성, 관계에 대해 성능 향상과 개발 운영의 단순화를 위해 중복, 통합, 분리 등을 수행하는 데이터 모델링의 기법은 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;반 정규화(De-Normalization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;041 테이블과 같은 데이터 구조를 정의하는 데 사용되는 명령어들로 특정 구조를, 생성, 변경, 삭제, 이름을 바꾸는 데이터 구조와 관련된 명령어들을 ( 1 )라고 하고, 데이터베이스에 저장된 자료들을 입력, 수정, 삭제, 조회하는 등 사용자가 데이터베이스를 조작할 수 있게 도움을 주는 언어를 데이터 조작어라고 한다 데이터 조작어에는 ( 2 )가 있다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 데이터 정의어(DDL) 2 조회(SELECT), 입력(INSERT), 수정(UPDATE), 삭제(DELETE)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;042 EAI 구축 유형 중, 애플리케이션 사이에 미들웨어를 두어 연계하는 미들웨어 통합 방식을 사용하여 뛰어난 확장성과 대용량 데이터를 처리 가능한 유형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;메시지 버스(Message Bus)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;043 모듈을 이용하여 소프트웨어의 성능을 향상시키거나 시스템의 디버깅, 시험, 통합 및 수정을 용이하도록 하는 소프트웨어 설계 기법으로 모듈 간 결합도는 최소화하고, 응집도를 최대화를 목적으로 하는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;모듈화(Modulation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;045 SW 개발 보안의 3요소로 정당한 방법을 따르지 않고선 데이터가 변경될 수 없으며, 데이터의 정확성 및 완전성과 고의/악의로 변경되거나 훼손 또는 파괴되지 않음을 보장하는 특성은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;무결성(Integrity)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;046 프로그램에서 프로그램이 끝없이 동작하는 것으로, 반복문에 종료 조건이 없거나, 종료 조건과 만날 수 없을 때 생기는 현상을 ( 1 )(이)라고 한다 이러한 ( 1 )(을)를 방지하기 위해 사용하는 명령어를 ( 2 )(이)라고 하는데, 자신이 속해 있는 반복문을 중지하도록 하는 명령어는 ( 3 )(을)를 사용하고, 해당 반복 사이클 내에 남아 있는 나머지 명령어들을 건너 뛰고 다음 단계의 반복을 수행하는 명령어는 ( 4 )(을)를 사용한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 무한 루프 2 루프 제어 명령어 3 break 4 continue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;047 유닉스를 기반으로 개발되어 대화식 운영체제, 다중 작업 기능, 다중 사용자 기능, 이식성, 계층적 트리 구조 파일 시스템을 갖는 오픈 소스 기반의 운영체제로 데비안, 레드헷, Fedora, Ubuntu, Cent OS 등의 다양한 유형이 있는 운영체제는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리눅스(LINUX)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;048 특정 파티션에 저장될 데이터에 대한 명시적인 제어가 가능하며, 분포도가 비슷하고 데이터가 많은 SQL에서 컬럼의 조건이 많이 들어오는 경우 유용한 파티셔닝 기법은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리스트 파티셔닝(List Partitioning)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;049 서버는 클라이언트에서 요청한 소프트웨어의 실행코드를 스트림 형태로 제공하고, 클라이언트는 서버로부터 스트리밍되는 소프트웨어 코드를 클라이언트 PC의 자원을 이용하여 실행하는 방법으로 소프트웨어의 실행을 클라이언트에서 책임지는 기술을 이르는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리치 클라이언트(Rich Client)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;050 OSI 물리 계층의 장비로, 디지털 신호를 증폭시켜 주는 역할을 하여 신호가 약해지지 않고 컴퓨터로 수신되도록 하는 재생중계장치는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리피터(repeater)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;051 데이터베이스 관리자(DBA)가 데이터 보안, 무결성 유지, 병행 제어, 회복을 위해 사용하는 제어용 언어를 ( 1 ) (이)라고 한다 ( 1 )이 유형으로 사용 권한을 부여하는 ( 2 )(와)과 사용 권한을 취소 하는 ( 3 )(이)가 있다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 데이터 제어어(DCL; Data Control Language) 2 GRANT 3 REVOKE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;052 프로그램의 구성요소인 클래스의 기능(동작)으로 작업의 최소단위이며 반드시 호출되어야만 기능을 사용할 수 있는 요소는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;메서드(method)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;053 블랙 박스 테스트 유형 중, 입력 데이터의 영역을 유사한 도메인별로 유효 값/무효 값을 그룹핑하여 대표값 테스트 케이스를 도출하여 테스트하는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;동등 분할 테스트(Equivalence Partitioning Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;054 LAN과 LAN을 연결하거나 LAN과 WAN을 연결하기 위한 장비로, 3계층 데이터 패킷을 발신지에서 목적지까지 전달하기 위해 최적의 경로를 지정하고, 이 경로를 따라 데이터 패킷을 다음 장치로 전달하는 네트워크 장비를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;라우터(Router)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;055 효율적인 프로그램 개발을 위해 필요할 때 찾아서 쓸 수 있도록 모듈화되어 제공되며, 프로그래밍 언어에 따라 일반적으로 도움말, 설치 파일, 샘플 코드 등을 제공하기도 하는 프로그램의 집합체는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;라이브러리(Library)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;056 ‘프로그램 내의 모든 명령문을 적어도 한 번 수행하는 커버리지리로 조건문 결과 관계 없이 구문 실행 개수로 계산’하는 코드 커버리지는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;구문 커버리지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;057 테이블 전체 행을 하나 이상의 컬럼을 기준으로 하여 컬럼 값에 따라 그룹화하여 그룹별로 결과를 출력하는 함수를 ( 1 )(이)라고 한다 ( 1 )함수에는 ‘ROLLUP’, ‘CUBE’, ‘GROUPING SETS’의 유형이 있는데, 소계(소그룹의 합계) 등 중간 집계 값을 산출하기 위한 그룹 함수는 ( 2 )이고, 결합 가능한 모든 값에 대해 다차원 집계를 생성하는 함수로 연산이 많아 시스템에 부담을 주는 그룹 함수는 ( 3 ) 이다 컬럼 순서가 바뀌면 집계 결과가 달라지는 ( 2 ), ( 3 ) 함수와는 달리 컬럼 간 순서와 무관한 결과를 얻을 수 있는 그룹 함수는 ( 4 )이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 그룹 함수 2 ROLLUP 3 CUBE 4 GROUPING SETS&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;058 개념 모델링 이후 업무 영역의 업무 데이터 및 규칙을 구체적으로 표현한 모델로 데이터베이스 설계 프로세스의 기초 설계 단계로 비즈니스 정보의 구조와 규칙을 명확하게 표현할 수 있는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;논리 데이터 모델링&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;059 각 모듈 간의 통합 시, 특정 서비스를 변경하더라도 연결된 다른 서비스에는 영향을 주지 않는 유연한 구조를 이르는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;느슨한 결합(Loosely Coupled)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;060 데이터 저장소 연결 절차를 순서대로 나열하시오&lt;/p&gt;
&lt;p&gt;&amp;#x3C; 데이터베이스 연결 / 결과 수신 / 쿼리 전달 / 드라이버 로딩&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;드라이버 로딩 -&amp;gt; 데이터베이스 연결 -&amp;gt; 쿼리 전달 -&amp;gt; 결과 수신&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;061 ‘프로그램 내의 모든 명령문을 적어도 한 번 수행하는 커버리지리로 조건문 결과 관계 없이 구문 실행 개수로 계산’하는 코드 커버리지는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;구문 커버리지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;062 통계 정보가 없는 상태에서 사전 등록된 규칙에 따라 질의 실행 계획을 선택하는 옵티마이저를 ( 1 )(이)라고 하고 통계 정보로부터 모든 접근 경로를 고려한 질의 실행 계획을 선택하는 옵티마이저를 ( 2 )(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1규칙 기반 옵티마이저(RBO; Rule-Based Optimizer)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;2비용 기반 옵티마이저(CBO; Cost-Based Optimizer)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;063 데이터베이스를 사용한 온라인 분석 처리(OLAP)용도로 사용하기 위해서 표준 SQL에 추가된 함수를 ( 1 )이라고 한다 ( 1 )은 크게 레코드의 순위를 계산하는 ‘순위 함수’와 레코드에서 가장 먼저 나오거나 가장 뒤에 나오는 값, 이전/이후의 값들을 출력하는 ‘행 순서 함수’ 그리고 백분율을 보여주거나 행의 순서별 백분율 등 비율과 관련된 통계를 보여주는 ( 2 ) 함수가 존재한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 윈도우 함수 2 그룹 내 비율 함수&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;064 SW보안의 3요소로 인가되지 않은 개인 혹은 시스템 접근에 따른 정보 공개 및 노출을 차단하는 특성은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;기밀성(Confidentiality)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;065 다른 개발자가 로직(Logic)을 이해하기 어렵게 작성된 코드로서, 처리 로직의 제어가 정제되지 않고 서로 얽혀 있는 스파게티 코드, 변수나 메서드에 대한 이름 정의를 알 수 없는 코드, 동일한 처리 로직이 중복되게 작성된 코드를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;나쁜 코드(bad code)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;066 자체적으로 컴파일이 가능하고, 다른 프로그램에서 재사용이 가능한 특징을 가지며, 전체 프로그램의 기능 중 특정 기능을 처리할 수 있는 실행 코드를 일컫는 말은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공통 모듈(Common Module)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;067 공통 모듈(또는 서버 프로그램)의 구현 절차를 순서대로 나열하시오&lt;/p&gt;
&lt;p&gt;&amp;#x3C; Service / SQL / DTO/VO / View / Controller / DAO &gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DTO/VO -&amp;gt; SQL -&amp;gt; DAO ⇒ Service -&amp;gt; Controller -&amp;gt; View&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;068 공통 모듈 테스트 중 ‘응용 프로그램의 내부 구조와 동작을 검사하는 소프트웨어 테스트 방식’은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;화이트 박스 테스트(white box test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;069 공통 모듈 테스트 중 ‘공통 모듈 테스트 중 ‘기능을 테스트할 수 있는 화면 또는 모듈이 구현되지 않은 경우 ( 1 )과 ( 2 )를 구현하여 테스트를 수행한다 ( 1 ) 은 하위 모듈은 있지만 상위 모듈은 없는 경우 사용하는 기법이며, ( 2 )는 상위 모듈은 있지만 하위 모듈이 없는 경우 사용하는 기법이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 테스트 드라이버(Test Driver) / 2테스트 스텁(Test Stub)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;070 메모리가 공유되는 하나의 객체에 두 개 이상의 스레드가 동시에 값을 변경하려고 할 때 발생되는 성능 저하의 문제점을 ( 1 )(이)라고 한다 ( 1 )은 시큐어 코딩 가이드 중, ( 2 ) 보안 약점의 유형으로 동기화 구문(synchronized, mutex)를 사용하거나, 한 번에 하나의 프로세스만 접근 가능하도록 하는 대응 방안이 고려된다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 경쟁 조건(Race Condition) 2 시간 및 상태&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;071 유사 소프트웨어나 유사 기술 평가에서 테스터의 경험을 토대로 한, 직관과 기술 능력을 기반으로 수행하는 테스트 기법으로 ‘탐색, 오류추정, 체크리스트, 특성 테스트’ 등의 유형을 갖는 테스트의 종류는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;경험 기반 테스트&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;072 서버와 네트워크, 프로그램 등의 정보시스템이 시스템의 장애에 대응하여 상당히 오랜 기간 동안 지속적으로 정상 운영이 가능한 성질을 이르는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;고가용성(HA; High Availability)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;073 공개키 암호 방식 기반으로 디지털 인증서를 활용하는 소프트웨어, 하드웨어, 사용자, 정책 및 제도 등을 총칭하는 암호기술을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공개키 기반구조(PKI, Public Key Infrastructure)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;074 모든 멤버 변수가 하나의 메모리 공간을 공유하며 C, C++에서 union으로 선언하여 사용하는 사용자 정의 자료형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공용체(Union)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;075 테스트 완료 후 발견된 결함의 관리 측정 지표의 속성값들을 분석하고, 향후 애플리케이션의 어떤 모듈 또는 컴포넌트에서 결함이 발생할지를 추정하는 작업을 ( 1 )(이)라고 한다 ( 1 )의 유형 중, 각 애플리케이션 모듈 또는 특정 속성에 해당하는 결함의 수를 측정하여 결함의 분포를 분석하는 유형을 ( 2 )라고 하고, 테스트 진행 시간의 흐름에 따른 결함의 수를 측정하여 결함 추세를 분석하는 방법을 ( 3 )이라고 하며, 등록된 결함에 대해 특정한 결함 상태의 지속 시간을 측정하여 분석하는 유형을 ( 4 )라고 한다 &amp;#x3C;보기&gt;를 참고하여 알맞은 답을 쓰시오 &lt;/p&gt;
&lt;p&gt;&amp;#x3C;보기&gt; [ 결함 추세 분석 // 결함 추이 분석 // 결함 분포 분석 // 결함 에이징 분석 ]&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 결함 추이 분석 2 결함 분포 분석 3 결함 추세 분석 4 결함 에이징 분석&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;076 모듈 내부가 아닌 외부의 모듈과의 연관도 또는 모듈 간의 상호의존성으로 소프트웨어 구조에서 모듈 간의 관련성을 측정하는 척도를 이르는 말은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결합도(Coupling)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;077 등가분할 후 경계 값 부분에서 오류 발생 확률이 높기에 경계값을 포함하여 테스트 케이스를 설계하여 테스트하는 기법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;경계 값 분석 테스트(Boundary Value Analysis Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;078 애플리케이션 성능 지표 중, ‘애플리케이션에 사용자가 요구를 입력한 시점부터 트랜잭션 처리 후 그 결과의 출력이 완료할 때까지 걸리는 시간’은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;경과 시간(Turnaround Time)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;079 현실 세계에 존재하는 데이터와 그들 간의 관계를 사람이 이해할 수 있는 형태로 명확하게 표현하기 위해서 가장 널리 사용되고 있는 모델로 요구사항으로부터 얻어낸 정보들을 개체-속성-관계로 기술한 모델은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;개체 관계(E-R)모델&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;080 프로그램을 짤 때 동일한 목적이나 기능을 하는 변수와 함수들을 각각 하나로 묶어서 객체로 만들고 그 객체들끼리 상호 통신하면서 프로그램 전체가 돌아가도록 코드를 구성하는 프로그래밍 방식은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;객체지향 프로그래밍 (OOP; Object Oriented Programming)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;081 소프트웨어 과정을 테스트하는 것으로, 올바른 제품을 생산하고 있는지 여부를 검증하며, 이전 단계에서 설정된 개발 규격과 요구를 충족시키는지 판단하며 개발자 혹은 시험자의 시각으로 소프트웨어가 명세화된 기능을 올바로 수행하는지 알아보는 과정을 이르는 말은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;검증(Verification)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;082 프로그램 내의 전체 결정문이 적어도 한 번은 참과 거짓의 결과를 수행하는 코드 커버리지 유형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결정 커버리지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;083 테스트 목적에 따른 분류 중 하나로 ‘시스템에 과다 정보량을 부과하여 과부화 시에도 시스템이 정상적으로 작동되는지를 검증하는 테스트 기법’은 무엇인가?`&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;강도 테스트(Stress Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;084 프로그램 개발을 위한 개발 도구에는 구현 도구, 테스트 도구, 형상관리 도구, 빌드 도구가 있다 형상 관리 도구를 서술하시오&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CVS / SVN / Git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;085 프로그램 개발을 위해서는 구현될 시스템 요구사항에 대한 명확한 이해가 필요하며, 개발 도구와 서버의 선정 및 개발에 사용되는 도구들의 사용 편의성과 성능 그리고 라이선스 등을 고려해야 한다 개발도구 중 각각의 구성요소와 모듈에 대한 의존성 관리를 지원하며, 작성한 코드의 작성 및 배포를 수행하는 도구를 ( 1 )이라고 한다 그리고 개발자의 코드 작성과 디버깅, 수정 등과 같은 작업을 지원하는 도구를 ( 2 )라고 하며, 코드의 기능 검증과 전체 품질을 높이기 위하여 테스트 계획, 수행 및 분석 작업을 지원하는 도구를 ( 3 )이라고 한다 또한 개발자들이 작성한 코드나 리소스 등의 산출물들은 소프트웨어 생명주기에 따라 수정, 개선 등의 버전 관리가 이루어지는데 이를 지원하는 도구를 ( 4 )라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 빌드 도구 2 구현 도구 3 테스트 도구 4 형상 관리 도구&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;086 데이터베이스 개념 모델링 단계에서 도출한 개체의 타입과 관련 속성, 식별자 등의 정보를 개괄적으로 명세화한 정의서는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;개체 정의서&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;087 주제 영역과 핵심 데이터 집합 간의 관계를 정의하는 모델로 전체 모델에서 중요한 골격이 되는 엔티티와 관계(Relationship) 위주의 모델을 뜻하는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;개념 모델&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;088 컴퓨터상에 가상으로 컴퓨터를 구동시키는 것으로 물리적인 하드웨어를 가상화하여, 하나의 물리적 하드웨어 상에서 여러 컴퓨터가 구동되는 것처럼 에뮬레이션 하는 것을 칭하는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;가상 머신(Virtual Machine)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;089 물리적인 리소스들을 사용자에게 하나로 보이게 하거나, 하나의 물리적인 리소스를 여러 개로 보이게 하는 기술로 대부분의 서버는 용량의 20% 정도만을 사용하는데, (   )을/를 통해 서버의 가동률을 60~70% 이상으로 올릴 수 있다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;가상화(Virtualization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;090 가상화 기술요소로서 물리적으로 컴퓨터 리소스를 가상화하여 논리적 단위로 리소스를 활용할 수 있도록 하는 기술을 ( 1 )(이)라고 하며, 여러 대의 컴퓨터 계산 및 저장능력을 이용하여 커다란 계산문제나 대용량의 데이터를 처리하고 저장하는 기술을 ( 2 )라고 한다 그리고 물리적으로 떨어져 있는 다양한 장비들을 연결하기 위한 수단으로 중계장치(라우터, 스위치 등)의 가상화를 통한 가상 네트워크(virtual network)를 지원하는 기술을 ( 3 )이라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1컴퓨팅 가상화 2 분산처리기술(distributed computing) 3 네트워크 가상화&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;091 SW 개발 보안의 3요소로 권한을 가진 사용자가 애플리케이션이 원하는 서비스를 지속 사용할 수 있도록 보장하는 특성은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;가용성(Availability)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 3-단답형 문제(3))]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 3-단답형 문제(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 3-단답형 문제(3)/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 단답형 문제입니다 정처기 공부를 할 때 활용하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-단답형-문제-3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8B%A8%EB%8B%B5%ED%98%95-%EB%AC%B8%EC%A0%9C-3&quot; aria-label=&quot;1 단답형 문제 3 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 단답형 문제 3&lt;/h1&gt;
&lt;p&gt;001 SQL을 이용해 생성된 데이터를 조작하며, 데이터베이스 내부에 저장되고 일정한 조건이 되면 자동으로 수행되는 프로그램은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프로시저(Procedure)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;002 서로 다른 시스템에 있는 두 개체 간의 데이터 교환을 원활히 하기 위한 일련의 통신규약을 이르는 말로 대표적으로 HTTP, FTP 등이 있다 이것은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프로토콜(Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;003 소프트웨어 개발에서 정식 절차에 따라 완전한 소프트웨어를 만들기 전에 사용자의 요구를 받아 일단 모형을 만들고 이 모형을 통해 사용자와 의사소통하는 도구로 활용하는데, 이 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프로토타입(Prototype)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;004 EAI 구축 유형 중, 그룹 내는 허브 앤 스포크 방식을 사용하고, 그룹 간에는 메시지 버스 방식을 사용하는 통합방식을 갖는 유형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;하이브리드(Hybrid)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;005 메인 제어 모듈로부터 아래 방향으로 제어의 경로를 따라 이동하면서 테스트를 진행하며, 메인 제어 모듈에 통합되는 하위 모듈과 최하위 모듈은 ‘깊이-우선’ 또는 ‘너비-우선’방식으로 통합되는 통합 방법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;하향식 통합(Top Down)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;006 해시값으로 원래 입력값을 찾아낼 수 없는 일방향성의 특징을 가진 알고리즘으로 SHA-256/384/512, HAS-160 등이 있는 알고리즘은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;해시 암호화 알고리즘&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;007 파티션을 위한 범위가 없는 데이터에 적합한 기법으로 균등한 데이터 분할이 가능하고 질의 성능의 향상이 가능한 특징을 가지며, 파티션 키의 해시 함수 값에 의한 파티셔닝 기법은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;해시 파티셔닝 (Hash Partitioning)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;008 윈도우 함수 중 하나로, 레코드에서 가장 먼저 나오거나 가장 뒤에 나오는 값, 이전/이후의 값들을 출력하는 함수는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;행순서 함수&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;009 파티션별 윈도우에서 가장 먼저 나오는 값을 찾는 함수로, 집계 함수의 MIN과 동일한 결과를 출력하는 행순서 함수는 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;이다 &lt;/p&gt;
&lt;p&gt;그리고 파티션별 윈도우에서 이전 로우의 값을 반환하는 함수는 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1) FIRST_VALUE  2) LAG&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;010 컴퓨터 네트워크와 통신의 방식 중 하나로 작은 블록의 패킷으로 데이터를 전송하며 데이터를 전송하는 동안만 네트워크 자원을 사용하도록 하는 방식으로 통신 방식으로 ‘X25’, ‘프레임 릴레이’ 및 ‘ATM’과 같은 다양한 기술을 사용하는 네트워크 전달 방식은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;패킷 스위칭&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;011 사용자 요구사항 도출을 위하여 ‘잠재적 사용자의 다양한 목적과 관찰된 행동 패턴을 응집시켜 놓은 가상의 사용자’를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;페르소나(Persona)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;012 블랙박스 테스트 유형 중, 커버해야 할 기능적 범위를 모든 조합에 비해 상대적으로 적은 양의 테스트 세트를 구성하기 위한 테스트 방법으로 Test data 값들 간에 최소한 한 번씩을 조합하는 방식은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;페어와이즈 테스트(Pairwising Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;013 EAI 구축 유형 중 ‘1:1 단순 통합을 통해 구현하는 가장 기초적인 애플리케이션 통합 방법’은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;포인트 투 포인트(Point-to-point)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;014 다음은 무엇에 대한 설명인가?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ITU-T에 의해 표준으로 작성된 ISDN을 사용하기 위한 프로토콜&lt;/li&gt;
&lt;li&gt;사용자의 요청에 따라 유연한 대역폭을 할당&lt;/li&gt;
&lt;li&gt;망의 성능 향상을 위해 에러 제어 기능과 흐름 제어 기능을 단순화&lt;/li&gt;
&lt;li&gt;1~2계층만 담당함&lt;/li&gt;
&lt;li&gt;전용선을 사용하는 것보다 가격이 저렴하고, 기술적으로는 X25에 비해 우위&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프레임 릴레이(frame relay)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;015 소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 클래스들을 제공하는 틀을 이르는 용어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프레임워크(Framework)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;016 운영체가 관리하는 실행단위로 프로세서에 의해 처리되는 PCB(프로그램 제어 블록)를 가진 시스템 프로그램을 뜻하는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프로세스(Process)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;017 준비 상태(Ready List)에 있는 여러 프로세스 중 실행될 프로세스를 선정(Scheduling)하여 CPU를 할당하는 것으로 문맥교환이 발생하고 프로세스는 준비 상태에서 실행 상태로 전이하는 프로세스 상태전이는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;디스패치(Dispatch)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;018 CPU를 할당받은 프로세스는 지정된 시간이 초과되면 스케줄러에 의해 PCB에 저장되고, CPU 반납후 다시 준비 상태로 전이되는데 이러한 프로세스 상태전이는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;타이머 런 아웃(timer run out)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;019 릴레이션을 구성하는 각각의 행(row)으로서 데이터베이스내의 주어진 목록과 관계있는 속성값의 모음이며 관련 테이블에서 행한 수치 이상으로 혼합된 자료 요소를 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 하고, &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;의 수를 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; (이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 튜플(tuple) 2 카디널리티(Cardinality)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;020 인가받지 않은 사용자로부터 데이터베이스를 보장하기 위해 DBMS가 가져야 하는 특성이자, 데이터베이스 시스템에서 하나의 논리적 기능을 정상적으로 수행하기 위한 작업의 기본 단위를 이르는 말은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;트랜잭션(Transaction)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;021 특정 테이블에 삽입, 수정, 삭제 등의 데이터 변경 이벤트가 발생시 DBMS에서 자동적으로 실행되도록 구현된 프로그램을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;트리거(Trigger)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;022 파일에 이름을 부여하고 저장이나 검색을 위하여 논리적으로 그것들을 어디에 위치시켜야 하는지 등을 정의한 뒤 관리하는 데이터베이스 전 단계의 데이터 관리 방식을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 한다.&lt;/p&gt;
&lt;p&gt;두 가지 방법이 사용되는데&lt;/p&gt;
&lt;p&gt;대형 운영 체제에서 사용되는 파일 관리 시스템은 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; 이고, &lt;/p&gt;
&lt;p&gt;자료 내용은 주 저장부, 자료의 색인은 자료가 기록된 위치와 함께 색인부에 기록되는 파일 관리 시스템은 &lt;code class=&quot;language-text&quot;&gt;( 3 )&lt;/code&gt; 이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 파일 시스템(file system)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;2 VSAM(Virtual Storage Access Method)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;3 ISAM(Indexed Sequential Access Method)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;023 라이브러리에서 전역변수, 함수 등을 모아둔 파일을 ‘모듈(module)’이라고 하고, 모듈을 디렉터리 형식으로 구조화한 라이브러리를 (   )(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;패키지(package)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;024 애플리케이션 컴포넌트 및 모듈을 테스트하는 환경의 일부분으로, 테스트를 지원하기 위한 코드와 데이터를 말하며, 단위 또는 모듈 테스트에 사용하기 위해 코드 개발자가 작성하는 요소를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 하네스(Test Harness)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;025 논리 및 물리 모델링 과정에서 작성하는 설계 산출물로 테이블을 구성하는 컬럼들의 특성, 인덱스, 업무 규칙 등을 문서화한 것을 의미하는 용어는? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테이블 정의서&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;026 단위테스트가 끝난 모듈 또는 컴포넌트 단위의 프로그램이 설계 단계에서 제시한 애플리케이션과 동일한 구조와 기능으로 구현된 것인지를 확인하고, 소프트웨어 각 모듈 간의 인터페이스 관련 오류 및 결함을 찾아내기 위한 체계적인 테스트 기법으로 하향식 통합 테스트, 상향식 통합 테스트, 그리고 빅뱅 테스트로 분류된다 이 테스트는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;통합 테스트 (Integration Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;027 데이터베이스에서 프로시저에 있는 SQL 실행 계획을 분석, 수정을 통해 최소의 시간으로 원하는 결과를 얻도록 프로시저를 수정하는 작업을 뜻하는 용어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쿼리 성능 개선(=튜닝)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;028 쿼리 성능 개선 절차를 순서대로 서술하시오&lt;/p&gt;
&lt;p&gt;SQL문 재구성 / 실행계획 유지관리 / 문제있는 SQL 식별 /인덱스 재구성 / 옵티마이저 통계 확인 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;문제있는 SQL 식별 -&amp;gt; 옵티마이저 통계 확인 -&amp;gt; SQL문 재구성 -&amp;gt; 인덱스 재구성 -&amp;gt; 실행계획 유지관리&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;029 테스트 수행을 위한 여러 테스트 케이스의 집합으로서, 테스트 케이스의 동작 순서를 기술한 문서이며 테스트를 위한 절차를 명세한 문서는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 시나리오(Test Scenario)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;030 테스트의 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참 값을 입력하여 비교하는 기법을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 오라클(Test Oracle)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;031 테스트 도구를 활용하여 반복적인 테스트 작업을 스크립트 형태로 구현함으로써, 테스트 시간 단축과 인력 투입 비용을 최소화하고, 쉽고 효율적인 테스트를 수행할 수 있는 방법을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 한다 &lt;/p&gt;
&lt;p&gt;이것의 유형으로는 애플리케이션을 실행하지 않고 분석하는 ‘정적 분석 도구’, &lt;/p&gt;
&lt;p&gt;테스트를 위해 작성된 스크립트를 실행하는  ‘테스트 실행 도구’, &lt;/p&gt;
&lt;p&gt;애플리케이션의  처리량, 응답 시간, 경과 시간, 자원 사용률에 대해 가상의 사용자를 생성하고 테스트를 수행하는 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;, &lt;/p&gt;
&lt;p&gt;그리고 테스트 관리 도구, 형상 관리 도구, 결함 추적/관리 도구 등으로 이루어진 ‘테스트 통제 도구’가 있다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 테스트 자동화 도구 2 성능 테스트 도구(Performance Test Tools)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;032 테스트 조건에서 테스트 계획의 수립, 사용자 요구사항에 대한 테스트 명세의 작성, 투입조직 및 참여 인력의 역할과 책임의 정의, 테스트 일정의 확정, 테스트 환경의 구축 등이 완료된 후, 정의하는 조건을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; 이라고 한다 반면 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;은 업무 기능의 중요도에 따라 조건 설정의 변경이 가능하다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 시작 조건 2 종료 조건&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;033 주어진테스트 케이스에 의해 수행되는 소프트웨어의 테스트 범위를 측정하여 테스트의 정확성과 신뢰성을 향상시키는 역할을 수행하는 테스트 품질 측정 기준은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 커버리지(Test Coverage)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;034 모든 서브 타입으로 상속(Inheritance)되는 공통 속성을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; (이)라고 하고, 모델링 개체(Entity)의 전체 집합에서 일부만 모아 놓은 부분 속성을 이르는 말을 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; (이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 슈퍼 타입(super type) 2 서브 타입(sub type)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;035 서명자를 확인하고 서명자가 당해 전자문서에 서명했다는 사실을 나타내기 위해 특정 전자문서에 첨부되거나 논리적으로 결합된 전자적 형태의 정보는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;전자서명(Digital Signature)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;036 잘 작성되어 가독성이 높고, 단순하며, 의존성을 줄이고, 중복을 최소화하여 깔끔하게 잘 정리된 코드를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;클린 코드(clean code)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;037 프로젝트에서 책임과 연관되어 있으며 서로 독립적 성격을 갖지만 함께 편성되고 관리되는 테스트 활동의 그룹을 이르는 용어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 레벨(Test Level)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;037 테스트 산출물의 종류를 서술하시오&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 계획서 / 테스트 케이스 / 테스트 시나리오 / 테스트 결과서&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;038 배치 스케줄러 중 하나로 ‘스프링 프레임워크에 플러그인되어 수행하는 작업(job)과 실행 스케줄을 정의하는 트리거를 분리하여 유연성을 제공하는 오픈소스 기반 스케줄러를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쿼츠 스케줄러(Quartz Scheduler)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;039 인터넷을 통해 가상화된 컴퓨터 시스템 리소스(IT 리소스)를 제공하고 정보를 자신의 컴퓨터가 아닌 인터넷에 연결된 다른 컴퓨터로 처리하며, 구성 가능한 컴퓨팅 자원(네트워크, 데이터베이스, 서버, 스토리지, 애플리케이션, 서비스 등) 에 대해 어디서나 접근할 수 있는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;클라우드 컴퓨팅(Cloud Computing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;040 클라우드 컴퓨팅의 유형은 크게 &lt;code class=&quot;language-text&quot;&gt;(  1  )&lt;/code&gt; , &lt;code class=&quot;language-text&quot;&gt;(  2  )&lt;/code&gt;, 그리고 하이브리드 클라우드로 분류할 수 있다 기업 또는 조직 내부에서 보유하고 있는 컴퓨팅 자원을 사용하여 내부에 구축되어 운영되는 클라우드를 &lt;code class=&quot;language-text&quot;&gt;(  1  )&lt;/code&gt;라고 하고, &lt;/p&gt;
&lt;p&gt;클라우드 서비스 제공 업체에서 다중 사용자를 위한 컴퓨팅 자원 서비스를 제공하는 클라우드를&lt;code class=&quot;language-text&quot;&gt;(  2  )&lt;/code&gt;라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 사설 클라우드(private cloud) 2 공용 클라우드(public cloud)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;041 클라이언트-서버 구조에서 서버에서 그 서버가 제공하는 서비스를 요청하고, 또는 서비스 요청을 위해 필요 인자를 서버가 원하는 방식에 맞게 제공하며, 서버로부터 반환되는 응답에 사용자에게 적절한 방식으로 표현하는 기능을 가진 프로그램이나 시스템을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;클라이언트(Client)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;042 객체지향 프로그래밍에서 특정 객체를 생성하기 위해 변수와 메서드를 정의하는 일종의 틀로, 객체를 정의하기 위한 상태와 메서드로 구성되는 요소는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;클래스(class)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;043 객체 지향 프로그래밍의 특성 중 하나로 세부사항은 배제하고 중요한 부분을 중심으로 간략화 하는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;추상성/추상화(abstraction)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;044 인증을 받은 컴포넌트를 등록하는 곳으로 이곳은 컴포넌트의 최신 버전을 유지하며 컴포넌트의 버전별 상태도 유지하고 관리함으로써 사용자가 컴포넌트 이용을 용이하도록 한다 ‘이곳’은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;컴포넌트 저장소(Repository; 레파지토리)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;045 범위 분할 이후 해시 함수를 적용하여 재분할함으로써 큰 파티션에 대한 I/O(In/Out) 요청을 여러 파티션으로 분산할 수 있는 파티셔닝 기법은? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;컴포지트 파티셔닝(Composite Partitioning)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;046 역공학을 통한 공격을 막기 위해 프로그램의 소스 코드를 알아보기 힘든 형태로 바꾸는 기술로, 소스코드 자체를 알아보기 힘들게 바꾸거나 컴파일 후에 생성된 바이너리를 분석하기 힘들게 변조하는 유형으로 크게 구분되는 저작권 크랙방지 기술을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 난독화(Code Obfuscation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;047 소프트웨어 테스트 충분성 지표 중 하나로, 소스코드의 구문, 조건, 결정 등의 구조 코드 자체가 얼마나 테스트되었는지를 측정하는 방법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 커버리지(Code Coverage)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;048 물리 데이터 저장소 구성을 위해 DBMS를 생성한 후, 릴레이션과 릴레이션 사이에 대해 참조의 일관성을 보장하기위한 제약조건으로 외래키에 제한, 연쇄, 널값 설정 등을 통해 구현하는 제약조건을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;참조무결성 제약 조건&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;049 애플리케이션 성능 측정 지표로서, 애플리케이션이 주어진 시간에 처리할 수 있는 트랜잭션의 수를 뜻하는 개념은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;처리량(Throughput)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;050 기업이 시간 경과에 따라 지불해야 하는 컴퓨팅 비용을 통합적 관점에서 파악하여 직접 비용뿐만 아니라 이와 관련된 숨겨진 비용(간접비용)까지 포함하여 파악하는 비용을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;총 소유 비용(TCO; Total Cost of Ownership)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;051 SW 개발 보안 용어 중 ‘위협이 발생하기 위한 사전 조건에 따른 상황’을 이르는 말로 ‘평문 전송, 입력값 미검증, 비밀번호의 공유’등의 사례가 있다 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;취약점(Vulnerability)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;052 특정한 기능을 수행하기 위해 독립적으로 개발되어 보급되는, 잘 정의된 인터페이스를 가지며 다른 부품과 조립되어 응용시스템을 구축하기 위해 사용되는 소프트웨어 프로그램을 이르는 말은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;컴포넌트(Component)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;053 창작물인 저작물에 대한 배타적 독점적 권리로 타인의 침해를 받지 않을 고유한 권한은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;저작권(Copyright)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;054 결정 명령문 내의 각 조건이 적어도 한 번은 참과 거짓의 결과가 되도록 수행하는 코드 커버리지 유형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;조건 커버리지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;055 데이터 구조나 오브젝트 상태를 다른 컴퓨터 환경으로 저장하고 재구성할 수 있는 포맷으로 변환하는 과정을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;직렬화(Serialization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;056 총합, 평균 등의 데이터 분석을 위해서는 복수 행 기준의 데이터를 모아서 처리할 필요가 있는데, 이러한 유형의 함수를 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;함수라고 한다 &lt;/p&gt;
&lt;p&gt;이 함수에는 여러 행 또는 테이블 전체 행으로부터 하나의 결괏값을 반환하는 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; 함수와 &lt;/p&gt;
&lt;p&gt;소그룹 간의 소계(소그룹의 합계) 및 중계(중그룹) 등의 중간 합계 데이터를 산출하는 &lt;code class=&quot;language-text&quot;&gt;( 3 )&lt;/code&gt;, &lt;/p&gt;
&lt;p&gt;그리고 데이터베이스를 사용한 온라인 분석 처리(OLAP) 용도로 사용하기 위해서 &lt;/p&gt;
&lt;p&gt;표준 SQL에 추가된 기능으로서의 &lt;code class=&quot;language-text&quot;&gt;( 4 )&lt;/code&gt; 함수가 있다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 데이터 분석 2 집계(Aggregate) 3 그룹(Group) 4 윈도우(Window)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;057 요구사항 정의에 사용되는 초기 시나리오를 말하며, 높은 수준, 낙관적이면서도 발생 상황에서의 이상적인 시스템 동작에 초점을 맞추는 시나리오는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정황 시나리오(Contextual Scenario)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;058 정형기술검토(FTR)는 &lt;code class=&quot;language-text&quot;&gt;(1), (2), (3)&lt;/code&gt;, 라운드로빈(RoundRobin), 그리고 소프트웨어에 관한 다른 소단체의 기술적 평가를 포함하는 검토의 부류이다.&lt;/p&gt;
&lt;p&gt; 검토 자료를 회의 전에 배포해서 사전검토한 후 짧은 시간 동안 회의를 진행하는 형태로 리뷰를 통해 오류를 검출하고 문서화하는 기법을 &lt;code class=&quot;language-text&quot;&gt;(1)&lt;/code&gt; (이)라고 하고, &lt;/p&gt;
&lt;p&gt;2~3명이 진행하는 리뷰의 형태로 요구사항 명세서 작성자가 요구사항 명세서를 설명하고, 이해관계자들이 설명을 들으면서 결함을 발견하는 형태로 진행하는 검토기법을 &lt;code class=&quot;language-text&quot;&gt;(2)&lt;/code&gt; (이)라고 하며, &lt;/p&gt;
&lt;p&gt;소프트웨어 요구, 설계, 원시 코드 등의 저작자 외의 다른 전문가 또는 팀이 검사하여 오류를 찾아내는 공식적 검토기법을 &lt;code class=&quot;language-text&quot;&gt;(3)&lt;/code&gt; 이라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 워크스루(Walk Through) 2 동료 검토(Peer Review) 3 인스펙션(Inspection)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;059 비동기 브라우저 / 서버 통신(AJAX)을 위해 ‘속성-값 쌍’,  ‘키-값 쌍’ 으로 이루어진 데이터 오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;제이슨(JSON; JavaScript Object Notation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;060 제품 소프트웨어 개발단계부터 적용한 기준이나 패키징 이후 설치 및 사용자 측면의 주요 내용등을 기록한 문서이자, 사용자 중심의 기능 및 방법을 나타낸 설명서와 안내서는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;제품 소프트웨어 매뉴얼&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;061 개발이 완료된 제품 소프트웨어를 고객에게 전달하기 위한 형태로 패키징하고, 설치와 사용에 필요한 제반 절차 및 환경 등 전체 내용을 포함하는 매뉴얼로 개발된 컴포넌트 사용 시에 알아야 할 내용을 기술하며 패키지의 기능, 패키지의 인터페이스, 포함하고 있는 메서드나 오퍼레이션과 메서드의 파라미터 등의 설명이 포함되어 있는 문서는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;제품 소프트웨어 사용자 매뉴얼&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;062 프로그램 실행을 위해 연산을 표현하는 기호를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;연산자(operator)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;063 MS-DOS의 멀티태스킹 기능과 GUI 환경을 제공하는 응용프로그램으로서, 마이크로소프트사가 개발한 운영체제는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;윈도우즈(windows)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;064 블랙박스 테스트 유형 중, 시스템이 실제 사용되는 유스케이스로 모델링 되어 있을 때, 프로세스 흐름을 기반으로 테스트 케이스를 명세화하여 수행하는 테스트 기법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;유스케이스 테스트(Usecase Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;065 암호화는 수행하지만 절대로 복호화가 불가능한 알고리즘은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;일방향 암호화 알고리즘&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;066 소스 코드 품질분석 도구 유형 중, 작성된 소스 코드를 실행시키지 않고, 코드 자체만으로 코딩 표준 준수 여부, 코딩 스타일 적정 여부, 잔존 결함 발견 여부 등을 확인하는 코드 분석 도구를 ( 1 )이라고 하고, pmd, cppcheck, SonarQube, checkstyle 등이 있다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정적 분석 도구&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;067 애플리케이션 성능 측정 지표 중, 애플리케이션이 트랜잭션을 처리하는 동안 사용하는 CPU 사용량, 메모리 사용량, 네트워크 사용량을 나타내는 개념은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;자원 사용률(Resource Usage)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;068 프로그램 언어중에서 그 실행 순서(절차)를 지정하게 되는 언어로서, 명령형 언어라고도 불리며 C, BASIC, FORTRAN, ALGOL 등이 있다 이러한 언어들을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;절차적 프로그래밍 언어&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;069 관계형 데이터베이스 설계에서 중복을 최소화하여 데이터를 구조화하는 프로세스를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정규화(Normalization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;070 데이터베이스 정규화 단계 중, 제2 정규형(2NF)의 정규화 조건을 서술하시오 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;부분 함수 종속 제거(또는 완전 함수적 종속 관계)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;071 데이터의 중복성으로 인해 릴레이션을 조작할 때 발생하는 비합리적인 현상으로 ‘삽입, 삭제, 갱신’의 유형이 있는 이것은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;이상 현상(Anomaly)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;072 검색 연산의 최적화를 위해 데이터베이스 내 열에 대한 정보를 구성한 데이터 구조를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인덱스(Index)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;073 객체지향 프로그래밍(OOP)에서 해당 클래스의 구조로 컴퓨터 저장 공간에 할당된 실체를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인스턴스(Instance)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;074 inter(상호)와 action(동작, 작동)의 합성어로 ‘상호+동작’을 위한 디자인으로, 입출력 장치를 매개로 디지털 시스템과 사람이 주고 받는 일련의 의사소통 과정을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인터랙션(Interaction)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;075 컴퓨터 시스템이 제공하는 모든 하드웨어, 소프트웨어를 사용할 수 있도록 해주고, 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스를 담당하는 프로그램을 뜻하는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;운영체제(OS; Operating System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;076 네트워크에 분산된 정보를 서비스 형태로 개방하여 표준화된 방식으로 공유하는 기술로서 서비스 지향 아키텍처 개념을 실현하는 대표적인 기술을 (  )(이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;웹 서비스 방식&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;077 SW 개발 보안 용어 중 하나로 ‘위협이 취약점을 이용하여 조직의 자산 손실 피해를 가져올 가능성’을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; (이)라고 하며,  ‘조직이나 기업의 자산에 악영향을 끼칠 수 있는 사건이나 행위’로 ‘해킹, 삭제, 자산의 불법적인 유출, 위/변조, 파손’ 등을 포함하는 개념을 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; (이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 위험(Risk) 2 위협(Threat)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;078 시스템이 액터에게 제공해야 하는 기능으로 시스템 요구사항이자, 사용자 입장에서 바라본 시스템의 기능을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;유스케이스(Usecase)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;079 이해관계자들과의 화면 구성을 협의하거나 서비스의 간략한 흐름을 공유하기 위해 화면 단위의 레이아웃을 설계하는 작업을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;와이어 프레임(Wireframe)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;080 하나 이상의 테이블을 연결하여 사용하는 관계형 데이터베이스에서 하나의 테이블 속성 또는 속성 집합이 다른 테이블의 기본키가 되는 것을 의미하며, 데이터베이스에 존재하는 테이블의 관계에서 참조 무결성을 보장하기 위해 사용되며, 중복되는 값을 가질 수 있으며 비어있는 값(Null 값) 또한 가질 수 있는 키는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;외래키(FK; Foreign Key)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;081 다양한 경로를 통해 수집된 직접적인 요구사항을 검토하여, 페르소나(persona)의 목적을 기준으로 데이터 요구, 기능 요구, 제품 품질, 제약 요인 기반으로 만든 요구사항 표를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 매트릭스(Requirement Matrix)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;082 사용자가 상황에 맞게 기존 자료형을 조합해서 만드는 자료형을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; 자료형이라고 한다&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; 자료형은 열거체(Enumeration), 구조체(Structure), 공용체(Union)로 구분되는데, &lt;/p&gt;
&lt;p&gt;모든 멤버 변수가 하나의 메모리 공간을 공유하는 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;자료형을 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;라고 하고, &lt;/p&gt;
&lt;p&gt;서로 연관된 정수형 상수들의 집합을 &lt;code class=&quot;language-text&quot;&gt;( 3 )&lt;/code&gt;라고 하며, &lt;/p&gt;
&lt;p&gt;자바, 파이썬에서는 제공하지 않지만 C언어에서 사용자가 기본 타입을 가지고 새롭게 정의할 수 있는&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; 자료형을 &lt;code class=&quot;language-text&quot;&gt;( 4 )&lt;/code&gt;라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 사용자 정의 2 공용체 3 열거체 4 구조체&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;083 테이블을 생성시 일부 단어들 중 시스템에서 사전 예약이 되어 있어서 사용할 수 없는 단어를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;예약어(reserved word) 또는 키워드(keyword)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;084 요구사항을 충족시켜주지 못한다면, 결함이 없다고 해도 품질이 높다고 볼 수 없는 소프트웨어 테스트의 원리는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오류-부재의 궤변&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;085 소스 코드를 공개해 소프트웨어 혹은 하드웨어 제작자의 권리를 지키면서 원시 소스 코드를 누구나 열람ㆍ 사용할 수 있도록 한 소프트웨어를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오픈소스(Open Source)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;086 SQL을 가장 빠르고 효율적으로 수행할 최적의 처리 경로를 생성해주는 데이터베이스 관리자(DBMS)내부의 핵심엔진을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 하고,&lt;/p&gt;
&lt;p&gt; &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;이/가 생성한 SQL 처리경로를 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 옵티마이저(Optimizer) 2 실행계획(Execution Plan)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;087 테스트 목적에 따른 분류로 ‘불법적인 소프트웨어가 접근하여 시스템을 파괴하지 못하도록 소스 코드 내의 보안적인 결함을 미리 점검하는 테스트 기법’을 이르는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;안전 테스트(Security Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;088 어떤 문제에 대한 답을 찾는 해법으로 자연어, 순서도, 의사 코드, 프로그래밍 언어를 이용하는 방법으로 표현되는 개념은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;알고리즘(Algorithm)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;089 다양한 패키지 애플리케이션 및 기업에서 자체적으로 개발한 애플리케이션을 연결하는 EAI의 핵심 장치를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;어댑터(Adaptor)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;090 사물의 구조나 상태, 동작 등을 모델로 표현하는 경우, 그 모델의 구성요소이자,  데이터의 집합을 의미하고 물리적 설계 단계에서의 테이블을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;엔티티(entity)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;091 응용 소프트웨어와 연계 대상 모듈 간의 데이터 연계 시 요구사항을 고려한 연계방법과 주기를 설계하기 위한 메커니즘을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;은/는 직접적인 방법과 간접적인 방법으로 구분할 수 있는데, 직접적인 방법 중 수신 시스템에서 DB링크를 생성하고 송신 시스템에서 해당 DB링크를 직접 참조하는 방식을 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;(이)라고 하고, &lt;/p&gt;
&lt;p&gt;수신 시스템의 WAS에서 송신 시스템 DB로 연결하는 DB커넥션 풀(DB Connection Pool)을 생성하고 연계 프로그램에서 해당 DB 커넥션 풀 명을 이용하는 기술을 &lt;code class=&quot;language-text&quot;&gt;( 3 )&lt;/code&gt;(이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 연계 메커니즘 2 DB 링크(DB Link) 3 DB연결(DB Connection)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 2-단답형 문제(2)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 2-단답형 문제(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 2-단답형 문제(2)/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 단답형 문제입니다 정처기 공부를 할 때 활용하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-단답형-문제-2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8B%A8%EB%8B%B5%ED%98%95-%EB%AC%B8%EC%A0%9C-2&quot; aria-label=&quot;1 단답형 문제 2 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 단답형 문제 2&lt;/h1&gt;
&lt;p&gt;001 인프라를 생성, 관리하는 복잡함 없이 애플리케이션을 개발, 실행, 관리할 수 있게 하는 플랫폼을 제공하는 서비스로, 개발을 위한 플랫폼을 구축할 필요 없이, 필요한 개발 요소를 웹에서 빌려 쓸 수 있게 하는 클라우드 컴퓨팅 유형은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PaaS(플랫폼형 서비스, Platform as a Service)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;002 표준 SQL을 기본으로 Oracle에서 개발한 데이터 조작언어로, Oracle 기반의 모든 프로시저 작성에 사용되며 표준 SQL의 확장 기능이 우수한 언어 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PL/SQL(Procedural Language for SQL)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;003 자바 데이터베이스 응용 프로그램 실행 시, “쿼리 분석 -&gt; 컴파일 -&gt; 실행” 과정을 최초 한 번만 수행 후 캐시에 담아 재사용하는 구문은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;preparedStatement&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;004 온라인 업무 처리 형태의 하나로 터미널에서 받은 메시지를 따라 호스트가 처리를 하고 그 결과를 다시 터미널에 되돌려 주는 방법을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OLTP(OnLine Transaction Processing, 온라인 거래 처리)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;005 한계점의 측정을 목적으로 낮은 수준의 부하부터 높은 수준의 부하까지 예상 트래픽을 꾸준히 증가시키며 진행하는 부하 테스트는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Ramp-up load&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;006 다수의 인원이 동시에 소스 파일에 접근하여 수정이 가능한 CVS와는 달리 소스 파일의 수정을 한 사람만으로 제한하여 다수의 사람이 파일의 수정을 동시에 할 수 없도록 파일 잠금 방식으로 버전을 관리하는 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RCS(Revision Control System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;007 관계형 모델을 기반으로 하는 가장 보편화된 DBMS로, 데이터를 저장하는 테이블의 일부를 다른 테이블과 상하 관계로 표시하며 상관 관계를 정리하는 특성을 갖고 있으며, 변화하는 업무나 데이터 구조에 대한 유연성이 좋아 유지 관리가 용이한 DBMS는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RDBMS(Relational DataBase Management System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;008 웹과 같은 분산 하이퍼 미디어 환경에서 자원의 존재/상태 정보를 표준화된 HTTP 메소드로 주고받는 웹 아키텍처를 뜻하는 용어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;REST(Representational State Transfer, 웹 표현상태 변경)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;009 관리자가 사용자 수제비에게 ‘학생’ 테이블에 대해 UPDATE할 수 있는 권한을 회수하고 수제비가 다른 사용자에게 부여한 권한 역시 회수하고자 한다 다음 구문에 적절한 키워드를 쓰시오&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; UPDATE ON 학생 FROM 서울대학교 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 REVOKE 2 CASCADE CONSTRAINTS;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;010 자율 시스템(AS) 내에서 사용하는 거리벡터 알고리즘에 기초하여 개발된 통신규약으로, 최대 홉 수(Hop count)를 15개로 제한한 라우팅 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RIP(Routing Information Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;011 소프트웨어 및 관련 데이터는 중앙에 호스팅되고 사용자는 웹 브라우저 등의 클라이언트를 통해 접속하여 소프트웨어를 서비스 형태로 이용하며, 주문형 소프트웨어라고도 하는 클라우트 컴퓨팅 기술 유형을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SaaS(소프트웨어형 서비스, Software as a Service)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;012 커널 암호화 방식으로 데이터베이스 파일을 직접 암호화하고, 접근 제어와 감사 기록 기능이 추가된 데이터베이스 보안 강화 기술은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Secure DB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;013 전자상거래, 금융, 무선통신 등에서 전송되는 개인정보와 같은 중요한 정보를 보호하기 위해, 1999년 2월 한국인터넷 진흥원과 국내 암호전문가들이 순수 국내 기술로 개발한 대칭키 128비트 블록의 암호 알고리즘은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SEED&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;014 다양한 브라우저 지원 및 개발언어를 지원하는 웹 애플리케이션 테스트 프레임워크로, 테스트 스크립트 언어를 학습할 필요 없이 기능 테스트를 만들기 위한 도구를 제공하는 검증 도구는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Selenium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;015 소프트웨어 보안의 모범사례를 소프트웨어 개발 라이프사이클에 통합한 것으로 ‘코드 검토(code review), 아키텍처 위험 분석(architectural risk analysis), 침투 테스트(penetration testing), 위험 기반 보안 테스트(risk—based security test), 악용사례(abuse cases), 보안 요구(security requirement), 보안 운영(security operation)’의 7가지 보안 강화 활동을 정의한 소프트웨어 개발 보안 방법론은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Seven Touchpoints&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;016 사용자의 요청을 처리하는 기능을 제공하기 위한 로직을 구현하고 DAO 클래스를 통해서 DB연동을 처리하는 기능을 수행하는 클래스는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;서비스(Service)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;017 소프트웨어 개발 보안테스트 유형 중, SW를 실행하지 않고 소스코드 수준으로 보안 약점을 분석하는 방법으로서 SW 개발 단계에서 주로 사용하는 방법은 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;이고, &lt;/p&gt;
&lt;p&gt;SW 실행 환경에서 소스코드를 보지 않고 보안 약점을 분석 방법으로서 SW 시험 단계에서 주로 사용하는 방법은&lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; 이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 정적분석-화이트박스기법  2 동적분석-블랙박스기법&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;018 소프트웨어 개발 보안 생명주기를 순서대로 서술하시오&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 명세 -&amp;gt; 설계 -&amp;gt; 구현 -&amp;gt; 테스트 -&amp;gt; 유지보수&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;019 웹 애플리케이션에서 입력데이터에 대한 유효성 검증을 하지 않을 경우, 공격자가 입력창 및 URL에 SQL문을 삽입하여 DB로부터 정보를 열람, 조작할 수 있는 취약점 공격기법을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SQL삽입 공격(SQL Injection)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;020 HTTP, HTTPS, SMTP 등을 사용하여 메시지를 네트워크 상태에서 교환하는 프로토콜로 HTTP프로토콜 상에 Envelope, Header, Body 등이 추가된 XML문서를 이용하며 기본적인 송수신은 HTTP로 수행되는 웹 서비스 방식은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SOAP(Simple Object Access Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;021 OSI 2 계층 장비로, 느린 전송 속도의 브리지, 허브의 단점을 개선하기 위해서, 출발지에서 들어온 프레임(Frame)을 목적지 MAC 주소 기반으로 빠르게 전송시키는 데이터 링크 계층의 통신 장치로, ‘Store and Forwarding’, ‘Cut Through’, ‘Fragment Free’ 의 3 가지 방식 중 하나를 사용하는 네트워크 장비는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;L2스위치&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;022 OSI 네트워크 계층에서 네트워크 단위들을 연결하는 통신 장비로, IP 레이에서의 스위칭을 수행하여 외부로 전송하며 라우터와의 경계가 모호한 네트워크 장비는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;L3스위치&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;023 OSI 4계층, 전송계층에서 네트워크 단위들을 연결하는 통신 장비로, FTP, HTTP 등을 구분하여 스위칭하는 로드 밸런싱 기능을 수행하며, 4계층 정보인 TCP/UDP 포트번호를 분석하여 포워딩을 결정하고 QoS와 GLB / SLB 기능을 제공하는 스위치는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;L4스위치&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;024 사용자 정보를 유지하기 위한 질의 및 디렉터리 서비스의 등록, 수정, 삭제 및 검색을 위한 목적으로 미국 미시간 대학에서 개발한 인터넷 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;LDAP(Lightweight Directory Access Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;025 특정 조건이 만족될 때까지 반복해서 문장을 실행하는 문장을 LOOP문이라고 한다 탈출 조건을 입력하는 키워드는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EXIT WHEN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;026 CPU가 메모리에 접근하는 것을 관리하는 컴퓨터 하드웨어 부품으로 가상 메모리 주소를 실제 메모리 주소로 변환하는 장치는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MMU(Memory Management Unit)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;027 디지털 멀티미디어 콘텐츠의 생성, 거래, 전달, 관리, 소비하는 과정에 있어서 광범위한 네트워크 및 터미널을 통하는 여러 계층의 멀티미디어 자원을 투명하고, 상호 호환할 수 있도록 사용하기 위한 멀티미디어 프레임워크 표준 규격을 뜻하는 개념은? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MPEG-21(Moving Picture Experts Group 21, 엠페그 21)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;028 마이크로소프트에서는 안전한 소프트웨어 개발을 위해 자체 수립한 방법론을 적용하여 적용 이후 이전 버전보다 50% 이상의 취약점 감소를 확인했다 이 방법론은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MS-SDL(Microsoft Secure Development Lifecycle)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;029 임계 영역(프로그램상에서 동시에 실행될 경우 문제를 일으킬 수 있는 부분)을 가진 스레드들의 실행 시간이 서로 겹치지 않게 각각 단독으로 실행되게 하는 기술로, 시간 및 상태 보안 약점 중 하나인 ‘경쟁 조건’에 대한 대응 방안으로 고려되는 기술은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mutex&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;030 DBMS에 질의하기 위한 SQL 쿼리를 별도의 XML파일로 분리하고 Mapping을 통해서 SQL을 실행하며, 복잡한 JDBC 코드를 단순화 할 수 있고, SQL을 거의 그대로 사용하며, Spring 기반 프레임워크와의 통합 기능을 제공하는 SQL Mapping 기반 오픈소스 Access Framework는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MyBatis&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;031 데이터의 구조를 네트워크상의 망(net)상 형태로 논리적으로 표현한 데이터 모델로, 트리 구조나 계층형 데이터베이스보다는 유연하지만 설계가 복잡한 단점을 갖는 DBMS는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NDBMS(Network DataBase Management System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;032 외부 네트워크와 접속하여 가장 빠른 속도로 데이터를 주고받을 수 있게 컴퓨터 내에 설치되는 장치로 Data Link 계층에서 사용되는 네트워크 장비는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NIC(Network Interface Card)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;033 초당 처리되는 연산능력을 가리키는 말로 컴퓨터의 성능을 수치로 나타낼 때 사용하는 단위는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OPS(Operations Per Second)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;034 링크 상태 알고리즘을 채용하여 규모가 크고 복잡한 TCP/IP 네트워크에서 RIP의 단점을 개선한 프로토콜로, 발생한 변경정보에 대해 RIP보다 빠르게 업데이트 하며, 자세한 제어가 가능하고, 관리 정보의 트래픽을 줄일 수 있어 토폴로지에 대한 정보가 전체 라우터에 동일하게 유지되는 라우팅 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OSPF(Open Shortest Path First, 최단 경로 우선 프로토콜)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;035 UI 유형 중 그래픽 환경을 기반으로 한 마우스나 전자펜을 이용하는 사용자 인터페이스를 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 하며, &lt;/p&gt;
&lt;p&gt;명령어를 텍스트로 입력하여 조작하는 사용자 인터페이스를 &lt;code class=&quot;language-text&quot;&gt;(  2  )&lt;/code&gt;(이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 GUI(Graphical User Interface, 그래픽 반응 기반 인터페이스)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;2 CLI(Command Line Interface, 정적 텍스트 기반 인터페이스)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;036 DBMS 중 하나로, 데이터에 대한 접근 속도가 빠르지만, 종속적인 데이터 계층 구조로 인하여 변화하는 데이터 구조에 유연하게 대응하기 힘든 DBMS는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HDBMS(Hierarchical DataBase Management)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;037 서버, 스토리지 같은 시스템 자원을 클라우드로 제공하는 서비스로, 컴퓨팅 자원에 운영체제나 애플리케이션 등의 소프트웨어를 탑재하여 실행하며 하위의 클라우드 인프라를 제어하거나 관리하지 않지만 스토리지, 애플리케이션에 대해서는 제어권을 가지는 클라우드 컴퓨팅 기술 유형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IaaS(인프라형 서비스, Infrastructure as a Service)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;038 RIP의 문제점 개선을 위해 시스코에서 개발한 통신규약으로 RIP보다 대규모로 복잡한 통신망에서의 운용을 상정한 규격으로 되어 있으며, 거리 벡터 라우팅 알고리즘을 채용하여 목적 통신망까지의 경로는 지연, 회선의 대역폭, 신뢰성 및 부하를 고려해서 결정하는 라우팅 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IGRP(Interior Gateway Routing Protocol, 내부 경로 제어 통신 규약)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;039 인터넷 표준 암호 키 교환 프로토콜로, 상세한 사항이 RFC 2409에 규정되어 있으며 IPSec을 암호화하는데 사용되는 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IKE(Internet Key Exchange)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;040 네트워크에 대한 공격이나 침입을 실시간적으로 차단하고, 유해 트래픽에 대한 조치를 능동적으로 처리하는 시스템은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IPS(Intrusion Prevention System, 침입 차단 시스템)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;041 IP계층(3계층)에서 무결성과 인증을 보장하는 인증헤더(AH)와 기밀성을 보장하는 암호화(ESP)를 이용한 IP 보안 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IPSec(IP Security Protocol))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;042 인터넷에서 사용되는 패킷 교환 네트워크상에서 데이터를 교환하기 위한 32bit 주소체계를 갖는 네트워크 계층의 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IPv4(Internet Protocol version 4)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;043 디지털 통신망을 이용하여 음성, 문자, 영상 등의 통신을 종합적으로 할 수 있도록 하는 통신 서비스는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ISDN(Integrated Service Digital Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;044 자바 가상머신(JVM)과 컴파일러, 디버거, 그리고 자바 애플릿 및 응용프로그램 개발을 위한 도구들이 포함된 핵심 플랫폼을 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JDK(Java Development Kit)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;045 JSP 페이지 내에서 자바 코드를 바로 사용하지 않고 로직을 내장하는 효율적인 방법을 제공하고, 표준화된 태그 셋을 사용하여 코드의 유지보수를 용이하게 하는 라이브러리는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JSTL(Java server pages Standard Tag Library)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;046 시스템 메모리를 관리하면서 자바 바이트 코드와 컴퓨터의 운영 시스템 간에 번역기 역할을 수행하여 자바 기반 애플리케이션을 위해 이식 가능한 실행 환경을 제공하여, 어떤 운영체제에서든 자바를 이용하여 작업할 수 있게 도와주는 소프트웨어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JVM(Java Virtual Machine, 자바 가상 머신)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;047 인터넷 프로토콜 스택 중 네트워크 계층의 프로토콜로서 이전 버전에서 가지고 있던 주소고갈, 보안성, 이동성 지원 등의 문제점을 해결 하기 위해서 개발된 128bit 주소체계를 갖는 차세대 인터넷 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IPv6(Internet Protocol version 6)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;048 자바(Java)에서 데이터베이스를 사용할 수 있도록 연결해주는 응용 프로그램 인터페이스를 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 하고, &lt;/p&gt;
&lt;p&gt;데이터베이스를 액세스하기 위한 표준 개방형 응용 프로그램 인터페이스를 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;(이)라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 JDBC(Java DataBase Connectivity&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;2 ODBC(Open DataBase Connectivity)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;049 클라이언트-서버 구조로 구성되며 지역적으로 떨어진 상황에서도 다수의 인원이 동시에 범용적인 운영체제로 접근하여 작업이 가능한 도구로 GNU 일반 공중 사용 허가서 하에 배포되는 소프트웨어 버전관리 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CVS(Concurrent Versions System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;050 특정 타입의 데이터베이스에 추상 인터페이스를 제공하는 개체로 세부내용 노출 없이 데이터를 조작하는 객체를 이르는 용어는? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DAO(Data Access Object, 데이터 접근 객체)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;051 네트워크에서 도메인이나 호스트 이름을 숫자로 된 IP주소로 해석해주는 TCP/IP 네트워크 서비스를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DNS(Domain Name System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;052 디지털 저작물에 특정한 번호를 부여하는 일종의 바코드 시스템으로 디지털 저작물의 저작권 보호 및 정확한 위치 추적을 제공하는 식별기술은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DOI(Digital Object Identifier)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;053 프로세스 사이에서 데이터를 전송하는 객체로 데이터 저장ㆍ회수 외에 다른 기능이 없는 객체를 뜻하는 말은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DTO(Data Transfer Object, 데이터 전송 객체)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;054 기업 내에서 운영되는 서로 다른 플랫폼 및 애플리케이션들 간의 정보 전달, 연계, 통합하여 필요한 정보를 중앙 집중적으로 통합 ,관리, 사용할 수 있는 환경을 구현하는 것으로 e-비즈니스를 위한 기본 인프라를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EAI(Enterprise Application Integration)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;055 기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션들 간을 하나의 시스템으로 관리 운영할 수 있도록 서비스 중심의 통합을 지향하는 아키텍처 또는 기술로 버스를 중심으로 각각 프로토콜이 호환이 가능하도록 애플리케이션 간의 통합을 느슨한 결합(Loosely Coupled) 방식으로 지원하는 방식을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ESB(Enterprise Service Bus)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;056 암호화 알고리즘을 활용한 캡슐화 기반 페이로드 기밀성을 제공하는 프로토콜로 DARPA가 후원하는 연구 프로젝트의 일환으로 1992년부터 해군 연구소에서 개발되었으며 1993년 12월 IETF SIPP 실무 그룹에 의해 공개적으로 공개된 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ESP(Encapsulation Security Payload)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;057 웹 기반 테스트 케이스 설계/실행/결과 확인 등을 지원하는 테스트 프레임워크로, 사용자가 테스트 케이스 테이블을 작성하면 빠르고 편하게 자동으로 원하는 값에 대해 테스트 할 수 있는 장점이 있는 검증 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Fitnesse&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;058 TCP/IP 프로토콜을 가지고 서버와 클라이언트 사이의 대용량 파일을 네트워크를 통해 주고 받을 때 사용하는 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;FTP(File Transfer Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;059 컴퓨터 파일의 변경사항을 추적하고 여러 명의 사용자들 간에 해당 파일들의 작업을 조율하기 위한 분산 버전 관리 시스템으로 로컬 저장소에서는 commit을 통해, 원격 저장소에서는 push를 통해 작업이 반영되는 형상 관리 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;060 관리자가 사용자 수제비에게 ‘학생’ 테이블에 대해 INSERT, UPDATE를 할 수 있는 권한과 그 권한을 필요시 다른 사람에게 부여할 수 있는 권한을 부여하고자 한다 ( ) 안에 적절한 키워드를 쓰시오 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; INSERT, UPDATE ON 학생 TO 서울대학교 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 GRANT 2 WITH GRANT OPTION&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;061 SQL문에서 테이블의 행을 그룹으로 묶을 때 그룹을 묶는 기준을 설정하는 절로, 기준 컬럼의 값이 동일한 행끼리 하나의 그룹으로 묶어 사용하는 절을 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 한다. &lt;/p&gt;
&lt;p&gt;이로 만들어진 그룹에는 &lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;(을)를 통해 제한을 걸 수 있는데, 이때는 그룹 함수만 사용이 가능한 특징이 있다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 GROUP BY  2 HAVING&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;062 메시지 Checksum을 활용한 데이터 인증과 비연결형 무결성을 보장해주는 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;AH(Authentication Header)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;063 자바스크립트를 사용하는 비동기 통신기술로, 클라이언트와 서버 간에 XML 데이터를 주고 받는 기술은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;AJAX(Asynchronous Javascript and XML)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;064 프로그래머를 위한 운영체제나 프로그램의 인터페이스 사양으로서 응용 프로그램이나 운영체제나 데이터베이스 관리 시스템과 같은 시스템 프로그램과 통신할 때 사용되는 언어나 메시지 형식을 가지며, 프로그램 내에서 실행을 위해 특정 서브루틴에 연결을 제공하는 함수를 호출하는 것으로 구현되는 인터페이스 또는 프로그램을 작성하기 위한 일련의 서브프로그램, 프로토콜 등을 정의하여 상호 작 용을 하기 위한 인터페이스 사양을 뜻하는 개념은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;API(Application Programming Interface)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;065 안정적인 시스템 운영을 위해 부하량, 접속자 파악 및 장애진단 등을 목적으로 하는 성능 모니터링 도구를 무엇이라고 하는가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;APM(Application Performance Monitoring)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;066광대역 서비스의 다양한 특성을 수용하기 위한 광대역 종합정보통신망(B-ISDN)의 실현을 목적으로 제안되었으며 회선교환 방식과 패킷교환 방식의 장점을 통합시킨 연결지향적 속성을 지닌 패킷교환 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ATM(Asynchronous Transfer Mode, 비동기 전송 모드)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;067 인터넷의 자동 시스템(AS; Autonomous System) 중 라우팅 및 도달 가능성 정보를 교환하도록 설계된, 표준화된 외부 게이트웨이 프로토콜의 하나로, 대형 사업자(ISP) 간의 상호 라우팅에 사용되며, 경로 벡터 라우팅 프로토콜(path-vector routing protocol)로 분류되는 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;BGP(Border Gateway Protocol, 경계 경로 프로토콜)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;068 최초로 분산저장식 방식을 사용한 도구로서, 개발 시에는 상용 소프트웨어로 제공되다가 2016년 오픈 소스로 전환된 도구로 2020년 현재 더이상 개발되고 있지 않은 소프트웨어 버전 관리도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;비트키퍼(Bitkeeper)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;069 게임 클라이언트나 콘텐츠를 효율적으로 전달하기 위해 여러 노드를 가진 네트워크에 데이터를 저장하여 사용자에게 제공하는 시스템은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CDN(Contents Delivery Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;070 ‘개념 관점, 역할기반 관점, 활동평가 관점, 활동구현 관점, 취약성 관점’등의 활동중심, 역할 기반의 프로세스로 구성된 집합체로서 이미 운영중인 시스템에 적용하기 적당한 소프트웨어 개발 보안 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CLASP(Comprehensive, Lightweight Application Security Process)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;071 복수 서버, 복수 클라이언트 구조로 서버가 부족할 때 필요한 서버를 하나씩 추가하여 확장성을 기할 수 있는 소프트웨어 버전 관리 도구는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Clear Case&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;072 다양한 미디어 포맷에 따라 각종 콘텐츠를 작성, 수집, 관리, 배급하는 콘텐츠 생산에서 활용, 폐기까지 전 공급 과정을 관리하는 기술을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CMS(콘텐츠 관리 시스템, Contents Management System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;073 배치 스케줄러 실행을 위해 작업이 실행되는 시간 및 주기 등을 설정할 때 사용하는 표현식을 &lt;code class=&quot;language-text&quot;&gt;(  1  )&lt;/code&gt;(이)라고 한다 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt; 는/은 왼쪽부터 순서대로 7개의 필드를 갖는데 각각의 의미는 ‘&lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt;/분/시간/&lt;code class=&quot;language-text&quot;&gt;( 3 )&lt;/code&gt;/월/&lt;code class=&quot;language-text&quot;&gt;( 4 )&lt;/code&gt;/연도’이다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 크론 표현식(Cron ) 2 초(seconds) 3 일(day) 4 요일(week)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;074 대부분의 소프트웨어가 가지는 기본 데이터처리 기능인 Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 이르는 용어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CRUD(방식)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;075 문서 전체의 일관성을 유지할 수 있고, 각 코드마다 스타일을 지정해야 했던 부담을 덜기 위해 웹 문서의 전반적인 스타일을 미리 저장해 둔 스타일시트는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CSS(Cascading Style Sheets)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;076 OSI 1 계층 장비로, 여러 대의 컴퓨터를 연결하여 네트워크로 보내거나 하나의 네트워크로 수신된 정보를 여러 대의 컴퓨터로 송신하기 위한 장비는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;허브 (Hub)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;077 EAI 구축 유형 중, ‘단일한 접점의 허브 시스템을 통하여 데이터를 전송하는 중앙 집중식 방식’을 취함으로써 허브 장애 시 전체 장애가 발생할 우려가 있는 유형은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;허브 앤 스포크(Hub &amp;amp; Spoke)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;078 현행 시스템 파악 절차에 대해 순서대로 서술하시오&lt;/p&gt;
&lt;p&gt;&amp;#x3C;하드웨어 및 네트워크 구성 파악 // 구성, 기능, 인터페이스 파악 // 아키텍처 및 소프트웨어 구성 파악&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;구성, 기능, 인터페이스 파악 -&amp;gt; 아키텍처 및 소프트웨어 구성 파악 -&amp;gt; 하드웨어 및 네트워크 구성 파악&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;079 소프트웨어 개발을 위한 전체 과정에서 발생하는 모든 항목의 변경 사항을 관리하기 위한 활동을 &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;(이)라고 한다 &lt;code class=&quot;language-text&quot;&gt;( 1 )&lt;/code&gt;은/는 ‘식별-&gt; 통제-&gt;&lt;code class=&quot;language-text&quot;&gt;( 2 )&lt;/code&gt; -&gt; 기록’의 절차로 이루어진다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 형상관리 2 감사&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;080 사용자 화면이 있는 경우, 각각의 화면 단위로 단위 모듈을 개발 후에 화면에 직접 데이터를 입력하여 수행하는 테스트로서 사용자 시나리오에 기반한 테스트를 할 수 있는 공통 모듈 테스트는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;화면 기반 테스트&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;081 화이트박스 테스트의 유형 중 하나로 소프트웨어의 논리적 복잡도 측정 후 수행경로의 집합을 정의하는 테스트를  &lt;code class=&quot;language-text&quot;&gt;(   1   )&lt;/code&gt; 이라고 하고, &lt;/p&gt;
&lt;p&gt;프로그램의 루프 구조에 국한해서 실시하는 테스트를 &lt;code class=&quot;language-text&quot;&gt;(   2   )&lt;/code&gt;라고 한다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;1 제어구조 테스트  2 루프 테스트&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;082 소프트웨어 결과를 테스트하는 것으로 만들어진 제품이 제대로 동작하는지 확인하고 최종 사용자 요구 또는 소프트웨어 요구가 적합한지를 판단하고 사용자 시각으로 올바른 소프트웨어가 개발되었는지 입증하는 과정을 이르는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;확인(Validation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;083 테스트 목적에 따른 분류 중 하나로 ‘오류를 제거하거나 수정한 시스템에서 오류 제거와 수정에 의해 새로이 유입된 오류가 없는지 확인하는 일종의 반복적 테스트 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;회귀 테스트(Regression Test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;084 테스트 목적에 따른 분류 중 하나로, ‘시스템에 고의로 실패를 유도하여 시스템의 정상적 복귀 여부를 테스트하는 기법’은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;회복 테스트(Recovery)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;085 UI 개발을 위한 주요 기법 중, ‘고객, 경쟁하고 있는 자사, 경쟁사를 비교 분석하여 자사를 어떻게 차별화해서 경쟁에서 이길 것인가를 분석하는 기법’을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;3C분석(Customer, Company, Competitor)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 1-단답형 문제(1)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 1-단답형 문제(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 1-단답형 문제(1)/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 단답형 문제입니다 정처기 공부를 할 때 활용하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-단답형-문제-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8B%A8%EB%8B%B5%ED%98%95-%EB%AC%B8%EC%A0%9C-1&quot; aria-label=&quot;1 단답형 문제 1 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 단답형 문제 1&lt;/h1&gt;
&lt;p&gt;001 겉보기에는 정상적인 프로그램으로 보이지만 실행하면 악성 코드를 실행하는 악성 루틴이 숨어 있는 프로그램은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;트로이목마(Trojan)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;002 고가용성(HA) 기술에서 1선 시스템이 장애로 가동이 중단되면 2선 시스템이 기능을 넘겨 받아 운용되는 백업 모드를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;페일오버(Failover)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;003 소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 일련의 협업화된 형태로 클래스들을 제공하는 틀로, 정보 시스템의 개발 및 운영을 지원하는 도구 및 가이드 등을 포함하는 개념은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프레임워크(Framework)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;004 하나의 호스트 컴퓨터 상에서 동시에 다수의 운영체제를 구동시킬 수 있는 HW와 OS사이의 SW 가상화 플랫폼 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;하이퍼바이저(Hypervisor)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;005 인터넷에 있는 자원을 나타내는 유일한 주소이며, 인터넷에서 요구되는 기본조건으로서 인터넷 프로토콜에 항상 붙어다니는 식별 기술은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;URI(Uniform Resource Identifier, 통합 자원 식별자)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;006 제품과 시스템, 서비스 등을 사용자가 직/간접적으로 이용하면서 느끼고 생각하는 지각과 반응, 행동 등의 총체적 경험을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UX(User eXperience, 사용자 경험)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;007 논리적으로 분할된 스위치 네트워크나 가상 기능을 가진 LAN 스위치 또는 ATM 스위치를 사용해서 물리적인 배선에 구애받지 않고 브로드캐스트 패킷이 전달되는 범위를 임의로 나누는 네트워크 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;VLAN(Virtual Local Area Network, 가상랜)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;008 간단한 엔티티를 의미하는 작은 객체 가변 클래스인 DTO와 달리 고정 클래스를 가지는 객체를 이르는 용어는? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;VO(Value Object)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;009 소프트웨어 생명주기 각 단계별로 개발자 관점에서의 공정 과정상 검증과 사용자 관점에서의 최종 산출물에 대한 확인을 지원하기 위한 테스트 모델은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;V모델&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;010 서버계층에서 애플리케이션이 동작할 수 있는 환경을 제공하고 안정적인 트랜잭션 처리와 관리, 다른 이(異)기종 시스템과의 애플리케이션 연동을 지원하여 사용자 요청 스레드를 처리하고, 데이터베이스에 접속하여 SQL 쿼리문에 대한 결과 값을 반환하는 역할을 수행하는 서버는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;WAS(웹 애플리케이션 서버; Web Application Server)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;011 루비(Ruby) 기반 웹 애플리케이션 테스트 프레임워크로, 모든 언어 기반의 웹 애플리케이션 테스트와 브라우저 호환성 테스팅이 가능한 특징을 갖는 검증 도구는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;watir&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;012 웹 서비스명, 제공 위치, 메시지 포맷, 프로토콜 정보 등 웹 서비스 정보에 대한 상세 정보를 기술한 파일로 XML 형식으로 구현하며, 인터페이스와 구현을 분리하여 재사용성을 높인 웹 서비스 방식은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;WSDL(Web Services Description Language)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;013 통신을 원하는 두 단말장치가 패킷 교환망을 통해 패킷을 원활히 전달하기 위한 통신 프로토콜로, 고정된 대역폭을 가지며 패킷을 사용해 대용량의 데이터를 분리하여 송신, 결합하여 복원하는 특징을 갖는 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;X25&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;014 다른 특수한 목적을 갖는 마크업 언어를 만드는데 사용하도록 권장하는 다목적 언어로서, 인터넷 웹페이지를 만드는 HTML을 획기적으로 개선하여, 홈페이지 구축기능, 검색 기능 등이 향상되었고 웹 페이지의 추가와 작성을 용이하게 만든 언어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;XML(eXtensible Markup Language)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;015 다음 특징을 지닌 저작권 표현 언어는 무엇인가? &lt;/p&gt;
&lt;p&gt;콘텐츠 및 서비스의 신뢰를 확보하기 위한 디지털 저작권 관리(DRM) 생성 언어&lt;/p&gt;
&lt;p&gt;디지털 콘텐츠 / 웹 서비스 권리 조건을 표현한 XML기반의 마크업 언어&lt;/p&gt;
&lt;p&gt;모든 자원과 관련된 권리 및 조건들을 보안적으로 규정하고 관리하는 일반적인 방법을 제공함&lt;/p&gt;
&lt;p&gt;리스프(LISP) 기반의 DRM 언어인 디지털 저작권 언어(DPRL)을 개발한 제네록스사와 마이크로소프트사가 이를 개정하여 발표한 언어&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;XrML(eXtensible right Markup Language)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;016 웹 페이지에 악의적인 스크립트를 포함해 사용자 측에서 실행되게 유도하는 방법으로, 검증되지 않은 외부 입력이 동적 웹페이지 생성에 사용될 경우 전송된 동적 웹페이지를 열람하는 접속자의 권한으로 부적절한 스크립트가 수행되어 정보 유출 등의 공격을 유발할 수 있는 취약점 공격 기법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;XSS공격(Cross Site Scripting, 크로스 사이트 스크립팅)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;017 자바(jUnit), C++(cppUnit), Net(nUnit) 등 다양한 언어를 지원하는 단위 테스트 프레임워크로, 소프트웨어의 함수나 클래스 같은 서로 다른 구성 원소(단위)를 테스트할 수 있게 해주는 도구는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;xUNit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;018 컴퓨터 등을 사용한 인공적인 기술로 만들어낸 실제와 유사하지만 실제가 아닌 어떤 특정한 환경이나 상황 혹은 그 기술 자체를 의미하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;가상현실(VR; Virtual Reality)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;019 컴퓨터 네트워크에서 서로 다른 통신망, 프로토콜을 사용하는 네트워크 간에 통신을 가능하게 하는 네트워크 장비는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;게이트웨이(Gateway)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;020 두 개 이상의 시스템을 클러스터로 구성하여 하나의 시스템이 장애 시 최소한의 서비스 중단을 위해 다른 시스템으로 신속하게 시스템 대체 작동(Fail Over)하는 기술로서, 기업의 서비스 고장시간 최소화로 가용성을 극대화하고, 비즈니스 연속성을 확보하여 수익성을 최대화하기 위해 필요한 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;고가용성(HA; High Availability)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;021 현실 세계에 존재하는 실체 및 개념들을 객체라는 독립된 단위로 구성하고 이 객체들이 메시지 교환을 통해 상호 작용함으로써 전체 시스템이 운영되는 개념을 적용한 개발 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;객체지향 프로그래밍(OOP, Object Oriented Programming)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;022 프로세스가 기억 장치 내의 모든 정보를 균일하게 참조하는 것이아니라 특정 부분만을 집중적으로 참조하는 것을 의미하는 용어는?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;지역성(locality) = 구역성&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;023 IP계층(OSI 7계층 중 3계층)에서 무결성과 인증을 보장하는 인증헤더(AH)와 기밀성을 보장하는 암호화(ESP)를 이용한 IP 보안 프로토콜로, 현재 전세계에서 사용되는 인터넷 상거래시 요구되는 개인 정보와 크레디트 카드 정보의 보안 유지에 가장 많이 사용되고 있는 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IPSec(Internet Protocol Security)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;024 응용계층과 TCP/IP 계층 사이에서 웹 데이터 암호화 및 전송 시 기밀성을 보장하는 공개키 기반의 보안 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SSL/TLS(Secure Socket Layer / Transport Layer Security)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;025 ‘모든 인증을 하나의 시스템에서’라는 목적하에 개발되었으며 한 번의 로그인을 통해 여러 다른 사이트들을 자동적으로 접속하여 이용하는 방법을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SSO(Single Sign On)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;026 서비스 호출, 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크로 각 테스트 대상 분산 환경에 데몬(daemon)을 사용하여 테스트 대상 프로그램을 통해 테스트를 수행하고, 통합하여 자동화하는 검증 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;STAF(Software Testing Automation Framework)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;027 자바 데이터베이스 응용 프로그램에서 쿼리 실행시 “쿼리 분석 → 컴파일 → 실행” 과정을 매번 진행하는 구문을 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;statement&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;028 다소 제한이 있던 CVS를 대체하기 위해 콜랩넷에서 개발한 버전관리 도구로, 클라이언트/서버 방식으로 하나의 저장소를 만들어 그곳에 소스를 저장해 소스 중복이나 여러 문제를 해결하기 위한 도구는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SVN(Subversion)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;029 기업의 내부 환경과 외부 환경을 분석하여 강점, 약점, 기회, 위협 요인을 규정하고 이를 토대로 경영 전략을 수립하는 방법은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SWOT 분석(Strength, Weakness, Opportunity, Threat)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;030 전송 계층에 위치하면서 근거리 통신망이나 인트라넷, 인터넷에 연결된 컴퓨터에서 실행되는 프로그램 간에 일련의 옥텟을 안정적으로, 순서대로, 에러 없이 교환할 수 있게 해주는 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;TCP(Transmission Control Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;031 가장 객관적으로 하드웨어 성능을 나타내는 지표로 사용되는 것으로, 특정 서버에 대해서 자체 기준으로 테스트를 수행하러 나온 결과 중 1분간 최대 처리건수를 나타낸 수치는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;tpmC(transaction processing performance Council)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;032 웹서비스에 대한 정보인 WSDL을 등록하고 검색하기 위한 저장소로 공개적으로 접근, 검색이 가능한 레지스트리를 일컫는 말로, 알려진 송-수신 시스템의 통합 구현에서는 서비스의 공개 및 검색 과정이 필요 없어 구축하지 않는 웹서비스 방식은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UDDI(Universal Description, Discovery and Integration)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;033 비연결성이고, 신뢰성이 없으며, 순서화되지 않은 데이터그램 서비스를 제공하는 전송 계층의 통신 프로토콜은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UDP(User Datagram Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;034 넓은 의미에서 사용자와 시스템 사이에서 의사소통할 수 있도록 고안된 물리적, 가상의 매개체이며, 좁은 의미로는 정보 기기나 소프트웨어의 화면 등에서 사람이 접하게 되는 화면을 뜻하는 용어는 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UI(User Interface)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;035 UI표준에 따라 사용자 인터페이스 설계, 개발 시 지켜야할 세부 사항을 규정하는 가이드라인을 ( 1 )(이)라고 한다 ‘목표 정의, 프로젝트 계획, 요구사항 정의, 설계 및 구현, 테스트, 배포 및 관리’ 요소로 구성되어 있다&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UI지침&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;036 CRUD 방식을 기반으로 데이터의 입력과 출력을 처리하는 화면 흐름을 포함하여 오퍼레이션 방식에 대한 표준 절차를 표시하고 개발하는 것으로, 표준 프레임워크로 개발하고, 유스케이스를 이용해서 패턴별 표준 개발 방법 총 7가지 영역을 정의한 UI 모델은 무엇인가? &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UI패턴모델(UI Pattern Model)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;037 객체지향 소프트웨어 개발과정에서 산출물을 명세화, 시각화, 문서화할 시 사용되는 모델링 기술과 방법론을 통합해 만든 표준화된 범용 모델링 언어를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UML(Unified Modeling Language)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;038 비교적 가까운 거리에 위치한 소수의 장치들을 서로 연결한 네트워크로 일반적으로 하나의 사무실, 하나 또는 몇 개의 인접한 건물을 연결한 네트워크를 말한다 연결형식에 따라 링형, 버스형, 스타형 등으로 분류되는 통신망은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;근거리 통신망(LAN; Local Area Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;039 AI 분야 중 하나로, 인간의 학습 능력과 같은 기능을 컴퓨터에서 실현하고자 하는 기술로, 환경과의 상호작용에 기반한 경험적인 데이터로부터 스스로 성능을 향상시키는 시스템을 연구하는 기술을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;머신러닝(기계학습; Machine Learning)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;040 바이러스나 명백한 악성 코드를 포함하지 않는 합법적 프로그램이면서도, 사용자를 귀찮게 하거나 위험한 상황에 빠뜨릴 수 있는 프로그램으로, 평범한 소프트웨어인지 바이러스인지 구분하기 어려운 중간 영역에 존재하는 프로그램을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;그레이웨어(Grayware)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;041 범용 하드웨어(서버/스토리지/스위치)에 가상화 기술을 적용하여 네트워크 기능을 가상 기능(function) 으로 모듈화하여 필요한 곳에 제공(스위치, 라우터 등)하는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 기능 가상화(NFV; Network Function Virtualization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;042 정보를 수집한 후, 저장만하고 분석에 활요하고 있지 않는 다량의 데이터로, 처리되지 않은 채 미래에 사용할 가능성이 있다는 이유로 삭제되지 않고 방치되어 있어 저장 공간만 차지하고 보안 위험을 초래할 수 있는 데이터를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;다크 데이터(Dark Data)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;043 조직 내부의 중요 자료가 외부로 빠져나가는 것을 탐지하고 차단하는 기술로, 정보 유출 방지를 위해 정보 흐름에 대한 모니터링과 실시간 차단 기능을 제공하는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 유출방지(DLP; Data Loss Prevention)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;044 하이퍼바이저(Hypervisor) 없이 리눅스 컨테이너(LXC) 기술을 바탕으로 애플리케이션을 격리된 상태에서 실행하는 가상화 솔루션은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;도커(Docker)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;045 디지털 콘텐츠에 대한 권리 정보를 지정하고 암호화 기술을 이용하여 허가된 사용자의 허가된 권한 범위 내에서 콘텐츠의 이용이 가능하도록 통제하는 기술로 ‘콘텐츠 제공자’, ‘클리어링 하우스’, ‘콘텐츠 소비자’로 구성되어 있다 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;디지털 저작권 관리(DRM; Digital Rights Management)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;046 다양한 센서를 통해 수집되는 정보들을 통해 물리적인 사물이나 시스템을 동적 소프트웨어로 구성한 모델로, GE에서 처음 도입한 개념으로 개별 산업 자산에 대한 통찰을 집약시킨 공학적 모델은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;디지털 트윈(Digital Twin)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;047 암호 키를 교환하는 방법으로써 두 사람이 암호화되지 않은 통신망을 통해 공통의 비밀 키를 공유할 수 있도록 하는 방식은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;디피-헬만(Diffie-Helman)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;048 사람의 개입이 필요한 기존의 지도학습(Supervised Learning)에 보다 능동적인 비지도학습(unsupervised)이 결합되어 컴퓨터가 마치 사람처럼 스스로 학습할 수 있는 인공지능 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;딥러닝(Deep Learning)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;049 웹으로 제공하고 있는 정보와 서비스를 융합하여 새로운 차원의 콘텐츠나 서비스, 데이터베이스 등을 창출하는 기술 또는 웹 사이트, 애플리케이션을 의미하는 개념은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;매시업(Mashup)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;050 기존 무선 랜의 한계 극복을 위해 등장하였으며, 대규모 디바이스의 네트워크 생성에 최적화되어 차세대 이동통신, 홈 네트워킹, 공공 안전 등의 특수 목적을 위한 새로운 방식의 네트워크 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;메시 네트워크(Mesh Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;051 인가되지 않은 무선 단말기의 접속을 자동으로 탐지 및 차단하고 보안에 취약한 무선 공유기를 탐지하는 시스템은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;무선 침입 방지 시스템(WIPS; Wireless Intrusion Prevention System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;052 정해진 메모리의 범위를 넘치게 해서 원래의 리턴 주소를 변경시켜 임의의 프로그램이나 함수를 실행시키는 시스템 해킹 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;버퍼 오버플로우(Buffer OverFlow)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;053 시스템, 서비스, 조직(회사) 등에서 주어진 비용, 시간 내에 처리 가능한 데이터 범위를 넘어서는 수십 페타 바이트(PB) 크기의 비정형 데이터를 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;빅데이터(Big Data)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;054 분산 데이터베이스의 한 형태로 분산 노드의 운영자에 의한 임의조작이 불가능하도록 고안되어 지속적으로 성장하는 데이터 기록 리스트인 ‘블록’을 사용한 저장 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;블록 체인(Block Chain)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;055 다양한 채널에서 소비자와 상호 작용을 통해 생성된, 기업 마케팅에 있어 중요한 데이터이며, 기존 데이터에 새로운 가치가 더해진 데이터는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;브로드 데이터(Broad Data)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;056 몸값과 소프트웨어의 합성어로, PC에 있는 중요한 자료를 암호화 한 후, 복호화 프로그램 제공 대가로 피해자에게 돈을 지급하도록 강요하는 악성코드는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;랜섬웨어(Ransomware)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;057 배치 레이어, 스피드 레이어, 서빙 레이어로 구성되어 데이터 분석 요청 시 모든 데이터를 대상으로 기능을 수행할 수 있도록 구성된 빅데이터 프로세싱 아키텍처는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;람다 아키텍처(Lambda Architecture)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;058 1990년대 초 핀란드 대학생 리누스 토발즈(Linus B Torvalds)가 구역 내 근거리통신망(LAN)이나 웹사이트에 사용됐던 유닉스(UNIX)를 대체하기 위하여 개발한 컴퓨터 운영체제는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리눅스(Linux)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;059 유지보수 생산성 향상을 목적으로 기능을 변경하지 않고, 복잡한 소스코드를 수정, 보완하여 가용성 및 가독성을 높이는 기법 또는 소프트웨어 모듈의 기능은 수정하지 않고 내부적으로 구조, 관계 등을 단순화하여 소프트웨어의 유지보수성을 향상시키는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리팩토링(Refactoring)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;060 하나의 큰 시스템을 여러 개의 작은 서비스로 나누어 변경과 조합이 가능하도록 만든 아키텍처는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;마이크로서비스 아키텍처(MSA, Micro Services Architecture)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;061 정보주체가 기관으로부터 자기 정보를 직접 내려 받아 이용하거나 제3자 제공을 허용하는 방식으로 정보주체 중심의 데이터 활용체계는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;마이 데이터(MyData)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;062 구글에서 대용량 데이터 처리를 분산 병렬 컴퓨팅에서 처리하기 위한 목적으로 제작하여 2004년 발표한 소프트웨어로 현재 Java, C++, 그리고 기타 언어에서 적용이 가능하도록 작성되었으며 아파치 하둡(Hadoop)으로 대표되는 소프트웨어 프레임워크는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;맵 리듀스(Map Reduce)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;063 하나의 송신자가 같은 서브네트워크 상의 모든 수신자에게 데이터를 전송하는 전송 기술을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;브로드캐스트(Broadcast)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;064 안전한 소프트웨어 개발을 위해 소스코드 등에 존재할 수 있는 잠재적인 보안 취약점을 제거하고, 보안을 고려하여 기능을 설계 및 구현하는 등 소프트웨어 개발 과정에서 지켜야 할 일련의 보안 활동을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시큐어 코딩(Secure Coding)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;065 Linux 운영체제 위에서 구동하며 휴대폰 전화를 비롯한 휴대용 장치를 위한 운영체제와 미들웨어, 사용자 인터페이스 그리고 표준 응용 프로그램(웹 브라우저, 이메일 클라이언트 단문 메시지 서비스(SMS), MMS 등을 포함하고 있는 소프트웨어 스택이자 리눅스 모바일 운영체제이다 개발자들이 자바와 코틀린 언어로 응용 프로그램을 작성할 수 있게 하였으며, 컴파일된 바이트코드를 구동할 수 있는 런타임 라이브러리를 제공하는 운영체제는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;안드로이드(Android)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;066 양자중첩, 얽힘, 불확정성의 원리 등 양자역학의 원리를 기반으로 암호용 키를 송/수신부에 분배하고 암호화 통신을 진행하는 양자역학기반 보안통신기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;양자암호통신(Quantum Cryptography and Communications)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;067 양자 통신 키 분배를 위해 얽힘 상태 광자 또는 단일 광자를 이용하여 비밀키를 분배하여 관리하는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;양자 키 분배(Quantum Key Distribution)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;068 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발방법론 개발 기간을 짧고 신속하게 가져가는 특징이 있으며 워터폴에 대비되는 방법론으로 최근 회사에서 각광받는 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;애자일(Agile)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;069 데이터가 생성되는 네트워크 말단에 있는 디바이스 또는 센서에서 연산 능력을 부여하여 직접 데이터를 분석, 활용하여 중앙 시스템의 부하를 분산시키는 컴퓨팅 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;엣지 컴퓨팅(Edge Computing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;070 중앙서버나 중앙관리자의 제어 없이 분산화된 네트워크의 각 노드(참여자) 들이 모든 거래 목록을 지속적으로 갱신하고, 데이터베이스를 공유하는 기술로, 대표적인 예로 블록체인(Blockchain)과 그물처럼 거래를 연결하는 방향성 비순환 그래프(DAG, Directed Acyclic Graph)등이 있다 무슨 기술에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;분산 원장 기술(DLT, Distributed Ledger Technology)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;071 시스템 또는 서비스의 ID와 패스워드를 크랙하기 위해서 ID와 패스워드가 될 가능성이 있는 단어를 파일로 만들어 놓고 이 파일의 단어를 대입하여 크랙하는 공격은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;사전 공격(Dictionary Attack)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;072 MSA, BaaS, FaaS 등의 기술을 활용하여 서버가 없는 것과 같이 직접 해당 이벤트에 접근하여 처리하여 각 서버를 접속하는 방식보다 연결 및 속도를 개선한 컴퓨팅 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;서버리스 컴퓨팅(Serverless Computing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;073 고객의 요구에 의해서 소프트웨어 시스템이 탄생하고, 운용되는 가운데에 유지 보수가 반복되고, 최종적으로 수명이 다하여 파기할 때까지의 전 공정을 체계화한 절차 또는 모델을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 생명 주기(SDLC; Software Development Life Cycle)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;074개방형 API(오픈플로우) 기반으로 네트워크 장비의 트래픽 경로를 지정하는 컨트롤 플레인(Control Plane)과 트래픽 전송을 수행하는 데이터 플레인(Data Plane)을 분리하여 네트워크 트래픽을 중앙 집중적으로 관리하는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 정의 네트워크(SDN; Software Defined Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;075 네트워크 트래픽을 감시하고 분석하는 프로그램으로 또는 패킷에 잠입하여 정보를 가로채는 대표적인 크래킹 기술을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스니퍼(Sniffer)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;076 어떤 프로세스가 계속적으로 페이지 부재가 발생하여 프로세스의 실제 처리 시간보다 페이지 교체 시간이 더 많아지는 현상이며, 이 현상이 발생 시 전체 시스템의 성능 및 처리율은 저하된다 무슨 현상에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스레싱(Thrashing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;077 출발지 주소를 공격 대상의 IP로 설정하여 네트워크 전체에게 ICMP Echo패킷을 브로드캐스팅 하여 외부의 ICMP Echo Reply(Ping 응답)를 발생시킴으로써 희생자에게 대량의 트래픽을 발생시켜 마비시키는 DoS 공격으로 바운스(Bounce) 사이트라고 불리는 제3의 사이트를 이용한 공격 특징을 갖는 공격 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스머핑(Smurfing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;078 문자메시지를 이용하여 신뢰할 수 있는 사람 또는 기업이 보낸 것처럼 가장하여 개인비밀정보를 요구하거나 휴대폰 소액 결제를 유도하는 사이버 사기 공격은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스미싱(Smishing, SMS Phishing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;079 자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크로 동적인 웹 사이트를 개발하기 위한 프레임워크로 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자정부 표준 프레임워크의 기반기술로 사용되고 있는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스프링 프레임워크(Spring Framework)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;080 2010년 6월에 발견된 웜 바이러스로, 지멘스의 SCADA 시스템만을 감염시켜 장비를 제어하고 감시하는 특수한 코드를 내부에 담고 있고, 장비를 프로그램 하는 데 사용되는 PLC를 감염시켜 장비의 동작을 변경하는 특성을 갖는다 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스턱스넷(Stuxnet)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;081 온톨로지(Ontology)를 활용하여 서비스를 기술하고, 온톨로지의 의미적 상호 운용성을 이용해서 서비스 검색, 조합, 중재 기능을 자동화하는 웹은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시맨틱 웹(Semantic Web)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;082 기존 개발된 시스템의 기술적인 원리를 시스템의 코드나 데이터 등의 구조분석을 통해 도출해내는 작업은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;역공학(Reverse Engineering)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;083 기존 네트워크를 바탕으로 그 위에 구성된 또 다른 네트워크로, 기존의 네트워크 위에 별도의 노드들(Nodes)과 논리적 링크들(Logical Links)을 구성하여 이루어진 가상 네트워크는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오버레이 네트워크(Overlay Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;084 서버, 스토리지, 네트워크와 같은 리소스들을 모아서, 이들을 제어하고 운영하기 위한 클라우드를 구축하기 위한 오픈소스 소프트웨어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오픈 스택(Open Stack)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;085 여러 대의 공격자를 분산 배치하여 동시에 동작하게 함으로써 특정 사이트를 공격하는 기법으로 취약한 인터넷 시스템에 대한 액세스가 이뤄지면, 침입한 시스템에 소프트웨어를 설치하고 이를 실행시켜 원격에서 공격을 개시하는 방식의 메커니즘을 갖는다 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DDoS(Distributed Denial of Service, 분산 서비스 거부)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;086 56bit의 키를 이용하여 64bit의 평문 블록을 64bit의 암호문 블록으로 만드는 블록 암호 방식의 미국표준(NIST) 암호화 알고리즘은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DES(Data Encryption Standard)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;087 조직 내외부 복수 출처의 원천 시스템(Source System)으로부터 데이터를 추출하고 변환하는 작업을 거쳐서 목적 시스템(Target System)으로 전송 및 로딩하는 데이터 이동 프로세스는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ETL(Extraction, Transformation, Loading)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;088 과도한 Get 메시지를 이용하여 웹서버의 과부화를 유발시키는 공격기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP GET FLOODING&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;089 공격자가 자신의 인터넷 프로토콜(IP) 주소를 변조하거나 속여서 접근 제어 목록(ACL)을 우회하거나 회피하여 공격하는 것으로 변조된 IP주소를 이용하여 DoS나 연결된 세션을 차단하여 공격에 대한 추적을 어렵게 만드는 공격 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IP 스푸핑(IP Spoofing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;090 소프트웨어 각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 모델은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;LOC&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;091 객체에 포함된 정보의 비밀성과 이러한 비밀성의 접근정보에 대하여 주체가 갖는 권한에 근거하여 객체에 대한 접근을 제한하는 접근제어 정책은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MAC(Mandatory Access Control)또는 규칙기반 접근제어 정책(Rule-Based Access Control)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;092 생산 관리 시스템을 뜻하는 것으로 기업의 생산 현장에서 작업 일정, 작업 지시, 품질 관리, 작업 실적 집계 등 제반 활동을 지원하기 위한 관리시스템은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MES(Manufacturing Execution System)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;093 네트워크 장치의 컨트롤 플레인(Control Plane)과 데이터 플레인(Data Plane) 간의 연계 및 제어를 담당하는 개방형 표준 인터페이스로 컨트롤러(controller), 프로토콜(protocol), 스위치(switch), 흐름테이블(flow table), 파이프라이닝(pipelining), 그룹 테이블(group table), 보안 채널(secure channel)로 구성되어 있다 무슨 기술에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오픈플로우(Openflow)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;094 목적을 불문하고 누구나 어디서나 자유롭게 접근 및 공유 할 수 있는 데이터로 일반적으로 국가기관이 보유, 관리하는 정보를 민간이 활용할 수 있도록 공개, 제공하는 데이터는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오픈 데이터(Open Data)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;095 실세계에 존재하는 모든 개념들과 개념들의 속성, 그리고 개념들 간의 관계 정보를 컴퓨터가 이해할 수 있도록 서술해놓은 지식 베이스를 뜻하는 개념은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;온톨로지(Ontology)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;096 각 프로세스가 많이 참조하는 페이지들의 집합을 주기억 장치 공간에 계속 상주하게 하여 빈번한 페이지 교체 현상을 줄이고자 하는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;워킹 세트(working set)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;097 웹서버와 브라우저 간 핸드셰이크 과정을 통해 연결을 설정하고 실시간으로 메시지를 전송하는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;웹소켓(WebSocket)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;0985 연관된 데이터와 함수를 논리적으로 묶어놓은 것이며, 데이터를 보호하기 위해 다른 객체의 접근을 제한하는 접근 제한 수식자(private 등)의 기능을 제공하는 객체지향프로그래밍(OOP)의 특징은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;캡슐화(Encapsulation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;099 물리적으로 컴퓨터리소스를 가상화하여 논리적 단위로 리소스를 활용할 수 있도록 하는 기술로서 서버 가상화를 통해 하나의 시스템에서 1개 이상의 운영체제를 동시에 작동시킬 수 있어 서버 이용률을 크게 향상시킬 수 있는 클라우드 컴퓨팅 기술 요소는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;컴퓨팅 가상화(Computing Virtualization)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;100 개발팀에서 작성한 개발소스 코드를 분석하여 개발 표준에 위배 되었거나, 코드가 중복 또는 작성규칙에 맞지 않거나 잘못 구현된 부분을 수정하는 작업은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 인스펙션(Code Inspection)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;101 역공학(Reverse Engineering)을 통한 보안취약점 공격에 대한 방지기술로 원래 코드를 변화시켜 읽기 어렵게 하거나 분석하기 어렵게 만드는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 난독화(Code Obfuscation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;102 잃어버린 스마트폰을 주운 사람이 해당 스마트폰을 켜서 이동통신망 혹은 와이파이에 접속하면 이용자가 원격으로 기기를 사용 불능 상태로 만들 수 있는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;킬 스위치(Kill Switch)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;103 리눅스 재단에 의해 관리되는 컨테이너화된 애플리케이션의 자동 배포, 스케일링 등을 제공하는 오픈 소스 기반의 관리시스템은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쿠버네티스(Kubernetes)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;104 온라인 상에서 불법 활동을 조장하기 위해 만들어진 컴퓨터 프로그램으로, 공격용 툴킷이라고 불리며 보통 취약점을 이용하도록 미리 프로그램 된 악성코드 등으로 구성되어 원하는 형태로 공격을 감행하거나 공격을 자동화 할 수 있는 특성을 갖는다 인터넷에서 곧바로 사용할 수 있으며 키로거를 은밀히 설치하여 불법적으로 정보를 수집해가기도 하는 프로그램은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;크라임웨어(crimeware)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;105 공격자가 이미 확보한 암호화한 개인정보를 다른 계정들에 마구 대입(Stuffing)하는 방식으로 이용자 정보를 침해하는 기법으로 서비스별로 아이디와 비밀번호를 다르게 만들면 잊어버리기 쉬워 이용자 대다수가 서비스에 동일한 아이디와 비밀번호를 사용한다는 사실을 악용하여 공격하는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;크리덴셜스터핑(Credential Stuffing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;106 조직의 표준 프로세스를 커스터마이징하여 프로젝트의 비즈니스적으로 또는 기술적인 요구에 맞게 적합한 프로세스를 얻는 과정을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테일러링(Tailaring)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;107 컴퓨터 네트워크의 요소들을 물리적으로 연결해 놓은 것 또는 그 연결방식을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;토폴로지(Topology)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;108 DES를 대체한 암호 알고리즘이며 암호화와 복호화 과정에서 동일한 키를 사용하는 대칭키 암호화 알고리즘은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;AES(Advanced Encryption Standard, 고급 암호화 표준)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;109 특수 목적을 가진 조직이 하나의 표적에 대해 다양한 IT 기술을 이용해서 지속적으로 정보를 수집하고 취약점을 파악하여 침투, 검색, 수집, 유출하는 공격기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;APT(Advanced Persistent Threat, 지능형 지속 공격)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;110 기업이 재해/재난으로부터 타격을 입은 뒤 업무를 어떻게 복구하는지에 대한 계획을 뜻하며 전산의 단순복구뿐만 아니라 고객 비즈니스의 지속성을 보장하며, 재해 복구를 포함하는 더 넓은 개념으로 쓰이는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;BCP(Business Continuity Planning, 비즈니스 연속성 계획)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;111 장애나 재해로 인해 운영상의 주요 손실을 입을 것을 가정하여 시간 흐름에 따른 영향도 및 손실평가를 조사하여 BCP를 구축하기 위한 핵심절차를 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;BIA(Business Impact Analysis, 비즈니스 영향 분석)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;112 데이터베이스 소스시스템의 변경된 데이터를 캡쳐하여 다양한 운영 및 분석시스템으로 실시간 전달하는 기술로 ‘실시간 작업환경 구축’, ‘운영시스템 부하 감소’, ‘신뢰성 있는 데이터 복제’ 등의 특징을 갖는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CDC(Change Data Capture)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;113 각각 자기만의 암호를 가진 여러 명의 가입자가 동일한 주파수를 동시에 사용하는 방식을 뜻하는 이동 통신 장비 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CDMA(Code Division Multiple Access, 코드 분할 다중 접속)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;114 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위(수정, 삭제, 등록 등)를 특정 웹사이트에 요청하게 하는 공격은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CSRF(Cross Site Request Forgery, 사이트 간 요청 위조)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;115 하드디스크와 같은 데이터 저장장치를 호스트 버스 어댑터(Host Bus Adapter)에 직접 연결하는 스토리지 시스템은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DAS(Direct Attached Storage)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;116 시스템을 악의적으로 공격해 해당 시스템의 자원을 부족하게 하여 원래 의도된 용도로 사용하지 못하게 하는 공격으로, 특정 서버에 수많은 접속 시도를 만듦으로서 다른 사용자가 정상적으로 서비스를 이용하지 못하게 하거나, 서버의 TCP 연결을 소진시키는 등의 공격 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DoS(Denial of Service, 서비스 거부)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;117 XML 서술자나 애너테이션(annotation)을 사용하여 저장 프로시저나 SQL문으로 객체를 연결시키는 프로그램으로 아파치 라이선스 20으로 배포되며 IBATIS의 원 개발자들이 포함된 팀에 의해 유지보수가 이루어지는 자바 퍼시스턴스 프레임워크는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MyBatis(마이바티스)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;118 일반적인 네트워크 방화벽과는 달리 웹 애플리케이션 보안에 특화된 보안 장비로, SQL인젝션, XSS 등과 같은 웹 공격을 탐지하고 차단하는 기능을 갖는 장비는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;웹 방화벽(WAF; Web Application Firewall)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;119 인간의 지적능력을 인공적으로 구현하여 컴퓨터가 인간의 지능적인 행동과 사고를 모방할 수 있도록 하는 소프트웨어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인공지능(AI; Artificial Intelligence)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;120 인터넷에 접속하는 수단을 제공하는 주체를 가리키는 말로, 주로 KT, SKT 등의 통신회사가 여기에 속한다 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인터넷 서비스 제공자(ISP; Internet Service Provider)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;121 단일 클라우드를 넘어서, 타 클라우드 서비스에서 필요한 자원을 가져다 서비스하는 클라우드 내의 중첩 클라우드 서비스로서 대등접속, 연합, 중개 등의 유형이 있다 이 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인터클라우드 컴퓨팅(Intercloud Computing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;122 적절한 권한을 가진 인가자만 특정 시스템이나 정보에 접근할 수 있도록 통제하는 것으로, 시스템의 보안 수준을 갖추기 위한 가장 기본적 수단은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;접근제어(AC; Access Control)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 5-정보 관련 용어 정리]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 5-정보 관련 용어 정리/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 5-정보 관련 용어 정리/</guid><pubDate>Wed, 14 Oct 2020 02:21:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 용어 정리 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;001 프로토콜(protocol)의 기본 요소 3가지를 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;구문, 의미, 타이밍&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;002 개체-관계 다이어그램(ERD)의 기본 요소 3가지를 쓰시오&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;개체(Entity), 속성(Attribute), 관계(Relationship)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;003 보안의 3요소를 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;기밀성(Confidentiality), 무결성(Integrity), 가용성(Availability)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;004 릴레이션 조작 시 데이터들이 불필요하게 중복되어 예기치 않게 발생하는 곤란한 현상을 ‘이상현상(anomaly)’이라고 한다. 이상현상의 종류 3가지를 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;삽입 이상, 삭제 이상, 갱신 이상&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;005 객체지향프로그래밍(OOP)의 특성을 3가지 이상 쓰시오&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;캡슐화(encapsulation),정보은닉(Information Hiding), 추상화(abstract), 상속(inheritance), 다형성(polymorphism)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;006 테스트 기반(종류)에 따른 테스트 3종류를 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;구조 테스트, 명세 테스트, 경험 테스트&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;007 UML의 구성요소 3가지를 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;사물 / 관계 / 다이어그램&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;008 IPv4의 전송 방식 3가지를 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;유니캐스트(Unicast), 멀티캐스트(multicast), 브로드캐스트(Broadcast)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;009 W3C(World Wide Web Consortium)에서 개발되었고, 웹브라우저 간 호환이 되지 않는 문제와 SGML(Standard Generalized Markup Language)의 복잡함을 해결하기 위해 개발된 다목적 마크업 언어이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;XML(eXtensible Markup Language)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;010 속성-값(Attribute-Value Pair)으로 이루어진 데이터 오브젝트를 전달하기 위해 사용하는 개방형 표준 포맷으로 Ajax(Asynchronous JavaScript and XML)에서 많이 사용되고 XML(eXtensible Markup Language)을 대체하는 주요 데이터 포맷이다. 언어 독립형 데이터 포맷으로 다양한 데이터 프로그래밍 언어에서 사용하고 있는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JSON (JavaScript Object Notation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;011 객체 기술에 관한 국제표준기구(OMG)에서 정의한 표준으로 시스템 분석, 설계, 구현 등 개발자와 사용자 간 의사소통이 원활하게 이루어지도록 표준화한 객체 지향 모델링 언어를 뜻하는 개념은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UML(Unified Modeling Language)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;012 리스프(LISP)기반의 DRM언어인 디지털 저작권언어(DPRL)을 개발한 제네록스사와 마이크로소프트사가 이를 개정하여 만든 언어로 디지털 콘텐츠 / 웹 서비스 권리 조건을 표현한 XML기반의 언어이다. 모든 자원과 관련된 권리 및 조건들을 보안적으로 규정하고 관리하는 일반적인 방법을 제공하여 콘텐츠 및 서비스의 신뢰를 제공한다. 무엇에 대한 개념인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;XrML | eXtensible rights Markup Language&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;013 표준 SQL을 기본으로 Oracle에서 개발한 데이터 조작언어로, Oracle 기반의 모든 프로시저 작성에 사용되며 표준 SQL의 확장 기능이 우수한 언어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PL/SQL(Procedural Language for SQL)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;014 브라우저가 가지고 있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부분만을 위한 데이터를 로드하는 기법이며, 하이퍼텍스트 표기 언어(HTML) 만으로 어려운 다양한 작업을 웹 페이지에서 구현해 이용자가 웹 페이지와 자유롭게 상호 작용할 수 있도록 하는 기술명을 쓰시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;에이잭스 | AJAX | Asynchronous Javascript And XML&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;015 V8(자바스크립트 엔진)으로 빌드 된 이벤트 기반 자바스크립트 런타임으로, 웹 서버와 같이 확장성 있는 네트워크 애플리케이션 개발에 사용되는 소프트웨어 플랫폼이다. 작성 언어로 자바스크립트를 활용하며 Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 처리 성능을 가지고 있으며, 대부분의 자바스크립트가 웹 브라우저에서 실행되는 것과는 달리, 서버 측에서 실행되는 특징을 갖는 기술명은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;노드JS | Node.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;016 기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션들 간의 정보 전달, 연계, 통합을 가능하게 해주는 솔루션으로 송수신 시스템에 설치되는 어댑터를 사용하는 간접 연계 방식 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;연계 솔루션 | EAI | Enterprise Application Integration&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;017 공격자가 패킷의 출발지 주소나 포트를 임의로 변경해 출발지와 목적지 주소를 동일하게 함으로써 공격 대상 컴퓨터의 실행속도를 느리게 하거나 동작을 마비시켜 서비스 거부 상태에 빠지도록 하는 공격 방법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;랜드어택(LAND Attack)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;018 출발지 주소를 공격 대상의 IP로 설정하여 네트워크 전체에게 ICMP Echo패킷을 브로드캐스팅 하여 외부의 ICMP Echo Reply(Ping 응답)를 발생시킴으로써 희생자에게 대량의 트래픽을 발생시켜 마비시키는 DoS 공격으로 바운스(Bounce) 사이트라고 불리는 제3의 사이트를 이용한 공격 특징을 갖는 공격 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스머핑(Smurfing) | 스머프 공격(Smurf Attack)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;019 컴퓨터 소프트웨어의 취약점을 공격하는 기술적 위협으로, 해당 취약점에 대한 패치가 나오지 않은 시점에서 이루어지는 공격은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;제로데이 공격&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;020 몸값과 소프트웨어의 합성어로, PC에 있는 중요한 자료를 암호화 한 후, 복호화 프로그램 제공 대가로 피해자에게 돈을 지급하도록 강요하는 악성코드는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;랜섬웨어(ransomware)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;021 특정 타겟을 목표로 하여 다양한 수단을 통한 지속적이고 지능적인 맞춤형 공격으로 특수목적의 조직이 하나의 표적에 대해 다양한 IT 기술을 이용하여, 지속적으로 정보를 수집하고, 취약점을 분석하여 피해를 주는 공격기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;APT | Advanced Persistent Threat | 지능형 지속 공격&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;022 웹 애플리케이션 취약점 중 하나로 사용자가 자신의 의지와 무관하게 공격자가 의도한 행동을 해서 특정 웹페이지를 보안에 취약하게 한다거나 수정, 삭제 등의 작업을 하게 만드는 공격 방법이다. 2008년에 발생한 옥션의 개인 정보 유출 사건에서도 관리자 계정을 탈취하는 데 이 방법이 사용되었다. 공격의 난이도가 높지 않아 흔히 사용된다. 이 공격 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;사이트 간 요청 위조 | CSRF |Cross Site Request Forgery&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;023 여러 대의 공격자를 분산 배치하여 동시에 동작하게 함으로써 특정 사이트를 공격하는 기법으로 취약한 인터넷 시스템에 대한 액세스가 이뤄지면, 침입한 시스템에 소프트웨어를 설치하고 이를 실행시켜 원격에서 공격을 개시하는 방식의 메커니즘을 갖는다. 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DDoS(Distributed Denial of Service) | 분산 서비스 거부&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;024 온라인 상에서 불법 활동을 조장하기 위해 만들어진 컴퓨터 프로그램이다. 공격용 툴킷이라고 불리며 보통 취약점을 이용하도록 미리 프로그램 된 악성코드 등으로 구성돼 원하는 형태로 공격을 감행하거나 공격을 자동화 할 수 있다. 인터넷에서 곧바로 사용할 수 있으며 키로거를 은밀히 설치 시켜 불법적으로 정보를 수집해 가기도 한다. 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;크라임웨어(crimeware)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;025 정보시스템의 침입자를 속이는 기법의 하나로, 가상의 정보시스템을 만들어 놓고 실제로 공격을 당하는 것처럼 보이게 하여 해커나 스팸, 바이러스를 유인하여 침입자들의 정보를 수집하고 추적하는 역할을 수행하는 것은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;허니팟 | Honeypot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;026 정해진 메모리의 범위를 넘치게 해서 원래의 리턴 주소를 변경시켜 임의의 프로그램이나 함수를 실행시키는 시스템 해킹 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;버퍼 오버플로우(Buffer OverFlow)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;027 요청 헤더의 Content-length를 비정상적으로 크게 설정하여 메시지 바디 부분을 매우 소량으로 보내 계속 연결 상태를 유지시키는 공격은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RUDY(R-U-Dead-Yet, Slow HTTP POST DoS)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;028 공격자가 자신의 인터넷 프로토콜(IP) 주소를 변조하거나 속여서 접근 제어 목록(ACL)을 우회하거나 회피하여 공격하는 것으로 변조된 IP주소를 이용하여 DoS나 연결된 세션을 차단하여 공격에 대한 추적을 어렵게 만드는 공격 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IP 스푸핑(IP Spoofing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;029 RFC 1321로 지정되어 있으며, 주로 프로그램이나 파일이 원본 그대로인지를 확인하는 무결성 검사 등에 사용된다. 1991년 로널드 라이베스트(Ronald Rivest)가 예전에 쓰이던 MD4를 대체하기 위해 고안된 128비트 암호화 해시 함수는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MD5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;030 56bit의 키를 이용하여 64bit의 평문 블록을 64bit의 암호문 블록으로 만드는 블록 암호 방식의 미국표준(NIST) 암호화 알고리즘은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DES(Data Encryption Standard)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;031 공개키 암호 방식으로 디지털 인증서를 활용하는 소프트웨어, 하드웨어, 사용자, 정책 및 제도 등을 총칭하는 암호기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공개키 기반구조 | PKI | Public Key Infrastructure&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;032 현재 SSL/TLS에 가장 많이 사용되는 공개키 암호화 알고리즘으로 엄청 큰 숫자는 소인수분해하기가 힘들다는 점을 이용한 암호화 방식이다. 개발자들의 이름에서 암호명이 만들어졌으며 오늘날 양자 컴퓨터의 등장으로 보안 위협에 직면해 있는 암호화 알고리즘은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RSA(Rivest, Shamir, Adleman)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;033 전자상거래, 금융, 무선통신 등에서 전송되는 개인정보와 같은 중요한 정보를 보호하기 위해, 1999년 2월 한국인터넷 진흥원과 국내 암호전문가들이 순수 국내 기술로 개발한 대칭키 128비트 블록의 암호 알고리즘은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SEED&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;034 무결성과 인증을 보장하는 인증헤더(AH)와 기밀성을 보장하는 암호화(ESP)를 이용한 프로토콜로 망 계층(Network Layer)인 인터넷 프로토콜(IP)에서 보안성을 제공해 주는 표준화된 기술에 대해서 작성하시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;IPSec&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;035 터널링(Tunneling) 기법을 사용해 인터넷과 같은 공중망에서 전용 회선을 구성한 것과 같은 효과를 내는 가상 네트워크로, 3계층에서 이 기술을 위해 터널링을 구현할 수 있는 프로토콜은 IPSec이고, HTTPS, 443 Port를 이용하여 터널링을 구현할 수 있는 프로토콜은 SSL이다. 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;VPN(Virtual Private Network)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;036 역공학(Reverse Engineering)을 통한 보안취약점 공격에 대한 방지기술로 원래 코드를 변화시켜 읽기 어렵게 하거나 분석하기 어렵게 만드는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 난독화(Code Obfuscation)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;037 객체에 포함된 정보의 비밀성과 이러한 비밀성의 접근정보에 대하여 주체가 갖는 권한에 근거하여 객체에 대한 접근을 제한하는 접근제어(AC) 정책은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MAC(Mandatory Access Control) | 규칙기반 접근제어 정책(RBAC)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;038 일반적인 네트워크 방화벽과는 달리 웹 애플리케이션 보안에 특화된 보안 장비로, SQL인젝션, XSS 등과 같은 웹 공격을 탐지하고 차단하는 기능을 갖는 장비는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;웹 방화벽(WAF; Web Application Firewall)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;039 내부 정보 유출 방지를 의미하며, 기업 내에서 이용하는 다양한 주요 정보인 기술 정보, 프로젝트 계획, 사업 내용, 영업 비밀, 고객 정보 등을 보호하고 외부 유출을 방지하기 위해서 사용하는 보안 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DLP | Data Loss Prevention | 데이터 유출 방지&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;040 다음은 공통 모듈 구현의 개념에 대한 설명이다. 괄호( ) 안에 알맞은 용어를 쓰시오&lt;/p&gt;
&lt;p&gt;소프트웨어 개발에 있어 기능을 분할하고 추상화하여 성능을 향상시키고 유지보수를 효과적으로 하기 위한 공통 컴포넌트 구현 기법이다.&lt;/p&gt;
&lt;p&gt;인터페이스 모듈, 데이터베이스 접근 모듈 등 필요한 공통 모듈을 구현한다.&lt;/p&gt;
&lt;p&gt;모듈 간의 ( ① )은/는 줄이고, ( ② )은/는 높은 공통 모듈구현을 권장하고 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;① 결합도 ② 응집도&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;041 괄호 안에 알맞은 용어를 쓰시오.&lt;/p&gt;
&lt;p&gt;모듈의 독립성을 나타내는 개념으로, 모듈 내부 구성요소 간 연관정도이다.&lt;/p&gt;
&lt;p&gt;정보은닉 개념의 확장 개념으로, 하나의 모듈은 하나의 기능을 수행하는 것을  의미한다.&lt;/p&gt;
&lt;p&gt;유형으로 우연적, 논리적, 시간적, 절차적, 통신적, 순차적, 기능적 (     )이(가) 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;응집도 | cohesion&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;042 소프트웨어의 성능을 향상시키거나 시스템의 수정 및 재사용, 유지 관리를 용이하게 하여 프로그램을 효율적으로 관리할 수 있도록 시스템을 분해하고 추상화하는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;모듈화&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;043 하나의 릴레이션에서 속성(열)의 전체 개수를 릴레이션의 ( ① )(이)라고 하고, 튜플(행)의 전체 개수를 릴레이션의 ( ② )(이)라고 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;① 차수(degree) ② 카디널리티(cardinality)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;044 프레임워크(framework) 특징에 대한 설명이다. 괄호 ( )안에 들어갈 올바른 용어를 쓰시오.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;모듈화&lt;/td&gt;
&lt;td&gt;프레임워크는 인터페이스에 의한 캡슐화를 통해서 모듈화를 강화하고 &lt;br&gt;설계와 구현의 변경에 따르는 영향을 극소화하여 소프트웨어의 품질을 향상시킨다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( ①  )&lt;/td&gt;
&lt;td&gt;프레임워크가 제공하는 인터페이스는 반복적으로 사용할 수 있는 컴포넌트를 정의할 수 있게 하여 ( ① )을/를 높여 준다. &lt;br/&gt;또한 ( ① )은/는 소프트웨어의 품질을 향상시킬 뿐만 아니라 개발자의 생산성도 높여 준다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;확장성&lt;/td&gt;
&lt;td&gt;프레임워크는 다형성(polymorphism)을 통해 애플리케이션이 프레임워크의 인터페이스를 넓게 사용할 수 있게 한다. &lt;br/&gt;또한 애플리케이션 서비스와 특성을 변경하고 프레임워크를 애플리케이션의 가변성으로부터 분리함으로써 &lt;br/&gt;재사용성의 이점을 얻게 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( ② )&lt;/td&gt;
&lt;td&gt;프레임워크 코드가 전체 애플리케이션의 처리 흐름을 제어하여 특정한 이벤트가 발생할 때 &lt;br/&gt;다형성(Polymorphism)을 통해 애플리케이션이 확장한 메소드를 호출함으로써 &lt;br/&gt;제어가 프레임워크로부터 애플리케이션으로 반대로 흐르게 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;① 재사용성(reusability) ② 제어의 역행(IoC; Inversion of Control)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;045 다음이 설명하는 제품 패키지 릴리스 노트의 작성 항목은 무엇인가?&lt;/p&gt;
&lt;p&gt;문서 이름(릴리스 노트 이름), 제품 이름, 버전 번호, 릴리즈 날짜, 참고 날짜, 노트 버전 등의 정보&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;헤더&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;046 다음이 설명하는 제품 소프트웨어 사용자 매뉴얼 작성 항목을 쓰시오&lt;/p&gt;
&lt;p&gt;버전, 작성자, 작성일, 검토자, 일시, 검수인 등을 일자별로 기록&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;문서 이력 정보&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;047 UI 화면 설계를 위해서 정책이나 프로세스 및 콘텐츠의 구성, 와이어 프레임(UI, UX), 기능에 대한 정의, 데이터베이스의 연동 등 구축하는 서비스를 위한 대부분의 정보가 수록된 문서는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스토리보드(StoryBoard)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;048 OSI 계층 중 비트를 전송하는 계층은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;물리 계층 (physical layer)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;049 OSI 7계층 중 2계층에 해당되는 데이터 링크(Data Link Layer)에서 사용하는 전송 단위는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프레임(Frame)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;050 다음은 무엇에 관한 설명인가?&lt;/p&gt;
&lt;p&gt;어떤 네트워크 안에서 통신 데이터를 보낼 경로를 선택하는 과정으로, 패킷 스위칭 네트워크에서 패킷 전달 및 일반적으로 라우터, 브릿지, 게이트웨이, 방화벽 또는 스위치로 불리는 중간 노드를 거쳐 출발지부터 최종 목적지까지 논리적으로 주소가 부여된 패킷의 변환을 총괄하는 기능의 이름이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;라우팅(routing)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;051 자바(Java)에서 데이터베이스 SQL을 실행하기 위해 데이터베이스를 연결해주는 응용 프로그램 인터페이스는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JDBC | Java Database Connectivity&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;052 자율 시스템(AS) 내에서 사용하는 거리벡터 알고리즘에 기초하여 개발된 통신규약으로, 최대 홉 수(Hop count)를 15개로 제한한 라우팅 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RIP(Routing Information Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;053 인터넷 상에서 HTTP를 통해 클라이언트/서버 환경에서 사용자 컴퓨터나 장치에 애플리케이션을 수행해 주는 미들웨어로서, server 단에서 Application을 동작할 수 있도록 지원하는 서버는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;WAS | Web Application Server | 웹 애플리케이션 서버&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;054 리눅스 환경에서 사용하는 MySQL 데이터베이스를 기반으로 제작한 GPL(General Public License) 오픈 소스 데이터베이스로, 최근에는 MySQL보다 더 많은 업데이트가 이루어지고 있는 데이터베이스는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;마리아DB | MariaDB&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;055 Apache Software Foundation에서 서버인 자바(Java)를 움직이게 하기 위해 개발한 서버인 WAS(Web Application Server)의 일종이다. 웹서버에서 서블릿 (servlet), JSP, 빈즈와 같은 자바 코드를 이해하기 위해서는 ( ① ) 같은 자바를 이해하는 엔진이 있어야 한다. 비용이나 성능면에서는 자바 기반 웹서버를 구성할 때 리눅스(Linux), 아파치, ( ① ) 조합을 많이 사용한다. 빈 칸에 들어갈 알맞은 말은?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;톰캣(tomcat)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;056 자바 프로그램은 WORA(Write Once Run Anywhere)를 모토로 개발된 프로그래밍 언어이다. 개발자가 소스코드를 작성하여 컴파일하면 .class 라는 확장자를 갖는 바이트코드가 생성되며, 자바의 핵심 구성요소인 ( ① )에 의해 실행되어지므로 서로 다른 플랫폼에서도 동일한 프로그램이 동작할 수 있게 된다. 이 때, ① 에 알맞은 말은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;JVM | Java Virtual Machine | 자바 가상 머신(기계)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;057 XML 서술자나 애너테이션(annotation)을 사용하여 저장 프로시저나 SQL문으로 객체를 연결시키는 프로그램으로 아파치 라이선스 2.0으로 배포되며 IBATIS의 원 개발자들이 포함된 팀에 의해 유지보수가 이루어지는 자바 퍼시스턴스 프레임워크는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;MyBatis(마이바티스)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;058 전통적인 관계형데이터베이스관리시스템(RDBMS)와 다른 DBMS를 지칭하기 위한 용어로 데이터 저장에 고정된 테이블 스키마가 필요하지 않고 조인(Join) 연산을 사용할 수 없으며, 수평적으로 확장이 가능한 DBMS는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NoSQL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;059 애플리케이션의 성능을 측정하기 위한 지표는 무엇인가?&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;지표&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;( ① )&lt;/td&gt;
&lt;td&gt;애플리케이션이 주어진 시간에 처리할 수 있는 트랜잭션의 수  / 웹 애플리케이션의 경우 시간당 페이지 수로 표현&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( ②&lt;/td&gt;
&lt;td&gt;사용자 입력이 끝난 후, 애플리케이션의 응답출력이 개시될 때까지의 시간/ 애플리케이션의 경우 메뉴 클릭 시 해당 메뉴가 나타나기까지 걸리는 시간&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( ③ )&lt;/td&gt;
&lt;td&gt;애플리케이션에 사용자가 요구를 입력한 시점부터 트랜잭션 처리 후 그 결과의 출력이 완료할 때까지 걸리는 시간&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;자원 사용률&lt;/td&gt;
&lt;td&gt;애플리케이션이 트랜잭션을 처리하는 동안 사용하는 CPU 사용량, 메모리 사용량, 네트워크사용량&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;① 처리량 ② 응답시간 ③ 경과시간&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;060 다음은 통합테스트에 대한 설명이다. 괄호 ( )안에 들어갈 용어를 쓰시오.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;테스트도구&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;( ① )&lt;/td&gt;
&lt;td&gt;상위의 모듈에서 데이터의 입력과 출력을 확인하는 모듈로 상향식 통합 테스트 수행 시 사용된다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( ② )&lt;/td&gt;
&lt;td&gt;모듈 및 모든 하위 컴포넌트를 대신하는 더미 모듈로 하향식 통합 테스트 수행시 사용된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;① 드라이버(driver) ② 스텁(stub)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;061 개발 방법론 중 폭포수 모델의 변형인 V모델은, 테스트 단계를 추가 확장하여 테스트 단계가 분석 및 설계와 어떻게 관련되어 있는지를 나타낸다. &amp;#x3C;보기&gt;의 테스트 단계를 순서대로 배열하시오.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ㄱ. 인수 테스트  ㄴ. 통합 테스트  ㄷ. 시스템 테스트&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;단위 테스트 → (ㄴ. 통합 테스트)  →  (ㄷ. 시스템 테스트) → (ㄱ. 인수 테스트)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;062 정보시스템 운영 중 서버가 다운되거나 자연재해나 시스템 장애 등의 이유로 고객에게 서비스가 불가능 한 경우가 종종 발생한다. 이와 같은 상황에서 비상사태 또는 업무 중단 시점부터 업무가 복구되어 다시 정상 가동될 때까지의 시간을 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;재해 복구 시간 | RTO | Recovery Time Objective&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;063 정보시스템 운영 중 서버가 다운되거나 자연재해나 시스템 장애 등의 이유로 고객에게 서비스가 불가능 한 경우가 종종 발생한다. 정보시스템에 대한 비상 대비체계 유지와 각 업무 조직 별 비상사태에 대비한 복구계획 수립을 통해 업무 연속성을 유지할 수 있는 체제를 말한다. 관련 기술 요소로 HA, FTS, RAID, DWDM등이 있다. 무엇에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;재해 복구 시스템 | DRS | Disaster Recovery System&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;064 서버와 네트워크, 프로그램 등의 정보시스템이 시스템의 장애에 대응하여 상당히 오랜 기간 동안 지속적으로 정상 운영이 가능한 성질을 이르는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;고가용성 | HA | High Availability&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;065 온톨로지(Ontology)를 활용하여 서비스를 기술하고, 온톨로지의 의미적 상호 운용성을 이용해서 서비스 검색, 조합, 중재 기능을 자동화하는 웹은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시맨틱 웹(Semantic Web)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;066 전 세계 오픈된 정보를 하나로 묶는 방식으로 link data와 open data의 합성어가 무엇인지 작성하시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OLD | Open Linked Data&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;067 사용자 정보를 유지하기 위한 질의 및 디렉터리 서비스의 등록, 수정, 삭제 및 검색을 위한 목적으로 개발한 인터넷 프로토콜은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;LDAP(Lightweight Directory Access Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;068 조직 내외부 복수 출처의 원천 시스템(Source System)으로부터 데이터를 추출하고 변환하는 작업을 거쳐서 목적 시스템(Target System)으로 전송 및 로딩하는 데이터 이동 프로세스는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ETL(Extraction, Transformation, Loading)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;069 실제로 존재하는 환경에 가상의 사물이나 정보를 합성하여 마치 원래의 환경에 존재하는 사물처럼 보이도록 하는 컴퓨터 그래픽 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;증강현실 (AR; Augmented Reality)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;070 데이터베이스 소스시스템의 변경된 데이터를 캡쳐하여 다양한 운영 및 분석시스템으로 실시간 전달하는 기술로 ‘실시간 작업환경 구축’, ‘운영시스템 부하 감소’, ‘신뢰성 있는 데이터 복제’ 등의 특징을 갖는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CDC(Change Data Capture)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;071 하나의 물리적인 네트워크 인프라를 서비스 형태에 따라 다수의 독립적인 가상 네트워크로 분리하여 서로 다른 특성을 갖는 다양한 서비스들에 대해 각 서비스에 특화된 전용 네트워크를 제공해주는 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 슬라이싱 | Network Slicing&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;072 컴퓨터와 사람의 언어 사이의 상호작용에 대해 연구하는 컴퓨터 과학과 어학의 한 분야로, 정보검색분야에서는 이용자와의 자연스러운 대화를 통해 이용자의 의도를 컴퓨터가 파악해 보다 정확한 정보를 다양한 형태의 데이터로부터 취합해 제공하는 데에 활용된다. 세부 기술로는 형태소분석, 고정밀 구문분석과 같은 구조 분석을 바탕으로 한 담화분석, 정보추출, 정보요약, 문서분류 기술 등이 있다. 무슨 기술에 대한 설명인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;NLP | Natural Language Processing | 자연어 처리&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;073 절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발방법론. 개발 기간을 짧고 신속하게 가져가는 특징이 있으며 워터폴에 대비되는 방법론으로 최근 회사에서 각강받는 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;애자일 방법론 | Agile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;074 소프트웨어 개발 단계를 시간의 흐름에 따라 네 개의 범주(도입, 상세, 구축, 이행)로 나누고, 각 범주에는 요구사항 도출부터 설계, 구현, 평가까지의 개발 생명주기가 포함되어 있는 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UP 방법론 | Unified Process&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;075 ‘개념 관점, 역할기반 관점, 활동평가 관점, 활동구현 관점, 취약성 관점’등의 활동중심, 역할 기반의 프로세스로 구성된 집합체로서 이미 운영중인 시스템에 적용하기 적당한 소프트웨어 개발 보안 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CLASP(Comprehensive, Lightweight Application Security Process)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;076 소프트웨어 보안의 모범사례를 소프트웨어 개발 라이프사이클에 통합한 것으로 ‘코드 검토(code review), 아키텍처 위험 분석(architectural risk analysis), 침투 테스트(penetration testing), 위험 기반 보안 테스트(risk—based security test), 악용사례(abuse cases), 보안 요구(security requirement), 보안 운영(security operation)’의 7가지 보안 강화 활동을 정의한 소프트웨어 개발 보안 방법론은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Seven Touchpoints&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;077 애플리케이션을 실행하지 않고, 소스 코드에 대한 코딩 표준, 코딩 스타일, 코드 복잡도 및 남은 결함을 발견하기 위해 사용하는 도구는 무엇인지 작성하시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정적 분석 도구&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;078 다음 괄호( )에 들어갈 알맞은 용어를 쓰시오.&lt;/p&gt;
&lt;p&gt;(             )은(는) 정적 테스트의 가장 일반적인 유형으로, 사전에 정의된 코드 작성 규칙(Rule) 기반으로 소스코드를 점검하여 작성 규칙에 위반되는 소스코드를 추출하는 분석도구로 애플리케이션 개발 시 대부분 사용되며, 빌드 도구와 연계하여 빌드, 배포 수행 시 자동적으로 점검할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 인스펙션 | Code Inspection&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;079 기업의 IT 인프라 운영환경은 안정적인 IT 서비스 운영 관리를 위해서 애플리케이션 배포 및 변경 작업에 대한 관리, 통제를 강화하고 있으며, 여러 가지 제약 사항을 가지고 있다. 그 중, 계정 관리 부문에서 아이디 또는 패스워드가 소스 코드나 빌드 스크립트 상에 직접 작성되지 않도록 주의해야 하는데, 이 때, 소스 코드나 빌드 스크립트 상에 아이디나 패스워드를 직접 작성하는 것을 무엇이라고 하는가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;하드코딩 | Hard Coding&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;080 선발된 잠재 고객으로 하여금 일정 기간 무료로 사용하게 한 후에 나타난 여러 가지 오류를 수정, 보완하는 테스트는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;베타 테스트&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;081 유지보수 생산성 향상을 목적으로 기능을 변경하지 않고, 복잡한 소스코드를 수정, 보완하여 가용성 및 가독성을 높이는 기법 또는 소프트웨어 모듈의 기능은 수정하지 않고 내부적으로 구조, 관계 등을 단순화하여 소프트웨어의 유지보수성을 향상시키는 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리팩토링 | Refactoring&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;082 조직의 표준 프로세스를 커스터마이징하여 프로젝트의 비즈니스적으로 또는 기술적인 요구에 맞게 적합한 프로세스를 얻는 과정을 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테일러링 | Tailaring&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;083 테스트의 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참값을 입력하여 비교하는 기법으로, true, sampling, heuristic, consistency check로 분류되는 테스트 기법은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 오라클 | Test Oracle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;084 다음 보기가 설명하는 패턴을 작성하시오.&lt;/p&gt;
&lt;p&gt;한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방법으로 일대다 의존성을 가지는 디자인 패턴과 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야 한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;observer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;085 복잡한 인스턴스를 조립하여 만드는 구조로, 복합 객체를 생성할 때 객체를 생성하는 방법(과정)과 객체를 구현(표현) 하는 방법을 분리함으로써 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있는 디자인 패턴은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;builder&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;086 전역 변수를 사용하지 않고 객체를 하나만 생성하도록 하며, 생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;singleton&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;087 클래스 설계 관점에서 객체의 정보를 저장할 필요가 있을 때 적용하는 디자인 패턴으로 undo 기능을 개발할 때 사용한다. 무슨 패턴인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;memento&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;088 기존에 구현되어 있는 클래스에 그때그때 필요한 기능을 추가해 나가는 설계 패턴으로 기능 확장이 필요할 때 객체간의 결합을 통해 기능을 동적으로 유연하게 확장할 수 있게 해주어 상속의 대안으로 사용하는 패턴은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;decorator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;089 처음부터 일반적인 원형을 만들어 놓고, 그것을 복사한 후 필요한 부분만 수정하여 사용하는 패턴으로, 생성할 객체의 원형을 제공하는 인스턴스에서 생성할 객체들의 타입이 결정되도록 설정하며 객체를 생성할 때 갖추어야 할 기본 형태가 있을 때 사용되는 패턴은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Prototype&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;090 Linux 운영체제 위에서 구동하며 휴대폰 전화를 비롯한 휴대용 장치를 위한 운영체제와 미들웨어, 사용자 인터페이스 그리고 표준 응용 프로그램(웹 브라우저, 이메일 클라이언트. 단문 메시지 서비스(SMS), MMS 등을 포함하고 있는 소프트웨어 스택이자 리눅스 모바일 운영체제이다. 개발자들이 자바와 코틀린 언어로 응용 프로그램을 작성할 수 있게 하였으며, 컴파일된 바이트코드를 구동할 수 있는 런타임 라이브러리를 제공하는 운영체제는 무엇인지 작성하시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;안드로이드 | Android&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;091 구역내 근거리 통신망(LAN)이나 대형 기종에서만 작동하던 운영체제인 Unix를 386 기종의 개인용 컴퓨터(PC)에서도 작동할 수 있게 만든 운영체제로, 인터넷을 통해 프로그램 소스 코드를 완전 무료로 공개하여 사용자는 원하는 대로 특정 기능을 추가할 수 있을 뿐만 아니라, 어느 플랫폼에도 포팅이 가능한 장점을 가진 운영체제는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리눅스 | Linux&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;092 파일럿을 뜻하는 그리스어에서 유래한 용어로 리눅스 재단에 의해 관리되는 컨테이너화된 애플리케션의 자동 배포, 스케일링 등을 제공하는 오픈소스 기반의 관리시스템은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쿠버네티스 | Kubernetes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;093 구글에서 대용량 데이터 처리를 분산 병렬 컴퓨팅에서 처리하기 위한 목적으로 제작하여 2004년 발표한 소프트웨어로 현재 Java, C++, 그리고 기타 언어에서 적용이 가능하도록 작성되었으며 아파치 하둡(Hadoop)으로 대표되는 소프트웨어 프레임워크는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;맵 리듀스(Map Reduce)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;094 다음 설명 중 빈칸에 들어갈 알맞은 용어를 작성하시오.&lt;/p&gt;
&lt;p&gt;HTTP, HTTPS, SMTP를 통해서 XML 기반의 데이터를 주고받는 프로토콜로 웹 서비스 방식에서 HTTP 기반의 ( )을/를 사용하여 송수신한다. ( ) 대신 레스트 풀(RESTful) 프로토콜로 대체할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SOAP(Simple Object Access Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;095 웹 서비스명, 제공 위치, 메시지 포맷, 프로토콜 정보 등 웹 서비스에 대한 상세 정보를 XML형태로 구현한 기술은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;WSDL(Web Services Description Language, 웹 서비스 기술 언어)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;096 HTTP URI를 통해 자원을 명시하고, HTTP 메소드(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 생성, 조회, 갱신, 삭제 등의 명령을 적용할 수 있는 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;REST(Representational State Transfer, 웹 표현상태 변경)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;097 웹 서비스에 대한 정보인 WSDL을 등록하고 검색하기 위한 저장소로 공개적으로 접근, 검색이 가능한 레지스트리이자 표준은 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UDDI | Universal Description, Discovery and Integration&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;098 소프트웨어 개발 과정에서 변경 사항을 관리하는 기법은 ( )기법이라고 하며 ( ) 기법을 활용한 도구로는 CVS, SVN, Git 등이 있다. 빈칸에 알맞은 용어를 작성하시오.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;형상 관리&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;099 소프트웨어 개발 과정에서 변경 사항을 관리하는 기법을 형상 관리라고 한다. &amp;#x3C;보기&gt;를 보고 형상 관리의 절차를 순서대로 서술하시오.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ㄱ. 형상 통제    ㄴ. 형상 기록    ㄷ. 형상 감사    ㄹ. 형상 식별&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ㄹ(형상 식별) → ㄱ(형상 통제) → ㄷ(형상 감사) → ㄴ(형상 기록)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;100 형상(버전) 관리에서 사용하는 용어로써, 관리 대상을 형상관리 시스템으로 일괄 전송하여 압축, 암호화한 후에 파일의 현재 버전과 변경 이력 정보를 저장하는 저장소를 뜻하는 용어는 무엇인가?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;리포지토리(repository)&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 11-제품 소프트웨어 패키징/</guid><pubDate>Fri, 17 Jul 2020 23:03:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 제품 소프트웨어 패키징 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-소프트웨어-패키징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%ED%8C%A8%ED%82%A4%EC%A7%95&quot; aria-label=&quot;1 소프트웨어 패키징 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 소프트웨어 패키징&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 패키징&lt;/code&gt; : 모듈별로 생성한 실행 파일들을 묶어 배포용 설치 파일을 만드는 것&lt;/li&gt;
&lt;li&gt;개발자가 아니라 사용자를 중심&lt;/li&gt;
&lt;li&gt;소스 코드는 향후 관리를 고려하여 모듈화하여 패키징&lt;/li&gt;
&lt;li&gt;소프트웨어 패키징 작업 순서 &lt;del&gt;(기모빌사패패배)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능 식별&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모듈화&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;빌드(Build) 진행&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용자 환경 분석&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;패키징 및 적용 시험&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;패키징 변경 개선&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;배포&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-릴리즈-노트release-note&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%A6%B4%EB%A6%AC%EC%A6%88-%EB%85%B8%ED%8A%B8release-note&quot; aria-label=&quot;2 릴리즈 노트release note permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 릴리즈 노트(Release Note)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;릴리즈 노트&lt;/code&gt; : 개발 과정에서 정리된 릴리즈 정보를 소프트웨어의 최종 사용자인 고객과 공유하기 위한 문서&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;릴리즈 노트 작성 순서&lt;/em&gt;&lt;del&gt;(모릴릴영정추)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모듈 식별&lt;/code&gt; : 모듈별 빌드 수행 후 릴리즈 노트에 작성될 내용 확인&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;릴리즈 정보 확인&lt;/code&gt; : 릴리즈 노트 및 소프트웨어 이름, 릴리즈 버전 및 날짜, 노트 날짜 및 버전 등 확인&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;릴리즈 노트 개요 작성&lt;/code&gt; : 소프트웨어 및 변경사항 전체에 대한 간략한 내용 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;영향도 체크&lt;/code&gt; : 버그나 이슈 관련 내용 또는 해당 릴리즈 버전에서의 기능 변화가 다른 소프트웨어나 기능을 사용하는데 미칠 수 있는 영향 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정식 릴리즈 노트 작성&lt;/code&gt; : Header(머릿말), 개요, 영향도 체크 항목을 포함하여 정식 릴리즈 노트에 작성될 기본 사항 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;추가 개선 항목 식별&lt;/code&gt; : 추가 버전 릴리즈 노트 작성이 필요한 경우 추가 릴리즈 노트 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Header(머릿말) : 릴리즈 노트 이름, 소프트웨어 이름, 릴리즈 버전, 릴리즈 날짜, 릴리즈 노트 날짜, 릴리즈 노트 버전 등을 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-디지털-저작권-관리drm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%94%94%EC%A7%80%ED%84%B8-%EC%A0%80%EC%9E%91%EA%B6%8C-%EA%B4%80%EB%A6%ACdrm&quot; aria-label=&quot;3 디지털 저작권 관리drm permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 디지털 저작권 관리(DRM)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;디지털 저작권 관리(DRM)&lt;/code&gt; : 저작권자가 배포한 디지털 콘텐츠가 저작권자가 의도한 용도로만 사용되도록 디지털 콘텐츠의 생성, 유통, 이용까지의 전 과정에 걸쳐 사용되는 디지털 콘텐츠 관리 및 보호 기술&lt;/li&gt;
&lt;li&gt;&lt;em&gt;디지털 저작권 관리의 기술 요소&lt;/em&gt;&lt;del&gt;(암키암식저정크인)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;암호화&lt;/code&gt; : 콘텐츠 및 라이선스를 암호화하고 전자 서명을 할 수 있는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;키 관리&lt;/code&gt; : 콘텐츠를 암호화한 키에 대한 저장 및 분배 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;암호화 파일 생성&lt;/code&gt; : 콘텐츠를 암호화된 콘텐츠로 생성하기 위한 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;식별 기술&lt;/code&gt; : 콘텐츠에 대한 식별 체계 표현 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;저작권 표현&lt;/code&gt; : 라이선스의 내용 표현 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정책 관리&lt;/code&gt; : 라이선스 발급 및 사용 에 대한 정책 표현 및 관리 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;크랙 방지&lt;/code&gt; : 크랙에 의한 콘텐츠 사용 방지 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인증&lt;/code&gt; : 라이선스 발급 및 사용의 기준이 되는 사용자 인증 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-소프트웨어-설치-매뉴얼-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%84%A4%EC%B9%98-%EB%A7%A4%EB%89%B4%EC%96%BC-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;4 소프트웨어 설치 매뉴얼 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 소프트웨어 설치 매뉴얼 작성&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 설치 매뉴얼&lt;/code&gt; : 개발 초기에서부터 적용된 기준이나 사용자가 소프트웨어를 설치하는 과정에 필요한 내용을 기록한 설명서와 안내서&lt;/li&gt;
&lt;li&gt;&lt;em&gt;설치 매뉴얼 작성 순서&lt;/em&gt;&lt;del&gt;(기유설유이최)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능 식별&lt;/code&gt; : 소프트웨어의 개발 목적과 주요 기능을 흐름 순으로 정리하여 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UI 분류&lt;/code&gt; : 설치 매뉴얼을 작성할 순서대로 UI를 분류 한 후 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;설치 파일/백업 파일 확인&lt;/code&gt; : 폴더 위치, 설치 파일, 백업 파일 등의 개별적인 기능을 확인하여 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Uninstall 절차 확인&lt;/code&gt; : 직접 Uninstall을 수행하면서 그 순서를 단계별로 자세히 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이상 Case 확인&lt;/code&gt; : 설치 과정에서 발생할 수 있는 다양한 Case를 만들어 확인하고 해당 Case에 대한 대처법을 자세하게 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;최종 매뉴얼 적용&lt;/code&gt; : 설치가 완료된 화면과 메시지를 캡쳐하여 추가한 후 완성된 매뉴얼을 검토하고 고객 지원에 대한 내용 기록&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-소프트웨어-사용자-매뉴얼-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%A7%A4%EB%89%B4%EC%96%BC-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;5 소프트웨어 사용자 매뉴얼 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 소프트웨어 사용자 매뉴얼 작성&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 사용자 매뉴얼&lt;/code&gt; : 사용자가 소프트웨어를 사용하는 과정에서 필요한 내용을 문서로 기록한 설명서와 안내서&lt;/li&gt;
&lt;li&gt;&lt;em&gt;사용자 매뉴얼 작성 순서&lt;/em&gt;&lt;del&gt;(기사사초이최)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능 식별&lt;/code&gt; : 소프트웨어의 개발 목적과 사용자 활용 기능을 흐름 순으로 정리하여 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용자 화면 분류&lt;/code&gt; : 사용자 화면을 메뉴별로 분류하여 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용자 환경 파일 확인&lt;/code&gt; : 폴더 위치, 사용자 로그 파일, 백업 파일 등의 개별적인 기능을 확인하여 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;초기화 절차 확인&lt;/code&gt; : 프로그램을 사용하기 위한 초기화 절차를 확인하고 그 단계를 순서대로 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이상 Case 확인&lt;/code&gt; : 소프트웨어 사용 과정에서 발생할 수 있는 다양한 이상 Case를 만들어 확인하고 해당 Case에 대한 대처법을 자세하게 기록&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;최종 매뉴얼 적용&lt;/code&gt; : 사용과 관련된 문의 답변(FAQ)을 기록한 후 완성된 매뉴얼을 검토하고 고객 지원에 대한 내용 기록&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-소프트웨어-패키징의-형상-관리scm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%ED%8C%A8%ED%82%A4%EC%A7%95%EC%9D%98-%ED%98%95%EC%83%81-%EA%B4%80%EB%A6%ACscm&quot; aria-label=&quot;6 소프트웨어 패키징의 형상 관리scm permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 소프트웨어 패키징의 형상 관리(SCM)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;형상 관리&lt;/code&gt; : 소프트웨어의 개발 과정에서 소프트웨어의 변경 사항을 관리하기 위해 개발된 일련의 활동&lt;/li&gt;
&lt;li&gt;&lt;em&gt;형상 관리 기능&lt;/em&gt;&lt;del&gt;(형버통감기)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;형상 식별&lt;/code&gt; : 형상 관리 대상에 이름과 관리 번호를 부여하고, 계층(Tree) 구조로 구분하여 수정 및 추적이 용이하도록 하는 작업&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;버전 제어&lt;/code&gt; : 소프트웨어 업그레이드나 유지 보수 과정 에서 생성된 다른 버전의 형상 항목을 관리하고, 이를 위해 특정 절차와 도구(Tool)를 결합시키는 작업&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;형상 통제(변경 관리)&lt;/code&gt; : 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선이 잘 반영될 수 있도록 조정하는 작업&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;형상 감사&lt;/code&gt; : 기준선의 무결성을 평가하기 위해 확인, 검증, 검열 과정을 통해 공식적으로 승인하는 작업&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;형상 기록(상태 보고)&lt;/code&gt; : 형상의 식별, 통제, 감사 작업의 결과를 기록·관리하고 보고서를 작성하는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-소프트웨어-버전-등록-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%B2%84%EC%A0%84-%EB%93%B1%EB%A1%9D-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;7 소프트웨어 버전 등록 과정 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 소프트웨어 버전 등록 과정&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;버전 등록 순서도&lt;/em&gt;&lt;del&gt;(가인예동차)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;가져오기(Import)&lt;/code&gt; : 개발자가 저장소에 신규로 파일을 추가&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인출(Check-Out)&lt;/code&gt; : 수정 작업을 진행할 개발자가 저장소에 추가된 파일을 자신의 작업 공간으로 인출&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;예치(Commit)&lt;/code&gt; : 인출한 파일을 수정한 후 설명을 붙여 저장소에 예치&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;동기화(Update)&lt;/code&gt; : 커밋(Commit) 후 새로운 개발자가 자신의 작업 공간을 동기화(Update)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;차이(Diff)&lt;/code&gt; : 새로운 개발자가 추가된 파일의 수정 기록(Change Log)을 확인하면서 이전 개발자가 처음 추가한 파일과 이후 변경된 파일의 차이를 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-소프트웨어-버전-관리-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;8 소프트웨어 버전 관리 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 소프트웨어 버전 관리 도구&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공유 폴더 방식&lt;/code&gt; : 버전 관리 자료가 로컬 컴퓨터의 공유 폴더에 저장되어 관리되는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클라이언트/서버 방식&lt;/code&gt; : 버전 관리 자료가 중앙 시스템 (서버)에 저장되어 관리되는 방식&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;분산 저장소 방식&lt;/code&gt; : 버전 관리 자료가 하나의 원격 저장소와 분산된 개발자 PC의 로컬 저장소에 함께 저장되어 관리되는 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Subversion(SVN)&lt;/code&gt; : CVS(Concurrent Version System) 를 개선한 것으로, 클라이언트/서버 구조이며, 아파치 소프트웨어 재단에서 2000년에 발표&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Git&lt;/code&gt; : 리누스 토발즈가 2005년 리눅스 커널 개발에 사용할 관리 도구로 개발한 이후 주니오 하마노에 의해 유지 보수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Git명령어 활용&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;계정 설정하기&lt;/code&gt; : 사용자 이름과 사용자 이메일을 등록하여 계정 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&quot;token string&quot;&gt;&apos;ydh&apos;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global user.email &lt;span class=&quot;token string&quot;&gt;&apos;ydh2244@naver.com&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;지역 저장소 만들기&lt;/code&gt; : 실제 개발 작업을 진행하는 폴더에 지역 저장소 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;변경 내역을 지역 저장소에 저장하기 : 작업을 수행하여 변경된 파일들은 다음의 두 단계를 거침&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(작업 폴더 -&gt; 스테이징 영역 -&gt; 지역 저장소)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;병합(Merge) 기능 사용하기&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;// 새로운 브랜치 생성
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch new_test
// 브랜치로 이동
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout new_test
// 작업 폴더의 변경 내역 저장
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit -m &lt;span class=&quot;token string&quot;&gt;&apos;커밋&apos;&lt;/span&gt;
// 마스터 브랜치로 이동
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout master
// 마스터 브랜치와 병합 후 new_test 브랜치 제거
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge new_test
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch --d new_test&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;지역 저장소의 버전 관리 내역 저장&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; abc https://github.com/ydh/remotetest.git
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;9-빌드-자동화-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EB%B9%8C%EB%93%9C-%EC%9E%90%EB%8F%99%ED%99%94-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;9 빌드 자동화 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 빌드 자동화 도구&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;빌드&lt;/code&gt; : 소스 코드 파일들을 컴파일한 후 여러 개의 모듈을 묶어 실행 파일로 만드는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;빌드 자동화 도구&lt;/code&gt; : 빌드를 포함하여 테스트 및 배포를 자동화하는 도구&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Jenkins&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 기반의 오픈 소스 형태로, 가장 많이 사용되는 빌드 자동화 도구&lt;/li&gt;
&lt;li&gt;서블릿 컨테이너에서 실행되는 서버 기반 도구&lt;/li&gt;
&lt;li&gt;SVN, Git 등 대부분의 형상 관리 도구와 연동, 여러 대의 컴퓨터를 이용한 분산 빌드나 테스트가 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Gradle&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groovy를 기반으로 한 오픈 소스 형태의 자동화 도구로, 안드로이드 앱 개발 환경에서 사용&lt;/li&gt;
&lt;li&gt;안드로이드 뿐만 아니라 플러그인을 설정하면, Java, C/C++, Python 등의 언어도 빌드가 가능&lt;/li&gt;
&lt;li&gt;Groovy를 사용해서 만든 DSL(Domain Specific Language)을 스크립트 언어로 사용&lt;/li&gt;
&lt;li&gt;Gradle은 실행할 처리 명령들을 모아 태스크(Task)로 만든 후 태스크 단위로 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(3)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(3)/</guid><pubDate>Fri, 17 Jul 2020 21:03:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요
2020 정보 처리 기사 응용 SW 기초 기술 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-네트워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;1 네트워크 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 네트워크&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;두 대 이상의 컴퓨터를 전화선이나 케이블 등으로 연결하여 자원을 공유하는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;근거리 통신망(LAN; Local Area Network)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;회사, 학교, 연구소 등에서 비교적 가까운 거리에 있는 컴퓨터, 프린터, 저장장치 등과 같은 자원을 연결하여 구성&lt;/li&gt;
&lt;li&gt;사이트 간의 거리가 짧아 데이터의 전송 속도가 빠르고, 에러 발생율이 낮음&lt;/li&gt;
&lt;li&gt;근거리 통신망에서는 주로 버스형이나 링형 구조를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;광대역 통신망(WAN; Wide Area Network)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;국가와 국가 혹은 대륙과 대륙 등과 같이 멀리 떨어진 사이트들을 연결하여 구성&lt;/li&gt;
&lt;li&gt;사이트 간의 거리가 멀기 때문에 통신 속도가 느리고, 에러 발생률이 높음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-ip-주소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-ip-%EC%A3%BC%EC%86%8C&quot; aria-label=&quot;2 ip 주소 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. IP 주소&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;인터넷에 연결된 모든 컴퓨터 자원을 구분하기 위한 고유한 주소&lt;/li&gt;
&lt;li&gt;숫자로 8비트씩 4부분, 총 32비트로 구성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Class A&lt;/code&gt; : 국가나 대형 통신망(16,777,216개 호스트)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Class B&lt;/code&gt; : 중대형 통신망(65,536개 호스트)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Class C&lt;/code&gt; : 소규모 통신망(256개 호스트)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Class D&lt;/code&gt; : 멀티캐스트용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Class E&lt;/code&gt; : 실험용으로 공용되지 않음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;서브넷 마스크&lt;/em&gt; : 4바이트의 IP 주소 중 네트워크 주소와 호스트 주소를 구분하기 위한 비트&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-ipv6&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-ipv6&quot; aria-label=&quot;3 ipv6 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. IPv6&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;현재 사용하고 있는 IP 주소 체계인 IPv4의 주소 부족 문제를 해결하기 위해 개발&lt;/li&gt;
&lt;li&gt;총 128비트(16 * 8부분), 각 부분을 16진수로 표현하고, 콜론(:)으로 구분&lt;/li&gt;
&lt;li&gt;IPv4에 비해 자료 전송 속도가 빠르고, IPv4와 호환성이 뛰어남&lt;/li&gt;
&lt;li&gt;인증성, 기밀성, 데이터 무결성의 지원으로 보안 문제 해결&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IPv6의 주소 체계&lt;/em&gt;&lt;del&gt;(유멀애)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;유니캐스트(Unicast)&lt;/code&gt; : 단일 송신자 / 단일 수신자 간의 통신(1:1)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;멀티캐스트(Multicast)&lt;/code&gt; : 단일 송신자 / 다중 수신자 간의 통신(1:N)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;애니캐스트(Anycast)&lt;/code&gt; : 단일 송신자 / 가장 가까이 있는 단일 수신자 간의 통신(1:1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-도메인-네임&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%8F%84%EB%A9%94%EC%9D%B8-%EB%84%A4%EC%9E%84&quot; aria-label=&quot;4 도메인 네임 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 도메인 네임&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;숫자로 된 IP 주소를 사람이 이해하기 쉬운 문자 형태로 표현한 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;호스트 컴퓨터 이름, 소속 기관 이름, 소속 기관의 종류, 소속 국가명 순으로 구성되며, 왼쪽에서 오른쪽으로 갈수록 상위 도메인을 의미&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DNS(Domain Name System)&lt;/em&gt; : 문자로 된 도메인 네임을 컴퓨터가 이해할 수 있는 IP 주소로 변환하는 역할을 하는 시스템&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DNS 서버&lt;/em&gt; : 문자로 된 도메인 네임을 컴퓨터가 이해할 수 있는 IP 주소로 변환하는 역할을 하는 서버&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-osi참조-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-osi%EC%B0%B8%EC%A1%B0-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;5 osi참조 모델 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. OSI참조 모델&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;OSI(Open System Interconnection) 참조 모델&lt;/code&gt; : &lt;em&gt;다른 시스템 간의 원활한 통신을 위해 ISO(국제표준화 기구)에서 제안한 통신 규약(Protocol)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OSI 참조 모델에서의 데이터 단위&lt;del&gt;(물비데프네패 전세세표응메)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;물리 계층  : 비트&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;데이터 링크 계층 : 프레임&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;네트워크 계층 : 패킷&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;전송 계층  : 세그먼트&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;세션, 표현, 응용 계층 : 메시지&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/994FB7355CB1C6D61E&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OSI 7계층 상위/ 하위 계층 : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하위 계층&lt;em&gt;(물리 계층, 데이터 링크 계층 , 네트워크 계층)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;상위 계층&lt;em&gt;(전송 계층, 세션 계층 , 표현 계층, 응용 계층)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;(응표세전네데물)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;응용 계층(Application Layer)&lt;/code&gt; : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자(응용 프로그램)가 OSI 환경에 접근할 수 있도록 응용 프로세스 간의 정보 교환, 전자 사서함, 파일 전송, 가상 터미널 등의 서비스를 제공함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;표현 계층(Presentation Layer)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;응용 계층으로부터 받은 데이터를 세션 계층에 맞게, 세션 계층에서 받은 데이터는 응용 계층에 맞게 변환하는 기능(JPG,PNG)&lt;/li&gt;
&lt;li&gt;코드 변환, 데이터 암호화, 데이터 압축, 구문 검색, 정보 형식(포맷) 변환, 문맥 관리 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;세션 계층(Session Layer)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송·수신 측 간의 관련성을 유지하고 대화 제어를 담당함&lt;/li&gt;
&lt;li&gt;대화(회화) 구성 및 동기 제어, 데이터 교환 관리 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;전송 계층(Transport Layer)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;종단 시스템(End-to-End) 간의 전송 연결 설정, 데이터 전송, 연결 해제 기능을 함&lt;/li&gt;
&lt;li&gt;주소 설정, 다중화(데이터의 분할과 재조립), 오류 제어, 흐름 제어&lt;/li&gt;
&lt;li&gt;표준 : &lt;em&gt;TCP/UDP&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;관련 장비 : &lt;em&gt;게이트웨이&lt;/em&gt;&lt;del&gt;(전게)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 계층(Network Layer, 망 계층)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개방 시스템들 간의 네트워크 연결을 관리하는 기능과 데이터의 교환 및 중계 기능을 함&lt;/li&gt;
&lt;li&gt;경로 설정(Routing), 데이터 교환 및 중계, 트래픽 제어, 패킷 정보 전송&lt;/li&gt;
&lt;li&gt;표준 : &lt;em&gt;X-25, IP&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;관련 장비 : &lt;em&gt;라우터&lt;/em&gt;&lt;del&gt;(네라)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 링크 계층(Data Link Layer)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 개의 인접한 개방 시스템들 간에 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 함&lt;/li&gt;
&lt;li&gt;흐름 제어, 프레임 동기화, 오류 제어, 순서 제어&lt;/li&gt;
&lt;li&gt;표준 : &lt;em&gt;HDLC, MAC, LAPB, LLC, LAPD, PPP&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;관련 장비 : &lt;em&gt;랜카드, 브리지, 스위치&lt;/em&gt;&lt;del&gt;(데랜스브)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;물리 계층(Physical Layer)&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의&lt;/li&gt;
&lt;li&gt;표준 : &lt;em&gt;RS-232C, X-21&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;관련 장비 : &lt;em&gt;리피터, 허브&lt;/em&gt;&lt;del&gt;(물리허)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-네트워크-관련-장비&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B4%80%EB%A0%A8-%EC%9E%A5%EB%B9%84&quot; aria-label=&quot;6 네트워크 관련 장비 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 네트워크 관련 장비&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;리피터(Repeater)&lt;/code&gt; : 물리 계층의 장비로, 전송되는 신호가 왜곡되거나 약해질 경우 원래의 신호 형태로 재생&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;허브(Hub)&lt;/code&gt; : 한 사무실이나 가까운 거리의 컴퓨터들을 연결하는 장치로, 각 회선을 통합적으로 관리하며, 신호 증폭 기능을 하는 리피터의 역할도 포함&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;더미 허브(Dummy Hub)&lt;/code&gt; : 네트워크에 흐르는 모든 데이터를 단순히 연결하는 기능만을 제공&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스위칭 허브(Switching Hub)&lt;/code&gt; : 네트워크상에 흐르는 데이터의 유무 및 흐름을 제어하여 각각의 노드가 허브의 최대 대역폭을 사용할 수 있는 지능형 허브&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;브리지(Bridge)&lt;/code&gt; : 데이터 링크 계층의 장비로, LAN과 LAN을 연결하거나 LAN 안에서의 컴퓨터 그룹을 연결&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스위치(Switch)&lt;/code&gt; : 브리지와 같이 LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;L2 스위치&lt;/em&gt; : OSI 2계층. 일반적으로 부르는 스위치로 MAC주소를 기반으로 프레임 전송. 동일 네트워크 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;L3 스위치&lt;/em&gt; : OSI 3계층. L2스위치에 라우터 기능 추가된 것으로, IP주소를 기반으로 패킷전송. 다른 네트워크 연결&lt;/li&gt;
&lt;li&gt;&lt;em&gt;L4 스위치&lt;/em&gt; : OSI 4계층. 로드밸런서가 달린 L3 스위치로 IP 주소 및 TCP/UDP를 기반으로 사용자들의 요구를 서버의 부하가 적은 곳에 배분하는 로드밸런싱 기능 제공&lt;/li&gt;
&lt;li&gt;&lt;em&gt;L7 스위치&lt;/em&gt; : OSI 7계층. IP 주소 및 TCP/UDP를 기반으로 사용자들의 요구를 서버의 부하가 적은 곳에 배분하는 로드밸런싱 기능 제공 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;라우터(Router)&lt;/code&gt; : 네트워크 계층의 장비로, LAN과 LAN의 연결 및 경로 선택, 서로 다른 LAN이나 LAN과 WAN을 연결&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;게이트웨이(Gateway)&lt;/code&gt; : 전 계층(1~7계층)의 프로토콜 구조가 전혀 다른 네트워크의 연결을 수행함&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-tcpip&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-tcpip&quot; aria-label=&quot;7 tcpip permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. TCP/IP&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;인터넷에 연결된 서로 다른 기종의 컴퓨터들이 데이터를 주고받을 수 있도록 하는 표준 프로토콜&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TCP(Transmission Control Protocol)&lt;/code&gt; : 신뢰성 있는 연결형 서비스, 패킷의 다중화, 순서 제어, 오류 제어, 흐름 제어, 스트림 전송 기능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IP(Internet Protocol)&lt;/code&gt; : 데이터그램을 기반으로 하는 비연결형 서비스, 패킷의 분해/조립, 주소 지정, 경로 선택 기능 제공, 헤더의 길이는 최소 20Byte에서 최대 60Byte&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;프로토콜&lt;/code&gt; : &lt;em&gt;서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화시켜 놓은 통신 규약&lt;/em&gt;&lt;del&gt;(구의시)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로토콜의 기본 요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구문(Syntax)&lt;/code&gt; : 전송하고자 하는 데이터의 형식, 부호화, 신호 레벨 등을 규정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;의미(Semantics)&lt;/code&gt; : 두 기기 간의 효율적이고 정확한 정보 전송을 위한 협조 사항과 오류 관리를 위한 제어 정보를 규정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시간(Timing)&lt;/code&gt; : 두 기기 간의 통신 속도, 메시지의 순서 제어 등을 규정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP/IP의 구조 &lt;del&gt;(응전인네)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OSI&lt;/th&gt;
&lt;th&gt;TCP/IP&lt;/th&gt;
&lt;th&gt;기능&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;응용/표현/세션 계층&lt;/td&gt;
&lt;td&gt;응용 계층&lt;/td&gt;
&lt;td&gt;응용 프로그램 간의 데이터 송·수신을 제공(TELNET, FTP, SMTP, SNMP, DNS, HTTP 등)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;전송 계층&lt;/td&gt;
&lt;td&gt;전송 계층&lt;/td&gt;
&lt;td&gt;호스트들 간의 신뢰성 있는 통신을 제공(TCP, UDP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;네트워크 계층&lt;/td&gt;
&lt;td&gt;인터넷 계층&lt;/td&gt;
&lt;td&gt;데이터 전송을 위한 주소 지정, 경로 설정을 제공(IP, ICMP, IGMP, ARP, RARP)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 링크 /물리 계층&lt;/td&gt;
&lt;td&gt;네트워크 액세스 계층&lt;/td&gt;
&lt;td&gt;실제 데이터(프레임)를 송·수신 하는 역할(Ethernet, IEEE 802, HDLC, X.25, RS-232C, ARQ 등)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;응용 계층 프로토콜&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FTP(File Transfer Protocol)&lt;/code&gt; : 컴퓨터와 컴퓨터 또는 컴퓨터와 인터넷 사이에서 파일을 주고받을 수 있도록 하는 원격 파일 전송 프로토콜&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SMTP(Simple Mail Transfer Protocol)&lt;/code&gt; : 전자 우편을 교환하는 서비스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TELNET&lt;/code&gt; : 멀리 떨어져 있는 컴퓨터에 접속하여 자신의 컴퓨터처럼 사용할 수 있도록 해주는 서비스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SNMP(Simple Network Management Protocol)&lt;/code&gt; : TCP/IP의 네트워크 관리 프로토콜로, 라우터나 허브 등 네트워크 기기의 네트워크 정보를 네트워크 관리 시스템에 보내는 데 사용되는 표준 통신 규약&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DNS(Domain Name System)&lt;/code&gt; : 도메인 네임을 IP 주소로 매핑하는 시스템&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP(HyperText Transfer Protocol)&lt;/code&gt; : 월드 와이드 웹에서 HTML 문서를 송수신 하기 위한 표준 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;전송 계층 프로토콜&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;TCP(Transmission Control Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;양방향 연결형 서비스, 가상 회선 연결 형태의 서비스를 제공&lt;/li&gt;
&lt;li&gt;스트림 위주의 전달(패킷 단위)&lt;/li&gt;
&lt;li&gt;신뢰성 있는 경로를 확립하고 메시지 전송을 감독&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UDP(User Datagram Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 전송 전에 연결을 설정하지 않는 비연결형 서비스를 제공&lt;/li&gt;
&lt;li&gt;TCP에 비해 상대적으로 단순한 헤더 구조를 가지므로, 오버헤드가 적음&lt;/li&gt;
&lt;li&gt;고속의 안정성 있는 전송 매체를 사용하여 빠른 속도를 필요로 하는 경우, 동시에 여러 사용자에게 데이터를 전달할 경우, 정기적으로 반복해서 전송할 경우에 사용&lt;/li&gt;
&lt;li&gt;실시간 전송에 유리하며, 신뢰성보다는 속도가 중요시되는 네트워크에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;RTCP(Real-Time Control Protocol)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTP(Real-time Transport Protocol) 패킷의 전송 품질을 제어하기 위한 제어 프로토콜&lt;/li&gt;
&lt;li&gt;세션(Session)에 참여한 각 참여자들에게 주기적으로 제어 정보를 전송&lt;/li&gt;
&lt;li&gt;하위 프로토콜은 데이터 패킷과 제어 패킷의 다중화를 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인터넷 계층 프로토콜&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IP(Internet Protocol)&lt;/code&gt; : 전송할 데이터에 주소 지정 및 경로 설정 등의 기능을 하며, 비연결형인 데이터그램 방식을 사용하므로 신뢰성이 보장되지 않음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ICMP(Internet Control Message Protocol)&lt;/code&gt; : IP와 조합하여 통신중에 발생하는 오류의 처리와 전송 경로 변경 등을 위한 제어 메시지를 관리하는 역할을 하며, 헤더는 8Byte로 구성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IGMP(Internet Group Management Protocol)&lt;/code&gt; : 멀티캐스트를 지원하는 호스트나 라우터 사이에서 멀티캐스트 그룹 유지를 위해 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ARP(Address Resolution Protocol)&lt;/code&gt; : &lt;del&gt;(AI물)&lt;/del&gt;호스트의 IP 주소를 호스트와 연결된 네트워크 접속 장치의 물리적 주소(MAC Address)로 바꿈&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RARP(Reverse Address Resolution Protocol)&lt;/code&gt; :&lt;del&gt;(R물I)&lt;/del&gt; ARP와 반대로 물리적 주소를 IP 주소로 변환하는 기능을 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 액세스 계층 프로토콜&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Ethernet(IEEE 802.3)&lt;/code&gt; : CSMA/CD 방식의 LAN&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IEEE 802&lt;/code&gt; : LAN을 위한 표준 프로토콜&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HDLC&lt;/code&gt; : 비트 위주의 데이터 링크 제어 프로토콜&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;X.25&lt;/code&gt; : 패킷 교환망을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RS-232C&lt;/code&gt; : 공중 전화 교환망(PSTN)을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-데이터-교환-방식-라우팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%90%ED%99%98-%EB%B0%A9%EC%8B%9D-%EB%9D%BC%EC%9A%B0%ED%8C%85&quot; aria-label=&quot;8 데이터 교환 방식 라우팅 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 데이터 교환 방식/ 라우팅&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;회선 교환 방식(Circuit Switching)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;통신을 원하는 두 지점을 교환기를 이용하여 물리적으로 접속시키는 방식&lt;/em&gt;, 접속에는 긴 시간이 소요되나 일단 접속되면 실시간 전송이 가능, 데이터 전송에 필요한 전체 시간이 축적 교환 방식에 비해 긺, 일정한 데이터 전송률을 제공하므로 동일한 전송 속도 유지(음성 전화망)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공간 분할 교환 방식(SDS; Space Division Switching)&lt;/code&gt; : 기계식 접점과 전자 교환기의 전자식 접점 등을 이용하여 교환을 수행하는 방식(음성 전화용 교환기)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시분할 교환 방식(TDS; Time Division Switching)&lt;/code&gt; : 전자 부품이 갖는 고속성과 디지털 교환 기술을 이용하여 다수의 디지털 신호를 시분할적으로 동작시켜 다중화 하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;패킷 교환 방식(Packet Switching)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;메시지를 일정한 길이의 패킷으로 잘라서 전송하는 방식&lt;/em&gt;, 패킷은 장애 발생시의 재전송을 위해 패킷 교환기에 일시 저장되었다가 곧 전송되며 전송이 끝난 후 폐기, 전송 시 교환기, 회선 등에 장애가 발생하더라도 다른 정상적인 경로를 선택해서 우회할 수 있음(데이터 전송에 적합)&lt;/li&gt;
&lt;li&gt;OSI 7계층의 네트워크 계층에 해당&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;가상 회선 방식&lt;/code&gt; : 단말장치 상호간에 논리적인 가상 통신 회선을 미리 설정하여 송신지와 수신지 사이의 연결을 확립한 후에 설정된 경로를 따라 패킷들을 순서적으로 운반하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터그램 방식&lt;/code&gt; : 연결 경로를 설정하지 않고 인접한 노드들의 트래픽(전송량) 상황을 감안하여 각각의 패킷들을 순서에 상관없이 독립적으로 운반하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;라우팅(Routing, 경로 제어)&lt;/code&gt; : &lt;em&gt;송수신 측 간의 전송 경로 중에서 최적 패킷 교환 경로를 결정하는 기능, 경로 제어표를 참조해서 이루어지며, 라우터에 의해 수행&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;라우팅 프로토콜&lt;/code&gt;&lt;del&gt;(RIOB)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;RIP(Routing Information Protocol)&lt;/em&gt; : &lt;em&gt;소규모 동종의 네트워크에 적합&lt;/em&gt;, 현재 가장 널리 사용되는 라우팅 프로토콜로 최대 홉수를 15로 제한&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IGRP(Interior Gateway Routing Protocol)&lt;/em&gt; : &lt;em&gt;중규모 네트워크에 적합&lt;/em&gt;, RIP의 단점을 보완하기 위해 만들어 개발된 것으로 네트워크 상태를 고려하여 라우팅&lt;/li&gt;
&lt;li&gt;&lt;em&gt;OSPF(Open Shortest Path First Protocol)&lt;/em&gt; : &lt;em&gt;대규모 네트워크에서 많이 사용&lt;/em&gt;, 라우팅 정보에 변화가 생길 경우 변화된 정보만 네트워크 내의 모든 라우터에 알리며, RIP에 비해 홉수에 제한이 없음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;BGP(Border Gateway Protocol)&lt;/em&gt; : 자율 시스템(AS)간의 라우팅 프로토콜, EGP의 단점을 보완하기 위해 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;라우팅 알고리즘&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;거리 벡터 알고리즘(Distance Vector Algorithm)&lt;/em&gt; : 인접해있는 라우터 간의 거리와 방향에 대한 정보를 이용하여 최적의 경로를 찾고 그 최적 경로를 이용할 수 없을 경우 다른 경로를 찾는 알고리즘(RIP와 IGRP)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;링크 상태 알고리즘(Link State Algorithm)&lt;/em&gt; : 라우터와 라우터 간의 모든 경로를 파악하여 미리 대체 경로를 마련해 두는 알고리즘으로, 거리 벡터 알고리즘의 단점을 보완하기 위해 개발(OSPF 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(2)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(2)/</guid><pubDate>Fri, 17 Jul 2020 21:02:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 응용 SW 기초 기술 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-교착상태dead-lock&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B5%90%EC%B0%A9%EC%83%81%ED%83%9Cdead-lock&quot; aria-label=&quot;1 교착상태dead lock permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 교착상태(Dead Lock)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;교착 상태&lt;/code&gt; : &lt;em&gt;상호 배제에 의해 나타나는 문제점으로, 둘 이상의 프로세스들이 자원을 점유한 상태에서 서로 다른 프로세스가 점유하고 있는 자원을 요구하며 무한정 기다리는 현상&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;교착상태 발생의 필요 충분 조건&lt;/strong&gt;&lt;del&gt;(상점비환)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;상호 배제&lt;/code&gt; : 한번에 한 개의 프로세스만이 공유 자원을 사용할 수 있어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;점유와 대기&lt;/code&gt; : 최소한 하나의 자원을 점유하고 있으면서 다른 프로세스에 할당되어 사용되고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;비선점&lt;/code&gt; : 다른 프로세스에 할당된 자원은 사용이 끝날 때까지 강제로 빼앗을 수 없어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;환형 대기&lt;/code&gt; : 공유 자원과 공유 자원을 사용하기 위해 대기하는 프로세스들이 원형으로 구성되어있어 자신에게 할당된 자원을 점유하면서 앞이나 뒤에있는 프로세스의 자원을 요구해야 함&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;교착 상태 해결 방법&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;예방 기법&lt;/code&gt; : 교착상태가 발생하지 않도록 사전에 시스템을 제어하는 방법으로, 교착상태 발생의 네가지 조건 중에서 어느 하나를 제거함으로써 수행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;상호 배제 부정&lt;/em&gt; : 한 번에 여러 개의 프로세스가 공유 자원을 사용할 수 있도록 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;점유 및 대기 부정&lt;/em&gt; : 프로세스가 실행되기 전 필요한 모든 자원을 할당하여 프로세스 대기를 없애거나 자원이 점유되지 않은 상태에서만 자원을 요구하도록 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;비선점 부정&lt;/em&gt; : 자원을 점유하고 있는 프로세스가 다른 자원을 요구할 때 점유하고 있는 자원을 반납하고, 요구한 자원을 사용하기 위해 기다리게 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;환형 대기 부정&lt;/em&gt; : 자원을 선형 순서로 분류하여 고유 번호를 할당하고, 각 프로세스는 현재 점유한 자원의 고유 번호보다 앞이나 뒤 어느 한쪽 방향으로만 자원을 요구하도록 하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;회피 기법&lt;/code&gt; : 교착상태가 발생할 가능성을 배제하지 않고 교착상태가 발생하면 적절히 피해나가는 방법으로, 주로 은행원 알고리즘이 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;발견 기법&lt;/code&gt; : 시스템에 교착 상태가 발생했는지 점검하여 교착 상태에 있는 프로세스와 자원을 발견하는 것으로, 자원 할당 그래프 등을 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;회복 기법&lt;/code&gt; : 교착 상태를 일으킨 프로세스를 종료하거나 교착 상태의 프로세스에 할당된 자원을 선점하여 프로세스나 자원을 회복하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-데이터베이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;2 데이터베이스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 데이터베이스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터베이스&lt;/code&gt; : 특정 조직의 업무를 수행하는 데 필요한 상호 관련된 데이터들의 모임&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;데이터베이스의 정의&lt;/em&gt;&lt;del&gt;(통저운공)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;통합된 데이터&lt;/code&gt; : 검색의 효율성을 위해 중복이 최소화된 데이터의 모임&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;저장된 데이터&lt;/code&gt; : 컴퓨터가 접근할 수 있는 저장 매체에 저장된 데이터&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;운영 데이터&lt;/code&gt; : 조직의 고유한 업무를 수행하는 데 존재 가치가 확실하고 없어서는 안될 반드시 필요한 데이터&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공용 데이터&lt;/code&gt; : 여러 응용 시스템들이 공동 으로 소유하고 유지하는 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DBMS(데이터베이스 관리 시스템)&lt;/code&gt; : 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고, 데이터베이스를 관리해 주는 소프트웨어&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;DBMS의 필수 기능&lt;/em&gt;&lt;del&gt;(정조제)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정의(Definition) 기능&lt;/code&gt; : 모든 응용 프로그램들이 요구하는 데이터 구조를 지원하기 위해 데이터베이스에 저장될 데이터의 형(Type)과 구조에 대한 정의, 이용방식, 제약 조건 등을 명시하는 기능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;조작(Manipulation) 기능&lt;/code&gt; : 데이터 검색, 갱신, 삽입, 삭제 등을 체계적으로 처리하기 위해 사용자와 데이터베이스 사이의 인터페이스 수단을 제공하는 기능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어(Control) 기능&lt;/code&gt; : 데이터베이스를 접근하는 갱신, 삽입, 삭제 작업이 정확하게 수행되어 데이터의 무결성이 유지되도록 제어하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;DBMS의 종류&lt;/em&gt;&lt;del&gt;(계망관)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;계층형 DBMS&lt;/code&gt; : 트리(Tree) 구조를 이용해서 데이터의 상호관계를 계층적으로 정의한 DBMS로, 개체 타입 간 에는 상위와 하위 관계가 존재하며, 일대다(1:N) 대응 관계만 존재&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;망형 DBMS&lt;/code&gt; : 그래프를 이용해서 데이터 논리 구조를 표현한 DBMS로, 상위와 하위 레코드 사이에서 1:1, 1:N, N:M(다대다) 대응 관계를 모두 지원&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계형 DBMS&lt;/code&gt; : 계층형과 망형 DBMS의 복잡한 구조를 단순화시킨 가장 널리 사용되는 DBMS로, 파일 구조처 럼 구성한 2차원적인 표(를 하나의 DB로 묶어서 테이블 내에 있는 속성들 간의 관계를 설정하거나 테이블 간의 관계를 설정하여 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-분산-데이터베이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%B6%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;3 분산 데이터베이스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 분산 데이터베이스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;논리적으로는 같은 시스템에 속하지만 물리적으로는 컴퓨터 네트워크를 통해 분산되어 있는 데이터베이스&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;위치 투명성&lt;/code&gt; : 접근하려는 데이터 베이스의 실제 위치를 알 필요 없이 단지 데이터베이스의 논리적인 명칭만으로 접근할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;중복 투명성&lt;/code&gt; : 동일한 데이터가 여러 곳에 중복되어 있더라도 사용자는 마치 하나의 데이터만 존재하는 것처럼 사용할 수 있고, 시스템은 자동으로 여러 데이터에 대한 작업을 수행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;병행 투명성&lt;/code&gt; : 분산 데이터베이스와 관련된 다수의 트랜잭션들이 동시에 실행되더라도 그 트랜잭션들의 수행 결과는 서로 영향을 받지 않음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;장애 투명성&lt;/code&gt; : 트랜잭션, DBMS, 네트워크, 컴퓨터 장애에도 불구하고 트랜잭션은 정확하게 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-고급-데이터베이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EA%B3%A0%EA%B8%89-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;4 고급 데이터베이스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 고급 데이터베이스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 웨어하우스&lt;/code&gt; : 급증하는 다량의 데이터를 효과적으로 분석하여 정보화하고 이를 여러 계층의 사용자들이 효율적으로 사용할 수 있도록 한 데이터베이스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 마트&lt;/code&gt; : 전사적으로 구축된 데이터 웨어하우스로부터 특정 주제나 부서 중심으로 구축된 소규모 단일 주제의 데이터 웨어하우스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 마이닝&lt;/code&gt; : 데이터 웨어하우스에 저장된 데이터 집합에서 사용자의 요구에 따라 유용하고 가능성 있는 정보를 발견하기 위한 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;OLAP&lt;/code&gt; : 다차원으로 이루어진 데이터로부터 통계적인 요약 정보를 분석하여 의사 결정에 활용하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;OLTP&lt;/code&gt; : 온라인 업무 처리 형태의 하나로 네트워크상의 여러 이용자가 실시간으로 데이터베이스의 데이터를 갱신하거나 검색하는 등의 단위 작업을 처리하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-erentity-relationship-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-erentity-relationship-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;5 erentity relationship 모델 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. ER(Entity Relationship) 모델&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ER 모델&lt;/code&gt; : 개념적 데이터 모델의 가장 대표적인 것으로, 1976년 피터 첸에 의해 제안&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/blog/136343474E2C27C02E&quot; alt=&quot;img&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계&lt;/code&gt; : 2개 이상의 개체 사이에 존재하는 연관성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계 타입&lt;/code&gt; : 같은 관계들의 집합 또는 틀&lt;/li&gt;
&lt;li&gt;관계는 관계에 참여하는 개체 타입의 개수에 대한 차수와 관계에 참여하는 개체 어커런스의 개수에 대한 대응 카디널리티를 갖음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;차수에 따른 관계의 종류&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;단항 관계&lt;/code&gt; : 관계에 참여하고 있는 개체 타입이 1개인 관계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이항 관계&lt;/code&gt; : 관계에 참여하고 있는 개체 타입이 2개인 관계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;삼항 관계&lt;/code&gt; : 관계에 참여하고 있는 개체 타입 이 3개인 관계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;n항 관계&lt;/code&gt; : 관계에 참여하고 있는 개체 타입이 n개인 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;대응 카디널리티에 따른 관계의 종류&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;1:1 관계&lt;/code&gt; : 관계에 참여하고 있는 두 개체 타입이 모두 하나씩의 개체 어커런스를 갖는 관계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;1:N 관계&lt;/code&gt; : 관계에 참여하고 있는 개체 타입 중 한 개체 타입은 여러 개의 개체 어커런스를 가질 수 있고, 다른 한 개체 타입은 하나의 개체 어커런스를 갖는 관계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;N:M 관계&lt;/code&gt; : 관계에 참여하고 있는 두 개체 타입 모두 여러 개의 개체 어커런스를 가질 수 있는 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-관계-데이터베이스의-relation-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EA%B4%80%EA%B3%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-relation-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;6 관계 데이터베이스의 relation 구조 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 관계 데이터베이스의 Relation 구조&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;릴레이션&lt;/em&gt; : 데이터들을 표(Table)의 형태로 표현한 것, 릴레이션 스키마(=구조를 나타냄)와 릴레이션 인스턴스(=실제 값들)로 구성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;튜플(Tuple)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;튜플 = 각각의 행 = 레코드=카디널리티&lt;/li&gt;
&lt;li&gt;속성의 모임으로 구성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;튜플의 수 = 카디널리티(Cardinality) = 행 = 기수 = 대응수&lt;/code&gt;&lt;del&gt;(튜카행기대)&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;속성(Attribute)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각각의 열( = 데이터 항목 또는 데이터 필드)&lt;/li&gt;
&lt;li&gt;데이터베이스를 구성하는 가장 작은 논리적 단위&lt;/li&gt;
&lt;li&gt;개체의 특성을 기술.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;속성의 수 = 디그리(Degree) = 차수&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;도메인&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 애트리뷰트가 취할 수 있는 같은 타입의 원자값들의 집합&lt;/li&gt;
&lt;li&gt;실제 애트리뷰트 값이 나타날 때 그 값의 합법 여부를 시스템이 검사하는 데에도 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;릴레이션 인스턴스&lt;/code&gt; : 데이터 개체를 구성하고 있는 속성들에 데이터 타입이 정의되어 구체적인 데이터 값을 갖고 있는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-er-모델을-관계형-데이터-모델로-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-er-%EB%AA%A8%EB%8D%B8%EC%9D%84-%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EB%A1%9C-%EB%B3%80%ED%99%98&quot; aria-label=&quot;7 er 모델을 관계형 데이터 모델로 변환 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. ER 모델을 관계형 데이터 모델로 변환&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;개념적 데이터 모델인 ER 모델을 논리적 데이터 모델인 릴레이션 스키마로 변환하는 것으로, 매핑 룰이라고도 함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개체 A, B와 관계 Y로 이루어진 ER 모델을 관계형 데이터 모델에서의 릴레이션 스키마로 변환하는 과정은 다음과 같음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개체 A, B는 각각 독립적인 릴레이션 A, B로 표현된다. 또한, ER 도형에서의 각 개체의 속성들은 각 릴레이션의 속성들로 정의되고, 기본키는 밑줄을 그어 표시&lt;/li&gt;
&lt;li&gt;관계 Y가 1:1 관계 : 릴레이션 A의 기본키를 릴레이션 B의 외래키로 추가하거나 릴레이션 B의 기본키를 릴 레이션 A의 외래키로 추가하여 표현&lt;/li&gt;
&lt;li&gt;관계 Y가 1:N 관계 : 릴레이션 A의 기본키를 릴레이션 B의 외래키로 추가하여 표현&lt;/li&gt;
&lt;li&gt;관계 Y가 N:M 관계 : 릴레이션 A와 B의 기본키를 모두 포함한 별도의 릴레이션으로 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-키key의-개념-및-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%ED%82%A4key%EC%9D%98-%EA%B0%9C%EB%85%90-%EB%B0%8F-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;8 키key의 개념 및 종류 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 키(Key)의 개념 및 종류&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;키(Key)&lt;/code&gt; : 데이터베이스에서 조건에 만족하는 튜플을 찾거나 순서대로 정렬할 때 기준이 되는 속성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;슈퍼키(Super Key)&lt;/code&gt; : 한 릴레이션 내에 있는 속성들의 집합으로 구성된 키로, 릴레이션을 구성하는 모든 튜플에 대해 유일성은 만족하지만, 최소성은 만족하지 못함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;후보키(Candidate Key)&lt;/code&gt; : 릴레이션을 구성하는 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합으로, 유일성과 최소성을 모두 만족&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;유일성&lt;/em&gt; : 하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;최소성&lt;/em&gt; : 키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성으로 구성되어야 함ㄴ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기본키(Primary Key)&lt;/code&gt; : 후보키 중에서 특별히 선정된 키 로 중복된 값과 NULL 값을 가질 수 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;대체키(Alternate Key)&lt;/code&gt; : 후보키 중에서 선정된 기본키를 제외한 나머지 후보키를 의미함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;외래키(Foreign Key)&lt;/code&gt; : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합을 의미하며, 릴레이션 간의 관계를 표현할 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-무결성integrity&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EB%AC%B4%EA%B2%B0%EC%84%B1integrity&quot; aria-label=&quot;9 무결성integrity permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 무결성(Integrity)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;무결성&lt;/code&gt; : &lt;em&gt;데이터베이스에 저장된 데이터 값과 그것이 표현하는 현실 세계의 실제값이 일치하는 정확성을 의미&lt;/em&gt;&lt;del&gt;(개도참사널고키관)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개체 무결성(실체 무결성)&lt;/code&gt; : 기본 테이블의 기본키를 구성하는 어떤 속성도 Null 값이나 중복값을 가질 수 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;도메인 무결성(영역 무결성)&lt;/code&gt; : 주어진 속성 값이 정의된 도메인에 속한 값이어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;참조 무결성&lt;/code&gt; : 외래키 값은 Null이거 나 참조 릴레이션의 기본키 값과 동일해야 함. 즉 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용자 정의 무결성&lt;/code&gt; : 속성 값들이 사용자가 정의한 제약조건에 만족해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;NULL 무결성&lt;/code&gt; : 릴레이션의 특정 속성 값이 NULL이 될 수 없도록 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;고유 무결성&lt;/code&gt; : 릴레이션의 특정 속성에 대해 각 튜플이 갖는 속성값들이 서로 달라야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;키 무결성&lt;/code&gt; : 하나의 릴레이션에는 적어도 하나의 키가 존재해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계 무결성&lt;/code&gt; : 릴레이션에 어느 한 튜플의 삽입 가능 여부 또는 한 릴레이션과 다른 릴레이션의 튜플들 사이의 관계에 대한 적절성 여부를 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(1)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 10-응용 SW 기초 기술 활용(1)/</guid><pubDate>Fri, 17 Jul 2020 21:01:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 응용 SW 기초 기술 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-운영체제os&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos&quot; aria-label=&quot;1 운영체제os permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 운영체제(OS)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;처리 능력&lt;/code&gt; : 일정 시간 내에 시스템이 처리하는 일의 양&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;반환 시간&lt;/code&gt; : 시스템에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용 가능도&lt;/code&gt; : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;신뢰도&lt;/code&gt; : 시스템이 주어진 문제를 정확하게 해결하는 정도&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;기능&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세서, 기억장치, 입·출력장치, 파일 및 정보 등 의 자원 관리&lt;/li&gt;
&lt;li&gt;자원의 효과적인 경영 스케줄링 기능 제공&lt;/li&gt;
&lt;li&gt;사용자와 시스템 간의 편리한 인터페이스 제공&lt;/li&gt;
&lt;li&gt;시스템의 각종 하드웨어와 네트워크 관리·제어&lt;/li&gt;
&lt;li&gt;시스템의 오류 검사 및 복구, 데이터 관리, 데이터 및 자원 공유&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-windows의-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-windows%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;2 windows의 특징 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Windows의 특징&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GUI(그래픽 사용자 인터페이스)&lt;/code&gt; : 키보드로 명령어를 직접 입력하지 않고, 마우스로 아이콘이나 메뉴를 선택하여 모든 작업을 수행하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;선점형 멀티태스킹(Preemptive Multi-Tasking)&lt;/code&gt; : 동시에 여러 개의 프로그램을 실행하는 멀티태스킹을 하면서 운영체제가 각 작업의 CPU 이용 시간을 제어하여 응용 프로그램 실행중 문제가 발생하면 해당 프로그램을 강제 종료시키고 모든 시스템 자원을 반환하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;자동 감지 기능(PnP)&lt;/code&gt;: 컴퓨터 시스템에 프 린터나 사운드 카드 등의 하드웨어를 설치했을때, 해당 하드웨어를 사용하는 데 필요한 시스템 환경을 운영 체제가 자동으로 구성해 주는 기능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;OLE(Object Linking and Embedding)&lt;/code&gt; : 다른 여러 응용 프로그램에서 작성된 문자나 그림 등의 개체를 현재 작성 중인 문서에 자유롭게 연결하거나 삽입하여 편집할 수 있게 하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-unix--linux&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-unix--linux&quot; aria-label=&quot;3 unix  linux permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. UNIX / LINUX&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UNIX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1960년대 AT&amp;#x26;T 벨(Bell) 연구소, MIT, General Electric이 공동 개발한 운영체제&lt;/li&gt;
&lt;li&gt;시분할 시스템을 위해 설계된 대화식 운영체제로, 소스가 공개된 개방형 시스템&lt;/li&gt;
&lt;li&gt;대부분 C 언어로 작성되어 있어 이식성이 높으며 장치, 프로세스 간의 호환성이 높음&lt;/li&gt;
&lt;li&gt;다중 사용자, 다중 작업을 지원&lt;/li&gt;
&lt;li&gt;트리(Tree) 구조의 파일 시스템&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LINUX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1991년 리누스 토발즈(Linus Torvalds)가 UNIX를 기반으로 개발한 운영체제&lt;/li&gt;
&lt;li&gt;UNIX와 완벽하게 호환되고, 대부분의 특징이 UNIX 와 동일, 프로그램 소스 코드가 무료로 공개&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-unix-시스템의-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-unix-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;4 unix 시스템의 구성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. UNIX 시스템의 구성&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;커널(Kernel)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UNIX의 가장 핵심적인 부분, 하드웨어를 보호(캡슐화)하고, 프로그램들과 하드웨어 간의 인터페이스 역할을 담당&lt;/li&gt;
&lt;li&gt;컴퓨터 부팅 시 주기억장치에 적재되어 상주하면서 실행&lt;/li&gt;
&lt;li&gt;프로세스, 기억장치, 파일, 입·출력 관리, 프로세스 간 통신, 데이터 전송 및 변환 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;쉘(Shell)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 명령어를 인식하여 프로그램을 호출하고, 명령을 수행하는 명령어 해석기&lt;/li&gt;
&lt;li&gt;시스템과 사용자 간의 인터페이스를 담당&lt;/li&gt;
&lt;li&gt;DOS의 COMMAND.COM과 같은 기능을 수행&lt;/li&gt;
&lt;li&gt;주기억장치에 상주하지 않고, 명령어가 포함된 파일 형태로 존재하며 보조기억장치에서 교체 처리가 가능&lt;/li&gt;
&lt;li&gt;종류 : Bourne Shell, C Shell, Korn Shell 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-windows의-cli-기본-명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-windows%EC%9D%98-cli-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;5 windows의 cli 기본 명령어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. Windows의 CLI 기본 명령어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;dir&lt;/code&gt; : 현재 디렉터리의 파일 목록 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;copy&lt;/code&gt; : 파일 복사&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;del&lt;/code&gt; : 파일 삭제&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt; : 파일 내용 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ren&lt;/code&gt; : 파일 이름 변경&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;md&lt;/code&gt; : 디렉터리 생성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; : 동일한 드라이브에서 디렉터리 위치 변경&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cls&lt;/code&gt; : 화면 내용 지움&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;attrib&lt;/code&gt; : 파일 속성 변경&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;find&lt;/code&gt; : 파일에서 문자열 찾음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;chkdsk&lt;/code&gt; : 디스크 상태 점검&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;format&lt;/code&gt; : 디스크 표면을 트랙과 섹터로 나누어 초기화&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;move&lt;/code&gt; : 파일 이동&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-unix--linux의-cli-기본-명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-unix--linux%EC%9D%98-cli-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;6 unix  linux의 cli 기본 명령어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. UNIX / LINUX의 CLI 기본 명령어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;검색 기능 명령어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt; : 현재 디렉터리의 파일 목록 표시&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-a : 전부 &lt;/li&gt;
&lt;li&gt;-l : 상세정보 (소유자, 크기, 수정시간 등)&lt;/li&gt;
&lt;li&gt;-S : 크기별 정렬&lt;/li&gt;
&lt;li&gt;-h : 단위 표현 변경 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al 
// 리스트 상세하게 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;man&lt;/code&gt; : 명령어 도움말&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
// &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 명령어 도움말 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; : 디렉터리 위치 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /abc
// 루트에서 abc 디렉토리로 이동
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; ./abc
// 현재 위치에서 abc 디렉토리로 이동&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;pwd&lt;/code&gt; : 현재 작업중인 디렉터리 경로를 화면에 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;mkdir&lt;/code&gt; : 디렉터리 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; /test1/abc
// test1 폴더에 abc 폴더 생성&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;rmdir&lt;/code&gt; : 디렉터리 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rmdir&lt;/span&gt; /test1
// test1 폴더 삭제&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt; : 파일 삭제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-r : 하위 디렉토리 삭제&lt;/li&gt;
&lt;li&gt;-f : 강제로 삭제&lt;/li&gt;
&lt;li&gt;-i : 파일 지울지 물어봄&lt;/li&gt;
&lt;li&gt;-v : 삭제 정보 보여줌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; /test/abc.txt
// &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; 디렉토리 안의 abc.txt 파일 삭제
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -fr/test/*
// &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; 디렉토리 안의 모든 디렉토리와 파일 삭제&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;mv&lt;/code&gt; : 파일 이동&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i : 동일한 파일명 있을 경우 덮어쓸지 물어봄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; /test1/aaa.txt /test2/bbb.txt
// test1의 aaa.txt파일을 test2 디렉토리로 옮기고 파일명을 bbb.txt로 변경&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;touch&lt;/code&gt; : 용량 0의 파일 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; abc.txt
// 내용이 없는 abc.txt 생성
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; a.txt b.txt c.txt
// 내용이 없는 파일 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;개 생성
&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; -t 01051054 
// &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;월 &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;일 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;시 &lt;span class=&quot;token number&quot;&gt;54&lt;/span&gt;분으로 시간 수정&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cat/more&lt;/code&gt; : 파일 내용을 화면에 표시(cat : 짦게, more : 길게)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; abc.txt

&lt;span class=&quot;token function&quot;&gt;more&lt;/span&gt; abc.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;head&lt;/code&gt; : 처음 10줄을 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; abc.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;tail&lt;/code&gt; : 마지막 10줄을 출력&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-f : 실시간으로 조회 (Log 확인시 주로 사용)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt; abc.txt
&lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt; -f abc.log
// abc.log 파일이 변경될 때마다 실시간 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;clear&lt;/code&gt; : 화면을 clear함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;wc&lt;/code&gt; : 단어 줄 수를 세어줌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-l : line 수를 Count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l abc.txt        
// abc.txt파일의 Line 수를 Count&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;alias/unalias&lt;/code&gt; : 별칭을 지어주고 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;cd /a/b/c/d/e/f/g&apos;&lt;/span&gt;        
// &lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; 지정 후 a를 입력하면 해당 명령어가 실행됨
&lt;span class=&quot;token builtin class-name&quot;&gt;unalias&lt;/span&gt; a        
// a로 지정된 &lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; 를 삭제&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt; : (pipe) 명령의 결과를 다음 멍령의 입력으로 넘긴다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l
// &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; 명령어의 라인수를 count&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;tar&lt;/code&gt; : 파일을 묶어줌&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c : 파일을 묶어줌&lt;/li&gt;
&lt;li&gt;v : 작업 과정 확인&lt;/li&gt;
&lt;li&gt;f : 저장될 파일명 지정&lt;/li&gt;
&lt;li&gt;x : 묶은 파일을 풀어줌&lt;/li&gt;
&lt;li&gt;z : tar + gzip&lt;/li&gt;
&lt;li&gt;j : tar + bzip2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; cvf abc.tar ./bbb        
// bbb 디렉토리를 abc.tar 파일로 묶어라

&lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; xvf abc.tar        
// abc.tar 파일을 풀어라&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;find&lt;/code&gt; : 파일 검색&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-name : 파일 이름으로 검색&lt;/li&gt;
&lt;li&gt;-user : 소유자 이름으로 검색&lt;/li&gt;
&lt;li&gt;-size : 파일 크기로 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; ./bbb -name &lt;span class=&quot;token string&quot;&gt;&apos;b.*&apos;&lt;/span&gt; -size &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;        
// bbb 디렉토리에 파일명이 b이고 모든 확장자, size가 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;인 파일 찾기&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;grep&lt;/code&gt; : 파일에 포함된 특정 단어 검색&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-i : 대소문자 구분 안함&lt;/li&gt;
&lt;li&gt;-n : 라인 번호 출력&lt;/li&gt;
&lt;li&gt;-v : 검색어가 없는 Line 보여달라&lt;/li&gt;
&lt;li&gt;-c : 라인의 개수 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -ic &lt;span class=&quot;token string&quot;&gt;&apos;Feb&apos;&lt;/span&gt; ./d.txt        
// 대소문자 구분하지 않고 d.txt 에 &lt;span class=&quot;token string&quot;&gt;&apos;Feb&apos;&lt;/span&gt; 가 있는 행 Count 
&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -iv &lt;span class=&quot;token string&quot;&gt;&apos;feb&apos;&lt;/span&gt; ./d.txt        
// 대소문자 구분하지 않고 d.txt에 &lt;span class=&quot;token string&quot;&gt;&apos;feb&apos;&lt;/span&gt; 가 없는 Line 
&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -ivn &lt;span class=&quot;token string&quot;&gt;&apos;feb&apos;&lt;/span&gt; ./d.txt        
// 위의 명령어에 Line 번호도 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fsck&lt;/code&gt; : 파일 시스템 검사 및 보수&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ps&lt;/code&gt; : 파일 복사&lt;/li&gt;
&lt;li&gt;&lt;em&gt;사용자 및 그룹 관리&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;groupadd&lt;/code&gt; : 새로운 그룹 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-g : 그룹번호 지정 (중복시키지 말것)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;groupadd&lt;/span&gt; -g &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt; dba            
// 그룹번호 &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;번으로 dba 그룹 생성
&lt;span class=&quot;token function&quot;&gt;groupadd&lt;/span&gt; dba2            
// 가장 마지막 생성된 그룹번호의 다음 번호로 dba2 계정을 생성&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;groupmod&lt;/code&gt; : 그룹 설정 변경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-g : 그룹번호 변경&lt;/li&gt;
&lt;li&gt;-n : 그룹명 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;groupmod&lt;/span&gt; -g &lt;span class=&quot;token number&quot;&gt;501&lt;/span&gt; -n dbag dba            
// dba 그룹의 그룹번호를 &lt;span class=&quot;token number&quot;&gt;501&lt;/span&gt;로, 그룹명을 dbag로 변경&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;groupdel&lt;/code&gt; : 그룹 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;groupdel&lt;/span&gt; dba&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useradd&lt;/code&gt; : 사용자 계정 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-u : 유저번호(UID) 설정&lt;/li&gt;
&lt;li&gt;-g : 그룹번호(GID) 설정&lt;/li&gt;
&lt;li&gt;-G : 보조 그룹번호(GID) 설정&lt;/li&gt;
&lt;li&gt;-d : 홈 디렉토리 설정&lt;/li&gt;
&lt;li&gt;-s : 사용할 Shell 설정&lt;/li&gt;
&lt;li&gt;-c : 계정에 대한 설명(Comment) 남김&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useradd&lt;/span&gt; user1
&lt;span class=&quot;token function&quot;&gt;useradd&lt;/span&gt; -u &lt;span class=&quot;token number&quot;&gt;501&lt;/span&gt; -g &lt;span class=&quot;token number&quot;&gt;550&lt;/span&gt; -c testuser user2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;usermod&lt;/code&gt; : 사용자 계정 변경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-u : 유저번호(UID) 설정&lt;/li&gt;
&lt;li&gt;-g : 그룹번호(GID) 설정&lt;/li&gt;
&lt;li&gt;-G : 보조 그룹번호(GID) 설정&lt;/li&gt;
&lt;li&gt;-d : 홈 디렉토리 설정&lt;/li&gt;
&lt;li&gt;-s : 사용할 Shell 설정&lt;/li&gt;
&lt;li&gt;-c : 계정에 대한 설명(Comment) 남김&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;userdel&lt;/code&gt; : 사용자 삭제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-r : 홈 디렉토리까지 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;userdel&lt;/span&gt; -r user2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;권한 관리&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;권한 관리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r : readable / 읽을 수 있음&lt;/li&gt;
&lt;li&gt;w : writeable / 쓸 수 있음&lt;/li&gt;
&lt;li&gt;x : executable / 실행할 수 있음&lt;/li&gt;
&lt;li&gt;-: denied / 접근 거부&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;- rw- r-- r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; Feb  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;:42 a.txt
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; 

// 소유자는 read, &lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt; 가능, 그룹은 &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; 가능, 그 외는 &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; 가능
// &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;번 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 파일종류, &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;번 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 소유자의 권한, &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;번 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 그룹의 권한, &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;번 &lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; 이 외의 권한&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;chmod&lt;/code&gt;  : 권한변경 - 영문자 할당법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chmod 옵션 a.txt  : 어느 부분 그리고 추가할지 삭제할지, 그리고 어떤 권한을 줄지를 정해줌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;u : user&lt;/th&gt;
&lt;th&gt;+ : permission 추가&lt;/th&gt;
&lt;th&gt;r : read&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;g : group&lt;/td&gt;
&lt;td&gt;- : permission 삭제&lt;/td&gt;
&lt;td&gt;w : write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o : other&lt;/td&gt;
&lt;td&gt;= : permission 추가&lt;/td&gt;
&lt;td&gt;x : execute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a : all&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; a+r a.txt    
// a.txt 파일 모든 사용자에게 &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; 권한 부여
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; a+w a.txt    
// a.txt 파일 모든 사용자에게 &lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt; 권한 부여
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; a+x a.txt    
// a.txt 파일 모든 사용자에게 execute 권한 부여
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; o-r a.txt    
// a.txt 파일 관련 없는 사람은 &lt;span class=&quot;token builtin class-name&quot;&gt;read&lt;/span&gt; 권한 제거&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;chmod&lt;/code&gt;   : 권한변경 - 숫자 할당법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chmod 옵션 b.txt    // 옵션 부분은 3자리 숫자가 들어감&lt;/li&gt;
&lt;li&gt;이진수 첫번째 자리는 user, 두번째 자리는 group, 세번째 자리는 other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;4 (100(2))&lt;/th&gt;
&lt;th&gt;read&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2 (010(2))&lt;/td&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1(001(2))&lt;/td&gt;
&lt;td&gt;execute&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;777&lt;/span&gt; b.txt    
// b.txt 파일 모든 사용자에게 read, write, execute 권한 부여
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;751&lt;/span&gt; b.txt    
// b.txt 파일 user 는 모든 권한, group 은 read, execute 권한, other 는 execute 권한 부여
&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;700&lt;/span&gt; b.txt    
// b.txt 파일 user 는 모든 권한 나머지는 권한 제거&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;프로세스 관리&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;kill&lt;/code&gt; : PID(프로세스 고유 번호)를 이용하여 프로세스 종료&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;killall&lt;/code&gt; : 프로세스의 이름을 이용하여 프로세스 종료&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ps&lt;/code&gt; : 현재 실행중인 프로세스 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;top&lt;/code&gt; : 시스템의 프로세스와 메모리 사용 현황 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;who&lt;/code&gt; : 현재 시스템에 접속해 있는 사용자 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-기억장치-관리-전략&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%EA%B4%80%EB%A6%AC-%EC%A0%84%EB%9E%B5&quot; aria-label=&quot;7 기억장치 관리 전략 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 기억장치 관리 전략&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;보조기억장치의 프로그램이나 데이터를 주기억장치에 적재 시기, 적재 위치 등을 지정하여 한정된 주기억 장치의 공간을 효율적으로 사용하기 위함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;반입(Fetch) 전략&lt;/code&gt; : 보조기억장치에 보관중인 프로그램이나 데이터를 언제 주기억장치로 적재할 것인지를 결정하는 전략, &lt;em&gt;요구 반입(Demand Fetch)&lt;/em&gt;과 &lt;em&gt;예상반입(Anticipatory Fetch)&lt;/em&gt;이 있음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;배치(Placement) 전략&lt;/code&gt; : 새로 반입되는 프로그램이나 데이터를 주기억장치의 어디에 위치시킬 것인지를 결정하는 전략&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;최초 적합(First Fit)&lt;/em&gt; : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 첫번째 분할 영역에 배치 시키는 방법&lt;/li&gt;
&lt;li&gt;&lt;em&gt;최적 적합(Best Fit)&lt;/em&gt; : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 단편화를 가장 작게 남기는 분할 영역에 배치시키는 방법&lt;/li&gt;
&lt;li&gt;&lt;em&gt;최악 적합(Worst Fit)&lt;/em&gt; : 프로그램이나 데이터가 들어갈 수 있는 크기의 빈 영역 중에서 단편화를 가장 많이 남기는 분할 영역에 배치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;영역번호&lt;/th&gt;
&lt;th&gt;영역크기&lt;/th&gt;
&lt;th&gt;상태&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5K&lt;/td&gt;
&lt;td&gt;공백&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;14K&lt;/td&gt;
&lt;td&gt;공백&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;10K&lt;/td&gt;
&lt;td&gt;사용중&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12K&lt;/td&gt;
&lt;td&gt;공백&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;16K&lt;/td&gt;
&lt;td&gt;공백&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;먼저 10K 가 적재될 수 있는지 각 영역의 크기 확인&lt;/li&gt;
&lt;li&gt;First Fit : 빈 영역 중에서 10K의 프로그램이 들어갈 수 있는 첫번째 영역은 2번째&lt;/li&gt;
&lt;li&gt;Best Fit : 빈 영역 중에서 10K 프로그램이 들어가고 단편화를 가장 작게 넘기는 영역은 4번&lt;/li&gt;
&lt;li&gt;Worst Fit : 빈 영역 중에서 10K 프로그램이 들어가고 단편화를 가장 많이 남기는 영역은 5번&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;교체(Replacement) 전략&lt;/code&gt; : 주기억장치의 모든 영역이 이미 사용중인 상태에서 새로운 프로그램이나 데이터를 주기억장치에 배치하려고 할 때, 이미 사용되고 있는 영역 중에서 어느 영역을 교체하여 사용할 것인지를 결정하는 전략(FIFO, OPT, LRU, LFU, NUR, SCR 등)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-가상-기억장치virtual-memory&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EA%B0%80%EC%83%81-%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98virtual-memory&quot; aria-label=&quot;8 가상 기억장치virtual memory permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 가상 기억장치(Virtual Memory)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치(하드디스크)의 일부를 주기억 장치처럼 사용하는 것으로, 용량이 작은 주기억 장치를 큰 용량을 가진 것처럼 사용하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;페이징(Paging) 기법&lt;/code&gt; : 가상 기억장치에 보관되어 있는 프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후 나눠진 프로그램(페이지)을 동일하게 나눠진 주기억장치의 영역에 적재시켜 실행하는 기법으로, 외부 단편화는 발생하지 않으나 내부 단편화는 발생 할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;세그먼테이션(Segmentation) 기법&lt;/code&gt; : 가상 기억장치에 보관되어 있는 프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 실행시키는 기법, 내부 단편화는 발생하지 않으나 외부 단편화는 발생할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-가상기억장치-기타-관리-사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EA%B0%80%EC%83%81%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%EA%B8%B0%ED%83%80-%EA%B4%80%EB%A6%AC-%EC%82%AC%ED%95%AD&quot; aria-label=&quot;9 가상기억장치 기타 관리 사항 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 가상기억장치 기타 관리 사항&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;국부성(Locality)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;프로세스가 실행되는동안 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조하는 성질이 있다는 이론&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;시간 구역성&lt;/em&gt; : 프로세스가 실행되면서 하나의 페이지를 일정 시간 동안 집중적으로 액세스&lt;/li&gt;
&lt;li&gt;&lt;em&gt;공간 구역성&lt;/em&gt; : 프로세스 실행 시 일정 위치의 페이지를 집중적으로 액세스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;워킹 셋&lt;/code&gt; : &lt;em&gt;프로세스가 일정 시간 동안 자주 참조하는 페이지들의 집합&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;페이지 부재&lt;/code&gt; : &lt;em&gt;프로세스 실행 시 참조할 페이지가 주기억장치에 없는 현상&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 부재 빈도 : 페이지 부재가 일어나는 횟수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스레싱&lt;/code&gt; : &lt;em&gt;프로세스의 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;10-페이지-교체-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;10 페이지 교체 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 페이지 교체 알고리즘&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;OPT(OPTimal replacement, 최적 교체)&lt;/code&gt; : 앞으로 가장 오랫동안 사용하지 않을 페이지를 교체&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FIFO(First In First Out)&lt;/code&gt; : 각 페이지가 주기억 장치에 적재될 때마다 그때의 시간을 기억시켜 가장 먼저 들어와서 가장 오래 있었던 페이지를 교체&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;참조페이지&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;페이지 프레임&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;em&gt;5&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LRU(Least Recently Used)&lt;/code&gt; : 최근에 가장 오랫동안 사용하지 않은 페이지를 교체&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;참조페이지&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;페이지 프레임&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;em&gt;5&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LFU(Least Frequently Used)&lt;/code&gt; : 사용 빈도가 가장 적은 페이지를 교체&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;참조페이지&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;페이지 프레임&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;5&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;6&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;6&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;NUR(Not Used Recently)&lt;/code&gt; : 최근에 사용하지 않은 페이지를 교체하는 기법으로, 참조 비트와 변형 비트가 사용됨&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SCR(Second Chance Replacement, 2차 기회 교체)&lt;/code&gt; : 가장 오랫동안 주기억장치에 있던 페이지 중 자주 사용되는 페이지의 교체를 방지하기 위한 것으로, FIFO 기법의 단점을 보완하는 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;11-프로세스-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;11 프로세스 관리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 프로세스 관리&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;프로세스(= 작업, 태스크)&lt;/em&gt; : 프로세서에 의해 처리되는 사용자 프로그램, 시스템 프로그램, 즉 실행중인 프로그램을 의미&lt;/li&gt;
&lt;li&gt;&lt;em&gt;프로세스 상태 전이&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제출(Submit)&lt;/code&gt; : 작업을 처리하기 위해 사용자가 작업을 시스템에 제출한 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;접수(Hold)&lt;/code&gt; : 제출된 작업이 스풀 공간인 디스크의 할당 위치에 저장된 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;준비(Ready)&lt;/code&gt; : 프로세스가 프로세서를 할당받기 위해 기다리고 있는 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;실행(Run)&lt;/code&gt; : 준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;대기(Wait), 블록(Block)&lt;/code&gt; : 프로세스에 입·출력 처리가 필요하면 현재 실행 중인 프로세스가 중단되고, 입·출력 처리가 완료될 때까지 대기하고 있는 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;종료(Terminated, Exit)&lt;/code&gt; : 프로세스의 실행이 끝나고 프로세스 할당이 해제&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;12-비선점non-preemptive-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EB%B9%84%EC%84%A0%EC%A0%90non-preemptive-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;12 비선점non preemptive 스케줄링 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. 비선점(Non-preemptive) 스케줄링&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;이미 할당된 CPU를 다른 프로세스가 강제로 빼앗아 사용할 수 없는 스케줄링 기법&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FIFO(First In First Out, 선입 선출) = FCFS(First Come First Service)&lt;/code&gt; : 준비상태 큐에 도착한 순서에 따라 차례로 CPU를 할당하는 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SJF(Shortest Job First, 단기 작업 우선)&lt;/code&gt; : 준비상태 큐에서 기다리고 있는 프로세스들 중에서 실행 시간이 가장 짧은 프로세스에게 먼저 CPU를 할당하는 기법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;HRN(Hightest Response-ratio Next)&lt;/code&gt; :실행 시간이 긴 프로세스에 불리한 SJF 기법을 보완 하기 위한 것으로, 대기 시간과 서비스(실행) 시간을 이용하는 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;우선순위 계산식 : (대기 시간 + 서비스 시간) / 서비스 시간&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기한부(Deadline)&lt;/code&gt; : 프로세스에게 일정한 시간을 주어 그 시간 안에 프로세스를 완료하도록 하는 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;우선순위(Priority)&lt;/code&gt; : 준비상태 큐에서 기다리는 각 프로세스마다 우선순위를 부여하여 그 중 가장 높은 프로세스에게 먼저 CPU를 할당하는 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;13-선점preemptive-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-%EC%84%A0%EC%A0%90preemptive-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;13 선점preemptive 스케줄링 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;13. 선점(Preemptive) 스케줄링&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로세스가 CPU를 할당받아 실행하고 있을 때 우선순위가 높은 다른 프로세스가 CPU를 강제로 빼앗아 사용할 수 있는 스케줄링 기법&lt;/li&gt;
&lt;li&gt;선점 우선순위 : 준비상태 큐의 프로세스들 중에서 우선 순위가 가장 높은 프로세스에게 먼저 CPU를 할당하는 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SRT(=선점 SJF 기법)&lt;/code&gt; : 비선점 스케줄링인 SJF 기법을 선점 형태로 변경한 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;라운드 로빈(RR)&lt;/code&gt; : 시분할 시스템을 위해 고안된 방식으로, FCFS 기법과 같이 준비상태 큐에 먼저 들어온 프로세스가 먼저 CPU를 할당받지만 각 프로세스는 시간 할당량 동안만 실행한 후 실행이 완료되지 않으면 다음 프로세스에게 CPU를 넘겨주고 준비상태 큐의 가장 뒤로 배치됨&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;다단계 큐(MQ)&lt;/code&gt; : 프로세스를 특정 그룹으로 분류할 수 있을 경우 그룹에 따라 각기 다른 준비상태 큐를 사용하는 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;다단계 피드백 큐(MFQ)&lt;/code&gt; : 특정 그룹의 준비상태 큐에 들어간 프로세스가 다른 준비 상태 큐로 이동할 수 없는 다단계 큐 기법을 준비상태 큐 사이를 이동할 수 있도록 개선한 기법&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 9-소프트웨어 보안 구축/</guid><pubDate>Fri, 17 Jul 2020 19:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요
2020 정보 처리 기사 소프트웨어 보안 구축 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-소프트웨어-개발의-비용-산정-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EB%B9%84%EC%9A%A9-%EC%82%B0%EC%A0%95-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;1 소프트웨어 개발의 비용 산정 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 소프트웨어 개발의 비용 산정 기법&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 개발 규모를 소요되는 인원, 자원, 기간 등으로 확인하여 실행 가능한 계획을 수립하기 위해 필요한 비용을 산정하는 것&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;하향식 비용 산정 기법&lt;/code&gt; : 과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정하는 비과학적인 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;전문가 감정 기법&lt;/code&gt; : 조직 내에 있는 경험이 많은 두 명 이상의 전문가에게 비용 산정을 의뢰&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;델파이 기법&lt;/code&gt; : 전문가 감정 기법의 주관적인 편견을 보완 하기 위해 많은 전문가의 의견을 종합하여 산정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;상향식 비용 산정 기법&lt;/code&gt; : 프로젝트의 세부적인 작업 단위별로 비용을 산정한 후 집계하여 전체 비용을 산정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LOC&lt;/code&gt; : 소프트웨어 각 기능의 원시 코드 라인 수 의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;노력&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;인월&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 개발 기간 × 투입 인원 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LOC &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;인당 월평균 생산 코드 라인 수
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;E &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; D x N &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LOC &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; M&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
개발 비용 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 노력&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;인월&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; × 단위 비용 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;인당 월평균 인건비&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;C &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; E x U&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
개발 기간 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 노력&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;인월&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; 투입 인원
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;D &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; E &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; N&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
생산성 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LOC &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; 노력&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;인월&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;H &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LOC &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; E&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개발 단계별 인월수 기법&lt;/code&gt; : LOC 기법을 보완하기 위한 기법으로, 각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;예제&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;LOC 기법에 의하여 예측된 총 라인 수가 &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;000&lt;/span&gt;라인&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 개발에 참여할 프로그래머가 &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
프로그래머들의 평균 생산성이 월간 &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;라인일 때 개발에 소요되는 기간은?
 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; 노력&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;인월&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; LOC&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;인당 월평균 생산 코드 라인 수 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;명
 &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; 개발 기간 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 노력&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;인월&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;투입 인원 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;개월&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-공격-기법의-이해&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B3%B5%EA%B2%A9-%EA%B8%B0%EB%B2%95%EC%9D%98-%EC%9D%B4%ED%95%B4&quot; aria-label=&quot;2 공격 기법의 이해 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 공격 기법의 이해&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;분산 서비스 거부(DDoS) 공격&lt;/code&gt; : 여러 곳에 분산된 공격 지점에서 한 곳의 서버에 대해 분산 서비스 공격을 수행하는 것으로, 네트워크에서 취약점이 있는 호스트들을 탐색한 후 이들 호스트들에 분산 서비스 공격용 툴을 설치하여 에이전트로 만든 후 DDoS 공격에 이용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;자원 고갈 공격&lt;/code&gt; : &lt;em&gt;서버의 자원을 고갈시킬 목적으로 다수의 공격자 또는 시스템에서 대량의 데이터를 한 곳의 서버에 집중적으로 전송함으로써 서버의 정상적인 기능을 방해&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SYN 플러딩(SYN Flooding)&lt;/code&gt; : TCP는 신뢰성있는 전송을 위해 3-way-handshake를 거친 후에 데이터를 전송하게 되는데, SYN Flooding은 공격자가 가상의 클라이언트로 위장하여 3-way-handshake과정을 의도적으로 중단시킴으로써 서버가 대기 상태에 놓여 정상적인 서비스를 수행하지 못하게 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UDP 플러딩(UDP Flooding)&lt;/code&gt; : 대량의 UDP 패킷을 만들어 임의의 포트 번호로 전송하여 응답 메시지를 생성하게 하여 자원을 고갈시키는 공격. ICMP 패킷은 변조되어 공격자에게 전달되지 않아 대기함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스머핑(Smurfing)&lt;/code&gt; : IP나 ICMP의 특성을 악용하여 엄청난 양의 데이터를 한 사이트에 집중적으로 보냄으로써 네트워크 또는 시스템의 상태를 불능으로 만듦&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;죽음의 핑(poD = Ping of Death)&lt;/code&gt; : Ping 명령을 전송할 때 패킷의 크기를 인터넷 프로토콜 허용 범위 이상으로 전송하여 공격 대상의 네트워크를 마비&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;애플리케이션 공격&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP GET 플러딩(Flooding)&lt;/code&gt; : Cache Control Attack 공격. http 캐시 옵션을 조작하여 캐싱 서버가 아닌 웹서버가 직접 처리하도록 유도해서 웹서버 자원을 소진시키는 서비스 거부 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Slowloris(Slow HTTP Header DoS)&lt;/code&gt; : HTTP GET 메소드를 사용하여 헤더의 최종 끝을 알리는 개행 문자열인 \r\n\r\n을 전송하지 않고 \r\n만 전송하여 대상 웹서버와 연결 상테를 장시간 지속시키고 연결 자원을 모두 소진시키는 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RUDY&lt;/code&gt; :요청 헤더의 Content-length를 비정상적으로 크게 설정하여 메시지 바디 부분을 매우 소량으로 보내 계속 연결 상태를 유지시키는 공격&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 서비스 공격&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 스캐너(Scanner)/스니퍼(Sniffer)&lt;/code&gt; : 네트워크 하드웨어 및 소프트웨어 구성의 취약점 파일을 위해 공격자가 사용하는 공격 도구&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;패스워드 크래킹(Password Cracking)&lt;/code&gt; : 사전 크래킹과 무차별 크래킹 방법을 사용해 네트워크 패스워드를 탐색&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IP 스푸핑(IP Spoofing)&lt;/code&gt; : 서버에 대한 인증되지 않은 액세스 권한을 입수하는데 사용하는 기법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;트로이 목마&lt;/code&gt; : 정상적인 기능을 하는 프로그램으로 위장하여 프로그램 내에 숨어 있다가 해당 프로그램이 동작할 때 활성화되어 부작용을 일으킴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;취약점 공격&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;랜드 어택(Land Attack)&lt;/code&gt; : 패킷을 전송할 때 송신 IP 주소와 수신 IP 주소를 모두 공격 대상의 IP 주소로 하여 공격 대상에게 전송하는 것으로, 이 패킷을 받은 공격 대상은 송신 IP 주소가 자신이므로 자신에게 응답을 수행하게 되는데, 이러한 패킷이 계속해서 전송될 경우 자신에 대해 무한히 응답&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;봉크/보잉크(Bonk/Boink)&lt;/code&gt; : 프로토콜의 오류 제어를 이용한 공격기법으로서 시스템의 패킷 재전송과 재조립이 과부하를 유발&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;티어 드롭(TearDrop)&lt;/code&gt; : 데이터의 송·수신 과정에서 패킷의 크기가 커 여러 개로 분할되어 전송될 때 분할 순서를 알수 있도록 Fragment Offset값을 함께 전송하는데, 이 값을 변경시켜 수신측에서 패킷을 재조립할 때 오류로 인한 과부하를 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-네트워크-침해-공격-관련-용어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%B9%A8%ED%95%B4-%EA%B3%B5%EA%B2%A9-%EA%B4%80%EB%A0%A8-%EC%9A%A9%EC%96%B4&quot; aria-label=&quot;3 네트워크 침해 공격 관련 용어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 네트워크 침해 공격 관련 용어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스미싱&lt;/code&gt; : 문자 메시지를 이용해 사용자의 개인 신용 정보를 빼내는 수법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스피어 피싱(Spear Phishing)&lt;/code&gt; : 사회 공학의 한 기법으로 특정 대상을 선정한 후 일반적인 이메일로 위장한 메일을 지속적으로 발송하여, 발송 메일의 링크나 파일을 클릭하도록 유도해 사용자의 개인정보를 탈취&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;APT(지능형 지속 위협)&lt;/code&gt; : 다양한 IT 기술과 방식들을 이용해 조직적으로 특정 기업이나 조직 네트워크에 침투해 활동 거점을 마련한 뒤 때를 기다리면서 보안을 무력화시키고 정보를 수집한 다음 외부로 빼돌리는 형태의 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;무작위 대입 공격(Brute Force Attack)&lt;/code&gt; : 암호화된 문서의 암호키를 찾아내기 위해 적용 가능한 모든 값을 대입하여 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;큐싱(Qshing)&lt;/code&gt;: QR코드를 통해 악성 앱의 다운로드를 유도하거나 악성 프로 그램을 설치하도록 하는 금융사기 기법의 하나로, QR코드와 개인정보 및 금융정보를 낚는다는 의미의 합성 신조어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL 삽입(Injection) 공격&lt;/code&gt; : 전문 스캐너 프로그램 혹은 봇넷 등을 이용해 웹사이트를 무차별적으로 공격하는 과정에서 취약한 사이트가 발견되면 데이 터베이스 등의 데이터를 조작하는 일련의 공격 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-정보-보안-침해-공격-관련-용어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%A0%95%EB%B3%B4-%EB%B3%B4%EC%95%88-%EC%B9%A8%ED%95%B4-%EA%B3%B5%EA%B2%A9-%EA%B4%80%EB%A0%A8-%EC%9A%A9%EC%96%B4&quot; aria-label=&quot;4 정보 보안 침해 공격 관련 용어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 정보 보안 침해 공격 관련 용어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;좀비 PC&lt;/code&gt; : 악성코드에 감염되어 다른 프로그램이나 컴퓨터를 조종하도록 만들어진 컴퓨터로, C&amp;#x26;C서버의 제어를 받아 주로 DDoS 공격 등에 이용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;C&amp;amp;C 서버&lt;/code&gt; : 해커가 원격지에서 감염된 좀비 PC에 명령을 내리고 악성코드를 제어하기 위한 용도로 사용하는 서버&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;봇넷&lt;/code&gt; : 악성 프로그램에 감염되어 악의적인 의도로 사용될 수 있는 다수의 컴퓨터들이 네트워크로 연결된 형태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;웜&lt;/code&gt; : 네트워크를 통해 연속적으로 자신을 복제하여 시스템의 부하를 높임으로써 결국 시스템을 다운시키는 바이러스의 일종&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제로 데이 공격&lt;/code&gt; : 보안 취약점이 발견되었을 때 발견된 취약점의 존재 자체가 널리 공표되기도 전에 해당 취약점을 통하여 이루어지는 보안 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;키로거 공격&lt;/code&gt; : 컴퓨터 사용자의 키보드 움직임을 탐지해 ID, 패스워드, 계좌번호, 카드번호 등과 같은 개인의 중요한 정보를 몰래 빼가는 해킹 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;랜섬웨어&lt;/code&gt; : 인터넷 사용자의 컴퓨터에 잠입해 내부 문서나 파일 등을 암호화해 사용자가 열지 못하게 하는 프로그램&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;백도어&lt;/code&gt; : 시스템 설계자가 서비스 기술자나 유지 보수 프로그램 작성자의 액세스 편의를 위해 시스템 보안을 제거하여 만들어놓은 비밀 통로로, 컴퓨터 범죄에 악용되기도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-소프트웨어-개발-보안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EB%B3%B4%EC%95%88&quot; aria-label=&quot;5 소프트웨어 개발 보안 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 소프트웨어 개발 보안&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 위한 일련의 보안 활동&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;소프트웨어 개발 보안의 목표&lt;del&gt;(기무가)&lt;/del&gt; : &lt;code class=&quot;language-text&quot;&gt;기밀성, 무결성, 가용성&lt;/code&gt; 유지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 개발 보안 관련 기관&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;행정안전부&lt;/code&gt; : 소프트웨어 개발 보안 정책을 총괄&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;한국 인터넷 진흥원&lt;/code&gt; : 소프트웨어 개발 보안 정책 및 가이드를 개발&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;발주기관&lt;/code&gt; : 소프트웨어 개발 보안의 계획을 수립&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사업자&lt;/code&gt; : 소프트웨어 개발 보안 관련 기술 수준 및 적용 계획을 명시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;감리법인&lt;/code&gt; : 감리 계획을 수립하고 협의&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-소프트웨어-개발-보안-활동-관련-법령&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EB%B3%B4%EC%95%88-%ED%99%9C%EB%8F%99-%EA%B4%80%EB%A0%A8-%EB%B2%95%EB%A0%B9&quot; aria-label=&quot;6 소프트웨어 개발 보안 활동 관련 법령 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 소프트웨어 개발 보안 활동 관련 법령&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;개인정보 보호법&lt;/em&gt;: 개인정보의 처리 및 보호에 관한 사항을 정함으로써 개인의 자유와 권리를 보호&lt;/li&gt;
&lt;li&gt;&lt;em&gt;정보통신망 이용촉진 및 정보보호 등에 관한 법률&lt;/em&gt; : 정보통신망의 이용 촉진 및 정보통신 서비스를 이용하는 이용자들의 개인 정보를 보호&lt;/li&gt;
&lt;li&gt;&lt;em&gt;신용정보의 이용 및 보호에 관한 법률&lt;/em&gt; : 개인 신용정보의 효율적 이용과 체계적인 관리를 통해 정보의 오남용을 방지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;위치정보의 보호 및 이용 등에 관한 법률&lt;/em&gt; : 개인 위치정보의 안전한 이용 환경을 조성하여 정보의 유출이나 오남용을 방지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;표준 개인정보 보호 지침&lt;/em&gt; : 개인정보의 처리에 관한 기준, 개인정보 침해의 유형 및 예방조치 등에 관한 세부사항을 규정&lt;/li&gt;
&lt;li&gt;&lt;em&gt;개인정보의 안전성 확보 조치&lt;/em&gt; : 기준개인정보 처리자가 개인정보를 처리하는데 있어 개인정보가 분실, 도난, 유출, 위조, 변조, 훼손되지 않도록 안전성 확보에 필요한 기술적, 관리적, 물리적 안전조치에 관한 최소한의 기준을 규정&lt;/li&gt;
&lt;li&gt;&lt;em&gt;개인정보 영향평가에 관한 고시&lt;/em&gt; : 개인정보 영향평가를 위한 평가기관의 지정, 영향평가의 절차 등에 관한 세부기준을 규정&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-secure-sdlc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-secure-sdlc&quot; aria-label=&quot;7 secure sdlc permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. Secure SDLC&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;보안상 안전한 소프트웨어를 개발하기 위해 SDLC에 보안 강화를 위한 프로세스를 포함한 것을 의미&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SDLC(소프트웨어 개발 생명주기)&lt;/em&gt; : 소프트웨어 개발 방법론의 바탕이 되는 것으로, 소프트웨어를 개발하기 위해 정의하고 운용, 유지보수 등의 전 과정을 각 단계별로 나눈 것&lt;/li&gt;
&lt;li&gt;SDLC 전체 단계에 걸쳐 수행되어야 할 보안 활동을 제시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 분석 단계&lt;/code&gt; : 보안 항목에 해당하는 요구사항을 식별하는 작업을 수행, 전산화되는 정보가 가지고 있는 보안 수준을 보안요소별로 등급을 구분하여 분류&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;설계 단계&lt;/code&gt; : 식별된 보안 요구사항들을 소프트웨어 설계서에 반영, 보안 설계서를 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구현 단계&lt;/code&gt; : 표준 코딩 정의서 및 소프트웨어 개발 보안 가이드를 준수하며, 설계서에 따라 보안 요구사항들을 구현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 단계&lt;/code&gt; : 설계 단계에서 작성한 보안 설계서를 바탕으로 보안 사항들이 정확히 반영되고 동작되는지 점검&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;유지 보수 단계&lt;/code&gt; : 이전 과정을 모두 수행하였음에도 발생할 수 있는 보안 사고들을 식별하고, 사고 발생 시 이를 해결하고 보안 패치를 실시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시큐어 코딩&lt;/code&gt; : 소프트웨어의 구현단계에서 발생할 수 있는 보안 취약점들을 최소화하기 위해 보안 요소들을 고려하며 코딩하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-보안-요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EB%B3%B4%EC%95%88-%EC%9A%94%EC%86%8C&quot; aria-label=&quot;8 보안 요소 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 보안 요소&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 개발에 있어 충족시켜야할 요소 및 요건&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기밀성&lt;/code&gt; : 시스템 내의 정보와 자원은 인가된 사용자에게만 접근이 허용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;무결성&lt;/code&gt; : 시스템 내의 정보는 오직 인가된 사용자만 수정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;가용성&lt;/code&gt; : 인가받은 사용자는 언제라도 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인증&lt;/code&gt; : 시스템 내의 정보와 자원을 사용하려는 사용자가 합법적인 사용자인지를 확인하는 모든 행위&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;부인 방지&lt;/code&gt; : 데이터를 송·수신한 자가 송·수신 사실을 부인할 수 없도록 송·수신 증거 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-보안-점검---세션-통제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EB%B3%B4%EC%95%88-%EC%A0%90%EA%B2%80---%EC%84%B8%EC%85%98-%ED%86%B5%EC%A0%9C&quot; aria-label=&quot;9 보안 점검   세션 통제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 보안 점검 - 세션 통제&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;세션 통제&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;세션&lt;/em&gt; : 서버와 클라이언트의 연결&lt;/li&gt;
&lt;li&gt;&lt;em&gt;세션 통제&lt;/em&gt; :  세션의 연결과 연결로 인해 발생하는 정보를 관리하는 것, 세션 통제는 요구사항 분석 및 설계 단계에서 진단해야 하는 보안 점검 내용&lt;/li&gt;
&lt;li&gt;&lt;em&gt;세션 통제의 보안 약점&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;불충분한 세션 관리&lt;/em&gt; : 일정한 규칙이 존재하는 세션ID가 발급되거나 타임아웃이 너무 길게 설정되어 있는 경우&lt;/li&gt;
&lt;li&gt;&lt;em&gt;잘못된 세션에 의한 정보 노출&lt;/em&gt; : 다중 스레드(Multi-Thread) 환경에서 멤버 변수에 정보를 저장할 때 발생. 멤버 변수보다 지역 변수를 활용하여 변수의 범위를 제한&lt;/li&gt;
&lt;li&gt;&lt;em&gt;세션ID(SessionID)&lt;/em&gt;: 서버가 클라이언트들을 구분하기 위해 부여하는 키(Key), 클라이언트가 서버에 요청을 보낼 때마다 세션ID를 통해 인증 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;입력 데이터 검증 및 표현&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;입력 데이터로 인해 발생하는 문제들을 예방하기 위해 구현 단계에서 검증해야 하는 보안 점검 항목&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SQL 삽입&lt;/em&gt; : 입력란에 SQL을 삽입하여 무단으로 DB를 조회하거나 조작. 동적 쿼리에 사용되는 입력 데이터에 예약 어 및 특수문자가 입력되지 않게 필터링 되도록 설정&lt;/li&gt;
&lt;li&gt;&lt;em&gt;경로 조작 및 자원 삽입&lt;/em&gt; :  데이터 입출력 경로를 조작하여 서버 자원을 수정· 삭제. 사용자 입력값을 식별자로 사용하는 경우, 경로 순회 공격을 막는 필터를 사용&lt;/li&gt;
&lt;li&gt;&lt;em&gt;크로스사이트스크립팅(XSS)&lt;/em&gt; :  웹페이지에 악의적인 스크립트를 삽입하여 방문자들의 정보를 탈취,비정상적인 기능수행을 유발. HTML 태그의 사용을 제한, 스크립트에 삽입되지 않도록 ‘&amp;#x3C;’, ‘&gt;’, ‘&amp;#x26;’ 등의 문자를 다른 문자로 치환&lt;/li&gt;
&lt;li&gt;&lt;em&gt;운영체제 명령어 삽입&lt;/em&gt; :  외부 입력값을 통해 시스템 명령어의 실행을 유도해 권한을 탈취하거나 시스템 장애를 유발. 웹 인터페이스를 통해 시스템 명령어가 전달되지 않도록 하고, 외부 입력값을 검증 없이 내부 명령어로 사용하지 않게함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;위험한 형식 파일 업로드&lt;/em&gt; : 악의적인 명령어가 포함된 스크립트 파일을 업로드함으로써 시스템에 손상, 시스템을 제어. 업로드 되는 파일의 확장자 제한, 파일명의 암호화, 웹사이트와 파일 서버의 경로 분리, 실행 속성을 제거&lt;/li&gt;
&lt;li&gt;&lt;em&gt;신뢰되지 않는 URL 주소로 자동 접속 연결&lt;/em&gt; : 입력 값으로 사이트 주소를 받는 경우 이를 조작하여 방문자를 피싱 사이트로 유도. 연결되는 외부 사이트의 주소를 화이트 리스트로 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;보안 기능&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 개발의 구현 단계에서 코딩하는 기능인 인증, 접근제어, 기밀성, 암호화 등을 올바르게 구현하기 위한 보안 점검 항목&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;적절한 인증 없이 중요기능 허용&lt;/em&gt; : 보안검사를 우회하여 인증과정 없이 중요한 정보 또는 기능에 접근 및 변경이 가능, 중요정보나 기능을 수행하는 페이지에서는 재인증 기능을 수행하도록 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;부적절한 인가&lt;/em&gt; : 접근제어 기능이 없는 실행경로를 통해 정보 또는 권한을 탈취.모든 실행경로에 대해 접근제어 검사를 수행, 사용자에게는 반드시 필요한 접근 권한만을 부여&lt;/li&gt;
&lt;li&gt;&lt;em&gt;중요한 자원에 대한 잘못된 권한 설정&lt;/em&gt; : 권한 설정이 잘못된 자원에 접근하여 해당 자원을 임의로 사용, 소프트웨어 관리자만 자원들을 읽고 쓸 수 있도록 설정하고, 인가되지 않은 사용자의 중요 자원에 대한 접근 여부를 검사&lt;/li&gt;
&lt;li&gt;&lt;em&gt;취약한 암호화 알고리즘 사용&lt;/em&gt; : 암호화된 환경설정 파일을 해독하여 비밀번호 등의 중요정보를 탈취, 안전한 암호화 알고리즘을 이용하고, 업무 관련 내용이나 개인정보 등에 대해서는 IT보안 인증 사무국이 안정성을 확인한 암호모듈을 이용&lt;/li&gt;
&lt;li&gt;&lt;em&gt;중요 정보 평문 저장 및 전송&lt;/em&gt; : 암호화되지 않은 평문 데이터를 탈취하여 중요한 정보를 획득, 중요한 정보를 저장하거나 전송할 때는 반드시 암호화 과정을 거치도록 하고, HTTPS 또는 SSL과 같은 보안 채널을 이용함으로써 방지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;하드코드된 비밀번호&lt;/em&gt; : 소스코드 유출 시 내부에 하드코드된 패스워드를 이용하여 관리자 권한을 탈취, 패스워드는 암호화하여 별도의 파일에 저장하고, 디폴트 패스워드나 디폴드 키의 사용을 피함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시간 및 상태&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;동시 수행을 지원하는 병렬 처리 시스템이나 다수의 프로세스가 동작하는 환경에서 시간과 실행 상태를 관리하여 시스템이 원활하게 동작되도록 하기 위한 보안 검증 항목&lt;/em&gt;. 시간 및 상태를 점검하지 않은 코딩이 유발하는 보안 약점&lt;/li&gt;
&lt;li&gt;&lt;em&gt;TOCTOU 경쟁 조건&lt;/em&gt; : 검사 시점(Time Of Check)과 사용 시점(Time Of Use)을 고려하지 않고 코딩하는 경우 발생. 코드 내에 동기화 구문을 사용하여 해당 자원에는 한 번에 하나의 프로세스만 접근 가능하도록 구성함으로써 방지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;종료되지 않는 반복문 또는 재귀함수&lt;/em&gt; : 반복문이나 재귀함수에서 종료 조건을 정의하지 않았거나 논리 구조상 종료될 수 없는 경우 발생. 모든 반복문이나 재귀함수의 수행 횟수를 제한하는 설정을 추가하거나, 종료 조건을 점검하여 반복 또는 호출의 종료 여부를 확인함으로써 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;에러 처리&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 실행 중 발생할 수 있는 오류들을 사전에 정의하여 오류로 인해 발생할 수 있는 문제들을 예방하기 위한 보안 점검 항목&lt;/em&gt;. 에러처리의 미비로 인한 코딩이 유발하는 보안 약점&lt;/li&gt;
&lt;li&gt;&lt;em&gt;오류 메시지를 통한 정보노출&lt;/em&gt; : 오류 발생으로 실행 환경, 사용자 정보, 디버깅 정보 등의 중요 정보를 소프트웨어가 메시지로 외부에 노출. 예외처리 구문에 예외의 이름이나 스택 트레이스를 출력하도록 코딩한 경우 해커는 소프트웨어의 내부구조를 쉽게 파악하기 때문에 오류 발생 시 가능한 한 내부에서만 처리되도록 하거나 메시지를 출력할 경우 최소한의 정보 또는 사전에 준비된 메시지만 출력되도록 함.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;오류 상황 대응 부재&lt;/em&gt; : 소프트웨어 개발 중 예외처리를 하지 않았거나 미비로 인해 발생. 오류가 발생할 수 있는 부분에 예외처리 구문을 작성하고, 제어문을 활용하여 오류가 악용되지 않도록 코딩&lt;/li&gt;
&lt;li&gt;&lt;em&gt;부적절한 예외처리&lt;/em&gt; : 함수의 반환값 또는 오류들을 세분화하여 처리하지 않고 광범위하게 묶어 한 번에 처리, 누락된 예외가 존재. 모든 함수의 반환값이 의도대로 출력되는지 확인하고, 세분화된 예외처리를 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;코드 오류&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 구현 단계에서 개발자들이 코딩 중 실수하기 쉬운 형 변환, 자원 반환 등의 오류를 예방&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;널 포인터 역참조&lt;/em&gt;  : 널 포인터가 가리키는 메모리에 어떠한 값을 저장할 때 발생&lt;/li&gt;
&lt;li&gt;&lt;em&gt;널 포인터&lt;/em&gt; : 널 포인터는 포인터(메모리의 위치를 가리키는 요소)에 널(값이 없음)이 저장되어 어떠한 곳도 가리키지 못하는 상태의 요소&lt;/li&gt;
&lt;li&gt;&lt;em&gt;부적절한 자원 해제&lt;/em&gt;  : 자원을 반환하는 코드를 누락하거나 프로그램 오류로 할당된 자원을 반환하지 못했을 때 발생. 프로그램 내에 자원 반환 코드가 누락되었는지 확인, 오류로 인해 함수가 중간에 종료되었을 때 예외처리에 관계없이 자원이 반환되도록 코딩&lt;/li&gt;
&lt;li&gt;&lt;em&gt;해제된 자원 사용&lt;/em&gt;  : 이미 사용이 종료되어 반환된 메모리를 참조하는 경우. 반환된 메모리에 접근할 수 없도록 주소를 저장하고 있는 포인터를 초기화&lt;/li&gt;
&lt;li&gt;&lt;em&gt;초기화되지 않은 변수 사용&lt;/em&gt;  : 변수 선언 후 값이 부여되지 않은 변수를 사용할 때. 변수 선언 시 할당된 메모리를 초기화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;캡슐화&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;정보 은닉이 필요한 중요한 데이터와 기능을 불충분하게 캡슐화하거나 잘못 사용함으로써 발생할 수 있는 문제를 예방하기 위함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;잘못된 세션에 의한 정보 노출&lt;/em&gt; : 다중 스레드 환경에서 멤버 변수에 정보를 저장할 때. 멤버 변수보다 지역 변수를 활용하여 변수의 범위를 제한함으로써 방지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;제거되지 않고 남은 디버그 코드&lt;/em&gt; : 개발 중에 버그 수정이나 결과값 확인을 위해 남겨둔 코드들로 인해 발생. 소프트웨어를 배포하기 전에 코드 검사를 통해 남아있는 디버그 코드를 삭제&lt;/li&gt;
&lt;li&gt;&lt;em&gt;시스템 데이터 정보 노출&lt;/em&gt; : 시스템의 내부 정보를 시스템 메시지 등을 통해 외부로 출력하도록 코딩했을 때. 시스템 메시지를 통해 노출되는 메시지는 최소한의 정보만을 제공&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Public 메소드로부터 반환된 Private 배열&lt;/em&gt; : 선언된 클래스 내에서만 접근이 가능한 Private 배열을 모든 클래스에서 접근이 가능한 Public 메소드에서 반환할 때. Private 배열을 별도의 메소드를 통해 조작하거나, 동일한 형태의 복제본으로 반환받은 후 값을 전달&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Private 배열에 Public 데이터 할당&lt;/em&gt; : Private 배열에 Public으로 선언된 데이터 또는 메소드의 파라미터를 저장할 때. Public으로 선언된 데이터를 Private 배열에 저장할 때, 레퍼런스가 아닌 값을 직접 저장&lt;/li&gt;
&lt;li&gt;Java의 접근 제어자(제한자) : Java에서 특정 개체를 선언할 때 외부로부터의 접근을 제한하기 위해 사용되는 예약어(Public, Private, Protected, Default)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;API 오용&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 구현 단계에서 API를 잘못 사용하거나 보안에 취약한 API를 사용하지 않도록 하기 위한 보안 검증 항목&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;API 오용으로 발생할 수 있는 보안 약점&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DNS Lookup에 의존한 보안 결정&lt;/code&gt; : 도메인명에 의존하여 인증이나 접근 통제 등의 보안 결정을 내리는 경우 DNS 검색을 통해 도메인 이름을 비교하지 않고 IP 주소를 직접 입력하여 접근&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;취약한 API 사용&lt;/code&gt;: 보안 문제로 사용이 금지된 API를 사용하거나, 잘못된 방식으로 API를 사용했을 때. 보안 문제로 금지된 함수(strcat, strcpy, sprintf 등)는 안전한 함수로 대체하고, API의 매뉴얼을 참고하여 보안이 보장되는 인터페이스를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;10-암호-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%EC%95%94%ED%98%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;10 암호 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 암호 알고리즘&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;패스워드, 주민번호, 은행계좌와 같은 중요정보를 보호하기 위해 평문을 암호화된 문장으로 만드는 절차 또는 방법&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;해시(Hash)를 사용하는 &lt;em&gt;단방향 암호화 방식&lt;/em&gt;과, 개인키 및 공개키로 분류되는 &lt;em&gt;양방향 암호화 방식&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개인키 암호화 기법(대칭 암호 기법/단일키 암호화 기법)&lt;/code&gt; : 동일한 키로 데이터를 암호화하고 복호화&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공개키 암호화 기법(비대칭 암호 기법)&lt;/code&gt;: 데이터를 암호화할 때 사용하는 공개키는 데이터베이스 사용자에게 공개, 복호화할 때의 비밀키는 관리자가 비밀리에 관리&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;해시(Hash)&lt;/code&gt; : 임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;11-개인키대칭키-암호화-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%EA%B0%9C%EC%9D%B8%ED%82%A4%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%95%94%ED%98%B8%ED%99%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;11 개인키대칭키 암호화 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 개인키(대칭키) 암호화 알고리즘&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개인키 암호화 알고리즘&lt;/code&gt; : 암호화와 복호화에 같은 암호키를 쓰는 알고리즘&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;블록 암호 방식&lt;/code&gt; : 긴 평문을 암호화하기 위해 고정 길이의 블록을 암호화하는 블록 암호 알고리즘을 반복하는 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SEED&lt;/code&gt;(128) : 1999년 한국인터넷진흥원(KISA)에서 개발한 블록 암호화 알고리즘, 블록 크기는 128비트이며, 키 길이에 따라 128, 256으로 분류&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ARIA(Academy,Research Institute,Agency)&lt;/code&gt;(128) : 2004년 국가정보원과 산학연협회가 개발한 블록 암호화 알고리즘, 블록 크기는 128비트이며, 키 길이에 따라 128, 192, 256으로 분류&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DES(Data Encryption Standard)&lt;/code&gt;(64) : 1975년 미국 NBS에서 발표한 개인키 암호화 알고리즘, 블록 크기는 64비트이며, 키 길이는 56비트&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;AES(Advanced Encryption Standard)&lt;/code&gt;(128) : 2001년 미국 표준 기술 연구소(NIST)에서 발표한 개인키 암호화 알고리즘, 블록 크기는 128비트이며, 키 길이에 따라 128, 192, 256으로 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스트림 암호 방식&lt;/code&gt; : 매우 긴 주기의 난수열을 발생시켜 평문과 더불어 암호문을 생성하는 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RC4&lt;/code&gt;: 로널드 라이베스트가 만든 스트림 암호로, 전송 계층 보안(TLS)이나 WEP등의 여러 프로토콜에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;12-공개키비대칭키-암호화-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EA%B3%B5%EA%B0%9C%ED%82%A4%EB%B9%84%EB%8C%80%EC%B9%AD%ED%82%A4-%EC%95%94%ED%98%B8%ED%99%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;12 공개키비대칭키 암호화 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. 공개키(비대칭키) 암호화 알고리즘&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공개키 암호화 알고리즘&lt;/code&gt; : 데이터를 암호화할 때 사용하는 공개키는 데이터베이스 사용자에게 공개, 복호화할 때의 비밀키는 관리자가 비밀리에 관리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;디피-헬만&lt;/code&gt; : 암호 키를 교환하는 방법으로서 두 사람이 암호화되지 않은 통신망을 통해 공통의 비밀 키를 공유할 수 있도록 하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RSA&lt;/code&gt; : &lt;em&gt;로널드 라이베스트, 아디 샤미르, 레너드 애들먼의 앞글자를 딴 비대칭 키(공개 키 )암호화 알고리즘. 현재 비대칭 키 암호 방식 중 가장 널리 쓰임&lt;/em&gt;. 소인수 분해의 어려움 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;13-해시-방식-암호화-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-%ED%95%B4%EC%8B%9C-%EB%B0%A9%EC%8B%9D-%EC%95%94%ED%98%B8%ED%99%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;13 해시 방식 암호화 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;13. 해시 방식 암호화 알고리즘&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;해시 방식&lt;/code&gt; : 단방향 알고리즘으로서 임의의 데이터를 고정된 길이의 데이터로 매핑하는 함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SHA&lt;/code&gt; :  &lt;em&gt;미국 국가안보국(NSA) 이 1993년에 처음으로 설계했으며, 미국 국가 표준으로 지정된 해시 암호화 알고리즘.&lt;/em&gt;(SHA-2 : SHA-224, SHA-256, SHA-384, SHA-512)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;MD5&lt;/code&gt; : (128bit)&lt;em&gt;RFC 1321로 지정되어 있으며, 로널드 라이베스트가 예전에 쓰이던  MD4를 대체하기 위해 고안한 알고리즘&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 8-SQL 응용]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 8-SQL 응용/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 8-SQL 응용/</guid><pubDate>Fri, 17 Jul 2020 12:45:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 SQL 응용 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-ddl&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-ddl&quot; aria-label=&quot;1 ddl permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. DDL&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DDL&lt;/code&gt; : &lt;em&gt;DB 구조, 데이터 형식, 접근 방식 등 DB를 구축하거나 수정할 목적으로 사용하는 언어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;DDL은 번역한 결과가 데이터 사전이라는 특별한 파일에 여러 개의 테이블로서 저장 (CREATE SCHEMA, CREATE DOMAIN, CREATE TABLE, CREATE VIEW, CREATE INDEX, ALTER TABLE, DROP)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE TABLE&lt;/code&gt;  : 테이블을 정의하는 명령문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;PRIMARY KEY&lt;/code&gt; : 기본키로 사용할 속성 또는 속성의 집합을 지정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UNIQUE&lt;/code&gt; : 대체키로 사용할 속성 또는 속성의 집합을 지정하는 것으로 UNIQUE로 지정한 속성은 중복된 값을 가질 수 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ON DELETE&lt;/code&gt; : 참조 테이블의 튜플이 삭제되었을 때 기본 테이블에 취해야 할 사항을 지정(NO ACTION, CASCADE, SET NULL, SET DEFAULT)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ON UPDATE&lt;/code&gt; : 참조 테이블의 참조 속성 값이 변경되었을 때 본 테이블에 취해야 할 사항을 지정(NO ACTION, CASCADE, SET NULL, SET DEFAULT)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CONSTRAINT&lt;/code&gt; : 제약 조건의 이름을 지정. 이름을 지정할 필요가 없으면 CHECK절만 사용하여 속성 값에 대한 제약 조건을 명시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CHECK&lt;/code&gt; : 속성 값에 대한 제약 조건을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; 학생&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    이름 &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    학번 &lt;span class=&quot;token keyword&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    전공 &lt;span class=&quot;token keyword&quot;&gt;CHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    성별 &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    생년월일 &lt;span class=&quot;token keyword&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;학번&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token keyword&quot;&gt;FOREIGN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;전공&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REFERENCES&lt;/span&gt; 학과&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;학과코드&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;CONSTRAINT&lt;/span&gt; 생년월일제약 &lt;span class=&quot;token keyword&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;생년월일&lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;1980-01-01&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;다른 테이블을 이용한 테이블 정의 : 기존 테이블의 정보를 이용해 새로운 테이블을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; 재학생 
&lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 학번&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 이름
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 학생&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE VIEW&lt;/code&gt; : 뷰(View)를 정의하는 명령문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT문을 서브 쿼리로사용하여 SELECT문의 결과로서 뷰를 생성&lt;/li&gt;
&lt;li&gt;서브 쿼리인 SELECT문에는 UNION이나 ORDER BY절을 사용할 수 없음&lt;/li&gt;
&lt;li&gt;속성명을 기술하지 않으면 SELECT문의 속성명이 자동으로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VIEW&lt;/span&gt; 건축공학과&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 학번&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 학번
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 학생
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 전공&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;건축&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ALTER TABLE&lt;/code&gt; : 테이블에 대한 정의를 변경&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ADD&lt;/code&gt; : 새로운 속성(열)을 추가&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;MODIFY&lt;/code&gt; : 특정 속성의 정의를 변경&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DROP COLUMN&lt;/code&gt; : 특정 속성을 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; 학생 &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt; 학년 &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; 학생 &lt;span class=&quot;token keyword&quot;&gt;MODIFY&lt;/span&gt; 학번 &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DROP&lt;/code&gt; : 기본 테이블 제거&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CASCADE&lt;/code&gt; : 제거할 요소를 참조하는 다른 모든 개체를 함께 제거. 즉 주 테이블의 데이터 제거시 각 외래키와 관계를 맺고 있는 모든 데이터를 제거하는 참조 무결성 제약 조건을 설정하기 위해 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RESTRICTED&lt;/code&gt; : 다른 개체가 제거할 요소를 참조중일 때는 제거를 취소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; 학생 &lt;span class=&quot;token keyword&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-dcl&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-dcl&quot; aria-label=&quot;2 dcl permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. DCL&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DCL(데이터 제어어)&lt;/code&gt; : 데이터의 보안, 무결성, 회복, 병행 제어 등을 정의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DCL은 데이터베이스 관리자(DBA)가 데이터 관리를 목적으로 사용&lt;/li&gt;
&lt;li&gt;GRANT, REVOKE, COMMIT, ROLLBACK, SAVEPOINT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;GRANT / REVOKE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 관리자가 데이터베이스 사용자에게 권한을 부여하거나 취소&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GRANT&lt;/code&gt; : 권한 부여&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;REVOKE&lt;/code&gt; : 권한 취소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자등급 지정 및 해제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DBA&lt;/code&gt; : 데이터베이스 관리자&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RESOURCE&lt;/code&gt; : 데이터베이스 및 테이블 생성 가능자&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CONNECT&lt;/code&gt; : 단순 사용자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; RESOURCE &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; NABI
&lt;span class=&quot;token comment&quot;&gt;-- 사용자 ID가 NABI인 사람에게 데이터베이스 및 테이블 생성 가능 권한 부여&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CONNECT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; STAR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- 사용자 ID가 STAR인 사람에게 단순 사용자 권한 부여&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;REVOKE&lt;/span&gt; 사용자등급 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사용자_ID_리스트&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테이블 및 속성에 대한 권한 부여 및 취소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;권한 종류 : ALL, SELECT, INSERT, DELETE, UPDATE, ALTER&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WITH GRANT OPTION&lt;/code&gt; : 부여받은 권한을 다른 사용자에게 다시 부여할 수 있는 권한을 부여&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GRANT OPTION FOR&lt;/code&gt; : 다른 사용자에게 권한을 부여할 수 있는 권한을 취소&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CASCADE&lt;/code&gt; : 권한 취소 시 권한을 부여받았던 사용자가 다른 사용자에게 부여한 권한도 연쇄적으로 취소&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 고객 &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; NABI &lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OPTION&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- 사용자 ID가 NABI인 사람에게 테이블에 대한 모든 권한과 다른사람에 대한 권한 부여&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 학생 &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; YDH&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- YDH에게 학생 테이블의 모든 권한 부여&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 강좌 &lt;span class=&quot;token keyword&quot;&gt;TO&lt;/span&gt; YDH &lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- YDH에게 강좌 테이블의 삭제 권한과 삭제 권한을 다른 사람에게 부여할 수 있는 권한 부여&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;REVOKE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 교수 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; YDH
&lt;span class=&quot;token comment&quot;&gt;-- YDH에게 부여된 교수에 대한 SELECT, INSERT, DELETE 권한 취소&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;REVOKE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 수강 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; YDH &lt;span class=&quot;token keyword&quot;&gt;CASCADE&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- YDH에 부여된 UPDATE 권한과 권한 부여 권한, 다른사람에게 부여한 권한 모두 취소&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;REVOKE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OPTION&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 고객 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; STAR&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- 사용자 ID가 STAR 인 사람에게 부여한 고객 테이블에 대한 권한 중 UPDATE 권한을 다른 사람에게 부여할 수 있는 권한만 취소&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;COMMIT&lt;/code&gt; : 트랜잭션이 성공적으로 끝나면 데이터베이스가 새로운 일관성 상태를 가지기 위해 변경된 모든 내용을 데이터베이스에 반영하여야 할 때&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ROLLBACK&lt;/code&gt; : 아직 COMMIT되지 않은 변경된 모든 내용들을 취소하고 데이터베이스를 이전 상태로 되돌림&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SAVEPOINT&lt;/code&gt; : 트랜잭션 내에 ROLLBACK 할 위치인 저장점을 지정하는 명령어, 저장점을 지정할 때는 이름을 부여하며, ROLLBACK 시 지정된 저장점까지의 트랜잭션 처리 내용이 취소&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-dml&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-dml&quot; aria-label=&quot;3 dml permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. DML&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DML(데이터 조작어)&lt;/code&gt; : 데이터베이스 사용자가 응용 프로그램이나 질의어를 통해 저장된 데이터를 실질적으로 관리하는데 사용되는 언어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SELECT, INSERT, DELETE, UPDATE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;삽입문(INSERT INTO)&lt;/code&gt; : 기본 테이블에 새로운 튜플을 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;YDH&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;인터넷&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;-- 사원 테이블에 (이름-YDH, 부서-인터넷) 입력&lt;/span&gt;
 
 &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; 사원 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 생일&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 주소&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 기본급&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
 &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;YDH&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;기획&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2020-10-03&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;대전&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;token comment&quot;&gt;-- 사원 테이블에 (&apos;YDH&apos;, &apos;기획&apos;, &apos;2020-10-03&apos;, &apos;대전&apos;, 90) 삽입&lt;/span&gt;
 
 &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; 편집부원&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 생일&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 주소&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 기본급&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 생일&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 주소&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 기본급 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
 &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 부서&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;편집&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;token comment&quot;&gt;-- 사원 테이블에 있는 편집부의 모든 튜플을 편집부원(이름, 생일, 주소, 기본급) 테이블에 삽입&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;삭제문(DELETE FROM)&lt;/code&gt; : 기본 테이블에 있는 튜플들 중에서 특정 튜플을 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 이름&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;YDH1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- 사원 테이블에서 이름이 YDH1인 튜플 삭제&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token comment&quot;&gt;-- 사원 테이블의 모든 레코드 삭제&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;갱신문(UPDATE SET)&lt;/code&gt; :기본 테이블에 있는 튜플들 중에서 특정 튜플의 내용을 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; 주소&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;세종&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;기본급 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 기본급 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 이름&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;YDH2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- 사원 테이블에서 YDH2의 주소를 세종으로, 기본급을 90만원 인상&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-dml---select1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-dml---select1&quot; aria-label=&quot;4 dml   select1 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. DML - SELECT(1)&lt;/h1&gt;
&lt;hr&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PREDICATE&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 별칭&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블 명&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 그룹함수&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 별칭&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 테이블명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 조건&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;HAVING&lt;/span&gt; 조건&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 속성명 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;PREDICATE&lt;/code&gt; : 불러올 튜플 수를 제한할 명령어를 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;ALL&lt;/em&gt; : 모든 튜플&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DISTINCT&lt;/em&gt; : 중복된 튜플이 있으면 그 중 첫 번째 한 개만&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DISTINCTROW&lt;/em&gt; : 중복된 튜플을 검색하지만 선택된 속성의 값이 아닌, 튜플 전체를 대상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;속성명 : 검색하여 불러올 속성(열) 및 수식들을 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본 테이블을 구성하는 모든 속성을 지정할 때 는 ’*’ 를 기술&lt;/li&gt;
&lt;li&gt;두 개 이상의 테이블을 대상으로 검색할 때는 (테이블명.속성명)으로 표현함&lt;/li&gt;
&lt;li&gt;AS : 속성 및 연산의 이름을 다른 제목으로 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FROM절&lt;/code&gt; : 질의에 의해 검색될 데이터들을 포함하는 테이블명&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WHERE절&lt;/code&gt; : 검색할 조건&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ORDER BY절&lt;/code&gt; : 특정 속성을 기준으로 정렬하여 검색할 때 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기본 검색&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;사원 테이블의 모든 튜플 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 생일&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 주소&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 기본급 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;생일&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;주소&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;기본급 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름 부서 생일 주소 기본급
&lt;span class=&quot;token comment&quot;&gt;----------------------------------&lt;/span&gt;
홍길동  기획 &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt; 망원동&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
임꺽정  인터넷  &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt; 서교동 &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
황진이  편집 &lt;span class=&quot;token number&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; 합정동&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
김선달  편집 &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
성춘향  기획 &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; 대흥동&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
장길산  편집 &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; 상암동&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
일지매  기획 &lt;span class=&quot;token number&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; 연남동&lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;
강건달  인터넷  &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 주소만 검색하되 같은 주소는 한번만 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DISTINCT&lt;/span&gt; 주소 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

주소                                                                                                  
&lt;span class=&quot;token comment&quot;&gt;------&lt;/span&gt;
망원동
연남동
서교동
합정동
상암동
대흥동&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 기본급에 특별수당 10을 더한 월급을 ‘~부서의 ~의 월급 ~‘으로 출력(오라클)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 부서 &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;부서의&apos;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 부서&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 이름 &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;의 월급&apos;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 이름&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 기본급 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 기본급&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


부서&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;  이름&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; 기본급&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;---------------------------&lt;/span&gt;
기획부서의 홍길동의 월급&lt;span class=&quot;token number&quot;&gt;130&lt;/span&gt;
인터넷부서의  임꺽정의 월급 &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
편집부서의 황진이의 월급&lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;
편집부서의 김선달의 월급&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
기획부서의 성춘향의 월급&lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;
편집부서의 장길산의 월급&lt;span class=&quot;token number&quot;&gt;130&lt;/span&gt;
기획부서의 일지매의 월급&lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
인터넷부서의  강건달의 월급&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;조건 지정 검색&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;사원 테이블에서 기획부의 모든 튜플&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 부서&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;기획&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    부서   생일    주소 기본급
&lt;span class=&quot;token comment&quot;&gt;------------------------------&lt;/span&gt;
홍길동  기획 &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
성춘향  기획 &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; 대흥동 &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
일지매  기획 &lt;span class=&quot;token number&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; 연남동 &lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 부서는 ‘기획’이고 기본급이 110보다 큰 튜플을 검색하는 SQL문을 작성하시오&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 부서&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;기획&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;AND&lt;/span&gt; 기본급 &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    부서   생일    주소 기본급
&lt;span class=&quot;token comment&quot;&gt;------------------------------&lt;/span&gt;
홍길동  기획 &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 ‘부서’가 ‘기획’이거나 ‘인터넷’인 튜플 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 부서&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;기획&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;OR&lt;/span&gt; 부서&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;인터넷&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 부서 &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;기획&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;인터넷&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    부서     생일    주소   기본급
&lt;span class=&quot;token comment&quot;&gt;------------------------------------&lt;/span&gt;
임꺽정  인터넷  &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt; 서교동  &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
성춘향  기획    &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; 대흥동  &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
일지매  기획    &lt;span class=&quot;token number&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; 연남동  &lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;
강건달  인터넷  &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 성이 ‘김’인 사람의 튜플 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 이름 &lt;span class=&quot;token operator&quot;&gt;LIKE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;김%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름   부서   생일    주소 기본급
&lt;span class=&quot;token comment&quot;&gt;---------------------------------&lt;/span&gt;
김선달  편집 &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 생일이 ‘69-01-01’에서 ‘73-12-31’&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 생일 &lt;span class=&quot;token operator&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;69-01-01&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;73-12-31&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름     부서   생일     주소  기본급
&lt;span class=&quot;token comment&quot;&gt;---------------------------------&lt;/span&gt;
임꺽정  인터넷  &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt; 서교동 &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
김선달  편집    &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 주소가 NULL인 튜플 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 주소 &lt;span class=&quot;token operator&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    부서    생일    주소   기본급
&lt;span class=&quot;token comment&quot;&gt;-----------------------------------&lt;/span&gt;
강건달  인터넷  &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정렬 검색&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;사원 테이블에서 주소를 기준으로 내림차순 정렬시켜 상위 2개 튜플만 검색(오라클)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; ROWNUM &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 주소 &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    부서     생일    주소 기본급
&lt;span class=&quot;token comment&quot;&gt;------------------------------------&lt;/span&gt;
임꺽정  인터넷  &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt; 서교동 &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
홍길동  기획    &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 부서를 기준으로 오름차순 정렬하고 같은 부서에 대해서는 이름을 기준으로 내림차순&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 부서 &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 이름 &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    부서    생일   주소  기본급
&lt;span class=&quot;token comment&quot;&gt;-----------------------------------&lt;/span&gt;
홍길동  기획 &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
일지매  기획 &lt;span class=&quot;token number&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; 연남동 &lt;span class=&quot;token number&quot;&gt;110&lt;/span&gt;
성춘향  기획 &lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; 대흥동 &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
임꺽정  인터넷  &lt;span class=&quot;token number&quot;&gt;69&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;09&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;01&lt;/span&gt; 서교동 &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
강건달  인터넷  &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
황진이  편집 &lt;span class=&quot;token number&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; 합정동 &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
장길산  편집 &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; 상암동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
김선달  편집 &lt;span class=&quot;token number&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;하위 질의&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;취미가 나이트댄스인 사원의 이름과 주소를 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 주소
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 이름&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 이름 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 여가활동 &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 취미&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;나이트댄스&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름    주소                                                                                                 
&lt;span class=&quot;token comment&quot;&gt;---------------&lt;/span&gt;
성춘향  대흥동                                                                                              &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;취미 활동을 하지 않는 사원&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; 
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 이름 &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 이름 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 여가활동&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


이름    부서    생일   주소 기본급
&lt;span class=&quot;token comment&quot;&gt;---------------------------------&lt;/span&gt;
강건달  인터넷  &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;      &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
홍길동  기획 &lt;span class=&quot;token number&quot;&gt;61&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;05&lt;/span&gt; 망원동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
황진이  편집 &lt;span class=&quot;token number&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt; 합정동 &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
장길산  편집 &lt;span class=&quot;token number&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt; 상암동 &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;복수 테이블 검색&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;경력이 10년 이상인 사원의 이름, 부서, 취미, 경력 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 여가활동&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;취미&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 여가활동&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;경력
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 여가활동
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 여가활동&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;경력 &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;AND&lt;/span&gt; 사원&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;이름 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 여가활동&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;이름&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

이름   부서  취미  경력
&lt;span class=&quot;token comment&quot;&gt;---------------------------&lt;/span&gt;
김선달  편집 당구 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
일지매  기획 태껸 &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;5-dml---select2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-dml---select2&quot; aria-label=&quot;5 dml   select2 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. DML - SELECT(2)&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;그룹 함수명&lt;/th&gt;
&lt;th&gt;속성&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;COUNT(속성명)&lt;/td&gt;
&lt;td&gt;그룹별 튜플 수&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAX(속성명)&lt;/td&gt;
&lt;td&gt;그룹별 최대값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIN(속성명)&lt;/td&gt;
&lt;td&gt;그룹별 최소값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUM(속성명)&lt;/td&gt;
&lt;td&gt;그룹별 합계&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AVG(속성명)&lt;/td&gt;
&lt;td&gt;그룹별 평균&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;HAVING절&lt;/code&gt; : GROUP BY와 함께 사용, 그룹에 대한 조건 지정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ORDER BY절&lt;/code&gt; : 특정 속성을 기준으로 정렬하여 검색할 때 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성명 : 정렬의 기준이 되는 속성명을 기술&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ASC&lt;/em&gt; : 오름차순. 생략하면 오름차순으로 지정&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DESC&lt;/em&gt; : 내림차순&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WINDOW 함수 이용 검색&lt;/li&gt;
&lt;li&gt;상여금 테이블에서 ‘상여내역’별로 ‘상여금’에 대한 일련 번호 구하기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 상여내역&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상여금
	ROW_NUMBER&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OVER&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 상여내역 &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 상여급 &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;NO&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

상여내역   상여금         &lt;span class=&quot;token keyword&quot;&gt;NO&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;---------------------------&lt;/span&gt;
야간근무    &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
야간근무 	&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
야간근무 	&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
야간근무 	&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
연장근무    &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
연장근무    &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;         &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
연장근무    &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
연장근무    &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상여금 테이블에서 ‘상여내역’별로 ‘상여금’에 대한 순위를 구하기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 상여내역&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상여금&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; RANK&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OVER&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;PARTITION&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 상여내역 &lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 상여금 &lt;span class=&quot;token keyword&quot;&gt;DESC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 상여금순위
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

상여내역    상여금    상여순위
&lt;span class=&quot;token comment&quot;&gt;--------- ---------- ----------&lt;/span&gt;
야간근무   &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
야간근무    &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
야간근무    &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
야간근무    &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
연장근무   &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
연장근무   &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
연장근무    &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
연장근무    &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
특별근무    &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;          &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;그룹 지정 검색&lt;/li&gt;
&lt;li&gt;상여금 테이블에서 ‘부서’별 ‘상여금’의 평균&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;AVG&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;상여금&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 평균
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

부서              평균
&lt;span class=&quot;token comment&quot;&gt;-------------------------&lt;/span&gt;
기획            &lt;span class=&quot;token number&quot;&gt;102.5&lt;/span&gt;
인터넷             &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;
편집               &lt;span class=&quot;token number&quot;&gt;66&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상여금 테이블에서 ‘부서’별 튜플 수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 사원수
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

부서         사원수
&lt;span class=&quot;token comment&quot;&gt;-------------------&lt;/span&gt;
기획         &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
인터넷       &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
편집         &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상여금 테이블에서 ‘상여금’이 100 이상인 사원이 2명 이상인 ‘부서’의 튜플 수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 사원수
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 상여금 &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; 부서
&lt;span class=&quot;token keyword&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;

부서         사원수
&lt;span class=&quot;token comment&quot;&gt;-------------------&lt;/span&gt;
기획         &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상여금 테이블의 ‘부서’, ‘상여내역’, 그리고 ‘상여금’ 에 대해 부서별 상여내역별 소계와 전체합계(ROLLUP)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상여내역&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;상여금&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 상여금합계
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; ROLLUP&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상여내역&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


부서       상여내역    상여금합계
&lt;span class=&quot;token comment&quot;&gt;----------------------------------&lt;/span&gt;
기획     야간근무        &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
기획     연장근무        &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;
기획     특별근무         &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
기획                    &lt;span class=&quot;token number&quot;&gt;410&lt;/span&gt;
편집     야간근무        &lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;
편집     연장근무         &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;
편집     특별근무         &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
편집                    &lt;span class=&quot;token number&quot;&gt;330&lt;/span&gt;
인터넷   연장근무         &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;
인터넷   특별근무        &lt;span class=&quot;token number&quot;&gt;180&lt;/span&gt;
인터넷                  &lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;
                       &lt;span class=&quot;token number&quot;&gt;950&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;상여금 테이블의 ‘부서’, ‘상여내역’, 그리고 ‘상여금’ 에 대해 부서별 상여내역별 소계와 전체합계(CUBE)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상여내역&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;상여금&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; 상여금합계
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 상여금
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; CUBE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;부서&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상여내역&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
 

부서       상여내역    상여금합계
&lt;span class=&quot;token comment&quot;&gt;---------------------------------&lt;/span&gt;
                        &lt;span class=&quot;token number&quot;&gt;950&lt;/span&gt;
         야간근무        &lt;span class=&quot;token number&quot;&gt;330&lt;/span&gt;
         연장근무        &lt;span class=&quot;token number&quot;&gt;270&lt;/span&gt;
         특별근무        &lt;span class=&quot;token number&quot;&gt;350&lt;/span&gt;
기획                     &lt;span class=&quot;token number&quot;&gt;410&lt;/span&gt;
기획     야간근무        &lt;span class=&quot;token number&quot;&gt;120&lt;/span&gt;
기획     연장근무        &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;
기획     특별근무         &lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;
편집                     &lt;span class=&quot;token number&quot;&gt;330&lt;/span&gt;
편집     야간근무        &lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;
편집     연장근무         &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;
편집     특별근무         &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
인터넷                   &lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;
인터넷   연장근무         &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;
인터넷   특별근무        &lt;span class=&quot;token number&quot;&gt;180&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;6-dml---join&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-dml---join&quot; aria-label=&quot;6 dml   join permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. DML - JOIN&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;2개의 테이블에 대해 연관된 튜플들을 결합하여, 하나의 새로운 릴레이션을 반환&lt;/li&gt;
&lt;li&gt;JOIN은 일반적으로 FROM절에 기술하지만, 릴레이션이 사용되는 어느 곳에서나 사용 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;INNER JOIN&lt;/code&gt; : 가장 일반적인 JOIN의 형태로, 관계가 설정된 두 테이 블에서 조인된 필드가 일치하는 행만을 표시&lt;/li&gt;
&lt;li&gt;WHERE절을 이용한 표기 형식&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …
&lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;속성명 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;NATURAL JOIN을 이용한 표기 형식&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;USING&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;7-dml---outer-join&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-dml---outer-join&quot; aria-label=&quot;7 dml   outer join permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. DML - OUTER JOIN&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;릴레이션에서 JOIN 조건에 만족하지 않는 튜플도 결과로 출력하기 위한 JOIN 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LEFT OUTER JOIN&lt;/code&gt; : INNER JOIN의 결과를 구한 후, 우측 항 릴레이션의 어떤 튜플과도 맞지 않는 좌측 항의 릴레이션에 있는 튜플들에 NULL 값을 붙여서 INNER JOIN의 결과에 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; 속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;속성명 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RIGHT OUTER JOIN&lt;/code&gt; : INNER JOIN의 결과를 구한 후, 좌측 항 릴레이션의 어떤 튜플과도 맞지 않는 우측 항의 릴레이션에 있는 튜플들에 NULL 값을 붙여서 INNER JOIN의 결과에 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; …
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;속성명 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 테이블명&lt;span class=&quot;token number&quot;&gt;2.&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;8-프로시저procedure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80procedure&quot; aria-label=&quot;8 프로시저procedure permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 프로시저(Procedure)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;절차형 SQL을 활용하여 특정 기능을 수행하는 일종의 트랜잭션 언어, 호출을 통해 실행되어 미리 저장해 놓은 SQL 작업을 수행&lt;/li&gt;
&lt;li&gt;시스템의 일일 마감 작업, 일괄 작업 등에 주로 사용&lt;/li&gt;
&lt;li&gt;&lt;em&gt;이벤트 : (DECLARE / BIGIN / END)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plsql&quot;&gt;&lt;pre class=&quot;language-plsql&quot;&gt;&lt;code class=&quot;language-plsql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; 대학교
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; 
    학교 &lt;span class=&quot;token keyword&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    성적 &lt;span class=&quot;token keyword&quot;&gt;NUMBER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    학과 &lt;span class=&quot;token keyword&quot;&gt;VARCHAR2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본 형식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DECLARE&lt;/code&gt; :프로시저 명칭, 변수, 인수, 데이터 타입 정의&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;BEGIN / END&lt;/code&gt; : 프로시저의 시작과 종료&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CONTROL&lt;/code&gt; : 조건문 / 반복문 삽입되어 순차처리&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL&lt;/code&gt; : DML, DCL이 삽입되어 데이터 관리를 위한 CRUD 수행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;EXCEPTION&lt;/code&gt; : BEGIN ~ END 안의 구문 실행 시 예외가 발생하면 이를 처리하는 방법 정의&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;TRANSACTION&lt;/code&gt; : 수행된 데이터 작업들을 DB에 적용할지 취소할지 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; CONTROL
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SQL&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; EXCEPTION
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TRANSACTION&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PROCEDURE&lt;/span&gt; EX_PROC&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    P_성적 &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; NUMBER&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    P_학과 &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; VARCHAR2
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;IS&lt;/span&gt; 
P_학교 VARCHAR2&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; :&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;서울대학교&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; 대학교&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;학교&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 성적&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 학과&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;P_학교&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; P_성적&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; P_학과&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    EXCEPTION
        &lt;span class=&quot;token keyword&quot;&gt;WHEN&lt;/span&gt; PROGRAM_ERROR &lt;span class=&quot;token keyword&quot;&gt;THEN&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;ROLLBACK&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;COMMIT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; EX_PROC&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;EXECUTE&lt;/span&gt; EX_PROC&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;물리학과&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;EXEC&lt;/span&gt; EX_PROC&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;물리학과&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;CALL&lt;/span&gt; EX_PROC&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;물리학과&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PROCEDURE&lt;/span&gt; EX_PROC&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;9-트리거trigger&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%ED%8A%B8%EB%A6%AC%EA%B1%B0trigger&quot; aria-label=&quot;9 트리거trigger permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 트리거(Trigger)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 시스템에서 데이터의 삽입, 갱신, 삭제 등의 이벤트가 발생할 때마다 관련 작업이 자동으로 수행되는 절차형 SQL&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장되며, 데이터 변경 및 무결성 유지, 로그 메시지 출력 등의 목적으로 사용&lt;/li&gt;
&lt;li&gt;&lt;em&gt;이벤트 : (DECLARE/EVENT/BEGIN/END)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
EVENT &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; CONTROL
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SQL&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; EXCEPTION
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TRIGGER&lt;/span&gt; EX_TRIG BEFORE &lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; 대학교
REFERENCING NEW &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; NEW_TABLE
&lt;span class=&quot;token keyword&quot;&gt;FOR EACH ROW&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;WHEN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NEW_TABLE&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;학년 &lt;span class=&quot;token operator&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
        :NEW_TABLE&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;학년 :&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TRIGGER&lt;/span&gt; EX_TRIG&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;10-사용자-정의-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98&quot; aria-label=&quot;10 사용자 정의 함수 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 사용자 정의 함수&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;프로시저와 유사하게 SQL을 사용하여 일련의 작업을 연속적으로 처리하며, 종료 시 처리 결과를 단일 값으로 반환하는 절차형 SQL&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장되어 DML문의 호출에 의해 실행&lt;/li&gt;
&lt;li&gt;예약어 RETURN을 통해 값을 반환하기 때문에 출력 파라미터가 없음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;이벤트 : (DECLARE/BEGIN/END)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; CONTROL
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;SQL&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; EXCEPTION
  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;필수&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FUNCTION&lt;/span&gt; 사용자 정의 함수명&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;파라미터&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;지역변수 선언&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
  사용자 정의 함수 BODY&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RETURN&lt;/span&gt; 반환값&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; 함수명 &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; 테이블명&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;속성명&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;함수명&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; 테이블명 &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; 속성명 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 함수명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt; 테이블명 &lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; 속성명 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 함수명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FUNCTION&lt;/span&gt; 함수명&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;11-제어문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%EC%A0%9C%EC%96%B4%EB%AC%B8&quot; aria-label=&quot;11 제어문 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 제어문&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;절차형 SQL은 SQL 명령어가 서술된 순서에 따라 위에서 아래로 차례대로 실행되는데, 이러한 진행 순서를 변경하기 위해 사용하는 명령문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IF문&lt;/code&gt; : 조건에 따라 실행할 문장을 달리하는 제어문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plsql&quot;&gt;&lt;pre class=&quot;language-plsql&quot;&gt;&lt;code class=&quot;language-plsql&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;-- IF 단일&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt; 
    X &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;IF&lt;/span&gt; X &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;THEN&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;TRUE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- TRUE&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- IF / ELSE&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt; 
    X &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;IF&lt;/span&gt; X &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;THEN&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;TRUE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;ELSE&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FALSE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- FALSE&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- IF / ELSIF / ELSE&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt; 
    X &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;IF&lt;/span&gt; X &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;THEN&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;TRUE20&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    ELSIF X &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;THEN&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;TRUE10&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;token keyword&quot;&gt;ELSE&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FALSE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;        
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;IF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- FALSE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;LOOP&lt;/code&gt; : 조건에 따라 실행할 문장을 수행하는 제어문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plsql&quot;&gt;&lt;pre class=&quot;language-plsql&quot;&gt;&lt;code class=&quot;language-plsql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt;
    I &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    I_SUM &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;
         I &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; I&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         I_SUM &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt;I_SUM &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; I&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;token keyword&quot;&gt;EXIT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;WHEN&lt;/span&gt; I &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;I_SUM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FOR LOOP&lt;/code&gt; : 초기값부터 종료값까지 증가하면서 실행할 문장 반복 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plsql&quot;&gt;&lt;pre class=&quot;language-plsql&quot;&gt;&lt;code class=&quot;language-plsql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt;
    I_SUM &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;FOR&lt;/span&gt; I &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.10&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;
        I_SUM &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; I_SUM &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; I&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;I_SUM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- 55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WHILE LOOP&lt;/code&gt; : 조건이 참인 동안 실행할 문장을 반복 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plsql&quot;&gt;&lt;pre class=&quot;language-plsql&quot;&gt;&lt;code class=&quot;language-plsql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;DECLARE&lt;/span&gt;
	I &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	I_SUM &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;WHILE&lt;/span&gt; I &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;
        I &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; I&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        I_SUM &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; I_SUM &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; I&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;I_SUM&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CONTINUE&lt;/code&gt; : 반복문의 실행을 제어하기 위해 사용하는 예약어&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;plsql&quot;&gt;&lt;pre class=&quot;language-plsql&quot;&gt;&lt;code class=&quot;language-plsql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;FOR&lt;/span&gt; I &lt;span class=&quot;token operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;.3&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;I&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;HELLO&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;CONTINUE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;WHEN&lt;/span&gt; I &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        DBMS_OUTPUT&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PUT_LINE&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;WORLD&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;LOOP&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;END&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
HELLO
WORLD
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
HELLO
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
HELLO
WORLD&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;12-sql---커서cursor&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-sql---%EC%BB%A4%EC%84%9Ccursor&quot; aria-label=&quot;12 sql   커서cursor permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. SQL - 커서(Cursor)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;커서 : 쿼리문의 처리 결과가 저장되어 있는 메모리 공간을 가리키는 포인터. 커서의 수행은 열기, 패치, 닫기의 세 단계로 진행&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;묵시적 커서&lt;/code&gt; : 내부에서 자동으로 생성되어 사용, DBMS 자체적으로 열리고(Open) 패치(Fetch)되어 사용이 끝나면 닫히지만(Close) 커서의 속성을 조회하여 사용된 쿼리 정보를 열람하는 것이 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL%FOUND&lt;/code&gt;: 쿼리 수행의 결과로 패치(Fetch)된 튜플 수가 1개 이상이면 TRUE&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL%NOTFOUND&lt;/code&gt; : 쿼리 수행의 결과로 패치(Fetch)된 튜플 수가 0개이면 TRUE&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL%ROWCOUNT&lt;/code&gt; : 쿼리 수행의 결과로 패치(Fetch)된 튜플 수를 반환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL%ISOPEN&lt;/code&gt; : 커서가 열린(Open) 상태이면 TRUE , 묵시적 커서는 자동으로 생성된 후 자동으로 닫히기 때문에 항상 FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;명시적 커서&lt;/code&gt; : 사용자가 직접 정의해서 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 직접 정의해서 사용하는 커서로, 주로 절차형 SQL에서 SELECT문의 결과로 반환되는 여러 튜플들을 제어하기 위해 사용&lt;/li&gt;
&lt;li&gt;커서는 기본적으로 열기 ,패치, 닫기 순으로 이루어지며, 명시적 커서로 사용하기 위해서는 열기 전에 선언을 해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 6-화면 설계]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 6-화면 설계/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 6-화면 설계/</guid><pubDate>Thu, 16 Jul 2020 17:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 화면 설계 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-사용자-인터페이스ui-user-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4ui-user-interface&quot; aria-label=&quot;1 사용자 인터페이스ui user interface permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 사용자 인터페이스(UI; User Interface)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(CGN)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;사용자와 시스템 간의 상호작용이 원활하게 이뤄지도록 도와주는 장치나 소프트웨어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;CLI(Command Line Interface)&lt;/code&gt; : 명령과 출력이 텍스트 형태로 이뤄지는 인터페이스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GUI(Graphical User Interface)&lt;/code&gt; : 아이콘이나 메뉴를 마우스로 선택하여 작업을 수행하는 그래픽 환경의 인터페이스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;NUI(Natural User Interface)&lt;/code&gt; : 사용자의 말이나 행동으로 기기를 조작하는 인터페이스&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-사용자-인터페이스의-기본-원칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EC%9B%90%EC%B9%99&quot; aria-label=&quot;2 사용자 인터페이스의 기본 원칙 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 사용자 인터페이스의 기본 원칙&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(직유학유)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;직관성&lt;/code&gt; : 누구나 쉽게 이해하고 사용할 수 있어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;유효성&lt;/code&gt; : 사용자의 목적을 정확하고 완벽하게 달성해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;학습성&lt;/code&gt; : 누구나 쉽게 배우고 익힐 수 있어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;유연성&lt;/code&gt; : 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-사용자-인터페이스의-설계-지침&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%84%A4%EA%B3%84-%EC%A7%80%EC%B9%A8&quot; aria-label=&quot;3 사용자 인터페이스의 설계 지침 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 사용자 인터페이스의 설계 지침&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(사일단결 가포접명오)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용자 중심&lt;/code&gt; : 사용자가 쉽게 이해하고 편리하게 사용할 수 있는 환경을 제공하며, 실사용자에 대한 이해가 바탕이 되어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;일관성&lt;/code&gt; : 버튼이나 조작 방법 등을 일관성 있게 제공하므로 사용자가 쉽게 기억하고 습득할 수 있게 설계해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;단순성&lt;/code&gt; : 조작 방법을 단순화시켜 인지적 부담을 감소시켜야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;결과 예측 가능&lt;/code&gt; : 작동시킬 기능만 보고도 결과를 미리 예측할 수 있게 설계해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;가시성&lt;/code&gt; : 메인 화면에 주요 기능을 노출시켜 최대한 조작이 쉽도록 설계해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;표준화&lt;/code&gt; : 기능 구조와 디자인을 표준화하여 한 번 학습한 이후에는 쉽게 사용할 수 있도록 설계해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;접근성&lt;/code&gt; : 사용자의 연령, 성별, 인종 등 다양한 계층이 사용할 수 있도록 설계해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;명확성&lt;/code&gt; : 사용자가 개념적으로 쉽게 인지할 수 있도록 설계해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;오류 발생 해결&lt;/code&gt; : 오류가 발생하면 사용자가 쉽게 인지할 수 있도록 설계해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-ui-설계-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-ui-%EC%84%A4%EA%B3%84-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;4 ui 설계 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. UI 설계 도구&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(와스프목유)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;와이어프레임(Wireframe)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기획 단계의 초기에 제작하는 것으로, 페이지에 대한 개략적인 레이아웃이나 UI 요소 등에 대한 뼈대를 설계하는 단계&lt;/li&gt;
&lt;li&gt;와이어프레임을 제작할 때는 각 페이지의 영역 구분, 콘텐츠, 텍스트 배치 등을 화면 단위로 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;스토리보드(Story Board)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;와이어프레임에 콘텐츠에 대한 설명, 페이지 간 이동 흐름 등을 추가한 문서&lt;/li&gt;
&lt;li&gt;스토리보드의 상단이나 우측에는 제목, 작성자 등을 입력하고, 좌측에는 UI 화면, 우측에는 디스크립션을 기입&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프로토타입(Prototype)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;와이어프레임이나 스토리보드 등에 인터랙션을 적용함으로써 실제 구현된 것처럼 테스트가 가능한 동적인 형태의 모형, 사용성 테스트나 작업자 간 서비스 이해를 위해 작성하는 샘플&lt;/li&gt;
&lt;li&gt;&lt;em&gt;페이퍼 프로토타입&lt;/em&gt; : 아날로그적인 방법으로, 스케치, 그림, 글 등을 이용하여 손으로 직접 작성&lt;/li&gt;
&lt;li&gt;&lt;em&gt;디지털 프로토타입&lt;/em&gt; : 파워포인트, 아크로뱃, 비지오, 옴니그래플 등과 같은 프로그램을 사용하여 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;목업(Mockup)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;디자인, 사용 방법 설명, 평가 등을 위해 와이어프레임보다 좀 더 실제 화면과 유사하게 만든 정적인 형태의 모형&lt;/li&gt;
&lt;li&gt;시각적으로만 구성 요소를 배치하는 것으로 실제로 구현되지는 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;유스케이스(Use Case)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 측면에서의 요구사항으로, 사용자가 원하는 목표를 달성하기 위해 수행할 내용을 기술&lt;/li&gt;
&lt;li&gt;사용자의 요구사항을 빠르게 파악함으로써 프로젝트의 초기에 시스템의 기능적인 요구를 결정하고 그 결과를 문서화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-ui-스타일-가이드-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-ui-%EC%8A%A4%ED%83%80%EC%9D%BC-%EA%B0%80%EC%9D%B4%EB%93%9C-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;5 ui 스타일 가이드 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. UI 스타일 가이드 작성&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;UI 스타일 가이드는 개발자나 디자이너들이 UI를 작성할 때 기준이 되는 규칙들&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구동 환경 정의&lt;/code&gt; : 컴퓨터 OS, 웹 브라우저, 모니터 해상도, 프레임 세트 등을 사용 환경에 적합하도록 규정하는 단계&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;레이아웃 정의&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;화면 구조를 정의하고 각 영역의 메뉴를 구성하는 단계&lt;/li&gt;
&lt;li&gt;상단 메뉴 : 필수 영역으로 시스템 전체 페이지에 동일하게 적용&lt;/li&gt;
&lt;li&gt;좌측 메뉴 : 선택 영역으로 시스템별 서브 페이지에 선택적으로 적용&lt;/li&gt;
&lt;li&gt;내용 구성 : 필수 영역으로 시스템의 전체 콘셉트를 나타내는 메인 이미지와 시스템별로 필요한 콘텐츠를 표시&lt;/li&gt;
&lt;li&gt;하단 메뉴 : 선택 영역으로 회사 상황에 따라 표시 여부를 결정할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;네비게이션 정의&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네비게이션의 메뉴 타입을 선택하여 적용하는 단계&lt;/li&gt;
&lt;li&gt;사용자가 원하는 정보를 빠르게 찾을 수 있도록 안내하는 것으로 메뉴, 버튼, 링크 등으로 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능 정의&lt;/code&gt; : 시스템에 적용할 업무 과정에서 일어나는 모든 활동이나 필요한 데이터 간의 관계 등을 논리적인 모델로 상세화하는 단계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구성 요소 정의&lt;/code&gt; : 화면에 표시할 그리드나 버튼 등을 정의하는 단계&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-ui-요구사항-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-ui-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;6 ui 요구사항 확인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. UI 요구사항 확인&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;새로 개발할 시스템에 적용할 UI 관련 요구사항을 조사해서 작성하는 단계&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;UI 요구사항 확인 순서&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;목표 정의&lt;/code&gt; : 사용자들을 대상으로 인터뷰를 진행한 후 사용자들의 의견이 수렴된 비즈니스 요구사항을 정의. 인터뷰는 개별적으로 진행 , 한 시간을 넘지 않도록 함, 사용자 리서치를 시작하기 전에 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;활동 사항 정의&lt;/code&gt; : 조사한 요구사항을 토대로 앞으로 해야 할 활동 사항을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UI 요구사항 작성&lt;/code&gt; : 여러 경로를 통해 수집된 사용자들의 요구사항을 검토하고 분석하여 UI 개발 목적에 맞게 작성 ( 실사용자 중심 )&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UI 요구사항 작성 순서 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 요소 확인&lt;/code&gt; : 파악된 요구사항 요소의 종류와 각각의 표현 방식 등을 검토&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 요소&lt;/code&gt; : 데이터 요구, 기능 요구, 제품/서비스의 품질, 제약 사항&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정황 시나리오 작성&lt;/code&gt;  : 정황 시나리오는 사용자의 요구사항을 도출하기 위해 작성하는 것으로, 사용자가 목표를 달성하기 위해 수행하는 방법을 순차적으로 묘사&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 작성&lt;/code&gt; : 정황 시나리오를 토대로 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-ui-흐름-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-ui-%ED%9D%90%EB%A6%84-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;7 ui 흐름 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. UI 흐름 설계&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;업무의 진행 과정이나 수행 절차에 따른 흐름을 파악하여 화면과 폼을 설계하는 단계&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능 작성&lt;/code&gt; : 화면에 표현할 기능을 작성하는 단계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;입력 요소 확인&lt;/code&gt; : 화면에 표현되어야 할 기능을 확인한 후 화면에 입력할 요소를 확인하는 단계&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;유스케이스 설계&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI 요구사항을 기반으로 UI 유스케이스를 설계하는 단계&lt;/li&gt;
&lt;li&gt;유스케이스는 화면에 표현할 입력 요소들의 형태나 입력 방법, 배치 등을 고려해서 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;기능 및 양식 확인&lt;/code&gt; : 분석한 기능을 토대로 텍스트 박스, 콤보 박스, 라디오 박스, 체크 박스 등을 확인하고 규칙을 정의&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;텍스트 박스&lt;/em&gt; : 입력이 가능함을 표시&lt;/li&gt;
&lt;li&gt;&lt;em&gt;콤보 박스&lt;/em&gt; : 목록에서 항목을 선택하거나 입력할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;라디오 박스&lt;/em&gt; : 여러 개의 값 중 하나만을 선택할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;체크 박스&lt;/em&gt; : 여러 개의 값 중 하나 이상을 선택할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-ui-상세-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-ui-%EC%83%81%EC%84%B8-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;8 ui 상세 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. UI 상세 설계&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;실제 설계 및 구현을 위해 모든 화면에 대해 자세하게 설계를 진행하는 단계&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 확인&lt;/code&gt; : UI 상세 설계를 위한 요구사항을 최종적으로 확인하는 단계&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;UI 설계서 표지 및 개정 이력 작성&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI 설계서 표지 : 다른 문서와 혼동되지 않도록 프로젝트명이나 시스템명을 포함시켜 작성&lt;/li&gt;
&lt;li&gt;UI 설계서 개정 이력 : UI 설계서가 수정될 때마다 어떤 부분이 어떻게 수정되었는지를 정리해 놓은 문서&lt;/li&gt;
&lt;li&gt;처음 작성 시 첫 번째 항목을 ‘초안 작성’, 버전(Version)을 1.0으로 설정하고, UI 설계서에 변경 사항이 있을 때마다 변경 내용을 적고 버전을 0.1씩 높임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UI 구조 설계&lt;/code&gt; : UI 요구사항과 UI 프로토타입에 기초하여 UI 구조를 설계하는 단계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;메뉴 구조 설계&lt;/code&gt; : 사이트 맵 구조를 통해 사용자 기반 메뉴 구조를 설계 하는 단계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;화면 설계&lt;/code&gt; : UI 프로토타입과 UI 프로세스를 참고하여 필요한 화면을 페이지별로 설계하는 단계&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 7-애플리케이션 테스트 관리/</guid><pubDate>Thu, 16 Jul 2020 17:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 애플리케이션 테스트 관리 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-애플리케이션-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;1 애플리케이션 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 애플리케이션 테스트&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;애플리케이션에 잠재되어 있는 결함을 찾아내는 일련의 행위 또는 절차&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;개발된 소프트웨어가 고객의 요구사항을 만족시키는지 확인하고 소프트웨어가 기능을 정확히 수행하는지 검증&lt;/li&gt;
&lt;li&gt;&lt;em&gt;애플리케이션 테스트의 기본 원리&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;완벽한 테스트 불가능&lt;/code&gt; : 애플리케이션 테스트는 소프트웨어의 잠재적인 결함을 줄일 수 있지만 소프트웨어에 결함이 없다고 증명할 수는 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;결함 집중&lt;/code&gt; : 애플리케이션의 결함은 대부분 개발자의 특성이나 애플리케이션의 기능적 특징 때문에 특정 모듈에 집중되어 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;살충제 패러독스&lt;/code&gt; : 애플리케이션 테스트에서는 동일한 테스트 케이스로 동일한 테스트를 반복하면 더 이상 결함이 발견되지 않는 현상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스팅은 정황 의존&lt;/code&gt; : 애플리케이션 테스트는 소프트웨어 특징, 테스트 환경, 테스터 역량 등 정황에 따라 테스트 결과가 달라질 수 있으므로, 정황에 따라 테스트를 다르게 수행해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;오류-부재의 궤변&lt;/code&gt; : 소프트웨어의 결함을 모두 제거해도 사용자의 요구사항을 만족시키지 못하면 해당 소프트웨어는 품질이 높다고 말할 수 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;파레토 법칙&lt;/code&gt;  : 애플리케이션의 20%에 해당하는 코드에서 전체 결함의 80% 가 발견&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-애플리케이션-테스트의-분류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B6%84%EB%A5%98&quot; aria-label=&quot;2 애플리케이션 테스트의 분류 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 애플리케이션 테스트의 분류&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프로그램 실행 여부&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;정적 테스트&lt;/em&gt; : 프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석&lt;/li&gt;
&lt;li&gt;&lt;em&gt;동적 테스트&lt;/em&gt; : 프로그램을 실행하여 오류를 찾는 테스트로, 소프트웨어 개발의 모든 단계에서 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 기반&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;명세 기반 테스트&lt;/em&gt; : 사용자의 요구사항에 대한 명세를 빠짐없이 테스트 케이스로 만들어 구현하고 있는지 확인하는 테스트&lt;/li&gt;
&lt;li&gt;&lt;em&gt;구조 기반 테스트&lt;/em&gt; : 소프트웨어 내부의 논리 흐름에 따라 테스트 케이스를 작성하고 확인하는 테스트&lt;/li&gt;
&lt;li&gt;&lt;em&gt;경험 기반 테스트&lt;/em&gt; : 유사 소프트웨어나 기술 등에 대한 테스터의 경험을 기반으로 수행하는 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시각&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;검증 테스트&lt;/em&gt; : 개발자의 시각에서 제품의 생산 과정을 테스트, 제품이 명세서대로 완성됐는지를 테스트&lt;/li&gt;
&lt;li&gt;&lt;em&gt;확인 테스트&lt;/em&gt; : 사용자의 시각에서 생산된 제품의 결과를 테스트, 사용자가 요구한대로 제품이 완성됐는지, 제품이 정상적으로 동작하는지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;목적&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;회복 테스트&lt;/em&gt; : 시스템에 여러 가지 결함을 주어 실패하도록 한 후 올바르게 복구되는지를 확인&lt;/li&gt;
&lt;li&gt;&lt;em&gt;안전 테스트&lt;/em&gt; : 시스템에 설치된 시스템 보호 도구가 불법적인 침입으로부터 시스템을 보호할 수 있는지를 확인&lt;/li&gt;
&lt;li&gt;&lt;em&gt;강도 테스트&lt;/em&gt; : 시스템에 과도한 정보량이나 빈도 등을 부과하여 과부하 시에도 소프트웨어가 정상적으로 실행되는지를 확인&lt;/li&gt;
&lt;li&gt;&lt;em&gt;성능 테스트&lt;/em&gt; : 소프트웨어의 실시간 성능이나 전체적인 효율성을 진단하는 테스트로, 소프트웨어의 응답 시간, 처리량&lt;/li&gt;
&lt;li&gt;&lt;em&gt;구조 테스트&lt;/em&gt; : 소프트웨어 내부의 논리적인 경로, 소스 코드의 복잡도 등을 평가&lt;/li&gt;
&lt;li&gt;&lt;em&gt;회귀 테스트&lt;/em&gt; : 소프트웨어의 변경 또는 수정된 코드에 새로운 결함이 없음을 확인&lt;/li&gt;
&lt;li&gt;&lt;em&gt;병행 테스트&lt;/em&gt; : 변경된 소프트웨어와 기존 소프트웨어에 동일한 데이터를 입력하여 결과를 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-화이트박스-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%ED%99%94%EC%9D%B4%ED%8A%B8%EB%B0%95%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;3 화이트박스 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 화이트박스 테스트&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;화이트박스 테스트&lt;/code&gt; : &lt;em&gt;모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적인 모든 경로를 테스트, 원시 코드의 모든 문장을 한 번 이상 실행, 모듈 안의 작동을 직접 관찰&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기초 경로 검사&lt;/code&gt; : 테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주는 테스트 기법, 테스트 측정 결과는 실행 경로의 기초를 정의하는데 지침으로 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;제어 구조 검사&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;조건 검사&lt;/em&gt; : 프로그램 모듈 내 에 있는 논리적 조건을 테스트하는 테스트 케이스 설계 기법&lt;/li&gt;
&lt;li&gt;&lt;em&gt;루프 검사&lt;/em&gt; : 프로그램의 반복 구조에 초점을 맞춰 실시하는 테스트 케이스 설계 기법&lt;/li&gt;
&lt;li&gt;&lt;em&gt;데이터 흐름 검사&lt;/em&gt; : 프로그램 에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 테스트 케이스 설계 기법&lt;/li&gt;
&lt;li&gt;&lt;em&gt;화이트박스 테스트 검증 기준&lt;/em&gt; : 테스트 케이스들이 적정한지를 판단하는 기준( 문장 검증 기준, 분기 검증 기준, 조건 검증 기준, 분기/조건 기준)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-블랙박스-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%B8%94%EB%9E%99%EB%B0%95%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;4 블랙박스 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 블랙박스 테스트&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;블랙박스 테스트&lt;/code&gt;: &lt;em&gt;소프트웨어가 수행할 특정 기능을 알기 위해서 각 기능이 완전히 작동되는 것을 입증하는 테스트(=기능 테스트)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;사용자의 요구사항 명세를 보면서 테스트하는 것으로, 주로 구현된 기능을 테스트. 소프트웨어 인터페이스에서 실시&lt;/li&gt;
&lt;li&gt;&lt;em&gt;블랙박스 테스트의 종류&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;동치 분할 검사&lt;/code&gt; : 입력 자료에 초점을 맞춰 테스트 케이스를 만들고 검사&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;경계값 분석&lt;/code&gt; : 입력 자료에만 치중한 동치 분할 기법을 보완하기 위한 기법으로, 입력 조건의 경계값을 테스트 케이스로 선정하여 검사&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;원인 효과 그래프 검사&lt;/code&gt; : 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;오류 예측 검사&lt;/code&gt; : 과거의 경험이나 확인자의 감각으로 테스트&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;비교 검사&lt;/code&gt; : 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-개발-단계에-따른-애플리케이션-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EA%B0%9C%EB%B0%9C-%EB%8B%A8%EA%B3%84%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;5 개발 단계에 따른 애플리케이션 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 개발 단계에 따른 애플리케이션 테스트&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;단위 테스트&lt;/code&gt; : 코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;구조 기반 테스트&lt;/em&gt; : 프로그램 내부 구조 및 복잡도를 검증하는 화이트박스 테스트 시행&lt;/li&gt;
&lt;li&gt;&lt;em&gt;명세 기반 테스트&lt;/em&gt; : 목적 및 실행 코드 기반의 블랙박스 테스트 시행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;통합 테스트&lt;/code&gt; : 단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 테스트&lt;/code&gt; : 개발된 소프트웨어가 해당 컴퓨터 시스템에서 완벽하게 수행되는가를 점검하는 테스트&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인수 테스트&lt;/code&gt; : 개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;알파 테스트&lt;/em&gt; : 개발자의 장소에서 사용자가 개발자앞에서 행하는 테스트 기법, 테스트는 통제된 환경에서 행해지며, 오류와 사용상의 문제점을 사용자와 개발자가 함께 확인하면서 기록&lt;/li&gt;
&lt;li&gt;&lt;em&gt;베타 테스트&lt;/em&gt; : 선정된 최종 사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법, 개발자에 의해 제어되지 않은 상태에서 테스트가 행해지며, 발견된 오류와 사용상의 문제점을 기록하고 개발자에게 주기적으로 보고&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-통합-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;6 통합 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 통합 테스트&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;단위 테스트가 끝난 모듈을 통합하는 과정에서 발생하는 오류 및 결함을 찾는 테스트 기법&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;비점진적 통합 방식&lt;/code&gt; : 단계적으로 통합하는 절차 없이 모든 모듈이 미리 결합되어 있는 프로그램 전체를 테스트하는 방법, 규모가 작은 소프트웨어에 유리하며 단시간 내에 테스트가 가능, 오류 발견 및 장애 위치 파악 및 수정이 어려움&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;빅뱅 통합 테스트&lt;/em&gt; : 모듈 간의 상호 인터페이스를 고려 하지 않고 단위 테스트가 끝난 모듈을 한꺼번에 결합시켜 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;점진적 통합 방식&lt;/code&gt; : 모듈 단위로 단계적으로 통합하면서 테스트하는 방법, 오류 수정이 용이하고 인터페이스와 연관된 오류를 완전히 테스트할 가능성이 높음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;하향식 통합 테스트&lt;/em&gt; : 상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트&lt;/li&gt;
&lt;li&gt;&lt;em&gt;상향식 통합 테스트&lt;/em&gt; : 하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트&lt;/li&gt;
&lt;li&gt;&lt;em&gt;혼합식 통합 테스트(=샌드위치식 통합 테스트)&lt;/em&gt; : 하위 수준에서는 상향식 통합, 상위 수준에서는 하향식 통합을 사용하여 최적의 테스트를 지원하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;회귀 테스트&lt;/code&gt; : 이미 테스트된 프로그램의 테스팅을 반복하는 것으로, 통합 테스트로 인해 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-애플리케이션-테스트-프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;7 애플리케이션 테스트 프로세스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 애플리케이션 테스트 프로세스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;개발된 소프트웨어가 사용자의 요구대로 만들어졌는지, 결함은 없는지등을 테스트하는 절차&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 계획&lt;/code&gt; : 프로젝트 계획서, 요구 명세서 등을 기반으로 테스트 목표를 정의하고 테스트 대상 및 범위를 결정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 분석 및 디자인&lt;/code&gt; : 테스트의 목적과 원칙을 검토하고 사용자의 요구 사항을 분석&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 케이스 및 시나리오 작성&lt;/code&gt; : 테스트 케이스의 설계 기법에 따라 테스트 케이스를 작성하고 검토 및 확인한 후 테스트 시나리오를 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 수행&lt;/code&gt; : 테스트 환경을 구축한 후 수행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 결과 평가 및 리포팅&lt;/code&gt; : 테스트 결과를 비교 분석하여 테스트 결과서를 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;결함 추적 및 관리&lt;/code&gt; : 테스트를 수행한 후 결함이 어디에서 발생 했는지, 어떤 종류의 결함인지 등 결함을 추적하고 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-테스트-케이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;8 테스트 케이스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 테스트 케이스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;구현된 소프트웨어가 사용자의 요구사항을 정확하게 준수했는지를 확인하기 위해 설계된 입력값, 실행 조건, 기대 결과 등으로 구성된 테스트 항목에 대한 명세서, 명세 기반 테스트의 설계 산출물에 해당&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;테스트 케이스 작성 순서&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 계획 검토 및 자료 확보&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;위험 평가 및 우선순위 결정&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 요구사항 정의&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 구조 설계 및 테스트 방법 결정&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 케이스 정의&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-테스트-시나리오&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4&quot; aria-label=&quot;9 테스트 시나리오 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 테스트 시나리오&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;테스트 케이스를 적용하는 순서에 따라 여러 개의 테스트 케이스들을 묶은 집합으로, 테스트 케이스들을 적용하는 구체적인 절차를 명세한 문서&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;테스트 순서에 대한 절차, 사전 조건, 입력 데이터 등이 설정&lt;/li&gt;
&lt;li&gt;시스템별, 모듈별, 항목별 등과 같이 여러 개의 시나리오로 분리하여 작성&lt;/li&gt;
&lt;li&gt;각각의 테스트 항목은 식별자 번호, 순서 번호, 테스트 데이터, 테스트 케이스, 예상 결과, 확인 등을 포함해서 작성&lt;/li&gt;
&lt;li&gt;유스케이스간 업무 흐름이 정상적인지를 테스트할 수 있도록 작성&lt;/li&gt;
&lt;li&gt;테스트 케이스 타당성 확인 및 유지 보수&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;10-테스트-오라클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%98%A4%EB%9D%BC%ED%81%B4&quot; aria-label=&quot;10 테스트 오라클 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 테스트 오라클&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;테스트 결과가 올바른지 판단하기 위해 사전에 정의된 참값을 대입하여 비교하는 기법 및 활동&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;참 오라클&lt;/code&gt; : 모든 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하는 오라클로, 발생된 모든 오류를 검출할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;샘플링 오라클&lt;/code&gt; : 특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;추정 오라클&lt;/code&gt; : 샘플링 오라클을 개선한 오라클로, 특정 테스트 케이스의 입력값에 대해 기대하는 결과를 제공하고, 나머지 값들에 대해서는 추정으로 처리&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;일관성 검사 오라클&lt;/code&gt; : 애플리케이션의 변경이 있을 때, 테스트 케이스의 수행 전과 후의 결과값이 동일한지를 확인하는 오라클&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;11-테스트-자동화-도구-유형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%99%94-%EB%8F%84%EA%B5%AC-%EC%9C%A0%ED%98%95&quot; aria-label=&quot;11 테스트 자동화 도구 유형 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 테스트 자동화 도구 유형&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;사람이 수행하던 테스트를 테스트 자동화 도구를 사용함으로써 휴먼 에러를 줄이고 테스트의 정확성, 품질 향상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정적 분석 도구&lt;/code&gt; : 프로그램을 실행하지 않고 분석하는 도구로, 소스 코드에 대한 코딩 표준, 코딩 스타일, 코드 복잡도 및 남은 결함 등을 발견하기 위해 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 실행 도구&lt;/code&gt; : 스크립트 언어를 사용하여 테스트를 실행하는 방법으로, 테스트 데이터와 테스트 수행 방법 등이 포함된 스크립트를 작성한 후 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;성능 테스트 도구&lt;/code&gt; : 애플리케이션의 처리량, 응답 시간, 경과 시간, 자원 사용률 등을 인위적으로 적용한 가상의 사용자를 만들어 테스트를 수행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 통제 도구&lt;/code&gt; : 테스트 계획 및 관리, 테스트 수행, 결함 관리 등을 수행하는 도구(형상 관리 도구, 결함 추적/관리 도구 등)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 하네스 도구&lt;/code&gt; : 테스트가 실행될 환경을 시뮬레이션하여 컴포넌트 및 모듈이 정상적으로 테스트 되도록 하는 도구&lt;/li&gt;
&lt;li&gt;&lt;em&gt;휴먼 에러&lt;/em&gt; : 사람의 판단 실수나 조작 실수 등으로 인해 발생하는 에러&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;12-결함-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EA%B2%B0%ED%95%A8-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;12 결함 관리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. 결함 관리&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;결함&lt;/em&gt; : 오류 발생, 작동 실패 등과 같이 소프트웨어가 개발자가 설계한 것과 다르게 동작하거나 다른 결과가 발생되는 것&lt;/li&gt;
&lt;li&gt;결함 관리 계획 , 결함 기록, 결함 검토, 결함 수정 , 결함 재확인 , 결함 상태 추적 및 모니터링 활동 , 최종 결함 분석 및 보고서 작성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결함 관리 측정 지표&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;결함 분포&lt;/em&gt; : 모듈 또는 컴포넌트의 특정 속성에 해당하는 결함 수 측정&lt;/li&gt;
&lt;li&gt;&lt;em&gt;결함 추세&lt;/em&gt; : 테스트 진행 시간에 따른 결함 수의 추이 분석&lt;/li&gt;
&lt;li&gt;&lt;em&gt;결함 에이징&lt;/em&gt; : 특정 결함 상태로 지속되는 시간 측정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결함 추적 순서&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;결함 등록, 결함 검토, 결함 할당, 결함 수정, 결함 종료 ,결함 해제&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fixed(고정)&lt;/em&gt; : 개발자가 필요한 변경 작업을 수행하여 결함 수정 작업을 완료한 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결함 분류&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;시스템 결함&lt;/em&gt; : 애플리케이션 환경이나 데이터베이스 처리에서 발생된 결함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;기능 결함&lt;/em&gt; : 애플리케이션의 기획, 설계, 업무 시나리오 등의 단계에서 유입된 결함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;GUI 결함&lt;/em&gt; : 사용자 화면 설계에서 발생된 결함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;문서 결함&lt;/em&gt; : 기획자, 사용자, 개발자 간의 의사소통 및 기록이 원활하지 않아 발생된 결함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결함 심각도&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High : 더 이상 프로세스를 진행할 수 없도록 만드는 결함&lt;/li&gt;
&lt;li&gt;Medium : 시스템 흐름에 영향을 미치는 결함&lt;/li&gt;
&lt;li&gt;Low : 시스템 흐름에는 영향을 미치지 않는 결함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;결함 우선순위&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결정적, 높음, 보통, 낮음 또는 즉시 해결, 주의 요망, 대기, 개선 권고 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;13-애플리케이션-성능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%B1%EB%8A%A5&quot; aria-label=&quot;13 애플리케이션 성능 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;13. 애플리케이션 성능&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;사용자가 요구한 기능을 최소한의 자원을 사용하여 최대한 많은 기능을 신속하게 처리하는 정도&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;애플리케이션 성능 측정 지표&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;처리량&lt;/code&gt; : 일정 시간 내에 애플리케이션이 처리하는 일의 양&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;응답 시간&lt;/code&gt; : 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;경과 시간&lt;/code&gt; : 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;자원 사용률&lt;/code&gt; : 애플리케이션이 의뢰한 작업을 처리하는 동안의 CPU 사용량, 메모리 사용량, 네트워크 사용량 등 자원 사용률&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;14-소스-코드-최적화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#14-%EC%86%8C%EC%8A%A4-%EC%BD%94%EB%93%9C-%EC%B5%9C%EC%A0%81%ED%99%94&quot; aria-label=&quot;14 소스 코드 최적화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;14. 소스 코드 최적화&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클린 코드&lt;/code&gt; : 누구나 쉽게 이해하고 수정 및 추가할 수 있는 단순 명료한 코드&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;나쁜 코드&lt;/code&gt; : 코드의 로직이 서로 얽혀 있는 스파게티 코드 등 프로그램의 로직이 복잡하고 이해하기 어려운 코드&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클린 코드 작성 원칙&lt;/code&gt; : 가독성, 단순성, 의존성 배제, 중복성 최소화, 추상화&lt;/li&gt;
&lt;li&gt;&lt;em&gt;소스 코드 최적화 유형&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;클래스 분할 배치 : 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높이고, 크기를 작게 작성&lt;/li&gt;
&lt;li&gt;느슨한 결합 : 인터페이스 클래스를 이용하여 추상화된 자료 구조와 메소드를 구현함으로써 클래스 간의 의존성을 최소화&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 5-서버 프로그램 구현]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 5-서버 프로그램 구현/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 5-서버 프로그램 구현/</guid><pubDate>Thu, 16 Jul 2020 06:31:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요
2020 정보 처리 기사 서버 프로그램 구현 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-개발-환경-구축---하드웨어-환경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95---%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;1 개발 환경 구축   하드웨어 환경 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 개발 환경 구축 - 하드웨어 환경&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;개발 환경 구축 : 응용 소프트웨어 개발을 위해 개발 프로젝트를 이해하고 소프트웨어 및 하드웨어 장비를 구축하는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;하드웨어 환경(클라이언트 , 서버)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;클라이언트&lt;/em&gt; : 사용자와의 인터페이스 역할&lt;/li&gt;
&lt;li&gt;&lt;em&gt;서버&lt;/em&gt; : 클라이언트와 통신하여 서비스를 제공&lt;/li&gt;
&lt;li&gt;서버의 분류&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;웹 서버&lt;/code&gt; : 클라이언트로부터 직접 요청을 받아 처리하는 서버로, 저용량의 정적 파일들을 제공&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;웹 애플리케이션서버(WAS)&lt;/code&gt; : 사용자에게 동적 서비스를 제공하기 위해 웹 서버로부터 요청을 받아 데이터 가공 작업을 수행하거나, 웹 서버와 데이터베이스 서버 또는 웹 서버와 파일 서버 사이에서 인터페이스 역할을 수행하는 서버&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터베이스 서버(DB)&lt;/code&gt; : 데이터베이스와 이를 관리하는 DBMS를 운영하는 서버&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;파일 서버&lt;/code&gt; : 데이터베이스에 저장하기에는 비효율적이거나, 서비스 제공을 목적으로 유지하는 파일들을 저장하는 서버&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-개발-환경-구축---소프트웨어-환경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95---%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;2 개발 환경 구축   소프트웨어 환경 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 개발 환경 구축 - 소프트웨어 환경&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;시스템 소프트웨어 : 운영체제(OS), 웹 서버 및 WAS 운용을 위한 서버 프로그램, DBMS 등&lt;/li&gt;
&lt;li&gt;&lt;em&gt;개발 소프트웨어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 관리 도구&lt;/code&gt; : 요구사항의 수집과 분석, 추적 등을 편리하게 도와주는 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;설계 / 모델링도구&lt;/code&gt; : UML(통합 모델링 언어)을 지원하며, 개발의 전 과정에서 설계 및 모델링을 도와주는 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구현 도구&lt;/code&gt; : 개발 언어를 통해 애플리케이션의 실제 구현을 지원하는 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;빌드 도구&lt;/code&gt; : 구현 도구를 통해 작성된 소스의 빌드 및 배포, 라이브러리 관리를 지원하는 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;테스트 도구&lt;/code&gt; : 모듈들이 요구사항에 적합하게 구현되었는지 테스트하는 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;형상 관리 도구&lt;/code&gt; : 산출물들을 버전별로 관리하여 품질 향상을 지원하는 소프트웨어&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-모듈module&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%AA%A8%EB%93%88module&quot; aria-label=&quot;3 모듈module permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 모듈(Module)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;모듈화를 통해 분리된 시스템의 각 기능들&lt;/em&gt;(= 서브루틴, 서브시스템, 소프트웨어 내의 프로그램, 작업 단위 등과 같은 의미)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모듈화(결합도의 최소화, 응집도의 최대화 추구)&lt;/code&gt; : 소프트웨어의 성능을 향상시키거나 시스템의 수정 및 재사용 유지 관리 등이 용이하도록 시스템의 기능들을 모듈 단위로 분해하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모듈의 기능적 독립성&lt;/code&gt; : 소프트웨어를 구성하는 각 모듈의 기능이 서로 독립됨을 의미하는 것, 모듈이 하나의 기능만을 수행하고 다른 모듈과의 과도한 상호작용을 배제함으로써 이루어짐&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;모듈의 독립성&lt;/code&gt;&lt;del&gt;(결약응강)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결합도(Coupling)와 응집도(Cohesion)에 의해 측정, 독립성이 높은 모듈일수록 모듈을 수정하더라도 다른 모듈들에게는 거의 영향을 미치지 않으며, 오류가 발생해도 쉽게 발견하고 해결 가능&lt;/li&gt;
&lt;li&gt;높은 독립성 :  모듈의 결합도는 약하게, 응집도는 강하게, 모듈의 크기는 작게&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-결합도coupling&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EA%B2%B0%ED%95%A9%EB%8F%84coupling&quot; aria-label=&quot;4 결합도coupling permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 결합도(Coupling)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;결합도&lt;/code&gt; : &lt;em&gt;모듈 간에 상호 의존하는 정도 또는 두 모듈 사이의 연관 관계&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;결합도 약한 순서&lt;/em&gt;(결합도가 약할수록 품질이 높음)&lt;del&gt;(자스제외공내)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;자료 결합도(Data Coupling)&lt;/code&gt; : 모듈 간의 인터페이스가 자료 요소로만 구성될 때의 결합도, 어떤 모듈이 다른 모듈을 호출하면서 매개 변수나 인수로 데이터를 넘겨주고, 호출 받은 모듈은 받은 데이터에 대한 처리 결과를 다시 돌려주는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스탬프(검인) 결합도(Stamp Coupling)&lt;/code&gt; : 모듈 간의 인터페이스로 배열이나 레코드등의 자료 구조가 전달될 때의 결합도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어 결합도(Control Coupling)&lt;/code&gt; : 어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호를 이용하여 통신하거나 제어 요소(Function Code,Switch, Tag, Flag)를 전달하는 결합도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;외부 결합도(External Coupling)&lt;/code&gt; : 어떤 모듈에서 선언한 데이터(변수)를 외부의 다른 모듈에서 참조할 때의 결합도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공통(공유) 결합도(Common Coupling)&lt;/code&gt; : 공유되는 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;내용 결합도(Content Coupling)&lt;/code&gt; : 한 모듈이 다른 모듈의 내부 기능 및 그내부 자료를 직접 참조하거나 수정할 때의 결합도&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-응집도cohesion&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%9D%91%EC%A7%91%EB%8F%84cohesion&quot; aria-label=&quot;5 응집도cohesion permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 응집도(Cohesion)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;응집도&lt;/code&gt; : &lt;em&gt;정보 은닉 개념을 확장한 것으로, 명령어나 호출문 등 모듈의 내부 요소들의 서로 관련되어 있는 정도&lt;/em&gt;, 모듈이 독립적인 기능으로 정의되어 있는 정도&lt;/li&gt;
&lt;li&gt;&lt;em&gt;응집도 강한 순서&lt;/em&gt;(응집도가 강할수록 품질이 높음)&lt;del&gt;(기순교절시논우)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능적 응집도(Functional Cohesion)&lt;/code&gt; : 모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우의 응집도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;순차적 응집도(Sequential Cohesion)&lt;/code&gt; : 모듈 내 하나의 활동으로부터 나온 출력데이터를 그 다음 활동의 입력 데이터로 사용할 경우의 응집도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;교환(통신)적 응집도(Communication Cohesion)&lt;/code&gt; : 동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 구성 요소들이 모였을 경우의 응집도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;절차적 응집도(Procedural Cohesion)&lt;/code&gt; : 모듈이 다수의 관련 기능을 가질 때 모듈안의 구성 요소들이 그 기능을 순차적으로 수행할 경우의 응집도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시간적 응집도(Temporal Cohesion)&lt;/code&gt; : 특정 시간에 처리되는 몇 개의 기능을 모아 하나의 모듈로 작성할 경우의 응집도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;논리적 응집도(Logical Cohesion)&lt;/code&gt; : 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우의 응집도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;우연적 응집도(Coincidental Cohesion)&lt;/code&gt; : 모듈 내부의 각 구성 요소들이 서로 관련없는 요소로만 구성된 경우의 응집도&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-팬인fan-in--팬아웃fan-out&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%ED%8C%AC%EC%9D%B8fan-in--%ED%8C%AC%EC%95%84%EC%9B%83fan-out&quot; aria-label=&quot;6 팬인fan in  팬아웃fan out permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 팬인(Fan-In) / 팬아웃(Fan-Out)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;팬인&lt;/code&gt; : 어떤 모듈을 제어(호출)하는 모듈의 수&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;팬아웃&lt;/code&gt; : 어떤 모듈에 의해 제어(호출)되는 모듈의 수&lt;/li&gt;
&lt;li&gt;팬인이 높다는 것은 재사용 측면에서 설계가 잘 되어있다고 볼 수 있으나, 단일 장애점이 발생할 수 있으므로 중점적인 관리 및 테스트가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/proxy/DuKjhH95zJgSkjEiGp9lulIf6vU8LC_NuV47DVfun35LpsDZejcRR3ATbqatbWY0OrdWAUf5AMe8AMfzmw0x3fJhY_y5Sf6PoOtfJ6iIZXyFYrV8Py2Hvy10B-7TzW8QPikpLNyO0_lPESqMNVm-0mWPb-UJ-4Oyt1VSw9UQDvusuv8I0I7C42yb5h9pSpw&quot; alt=&quot;img&quot; style=&quot;zoom: 80%;&quot;&gt;
&lt;h1 id=&quot;7-공통-모듈&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EA%B3%B5%ED%86%B5-%EB%AA%A8%EB%93%88&quot; aria-label=&quot;7 공통 모듈 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 공통 모듈&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공통 모듈&lt;/code&gt;  : &lt;em&gt;여러 프로그램에서 공통적으로 사용할 수 있는 모듈을 의미&lt;/em&gt;(자주 사용되는 계산식, 매번 필요한 사용자 인증 등)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;준수사항&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정확성(Correctness)&lt;/code&gt; : 시스템 구현 시 해당 기능이 필요하다는 것을 알 수 있도록 정확히 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;명확성(Clarity)&lt;/code&gt; : 해당 기능을 이해할 때 중의적으로 해석되지 않도록 명확하게 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;완전성(Completeness)&lt;/code&gt; 시스템 구현을 위해 필요한 모든 것을 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;일관성(Consistency)&lt;/code&gt; : 공통 기능들 간 상호 충돌이 발생하지 않도록 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;추적성(Traceability)&lt;/code&gt; : 기능에 대한 요구사항의 출처, 관련 시스템 등의 관계를 파악할 수 있도록 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-재사용reuse&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EC%9E%AC%EC%82%AC%EC%9A%A9reuse&quot; aria-label=&quot;8 재사용reuse permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 재사용(Reuse)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;비용과 개발 시간을 절약하기 위해 이미 개발된 기능들을 파악하고 재구성하여 새로운 시스템 또는 기능 개발에 사용하기 적합하도록 최적화 시키는 작업&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;재사용 규모에 따른 분류&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;함수와 객체&lt;/code&gt; : 클래스나 메소드 단위의 소스 코드를 재사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;컴포넌트&lt;/code&gt; : 컴포넌트 자체에 대한 수정 없이 인터페이스를 통해 통신하는 방식으로 재사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;애플리케이션&lt;/code&gt; : 공통된 기능들을 제공하는 애플리케이션을 공유하는 방식으로 재사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-dbms-접속connection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-dbms-%EC%A0%91%EC%86%8Dconnection&quot; aria-label=&quot;9 dbms 접속connection permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. DBMS 접속(Connection)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;사용자가 데이터를 사용하기 위해 응용 시스템을 이용하여 DBMS에 접근하는 것&lt;/em&gt; ,응용 시스템은 사용자로부터 매개 변수를 전달받아 SQL을 실행하고 DBMS로부터 전달받은 결과를 사용자에게 전달하는 매개체 역할을 수행, 인터넷을 통해 구동되는 웹 응용 프로그램은 웹 응용 시스템을 통해 DBMS에 접근&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;DBMS 접속 기술&lt;/em&gt; : DBMS에 접근하기 위해 사용하는 API 또는 API의 사용을 편리하게 도와주는 프레임워크 등을 의미&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;JDBC(Java DataBase Connectivity)&lt;/code&gt; : Java 언어로 다양한 종류의 데이터베이스에 접속하고 SQL문을 수행할 때 사용되는 표준 API&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ODBC(Open DataBase Connectivity)&lt;/code&gt; : 데이터베이스에 접근하기 위한 표준 개방형 API, 개발 언어에 관계없이 사용 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;MyBatis&lt;/code&gt; : JDBC 코드를 단순화하여 사용할 수 있는 SQL Mapping 기반 오픈 소스 접속 프레임워크, SQL을 거의 그대로 사용할 수 있어 SQL 친화적인 국내 환경에 적합하여 많이 사용`&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;프레임워크(Framework)&lt;/code&gt; : &lt;em&gt;특정 기능을 수행하기 위해 필요한 클래스나 인터페이스 등을 모아둔 집합체&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;동적 SQL(Dynamic SQL)&lt;/code&gt; : 다양한 조건에 따라 SQL 구문을 동적으로 변경하여 처리할 수 있는 SQL 처리 방식
사용자로부터 SQL문의 일부 또는 전부를 입력받아 실행 가능, 정적 SQL에 비해 속도가 느리지만, 상황에 따라 다양한 조건을 첨가하는 등 유연한 개발이 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정적 SQL&lt;/code&gt; : SQL 코드를 변수에 담지 않고 코드 사이에 직접 기술한 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;10-서버-개발&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%EC%84%9C%EB%B2%84-%EA%B0%9C%EB%B0%9C&quot; aria-label=&quot;10 서버 개발 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 서버 개발&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;웹 애플리케이션의 로직을 구현할 서버 프로그램을 제작하여 웹 애플리케이션 서버(WAS)에 탑재하는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;웹 애플리케이션 서버에 구현된 서버 프로그램은 웹 서버로부터 받은 요청을 처리하여 결과를 반환하는 역할 ( Java, JavaScript, Python, PHP, Ruby 등 )&lt;/li&gt;
&lt;li&gt;&lt;em&gt;서버 개발 프레임워크&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;spring&lt;/code&gt; : JAVA 기반 프레임워크, 전자정부 표준 프레임워크의 기반 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Node.js&lt;/code&gt; : JavaScript 기반 프레임워크로, 비동기 입·출력 처리와 이벤트 위주의 높은처리 성능을 갖고 있어 실시간으로 입·출력이 빈번한 애플리케이션에 적합&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Django&lt;/code&gt; : Python 기반 프레임워크, 컴포넌트의 재사용과 플러그인화를 강조하여 신속한 개발이 가능하도록 지원&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Codeigniter&lt;/code&gt; : PHP를 기반 프레임워크, 인터페이스가 간편하며 서버 자원을 적게 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Ruby on Rails&lt;/code&gt; : Ruby를 기반 프레임워크, 테스트를 위한 웹 서버를 지원하며 데이터베이스작업을 단순화, 자동화시켜 개발 코드의 길이가 짧아 신속한 개발이 가능&lt;/li&gt;
&lt;li&gt;&lt;em&gt;프레임워크의 특징&lt;/em&gt;&lt;del&gt;(모재확제)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모듈화(Modularity)&lt;/code&gt; : 캡슐화를 통해 모듈화를 강화하고 설계 및 구현의 변경에 따른 영향을 최소화함으로서 소프트웨어의 품질을 향상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;재사용성(Reusability)&lt;/code&gt; : 재사용 가능한 모듈들을 제공함으로써 개발자의 생산성을 향상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;확장성(Extensibility)&lt;/code&gt; : 다형성(Polymorphism)을 통한인터페이스 확장이 가능하여 다양한 형태와 기능을 가진 애플리케이션 개발이 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어의 역흐름(Inversion of Control)&lt;/code&gt; : 개발자가 관리하고 통제해야 하는 객체들의제어 권한을 프레임워크에 넘김으로써 생산성을 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;11-서버-개발-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%EC%84%9C%EB%B2%84-%EA%B0%9C%EB%B0%9C-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;11 서버 개발 과정 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 서버 개발 과정&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;서버 개발은 DTO/VO, SQL, DAO, Service, Controller를 각각 구현하는 과정을 통해 이루어짐&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;DTO(Data TransferObject)/VO(ValueObject) 구현&lt;/code&gt; : 데이터 교환을 위해 사용할 객체를 만드는 과정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 및 객체를 송·수신할 데이터의 자료형(Data Type)에 알맞게 생성&lt;/li&gt;
&lt;li&gt;알고리즘 등의 로직은 구현하지 않고, 변수와 데이터를 저장하고 반환하는 메소드만 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;SQL 구현&lt;/code&gt; : 데이터의 삽입, 변경, 삭제 등의 작업을 수행할 SQL문을 생성하는 과정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL문은 소스 코드 내에 직접 입력하거나, 별도의 XML 파일로 저장하여 관리&lt;/li&gt;
&lt;li&gt;XML 파일로 SQL문을 관리하는 경우 중복되는 SQL문을 최소화할 수 있고, 유지보수가 간편&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DAO(Data AccessObject) 구현&lt;/code&gt; : 데이터베이스에 접근하고, SQL을 활용하여 데이터를 실제로 조작하는 코드를 구현하는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Service 구현&lt;/code&gt; : 사용자의 요청에 응답하기 위한 로직을 구현하는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Controller 구현&lt;/code&gt; : 사용자의 요청에 적절한 서비스를 호출하여,그 결과를 사용자에게 반환하는 코드를 구현하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;12-배치-프로그램batch-program&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EB%B0%B0%EC%B9%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8batch-program&quot; aria-label=&quot;12 배치 프로그램batch program permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12. 배치 프로그램(Batch Program)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;배치 프로그램&lt;/code&gt; : &lt;em&gt;사용자와의 상호 작용 없이 여러 작업들을 미리 정해진 일련의 순서에 따라 일괄적으로 처리하는 것을 의미&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;배치 프로그램의 유형&lt;/em&gt; :&lt;del&gt;(정이온)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정기 배치&lt;/code&gt; : 정해진 시점(주로 야간)에 정기적으로 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이벤트성 배치&lt;/code&gt; : 사전에 정의해 둔 조건 충족 시 자동으로 실행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;온디맨드 배치&lt;/code&gt; : 사용자의 명시적 요구가 있을 때마다 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;배치 스케줄러(Batch Scheduler) : 일괄 처리(Batch Processing)작업이 설정된 주기에 맞춰 자동으로 수행되도록 지원해주는 도구&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스프링 배치(Spring Batch)&lt;/code&gt; : Spring Source 사와 Accenture 사가 2007년 공동 개발한 오픈소스 프레임워크. 로그 관리, 추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작 등의 기능을 제공 ( 주요 구성 요소 : Job, Job Launcher, Step, Job Repository )&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Quartz&lt;/code&gt; : 스프링 프레임워크로 개발되는 응용 프로그램들의 일괄 처리를 위한 다양한 기능을 제공하는 오픈 소스 라이브러리 ( 주요 구성 요소 : Scheduler, Job, JobDetail, Trigger)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Cron&lt;/code&gt; : 리눅스의 스케줄러 도구로 crontab 명령어를 통해 작업 예약 가능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 4-통합 구현]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 4-통합 구현/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 4-통합 구현/</guid><pubDate>Thu, 16 Jul 2020 05:31:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 통합 구현 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-통합-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%86%B5%ED%95%A9-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;1 통합 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 통합 구현&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;사용자의 요구사항에 맞춰 송·수신 모듈과 중계 모듈 간의 연계를 구현하는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;연계 시스템의 구성&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;송신 시스템과 모듈&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;송신 시스템&lt;/em&gt; : 데이터를 생성 및 변환하여 전송하는 시스템, 송신 모듈과 모니터링 기능으로 구성&lt;/li&gt;
&lt;li&gt;&lt;em&gt;송신 모듈&lt;/em&gt; : 전송 데이터를 생성하고 필요에 따라 전송 데이터의 변환 등을 수행&lt;/li&gt;
&lt;li&gt;&lt;em&gt;모니터링 기능&lt;/em&gt;: 전송 데이터의 생성부터 송신까지의 과정과 송신 상태 등을 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;수신 시스템과 모듈&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;수신 시스템&lt;/em&gt; : 수신 받은 데이터를 정제 및 변환하는 시스템, 수신 모듈과 모니터링 기능으로 구성&lt;/li&gt;
&lt;li&gt;&lt;em&gt;수신 모듈&lt;/em&gt; : 수신 데이터를 정제하고 애플리케이션이나 데이터베이스 테이블에 적합한 데이터로 변환하는 작업 등을 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;중계 시스템&lt;/code&gt; : 내·외부 시스템 간 또는 내부 시스템 간의 연계 시 사용되는 아키텍처&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 데이터&lt;/code&gt; : 송·수신 시스템 간 송·수신되는 데이터로 의미를 갖는 속성, 길이, 타입 등이 포함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크&lt;/code&gt; : 송신 시스템, 수신 시스템, 중계 시스템을 연결해주는 통신망&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-연계-요구사항-분석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%97%B0%EA%B3%84-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EB%B6%84%EC%84%9D&quot; aria-label=&quot;2 연계 요구사항 분석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 연계 요구사항 분석&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;통합 구현을 위해 사용자 요구사항을 분석하고 연계 데이터를 식별 및 표준화하여 연계 데이터를 정의하는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;연계 요구사항 분석 절차&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 현황 확인&lt;/code&gt; : 송신 시스템과 수신 시스템의 하드웨어 구성, 시스템 소프트웨어 구성, 네트워크 현황 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;시스템 구성도&lt;/em&gt; : 송·수신 시스템의 하드웨어, 소프트웨어, 네트워크 구성 등을 정의한 문서&lt;/li&gt;
&lt;li&gt;&lt;em&gt;응용 애플리케이션 구성&lt;/em&gt; : 메뉴 구조, 화면 설계, 데이터의 발생 시점, 발생 유형발생 주기 등을 정의한 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정의서 확인&lt;/code&gt; : 송신 시스템과 수신 시스템에서 연계하고자 하는 데이터 관련 테이블 정의서, 코드 정의서 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;테이블 정의서&lt;/em&gt; : 테이블에서 관리되는 컬럼들의 특징, 인덱스, 업무 규칙 등을 정의한 문서&lt;/li&gt;
&lt;li&gt;&lt;em&gt;코드 정의서&lt;/em&gt; : 데이터베이스에서 코드성 속성을 정의한 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;체크리스트 작성&lt;/code&gt;: 질의 사항을 시스템(네트워크, 보안 등) 관점과 응용(데이터, 공통 코드 등) 관점에서 연계 분석 체크리스트 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인터뷰 및 면담&lt;/code&gt;: 사용자 인터뷰 및 면담을 수행하고 회의록 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 요구사항 분석서 작성&lt;/code&gt;: 연계 시스템 구성 및 데이터 식별에 해당하는 내용에 요구사항 ID를 부여하고 요구사항 분석서 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-연계-데이터-식별-및-표준화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%97%B0%EA%B3%84-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9D%EB%B3%84-%EB%B0%8F-%ED%91%9C%EC%A4%80%ED%99%94&quot; aria-label=&quot;3 연계 데이터 식별 및 표준화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 연계 데이터 식별 및 표준화&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;연계 데이터를 구성하기 위해 연계 데이터를 식별하고 식별된 연계 데이터를 표준화한 후 이를 기반으로 연계(인터페이스) 정의서를 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;1) 연계 범위 및 항목 정의&lt;/code&gt; : 데이터 타입, 길이, 코드화 여부 등 시스템 간 연계할 정보를 상세화하여 정의&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;2) 연계 코드 변환 및 매핑&lt;/code&gt; : 정보로 전환하거나 검색 조건으로 활용하기 위해, 연계 정보 중 코드로 관리되어야 할 항목을 찾아 코드로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;3) 연계 데이터 식별자와 변경 구분 추가&lt;/code&gt; : 수신 시스템의 연계 정보에 송신 시스템의 식별자, 추가, 수정 , 삭제 중 어떤 조작을 수행하는지 식별해주는 구분 정보를 추가하고, 연계 데이터의 확인 및 모니터링을 위해 인터페이스 테이블 또는 파일에 관리 정보를 추가함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;4) 연계 데이터 표현 방법 정의&lt;/code&gt; : 연계 대상 범위 및 항목과 코드 변환 및 매핑 방식을 정의한 이후에는 연계 데이터를 구성함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;5) 연계 정의서 및 명세서 작성&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정의된 연계 항복의 데이터 타입, 길이, 공통 코드 여부 등의 속성을 확인하고 연계(인터페이스) 정의서 및 명세서 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-연계-메커니즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%97%B0%EA%B3%84-%EB%A9%94%EC%BB%A4%EB%8B%88%EC%A6%98&quot; aria-label=&quot;4 연계 메커니즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 연계 메커니즘&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;연계 메커니즘의 연계 방식 : &lt;em&gt;직접 연계 방식, 간접 연계 방식&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;직접 연결&lt;/code&gt; : &lt;em&gt;DB Connection Pool, DB Link, JDBC, API 등&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;간접 연결&lt;/code&gt; : &lt;em&gt;EAI, Web Service/ESB, Socket 등&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;방식&lt;/th&gt;
&lt;th&gt;장점&lt;/th&gt;
&lt;th&gt;단점&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;직접연계&lt;/td&gt;
&lt;td&gt;연계 및 통합 구현이 단순하고 용이&lt;br/&gt;개발 비용이 저렴 개발 기간이 짧음&lt;br/&gt; 중간 매개체 없는 직접 연계로 데이터 연계 처리 성능이 뛰어남&lt;/td&gt;
&lt;td&gt;송·수신 시스템간 결합도가 높아 시스템 변경시 오류가 발생 &lt;br/&gt;보안을 위한 암호화, 복호화 처리와 비즈니스 로직을 적용하기 어려움&lt;br/&gt; 연계 및 통합이 가능한 시스템 환경이 제한적&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;간접연계&lt;/td&gt;
&lt;td&gt;서로 다른 네트워크, 프로토콜 등 다양한 환경의 연계 및 통합이 가능&lt;br/&gt; 송·수신 시스템 간 인터페이스가 변경되어도 오류 없이 서비스가 가능&lt;br/&gt; 보안 품질 보장과 비즈니스 처리를 위한 로직(Logic)을 쉽게 반영&lt;/td&gt;
&lt;td&gt;연계 메커니즘과 아키텍처가 복잡&lt;br/&gt; 중간 매개체로 인해 성능이 저하&lt;br/&gt; 개발 및 적용 기간이 비교적 긺&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;직접 연계 방식&lt;/code&gt;: &lt;em&gt;중간 매개체 없이 송·수신 시스템이 직접 연계하는 방식&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DB Link&lt;/code&gt; : DB에서 제공하는 DB Link 객체를 이용하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DB Connection&lt;/code&gt; : 수신 시스템의 WAS(웹 애플리케이션 서버)에서 송신 시스템의 DB로 연결해주는 방식&lt;/li&gt;
&lt;li&gt;&lt;em&gt;WAS&lt;/em&gt;: 정적인 콘텐츠를 처리하는 웹 서버와 달리 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;API(Application Programming Interface)/Open API&lt;/code&gt; :데이터를 송신 시스템의 DB에서 읽어와 제공하는 애플리케이션 프로그래밍 인터페이스&lt;/li&gt;
&lt;li&gt;&lt;em&gt;API(Application Programming Interface)&lt;/em&gt; : 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 응용프로그램 개발 시 이용할 수 있도록 규칙 등에 대해 정의해 놓은 인터페이스&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Open API&lt;/em&gt; : API의 기능을 누구나 무료로 사용하여 프로그램을 개발하거나 Open API에 새로운 API를 추가할 수 있도록 공개된 API&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;JDBC(Java DataBase Connectivity)&lt;/code&gt; : Java에서 DB에 접근하여 데이터를 삽입, 삭제, 수정, 조회할 수 있도록 Java와 DB를 연결해 주는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;간접 연계 방식&lt;/code&gt;: &lt;em&gt;송·수신 시스템 사이에 중간 매개체를 두어 연계하는 방식&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 솔루션&lt;/code&gt; : EAI 서버와 송·수신 시스템에 설치되는 클라이언트(Client)를 이용하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ESB(Enterprise Service Bus)&lt;/code&gt; : 애플리케이션 간 연계, 데이터 변환, 웹 서비스 지원 등 표준 기반의 인터페이스를 제공하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Web Service&lt;/code&gt; : 웹 서비스(Web Service)에서 WSDL과 UDDI, SOAP 프로토콜을 이용하여 연계하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Socket&lt;/code&gt; : 서버는 통신을 위한 소켓을 생성하여 포트를 할당하고 클라이언트의 통신 요청 시 클라이언트와 연결하여 통신하는 네트워크 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연계 메커니즘의 구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 데이터 생성 및 추출&lt;/code&gt; : 연계 솔루션과 관계없이 응용 프로그램이나 DB 등 응용 시스템에서 연계 데이터를 생성하고 추출하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;코드 매핑 및 데이터 변환&lt;/code&gt; : 송신 시스템에서 사용하는 코드를 수신 시스템에서 사용하는 코드로 매핑 및 변환하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인터페이스 테이블 또는 파일 생성&lt;/code&gt; : 연계 데이터를 인터페이스 테이블이나 파일 형식으로 생성하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;로그(Log) 기록&lt;/code&gt; : 송·수신 시스템에서 수행되는 모든 과정에 대한 결과 및 오류에 대한 정보를 로그 테이블이나 파일에 기록하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 서버 또는 송·수신 어댑터&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;연계 서버&lt;/em&gt; : 송·수신 시스템 중 한 곳에 설치하며 인터페이스 테이블 또는 파일의 데이터를 전송 형식에 맞게 변환하고 송·수신을 수행하는 등 송·수신과 관련된 모든 처리 수행&lt;/li&gt;
&lt;li&gt;&lt;em&gt;송신 어댑터&lt;/em&gt; : 송신 시스템에 설치하며, 인터페이스 테이블 또는 파일의 데이터를 전송 형식에 맞도록 변환하고 송신 수행&lt;/li&gt;
&lt;li&gt;&lt;em&gt;수신 어댑터&lt;/em&gt; : 수신 시스템에 설치하며, 송신 시스템으로부터 수신한 데이터를 인터페이스 테이블이나 파일로 생성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;전송&lt;/code&gt; : 송신 시스템에서 생성된 연계 데이터를 네트워크 환경에 맞는 데이터로 변환한 후 수신 시스템으로 보내는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;운영 DB에 연계 데이터 반영&lt;/code&gt; : 수신된 인터페이스 테이블 또는 파일 구조의 데이터를 변환 프로그램을 이용하여 수신 시스템의 운영 DB에 반영하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-연계-장애-및-오류처리-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%97%B0%EA%B3%84-%EC%9E%A5%EC%95%A0-%EB%B0%8F-%EC%98%A4%EB%A5%98%EC%B2%98%EB%A6%AC-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;5 연계 장애 및 오류처리 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 연계 장애 및 오류처리 구현&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;연계 장애 및 오류 유형&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;연계 시스템 오류&lt;/td&gt;
&lt;td&gt;연계 서버의 실행 여부 및 송/수신, 전송 형식 변환 등의 오류. &lt;br/&gt;서버의 기능과 관련된 장애 및 오류&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연계 프로그램 오류&lt;/td&gt;
&lt;td&gt;데이터 추출을 위한 DB접근 시 권한 불충분(송신)&lt;br/&gt;운영 DB에 반영하기 위한 DB접근 권한 불충분(수신)&lt;br/&gt;데이터 변환 및 반영 시 예외 처리 미처리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연계 데이터 오류&lt;/td&gt;
&lt;td&gt;송신 시스템에서 추출된 연계 데이터가 유효하지 않은 값으로 인한 오류&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;연계 장애 시 사례 및 처리 방안&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구분&lt;/th&gt;
&lt;th&gt;사례&lt;/th&gt;
&lt;th&gt;처리방안&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;연계 시스템 오류&lt;/td&gt;
&lt;td&gt;연계서버 미구동&lt;br/&gt; 송/수신 시스템의 아이피 및 포트 접속 불가&lt;/td&gt;
&lt;td&gt;연계서버의 로그를 확인하여 원인분석 후 처리&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연계 프로그램 오류&lt;/td&gt;
&lt;td&gt;등록되지 않은 코드로 매핑 불가&lt;br/&gt; 등록된 데이터가 존재하지 않음&lt;/td&gt;
&lt;td&gt;송/수신 연계 프로그램 기록 로그 확인 및 처리 &lt;br/&gt; 데이터 재전송 및 재반영&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연계 데이터 오류&lt;/td&gt;
&lt;td&gt;유효하지 않은 일자&lt;/td&gt;
&lt;td&gt;연계 프로그램 로그를 확인하여 데이터 보정 후 재전송&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;연계 서버 장애 주요 체크리스트&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연계 서버 엔진에서 기록되는 로그 파일 내용&lt;/li&gt;
&lt;li&gt;연계 서버의 정상적 실행 여부&lt;/li&gt;
&lt;li&gt;연계 서버의 데이터 전송 변환 과정의 오류 여부&lt;/li&gt;
&lt;li&gt;송수신 대상 시스템의 정상 연결 여부(아이피 및 포트 접근 가능 여부)&lt;/li&gt;
&lt;li&gt;송수신 연계 테이블 접근 권한 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-연계-모듈의-구현-환경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%97%B0%EA%B3%84-%EB%AA%A8%EB%93%88%EC%9D%98-%EA%B5%AC%ED%98%84-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;6 연계 모듈의 구현 환경 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 연계 모듈의 구현 환경&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;연계 메커니즘에 따라 구현된 연계 시스템 환경 및 모듈 구현 환경을 의미&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EAI(Enterprise Application Integration)&lt;/code&gt; : 기업내 각종 애플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Point-to-Point&lt;/em&gt; : 가장 기본적인 애플리케이션 통합 방식으로, 애플리케이션을 1 : 1로 연결&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hub &amp;#x26; Spoke&lt;/em&gt; : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Message Bus(ESB 방식)&lt;/em&gt; : 애플리케이션 사이에 미들웨어를 두어 처리하는 방식&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bus Hybrid&lt;/em&gt; : Hub &amp;#x26; Spoke와 Message Bus의 혼합 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ESB(Enterprise Service Bus)&lt;/code&gt; : 애플리케이션 간 연계, 데이터 변환, 웹 서비스 지원 등 표준 기반의 인터페이스를 제공하는 솔루션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ESB는 애플리케이션 통합 측면에서 EAI와 유사하지만 애플리케이션 보다는 서비스 중심의 통합을 지향&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;웹 서비스(Web Service)&lt;/code&gt; : 네트워크의 정보를 표준화된 서비스 형태로 만들어 공유하는 기술로, 서비스 지향 아키텍처(SOA) 개념을 실현하는 대표적인 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SOAP(Simple Object Access Protocol)&lt;/em&gt; : HTTP, HTTPS, SMTP 등을 활용하여 XML 기반의 메시지를 네트워크 상에서 교환하는 프로토콜&lt;/li&gt;
&lt;li&gt;&lt;em&gt;WSDL(Web Services Description Language)&lt;/em&gt; : 웹 서비스명, 서비스 제공 위치, 프로토콜 등 웹 서비스에 대한 상세 정보를 XML 형식으로 구현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;UDDI(Universal Description, Discovery and Integration)&lt;/em&gt; : WSDL을 등록하여 서비스와 서비스 제공자를 검색하고 접근하는데 사용됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-xmlextensible-markup-language&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-xmlextensible-markup-language&quot; aria-label=&quot;7 xmlextensible markup language permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. XML(eXtensible Markup Language)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;XML&lt;/code&gt; : &lt;em&gt;웹브라우저 간 HTML 문법이 호환되지 않는 문제와 SGML의 복잡함을 해결하기 위하여 개발된 다목적 마크업 언어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;유니코드를 기반으로 다국어를 지원, 사용자가 직접 문서의 태그를 정의할 수 있으며, 다른 사용자가 정의한 태그 사용 가능&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;XML의 첫 문단&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;#x3C; ? ? &gt;&lt;/em&gt; : 문서의 첫 문단은 ?기호 포함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;version&lt;/em&gt; : XML 문서에서 사용된 XML버전 명시&lt;/li&gt;
&lt;li&gt;&lt;em&gt;encoding&lt;/em&gt; : XML 의 언어셋을 명시한다. 기본값은 UTF-8 이다&lt;/li&gt;
&lt;li&gt;&lt;em&gt;standalone&lt;/em&gt; : XML문서를 해석할 때 외부 문서의 참조 여부 명시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;xml&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;버전&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;언어셋&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;standalone&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;yes|no&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XML 요소(Element)의 구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요소 이름&lt;/code&gt; : 요소의 이름으로 사용자가 임의로 지정 가능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;속성=&amp;#39;속성값&amp;#39;&lt;/code&gt; : 요소와 관련된 속성과 속성값으로, 생략이 가능하다&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;내용&lt;/code&gt; : 요소의 내용으로, 생략이 가능하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;요소이름&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;속성1&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;속성값 1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;속성&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;속성값 2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 내용&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;요소이름&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;XML 예제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;euc-kr&quot; standalone=&quot;yes&quot; ?&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;student&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;school&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;한국대학교&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;YDH&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;year&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;2&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;year&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;major&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;인공지능&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;major&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;YDJ&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;year&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;3&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;year&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;major&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;웹&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;major&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;member&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SOAP(Simple Object Access Protocol)&lt;/code&gt; : 컴퓨터 네트워크 상에서 HTTP / HTTPS, SMTP 등을 이용하여 XML을 교환하기 위한 통신 규약&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Envelope&lt;/em&gt; : XML문서를 SOAP 메시지로 정의하는 것으로, 메시지에 대한 요소와 접근 방법을 정의&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Header&lt;/em&gt; : SOAP 메시지에 포함되는 웹 서비스를 정의하는 것으로, 생략이 가능하다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Body&lt;/em&gt; : 실제 SOAP 메시지가 포함됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SOAP 요청&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;POST /InStock HTTP/1.1
Host: www.example.org
Content-Type: application/soap+xml; charset=utf-8
Content-Length: nnn

&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Envelope&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;soap&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2001/12/soap-envelope&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;encodingStyle&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2001/12/soap-encoding&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Body&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;m&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.example.org/stock&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;GetStockPrice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;StockName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;IBM&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;StockName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;GetStockPrice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Envelope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;SOAP 응답&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;HTTP/1.1 200 OK
Content-Type: application/soap+xml; charset=utf-8
Content-Length: nnn

&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Envelope&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;soap&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2001/12/soap-envelope&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;encodingStyle&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2001/12/soap-encoding&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Body&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;m&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.example.org/stock&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;GetStockPriceResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;Price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;34.5&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;Price&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;m:&lt;/span&gt;GetStockPriceResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token namespace&quot;&gt;soap:&lt;/span&gt;Envelope&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WSDL(Web Services Description Language)&lt;/code&gt; : 웹 서비스 관련 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어&lt;/li&gt;
&lt;li&gt;XML로 작성되며 UDDL의 기초&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;types&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        자료형 정의
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;types&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        인수와 리턴값 정의
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;portType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        	메소드 정의
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;operation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;portType&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;binding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 		통신방법 정의
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;binding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;웹 서비스 URL&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;service&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RESTful 프로토콜&lt;/code&gt; : HTTP와 REST의 원칙을 사용하여 구성되는 웹 서비스로, HTTP와 자원을 관리하는데 사용되는 웹 서비스 API의 집합&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;JSON(JavaScript Object Notation)&lt;/code&gt; : 속성-값 쌍(Attribute-Value Pairs)으로 이루어진 데이터 객체를 전달하기 위해 사람이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷_, 비동기 처리에 사용되는 AJAX에서 XML을 대체하여 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;AJAX (Asynchronous Javascript And XML)&lt;/code&gt;: JavaScript의 라이브러리중 하나이며 Asynchronous Javascript And Xml(비동기식 자바스크립트와 xml)의 약자이다. 브라우저가 가지고있는 XMLHttpRequest 객체를 이용해서 전체 페이지를 새로 고치지 않고도 페이지의 일부만을 위한 데이터를 로드하는 기법 이며 JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-연계-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EC%97%B0%EA%B3%84-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;8 연계 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 연계 테스트&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;구축된 연계 시스템과 연계 시스템의 구성 요소가 정상적으로 동작하는지 확인하는 활동&lt;/li&gt;
&lt;li&gt;&lt;em&gt;연계 테스트 절차&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 테스트 케이스 작성&lt;/code&gt; : 연계 시스템 간의 데이터 및 프로세스의 흐름을 분석하여 필요한 테스트 항목을 도출하는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 테스트 환경 구축&lt;/code&gt; : 테스트의 일정, 방법, 절차, 소요 시간 등을 송·수신 기관과의 협의를 통해 결정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 테스트 수행&lt;/code&gt; : 연계 응용 프로그램을 실행하여 연계 테스트 케이스의 시험 항목 및 처리 절차 등을 실제로 진행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연계 테스트 수행 결과 검증&lt;/code&gt; : 연계 테스트 케이스의 시험 항목 및 처리 절차를 수행한 결과가 예상 결과와 동일한지를 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-디자인-패턴&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;9 디자인 패턴 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 디자인 패턴&lt;/h1&gt;
&lt;hr&gt;
&lt;h4&gt;1) 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;소프트웨어 공학론 안의 좋은 코드(객체 간 응집도는 높이고, 결합도는 낮게 하여 요구 사항 변경 시 코드 변경을 최소화 할 수 있는 코드)를 설계하기 위한 일종의 설계 방법론&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;소프트웨어 프로그래머들이 유용하다고 생각되는 객체들 간의 일반적인 상호작용 방법들을 모은 목록&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 디자인 패턴의 분류&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;목적&lt;/th&gt;
&lt;th&gt;생성 패턴(Creation Pattern)&lt;br /&gt;(FSABP)&lt;/th&gt;
&lt;th&gt;구조 패턴(Structural Pattern)&lt;br /&gt;(ABCD2FP)&lt;/th&gt;
&lt;th&gt;행위 패턴(Behavioral Pattern)&lt;br /&gt;(TII CCS SSMMVO)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;의미&lt;/td&gt;
&lt;td&gt;객체의 생성 방식을 결정&lt;/td&gt;
&lt;td&gt;객체를 조직화하는데 유용한 패턴&lt;/td&gt;
&lt;td&gt;객체의 행위를 조직, 관리, 연합하는 데 사용하는 패턴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;클래스&lt;/td&gt;
&lt;td&gt;Factory method&lt;/td&gt;
&lt;td&gt;Adapter&lt;/td&gt;
&lt;td&gt;Template method&lt;br /&gt;Interpreter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;객체&lt;/td&gt;
&lt;td&gt;Singleton&lt;br /&gt;Abstract factory&lt;br /&gt;builder&lt;br /&gt;Prototype&lt;/td&gt;
&lt;td&gt;Bridge&lt;br /&gt;composite&lt;br /&gt;Decorator&lt;br /&gt;Facade&lt;br /&gt;Fly weight&lt;br /&gt;Proxy&lt;/td&gt;
&lt;td&gt;Iterator&lt;br /&gt;Command&lt;br /&gt;Chain of Responsibility&lt;br /&gt;State&lt;br /&gt;Strategy&lt;br /&gt;Mediator&lt;br /&gt;Memento&lt;br /&gt;Visitor&lt;br /&gt;Observer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;3) 생성 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Factory method&lt;/code&gt;: &lt;em&gt;객체를 생성하기 위한 인터페이스를 따로 정의하며 어떤 클래스를 객체를 생성하는 일을 서브 클래스가 담당하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Singleton&lt;/code&gt; : &lt;em&gt;지정한 클래스의 인스턴스가 반드시 한개만 존재하도록 하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Abstract factory&lt;/code&gt; : &lt;em&gt;구체적인 클래스를 지정하지 않고 관련성을 갖는 객체들의 집합을 생성하거나 서로 독립적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Builder&lt;/code&gt; : &lt;em&gt;복잡한 객체를 생성하는 방법과 표현하는 방법을 정의하는 클래스를 별도로 분리해 서로 다른 표현이라도 이를 생성할 수 있는 동일한 절차를 제공하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Prototype&lt;/code&gt; : &lt;em&gt;원본이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 견본을 복사해서 새로운 객체를 생성하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 구조 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Adapter&lt;/code&gt;: &lt;em&gt;클래스의 재사용성을 높이기 위해 클래스 간의 기능을 변환 제공하여 호환성을 확보하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Bridge&lt;/code&gt; : &lt;em&gt;인터페이스(API)가 서로 다른 클래스를 연결하는 패턴으로 기능의 계층과 구현의 계층을 연결시키는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Composite&lt;/code&gt; : &lt;em&gt;복잡한 객체 구조를 표현하여 객체 집합 속에 또 다른 객체 집합을 갖는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Decorator&lt;/code&gt; : &lt;em&gt;새로운 기능이 추가될 떄마다 새로운 객체를 만들고, 이전 객체의 기능은 새로운 객체 내부에서도 그대로 유지, 보장해주는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Facade&lt;/code&gt; : &lt;em&gt;서브 시스템이 복잡할 경우 간단한 인터페이스를 통해 서브 시스템의 주요 기능을 사용할 수 있는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Fly weight&lt;/code&gt; : &lt;em&gt;인스턴스를 가능한 한 공유시켜 불필요한 생성을 하지 않도록 하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Proxy&lt;/code&gt; : &lt;em&gt;객체 접근을 제어하려는 목적으로 인터페이스 역할을 하는 객체를 사용하여 제어하는 패턴&lt;/em&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 행위 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Template method&lt;/code&gt; : &lt;em&gt;상위 클래스에서 처리의 흐름을 정의하고 하위 클래스에서 구체적인 내용을 재정의하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Interperter&lt;/code&gt; : &lt;em&gt;간단한 언어의 문법을 정의하는 방법과 그 언어로 문장을 구성하는 방법, 문장을 해석하는 방법을 제시하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Iterator&lt;/code&gt; : &lt;em&gt;집합 객체 요소들의 내부 표현 방식을 공개하지 않고, 순차적으로 접근하는 구조를 제공하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Command&lt;/code&gt; : &lt;em&gt;요청 자체를 객체화(캡슐화)하고 매개변수(파라미터)를 추가하여 여러가지 요구사항을 추가할 수 있는 패턴(로그기록, 작업취소 지원)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Chain of Responsibility&lt;/code&gt; : &lt;em&gt;요청을 처리할 수 있는 기회를 하나 이상의 객체에 부여함으로써 객체 간의 결합도를 없애려는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;State&lt;/code&gt; : &lt;em&gt;상태를 일반적인 데이터 변수로 두지 않고 객체로 만들어 그 상태에 따른 행동들을 분석하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Strategy&lt;/code&gt; : &lt;em&gt;상황에 따라 알고리즘이 변경할 필요가 있을 때, 각 알고리즘 클래스들을 공통된 인터페이스에 맞게 구현하여 다형성을 활용하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Mendiator&lt;/code&gt; : &lt;em&gt;중재자를 통하 한 집합에 속해 있는 객체들의 상호작용을 캡슐화하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Memento&lt;/code&gt; : &lt;em&gt;어떤 시점에서의 객체 상태를 저장해 두었다가 필요 시 객체를 그 시점의 상테로 되돌리는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Visitor&lt;/code&gt; : &lt;em&gt;데이터 구조 안을 돌아다니는 주체인 방문자를 나타내는 클래스를 준비해서 그 클래스에게 처리를 맡김으로써 기능 추가 시 유용함을 제공하는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Observer&lt;/code&gt; : &lt;em&gt;한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들에게 통지되고 필요시 자동으로 내용이 갱신되는 패턴&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 3-데이터 입출력 구현]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 3-데이터 입출력 구현/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 3-데이터 입출력 구현/</guid><pubDate>Wed, 15 Jul 2020 17:22:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 데이터 입출력 구현 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-데이터-모델의-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;1 데이터 모델의 개념 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 데이터 모델의 개념&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 모델&lt;/code&gt; : &lt;em&gt;현실 세계의 정보들을 컴퓨터에 표현하기 위해서 단순화, 추상화하여 체계적으로 표현한 개념적 모형&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 모델 구성 요소&lt;del&gt;(계에속어관릴)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개체(Entity=엔티티)&lt;/code&gt; : 데이터베이스에 표현하려는 것으로, 사람이 생각하는 개념이나 정보 단위 같은 현실 세계의 대상체&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;속성(Attribute=어트리뷰트)&lt;/code&gt; : 데이터의 가장 작은 논리적 단위로서 파일 구조상의 데이터 항목 또는 데이터 필드에 해당&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계(Relationship=릴레이션쉽)&lt;/code&gt; : 개체 간의 관계 또는 속성 간의 논리적인 연결을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 모델의 종류&lt;del&gt;(개논물)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개념적 데이터 모델&lt;/code&gt; : 현실 세계에 대한 인간의 이해를 돕기 위해 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;논리적 데이터 모델&lt;/code&gt; : 개념적 모델링 과정에서 얻은 개념적 구조를 컴퓨터가 이해하고 처리할 수 있는 컴퓨터 세계의 환경에 맞도록 변환하는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;물리적 데이터 모델&lt;/code&gt; : 실제 컴퓨터에 데이터가 저장되는 방법으로 정의하는 물리 데이터베이스 설계 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 모델에 표시할 요소&lt;del&gt;(구연제물)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구조(Structure)&lt;/code&gt; : 논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질을 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연산(Operation)&lt;/code&gt; : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제약 조건(Constraint)&lt;/code&gt; : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;물리적 데이터 모델&lt;/code&gt; : 실제 컴퓨터에 데이터가 저장되는 방법을 정의하는 물리 데이터베이스 설계 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-이상함수적-종속정규화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9D%B4%EC%83%81%ED%95%A8%EC%88%98%EC%A0%81-%EC%A2%85%EC%86%8D%EC%A0%95%EA%B7%9C%ED%99%94&quot; aria-label=&quot;2 이상함수적 종속정규화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 이상/함수적 종속/정규화&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;이상(Anomaly)&lt;/code&gt;&lt;em&gt;테이블에서 일부 속성들의 종속으로 인해 데이터의 중복이 발생하고, 이로 인해 테이블 조작 시 문제가 발생하는 현상&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(삽삭갱)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;삽입 이상&lt;/code&gt; : 테이블에 데이터를 삽입할 때 의도와는 상관없이 원하지 않은 값들로 인해 삽입할 수 없게 되는 현상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;삭제 이상&lt;/code&gt; : 테이블에서 한 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;갱신 이상&lt;/code&gt; : 테이블에서 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성이 생기는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;함수적 종속(Functional Dependency)&lt;/code&gt; : 어떤 테이블 R에서 X와 Y를 각각 R의 속성 집합의 부분 집합이라 할 때 속성 X의 값 각각에 대해 시간에 관계없이 항상 속성 Y의 값이 오직 하나만 연관되어 있을 때 Y는 X에 함수적 종속 또는 X가 Y를 함수적으로 결정한다고 하고, X → Y로 표기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X → Y의 관계를 갖는 속성 X와 Y에서 X를 &lt;em&gt;결정자(Determinant)&lt;/em&gt;라 하고, Y를 &lt;em&gt;종속자(Dependent)&lt;/em&gt;라고 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;완전 함수적 종속&lt;/code&gt; : 어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 어떠한 진부분 집합 Z(즉, Z ⊂ X)에도 함수적 종속이 아닐 때 &lt;em&gt;속성 Y는 속성 집합 X에 완전 함수적 종속&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;부분 함수적 종속&lt;/code&gt; : 어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 임의의 진부분 집합에 대해 함수적 종속일 때, &lt;em&gt;속성 Y는 속성 집합 X에 부분 함수적 종속&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;정규화&lt;/code&gt; : &lt;em&gt;데이터베이스 이상현상의 원인이 되는 데이터 중복성을 제거하여 데이터의 무결성을 보존하는 기법&lt;/em&gt;&lt;del&gt;(정 데이데중데무)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(도부이걸다조)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;비정규 릴레이션 : &lt;code class=&quot;language-text&quot;&gt;도메인&lt;/code&gt;이 원자값&lt;/li&gt;
&lt;li&gt;1NF : &lt;code class=&quot;language-text&quot;&gt;부분적 함수&lt;/code&gt; 종속 제거&lt;/li&gt;
&lt;li&gt;2NF : &lt;code class=&quot;language-text&quot;&gt;이행적 함수&lt;/code&gt; 종속 제거&lt;/li&gt;
&lt;li&gt;3NF : &lt;code class=&quot;language-text&quot;&gt;결정자&lt;/code&gt;이면서 후보키가 아닌 것 제거&lt;/li&gt;
&lt;li&gt;BCNF : &lt;code class=&quot;language-text&quot;&gt;다치 종속&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4NF : &lt;code class=&quot;language-text&quot;&gt;조인 종속성&lt;/code&gt; 이용&lt;/li&gt;
&lt;li&gt;5NF : 이행적 함수적 종속 (A → B이고 B → C일 때 A → C를 만족하는 관계)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-정규화normalization의-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A0%95%EA%B7%9C%ED%99%94normalization%EC%9D%98-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;3 정규화normalization의 과정 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 정규화(Normalization)의 과정&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제 1정규형(1NF; First Normal Form)&lt;/code&gt;  : 릴레이션에 속한 모든 속성의 도메인이 원자 값으로만 구성되어 있음&lt;/li&gt;
&lt;li&gt;변경 전&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;학번&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;과목코드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;성적&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;이름&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE011101, CSE022202, CSE033303&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A+, A, B+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;YDH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;변경 후&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;학번&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;과목코드&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;성적&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;이름&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;YDH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE022202&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;YDH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE033303&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;B+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;YDH&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제 2정규형 (2NF; Second Normal Form)&lt;/code&gt;  : 제1정규형에 속하면서, 기본키가 아닌 모든 속성이 기본키에 완전 함수 종속&lt;/li&gt;
&lt;li&gt;변경 전&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;학번&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;과목코드&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;성적&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;학부&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;등록금&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE022202&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE033303&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;B+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21300758&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MEC011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;F&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;경영학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21400001&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;POD032939&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;C+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;기계공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21500399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;D&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 함수 종속 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;학번, 과목코드 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 성적
학번, 과목코드 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 학부
학번, 과목코드 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 등록금
학번 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 학부
학번 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 등록금
학부 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 등록금&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;현재 학번-&gt;학부, 학번-&gt;등록금 두개의 부분 함수 종속성을 가지고 있고 이를 제거&lt;/li&gt;
&lt;li&gt;변경 후&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;학번&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;학부&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;등록금&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21300758&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;경영학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21400001&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;기계공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21500399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;학번&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;과목코드&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;성적&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE022202&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE033303&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;B+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21300758&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;MEC011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21400001&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;POD032939&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;C+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21500399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CSE011101&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제 3 정규형 (3NF; Third Normal Form)&lt;/code&gt; :제 2 정규형에 속하면서, 기본키가 아닌 모든 속성이 기본키에 이행적 함수 종속이 되지 않음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이행적 함수 종속(Transitive Functional Dependency)&lt;/code&gt;:  X, Y, Z 에 대해 X-&gt;Y 이고 Y-&gt;Z 이면 X-&gt;Z 가 성립한다. 이를 Z 가 X 에 이행적으로 함수 종속되었다고 한다.&lt;/li&gt;
&lt;li&gt;변경 전&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;학번&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;학부&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;등록금&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21300758&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;경영학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21400001&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;기계공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21500399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;테이블에서 함수적 종속성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;학번 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 학부
학부 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 등록금
학번 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 등록금&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;X-&gt;Y, Y-&gt;Z 함수적 종속관계로 인해 X-&gt;Z 의 이행적 함수 종속 관계가 나타나면 (X, Y), (Y, Z) 두 릴레이션으로 분해한다.&lt;/li&gt;
&lt;li&gt;변경 후&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;학번&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;학부&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20800399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21300758&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;경영학부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21400001&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;기계공학부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21500399&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;em&gt;학부&lt;/em&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;등록금&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;컴퓨터공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;350&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;경영학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;300&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;기계공학부&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;BCNF&lt;/code&gt; : 어떤 테이블의 determinant 가 후보키 인 경우&lt;/li&gt;
&lt;li&gt;변경 전&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;사용자 명&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;책이름&lt;/th&gt;
&lt;th&gt;배급사&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;홍길동&lt;/td&gt;
&lt;td&gt;블록체인 입문&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;홍길동&lt;/td&gt;
&lt;td&gt;자바 입문&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;블록체인 입문&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;자연어 처리 심화&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;인공지능 입문&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;성춘향&lt;/td&gt;
&lt;td&gt;자바 입문&lt;/td&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;성춘향&lt;/td&gt;
&lt;td&gt;인공지능 입문&lt;/td&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;테이블에서 함수적 종속성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;사용자명, 책이름 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 배급사
배급사 -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 책이름&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 테이블의 후보키는 ”사용자 명’, ‘책이름’ 이고 이 두 컬럼을 통해 레코드를 구별할 수 있지만 배급사에 의해 책이름이 결정되는 관계가 존재하여 BCNF 를 만족하지 않음&lt;/li&gt;
&lt;li&gt;변경 후&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;사용자 명&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;책이름&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;홍길동&lt;/td&gt;
&lt;td&gt;블록체인 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;홍길동&lt;/td&gt;
&lt;td&gt;자바 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;블록체인 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;자연어 처리 심화&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;임꺽정&lt;/td&gt;
&lt;td&gt;인공지능 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;성춘향&lt;/td&gt;
&lt;td&gt;자바 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;성춘향&lt;/td&gt;
&lt;td&gt;인공지능 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;배급사&lt;/em&gt;&lt;/th&gt;
&lt;th&gt;책이름&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;블록체인 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;U&lt;/td&gt;
&lt;td&gt;자바 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;자연어 처리 심화&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;K&lt;/td&gt;
&lt;td&gt;인공지능 입문&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;4-논리-데이터-모델의-물리-데이터-모델로-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%85%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EB%AC%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EB%A1%9C-%EB%B3%80%ED%99%98&quot; aria-label=&quot;4 논리 데이터 모델의 물리 데이터 모델로 변환 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 논리 데이터 모델의 물리 데이터 모델로 변환&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;엔티티를 테이블로 변환&lt;/code&gt; : 논리 데이터 모델에서 정의된 엔티티를 물리 데이터 모델의 테이블로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;슈퍼타입 기준 테이블 변환&lt;/code&gt; : 서브타입을 슈퍼타입에 통합하여 하나의 테이블로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;서브타입 기준 테이블 변환&lt;/code&gt; : 슈퍼타입 속성들을 각각의 서브타입에 추가하여 서브타입들을 개별적인 테이블로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개별타입 기준 테이블 변환&lt;/code&gt; : 슈퍼타입과 서브타입들을 각각의 개별적인 테이블로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;속성을 컬럼으로 변환&lt;/code&gt; : 논리 데이터 모델에서 정의한 속성을 물리 데이터 모델의 컬럼으로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계를 외래키로 변환&lt;/code&gt; : 논리 데이터 모델에서 정의된 관계는 기본키와 이를 참조하는 외래키로 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-반정규화denormalization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EB%B0%98%EC%A0%95%EA%B7%9C%ED%99%94denormalization&quot; aria-label=&quot;5 반정규화denormalization permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 반정규화(Denormalization)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;반정규화&lt;/code&gt; : &lt;em&gt;정규화된 데이터 모델을 통합, 중복, 분리하는 과정으로, 의도적으로 정규화 원칙을 위배하는 행위&lt;/em&gt; &lt;del&gt;(반정데통중분 의정위)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;테이블 통합&lt;/em&gt; : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 개의 테이블이 조인되는 경우가 많아 하나의 테이블로 합쳐 사용하는 것이 성능 향상에 도움이 될 경우 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;테이블 분할&lt;/em&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;수평 분할&lt;/code&gt; : 레코드를 기준으로 테이블을 분할하는 것으로, 레코드별로 사용 빈도의 차이가 큰 경우 사용 빈도에 따라 테이블을 분할&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;수직 분할&lt;/code&gt; : 하나의 테이블에 속성이 너무 많을 경우 속성을 기준으로 테이블을 분할&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;6 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 설계&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;인덱스&lt;/code&gt; : &lt;em&gt;데이터 레코드를 빠르게 접근하기 위해 키 값, 포인터 쌍으로 구성되는 데이터 구조&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인덱스 키의 순서에 따라 데이터가 정렬되어 저장되는 방식인 &lt;em&gt;클러스터드 인덱스&lt;/em&gt;와 인덱스의 키 값만 정렬되어 있을 뿐 실제 데이터는 정렬되지 않는 방식인 &lt;em&gt;넌클러스터드 인덱스&lt;/em&gt;가 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;트리 기반 인덱스&lt;/code&gt; : 인덱스를 저장하는 블록들이 트리 구조를 이루고 있는 것으로, 상용 DBMS에서는 트리 구조 기반의 B+ 트리 인덱스를 주로 활용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;비트맵 인덱스&lt;/code&gt; : 인덱스 컬럼의 데이터를 Bit 값인 0 또는 1로 변환하여 인덱스 키로 사용하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;함수 기반 인덱스&lt;/code&gt; : 컬럼의 값 대신 컬럼에 특정 함수(Function)나 수식(Expression)을 적용하여 산출된 값을 사용하는 것으로, B+ 트리 인덱스 또는 비트맵 인덱스를 생성하여 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;A비트맵 조인 인덱스&lt;/code&gt; : 다수의 조인된 객체로 구성된 인덱스로, 단일 객체로 구성된 일반적인 인덱스와 액세스 방법이 다름&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;도메인 인덱스&lt;/code&gt; : 개발자가 필요한 인덱스를 직접 만들어 사용하는 것으로, 확장형 인덱스(Extensible Index)라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;뷰&lt;/code&gt; : &lt;em&gt;사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 하나 이상의 기본 테이블로부터 유도된, 이름을 가지는 가상 테이블&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;저장장치 내에 물리적으로 존재하지 않지만 사용자에게는 있는 것처럼 간주&lt;/li&gt;
&lt;li&gt;CREATE문으로 정의하고, DROP문으로 제거&lt;/li&gt;
&lt;li&gt;데이터의 논리적 독립성을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;클러스터&lt;/code&gt; : &lt;em&gt;데이터 저장 시 데이터 엑세스 효율을 향상시키기 위해 동일한 성격의 데이터를 동일한 데이터 블록에 저장하는 물리적 방법&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클러스터링 키로 지정된 컬럼 값의 순서대로 저장되고, 여러 개의 테이블이 하나의 클러스터에 저장&lt;/li&gt;
&lt;li&gt;클러스터링된 테이블은 데이터 조회 속도는 향상시키지만 데이터 입력, 수정, 삭제에 대한 성능은 저하&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;단일 테이블 클러스터링&lt;/code&gt; : 처리 범위가 넓은 경우&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;다중 테이블  클러스터링&lt;/code&gt;: 조인이 많이 발생하는 경우 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;파티션&lt;/code&gt;: &lt;em&gt;대용량의 테이블이나 인덱스를 작은 논리적 단위로 나누는 것&lt;/em&gt; &lt;del&gt;(파 데테인작논)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;(범해조)&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;범위 분할&lt;/code&gt; : 지정한 열의 값을 기준으로 분할&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;해시 분할&lt;/code&gt; : 해시 함수를 적용한 결과 값에 따라 데이터를 분할&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;조합 분할&lt;/code&gt; : 범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할&lt;/li&gt;
&lt;li&gt;&lt;em&gt;인덱스 파티션&lt;/em&gt; : 파티션된 테이블의 데이터를 관리하기 위해 인덱스를 나눈 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-트랜잭션transaction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98transaction&quot; aria-label=&quot;7 트랜잭션transaction permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 트랜잭션(Transaction)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;트랜잭션&lt;/code&gt; : &lt;em&gt;데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산&lt;/em&gt;&lt;del&gt;(원일독지)&lt;/del&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;원자성(Atomicity)&lt;/code&gt; : 트랜잭션의 연산은 데이터베이스에 모두 반영되도록 완료(Commit)되든지 아니면 전혀 반영되지 않도록 복구(Rollback)되어야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;일관성(Consistency)&lt;/code&gt; : 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;독립성(Isolation)&lt;/code&gt; : 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;지속성(Durability)&lt;/code&gt; : 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-데이터베이스-용량-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9A%A9%EB%9F%89-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;8 데이터베이스 용량 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 데이터베이스 용량 설계&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 저장될 공간을 정의하는 것, 테이블에 저장할 데이터양과 인덱스, 클러스터 등이 차지하는 공간 등을 예측하여 반영&lt;/li&gt;
&lt;li&gt;데이터베이스의 용량을 정확히 산정하여 디스크의 저장 공간을 효과적으로 사용하고 확장성 및 가용성을 증가&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 접근성을 향상시키는 설계 방법&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 테이블스페이스와 인덱스의 테이블 스페이스를 분리하여 구성&lt;/li&gt;
&lt;li&gt;테이블 스페이스와 임시 테이블스페이스를 분리하여 구성&lt;/li&gt;
&lt;li&gt;테이블을 마스터 테이블과 트랜잭션 테이블로 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 2-요구 사항 확인]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 2-요구 사항 확인/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 2-요구 사항 확인/</guid><pubDate>Wed, 15 Jul 2020 17:21:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 요구 사항 확인 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-현행-시스템-파악-절차&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%ED%98%84%ED%96%89-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%8C%8C%EC%95%85-%EC%A0%88%EC%B0%A8&quot; aria-label=&quot;1 현행 시스템 파악 절차 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 현행 시스템 파악 절차&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 구성 파악&lt;/code&gt; : 현행 시스템의 구성은 조직의 주요 업무를 담당하는 기간 업무와 이를 지원하는 지원 업무로 구분하여 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 기능 파악&lt;/code&gt; : 현행 시스템의 기능은 단위 업무 시스템이 현재 제공하는 기능들을 주요 기능과 하부 기능, 세부 기능으로 구분하여 계층형으로 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 인터페이스 파악&lt;/code&gt; : 현행 시스템의 인터페이스에는 단위 업무 시스템 간에 주고받는 데이터의 종류, 형식, 프로토콜, 연계 유형, 주기 등을 명시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;아키텍처 구성 파악&lt;/code&gt; : 현행 시스템의 아키텍처 구성은 기간 업무 수행에 어떠한 기술 요소들이 사용되는지 최상위 수준에서 계층별로 표현한 아키텍처 구성도로 작성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 구성 파악&lt;/code&gt; : 소프트웨어 구성에는 단위 업무 시스템별로 업무 처리를 위해 설치되어 있는 소프트웨어들의 제품명, 용도, 라이선스 적용 방식, 라이선스 수 등을 명시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;하드웨어 구성 파악&lt;/code&gt; : 하드웨어 구성에는 단위 업무 시스템들이 운용되는 서버의 주요 사양과 수량, 그리고 이중화의 적용 여부를 명시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 구성 파악&lt;/code&gt; : 네트워크 구성은 업무 시스템들의 네트워크 구성을 파악할 수 있도록 서버의 위치, 서버 
간의 네트워크 연결 방식을 네트워크 구성도로 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-개발-기술-환경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%88%A0-%ED%99%98%EA%B2%BD&quot; aria-label=&quot;2 개발 기술 환경 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 개발 기술 환경&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;운영체제(OS)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효율적으로 사용할 수 있도록 환경을 제공하는 소프트웨어&lt;/li&gt;
&lt;li&gt;고려사항 : &lt;em&gt;가용성, 성능, 기술 지원, 구축 비용, 주변 기기&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;데이터베이스 관리 시스템(DBMS)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자와  데이터베이스  사이에서  사용자의 요구에 따라 정보를 생성해 주고, 데이터베이스를 관리해 주는 소프트웨어&lt;/li&gt;
&lt;li&gt;고려사항 : &lt;em&gt;가용성, 성능, 기술 지원, 상호 호환성, 구축 비용&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;웹 애플리케이션 서버(WAS)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정적인 콘텐츠 처리를 하는 웹 서버와 달리 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어&lt;/li&gt;
&lt;li&gt;고려사항  : &lt;em&gt;가용성, 성능, 기술 지원, 구축 비용&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;오픈 소스&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;누구나 별다른 제한 없이 사용할 수 있도록 소스 코드를 공개한 것으로 오픈 소스 라이선스를 만족하는 소프트웨어&lt;/li&gt;
&lt;li&gt;고려사항 : &lt;em&gt;라이선스의 종류, 사용자 수, 기술의 지속 가능성&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-요구사항-유형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EC%9C%A0%ED%98%95&quot; aria-label=&quot;3 요구사항 유형 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 요구사항 유형&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기능 요구사항&lt;/code&gt; : 시스템이 갖춰야할 필수적인 기능에 대한 요구사항&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;비기능 요구사항&lt;/code&gt; : 필수 기능 외의 품질이나 제약사항에 관한 요구사항&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용자 요구사항&lt;/code&gt; : 사용자 관점에서 본 시스템이 제공해야 할 요구사항&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 요구사항&lt;/code&gt; : 개발자 관점에서 본 시스템 전체가 사용자와 다른 시스템에 제공해야 할 요구사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-요구사항-개발-프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B0%9C%EB%B0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;4 요구사항 개발 프로세스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 요구사항 개발 프로세스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 도출&lt;/code&gt; : 시스템, 사용자, 그리고 시스템 개발에 관련된 사람들이 서로 의견을 교환하여 요구사항이 어디에 있는지, 어떻게 수집할 것인지를 식별하고 이해하는 과정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주요 기법 : 인터뷰, 설문, 브레인스토밍, 워크샵, 프로토타이핑, 유스케이스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 분석&lt;/code&gt; : 개발 대상에 대한 사용자의 요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 이를 걸러내기 위한 과정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비용과 일정에 대한 제약 설정, 타당성 조사&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 명세&lt;/code&gt; : 요구사항을 체계적으로 분석한 후 승인될 수 있도록 문서화&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 확인&lt;/code&gt; : 개발 자원을 요구사항에 할당하기 전에 요구사항 명세서가 정확하고 완전하게 작성되었는지를 검토&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-요구사항-분석-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EB%B6%84%EC%84%9D-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;5 요구사항 분석 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 요구사항 분석 기법&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;개발 대상에 대한 사용자의 요구사항 중 명확하지 않거나 모호한 부분을 걸러내기 위한 방법&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 분류&lt;/code&gt;: 요구사항을 명확히 확인할 수 있도록 요구사항을 분류함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개념 모델링&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;모델&lt;/em&gt; : 요구사항을 보다 쉽게 이해할 수 있도록 현실 세계의 상황을 단순화하여 개념적으로 표현한 것&lt;/li&gt;
&lt;li&gt;&lt;em&gt;모델링&lt;/em&gt; : 모델을 만드는 과정&lt;/li&gt;
&lt;li&gt;개념 모델 종류 : 유스케이스 다이어그램, 데이터 흐름 모델, 상태 모델, 목표기반 모델, 사용자 인터액션, 객체 모델, 데이터 모델 등&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 할당&lt;/code&gt; : 요구사항을 만족시키기 위한 구성 요소를 식별하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 협상&lt;/code&gt; : 요구사항이 서로 충돌될 경우 이를 적절히 해결하는 과정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정형 분석&lt;/code&gt;: 구문(Syntax)과 의미(Semantics)를 갖는 정형화된 언어를 이용해 요구사항 분석&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;자료 흐름도(DFD) (=자료 흐름 그래프, 버블 차트)&lt;/code&gt; : 요구사항 분석에서 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법&lt;/li&gt;
&lt;li&gt;&lt;em&gt;프로세스&lt;/em&gt; : 자료를 변환시키는 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고 함. 원이나 둥근 사각형으로 표시하고 그 안에 프로세스 이름을 기입&lt;/li&gt;
&lt;li&gt;&lt;em&gt;자료 흐름&lt;/em&gt; : 자료의 이동(흐름)이나 연관관계를 나타냄. 화살표 위에 자료의 이름을 기입&lt;/li&gt;
&lt;li&gt;&lt;em&gt;자료 저장소&lt;/em&gt; : 시스템에서의 자료 저장소(파일, 데이터베이스)를 나타냄. 도형 안에 자료 저장소 이름을 기입&lt;/li&gt;
&lt;li&gt;&lt;em&gt;단말&lt;/em&gt; : 시스템과 교신하는 외부 개체로, 입력 데이터가 만들어지고 출력 데이터를 받음(정보의 생산자와 소비자). 도형 안에 이름을 기입&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-요구사항-확인-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;6 요구사항 확인 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 요구사항 확인 기법&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;요구사항 개발 과정을 거쳐 문서화된 요구사항 관련 내용을 확인하고 검증하는 방법&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 검토&lt;/code&gt; : 문서화된 요구사항을 훑어보면서 확인하는 것으로 가장 일반적인 요구사항 검증 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;프로토타이핑&lt;/code&gt; : 초기 도출된 요구사항을 토대로 프로토타입을 만든 후 대상 시스템의 개발이 진행되는 동안 도출되는 요구사항을 반영하면서 지속적으로 프로토타입을 재작성하는 과정&lt;/li&gt;
&lt;li&gt;&lt;em&gt;프로토타입&lt;/em&gt; : 상품이나 서비스가 출시되기 전에 개발 대상 시스템 또는 그 일부분을 개략적으로 만든 원형&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모델 검증&lt;/code&gt; : 요구사항 분석 단계에서 개발된 모델이 요구사항을 충족시키는지 검증하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인수 테스트&lt;/code&gt; : 사용자가 실제로 사용될 환경에서 요구사항들이 모두 충족되는지 사용자 입장에서 확인하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-umlunified-modeling-language&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-umlunified-modeling-language&quot; aria-label=&quot;7 umlunified modeling language permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. UML(Unified Modeling Language)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;시스템 분석, 설계, 구현 등 시스템 개발 과정에서 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사물&lt;/code&gt; : 모델을 구성하는 가장 중요한 기본 요소로, 다이어그램 안에서 관계가 형성될 수 있는 대상들&lt;/li&gt;
&lt;li&gt;&lt;em&gt;구조 사물&lt;/em&gt; : 시스템의 개념적, 물리적 요소를 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;행동 사물&lt;/em&gt; : 시간과 공간에 따른 요소들의 행위를 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;그룹 사물&lt;/em&gt;  :  요소들을 그룹으로 묶어서 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;주해 사물&lt;/em&gt; : 부가적인 설명이나 제약조건 등을 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계&lt;/code&gt; : 사물과 사물사이의 연관성을 표현하는 것&lt;/li&gt;
&lt;li&gt;&lt;em&gt;연관 관계&lt;/em&gt; : 2개 이상의 사물이 서로 관련되어 있음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;집합 관계&lt;/em&gt; : 하나의 사물이 다른 사물에 포함되어 있는 관계&lt;/li&gt;
&lt;li&gt;&lt;em&gt;포함 관계&lt;/em&gt; : 집합 관계의 특수한 형태로, 포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계&lt;/li&gt;
&lt;li&gt;&lt;em&gt;일반화 관계&lt;/em&gt;  :  하나의 사물이 다른 사물에 비해 더 일반적인지 구체적인지&lt;/li&gt;
&lt;li&gt;&lt;em&gt;의존 관계&lt;/em&gt;  :  연관 관계와 같이 사물 사이에 서로 연관은 있으나 필요에 의해 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계&lt;/li&gt;
&lt;li&gt;&lt;em&gt;실체화 관계&lt;/em&gt; : 사물이 할 수 있거나 해야 하는 기능(행위, 인터페이스)으로 서로를 그룹화 할 수 있는 관계&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;다이어그램&lt;/code&gt; : 사물과 관계를 도형으로 표현한 것&lt;/li&gt;
&lt;li&gt;&lt;em&gt;정적 모델링&lt;/em&gt; :  사용자가 요구한 기능을 구현하는데 필요한 자료들의 논리적인 구조를 표현한 것(구조적 다이어그램 사용)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;동적 모델링&lt;/em&gt;  :  시스템의 내부 구성 요소들의 상태가 시간의 흐름에 따라 변화하는 과정과 변화하는 과정에서 발생하는 상호 작용을 표현한 것(행위 다이어그램 사용)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;8-구조적-다이어그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%EA%B5%AC%EC%A1%B0%EC%A0%81-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;8 구조적 다이어그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. 구조적 다이어그램&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클래스 다이어그램&lt;/code&gt; :클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;클래스&lt;/em&gt; : 각각의 객체들이 갖는 속성과 오퍼레이션(동작)을 표현, 일반적으로 3개의 구획으로 나눠 클래스의 이름, 속성, 오퍼레이션을 표기&lt;/li&gt;
&lt;li&gt;&lt;em&gt;속성&lt;/em&gt; : 클래스의 상태나 정보를 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;오퍼레이션(연산)&lt;/em&gt; : 클래스가 수행할 수 있는 동작으로, 함수(메소드)라고도 함&lt;/li&gt;
&lt;li&gt;&lt;em&gt;제약조건&lt;/em&gt; : 속성에 입력될 값에 대한 제약조건이나 오퍼레이션 수행 전후에 지정해야 할 조건이 있다면 이를 적음&lt;/li&gt;
&lt;li&gt;&lt;em&gt;관계&lt;/em&gt; : 클래스와 클래스 사이의 연관성을 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;객체 다이어그램&lt;/code&gt; : 클래스에 속한 사물(객체)들, 즉 인스턴스를 특정 시점의 객체와 객체 사이의 관계로 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;컴포넌트 다이어그램&lt;/code&gt; : 실제 구현 모듈인 컴포넌트 간의 관계나 컴포넌트 간의 인터페이스를 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;배치 다이어그램&lt;/code&gt; : 결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치를 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;복합체 구조 다이어그램&lt;/code&gt; : 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;패키지 다이어그램&lt;/code&gt; : 유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계를 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;9-시퀀스-다이어그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EC%8B%9C%ED%80%80%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;9 시퀀스 다이어그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. 시퀀스 다이어그램&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;시스템이나 객체들이 메시지를 주고받으며 시간의 흐름에 따라 상호 작용하는 과정을 그림으로 표현한 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;액터&lt;/code&gt;: 시스템으로부터 서비스를 요청하는 외부 요소로, 사람이나 외부 시스템&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;객체&lt;/code&gt;: 메시지를 주고받는 주체, 콜론(:)을 기준으로 앞쪽에는 객체명을 뒤쪽에는 클래스명 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;라이프라인&lt;/code&gt; : 객체가 메모리에 존재하는 기간으로, 객체 아래쪽에 점선을 그어 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;활성 상자&lt;/code&gt; : 객체가 메시지를 주고받으며 구동되고 있음을 라이프라인 상에 겹쳐 직사각형 형태로 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;메시지&lt;/code&gt;: 객체가 상호 작용을 위해 주고받는 메시지&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;객체 소멸&lt;/code&gt; : 라이프라인 상에서 객체 소멸 표시를 만나면 해당 객체는 더이상 메모리에 존재하지 않음을 의미&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;프레임&lt;/code&gt;: 다이어그램의 전체 또는 일부를 묶어 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;10-커뮤니케이션-다이어그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%EC%BB%A4%EB%AE%A4%EB%8B%88%EC%BC%80%EC%9D%B4%EC%85%98-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;10 커뮤니케이션 다이어그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 커뮤니케이션 다이어그램&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;시퀀스 다이어그램과 같이 동작에 참여하는 객체들이 주고받는 메시지를 표현하는데, 메시지뿐만 아니라 객체들 간의 연관까지 표현&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;링크(Link)&lt;/code&gt; : 객체들 간의 관계를 표현하는 데 사용 , 액터와 객체, 객체와 객체 간에 실선을 그어 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;11-상태-다이어그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#11-%EC%83%81%ED%83%9C-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;11 상태 다이어그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;11. 상태 다이어그램&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지를 표현&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;상태&lt;/code&gt; : 객체의 상태를 둥근 사간형 안에 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;시작 상태&lt;/em&gt; : 속이 채워진 원(●)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;종료 상태&lt;/em&gt; : 속이 채워진 원을 둘러싼 원(⊙)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이벤트&lt;/code&gt; : 조건, 외부 신호, 시간의 흐름 등 상태에 변화를 주는 현상&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;상태 전환&lt;/code&gt; : 상태 사이의 흐름, 변화를 화살표로 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;프레임&lt;/code&gt; : 상태 다이어그램의 범위를 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;12-유스케이스-다이어그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#12-%EC%9C%A0%EC%8A%A4%EC%BC%80%EC%9D%B4%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;12 유스케이스 다이어그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;12 유스케이스 다이어그램&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;개발될 시스템과 관련된 외부 요소들, 즉 사용자와 다른 외부 시스템들이 개발될 시스템을 이용해 수행할 수 있는 기능을 사용자의 관점(View)에서 표현한 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시스템 범위&lt;/code&gt; : 시스템 내부에서 수행되는 기능들을 외부 시스템과 구분하기 위해 시스템 내부의 유스케이스들을 사각형으로 묶어 시스템의 범위를 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;액터&lt;/code&gt; : 시스템과 상호 작용을 하는 모든 외부 요소로, 사람이나 외부 시스템을 의미&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;유스케이스&lt;/code&gt; : 사용자가 보는 관점에서 시스템이 액터에게 제공하는 서비스 또는 기능을 표현한 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;관계&lt;/code&gt; : 유스케이스 다이이그램에서 관계는 액터와 유스케이스, 유스케이스와 유스케이스 사이에서 나타날 수 있으며, 포함 관계, 확장 관계, 일반화 관계의 3종류가 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;13-활동-다이어그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#13-%ED%99%9C%EB%8F%99-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;13 활동 다이어그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;13. 활동 다이어그램&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;자료 흐름도와 유사한 것으로, 사용자의 관점(View)에서 시스템이 수행하는 기능을 처리 흐름에 따라 순서대로 표현한 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;액션/ 액티비티&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;액션&lt;/em&gt; : 더 이상 분해할 수 없는 단일 작업&lt;/li&gt;
&lt;li&gt;&lt;em&gt;액티비티&lt;/em&gt; : 몇 개의 액션으로 분리될 수 있는 작업&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;노드&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;시작 노드&lt;/em&gt; : 액션이나 액티비티가 시작됨을 의미&lt;/li&gt;
&lt;li&gt;&lt;em&gt;종료 노드&lt;/em&gt; : 액티비티 안의 모든 흐름이 종료됨을 의미&lt;/li&gt;
&lt;li&gt;&lt;em&gt;조건(판단) 노드&lt;/em&gt;  :  조건에 따라 제어의 흐름이 분리됨을 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;병합 노드&lt;/em&gt; : 여러 경로의 흐름이 하나로 합쳐짐을 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;포크 노드&lt;/em&gt; : 액티비티의 흐름이 분리되어 수행됨을 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;조인 노드&lt;/em&gt; : 분리되어 수행되던 액티비티의 흐름이 다시 합쳐짐을 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스윔레인&lt;/code&gt; : 액티비티 수행을 담당하는 주체를 구분&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;14-객체지향-소프트웨어-설계-원칙solid-원칙&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#14-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99solid-%EC%9B%90%EC%B9%99&quot; aria-label=&quot;14 객체지향 소프트웨어 설계 원칙solid 원칙 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;14. 객체지향 소프트웨어 설계 원칙(SOLID 원칙)&lt;/h1&gt;
&lt;hr&gt;
&lt;h4&gt;1) 단일 책임 원칙(SRP, Single Responsibility Principle)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;객체는 단 하나의 책임만을 가져야 함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 하며(책임 = 변경 사유) 같은 이유로 변화하는 것끼리 묶고, 다른 이유로 변화하는 것끼리는 분리함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 개방 폐쇄 원칙(OCP, Open-Closed Principle)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;어떤 클래스를 변경해야 하는 이유는 오직 하나뿐이어야 하며(책임 = 변경 사유) 같은 이유로 변화하는 것끼리 묶고, 다른 이유로 변화하는 것끼리는 분리함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 리스코프 치환의 원칙(LSP, Liskov Substitution Principle)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;하위 클래스 및 타입들은 상위 타입들이 사용되는 곳에 대체될 수 있어야 함&lt;/li&gt;
&lt;li&gt;자식 클래스가 부모 클래스 기능을 재정의 하지 않으면 대체 가능함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 인터페이스 분리의 원칙(ISP, Interface Segregation Principle)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;인터페이스를 클라이언트에 특화되도록 분리하라는 설계의 원칙&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;하나의 일반적인 인터페이스보다 구체적인 여러 개의 인터페이스가 나음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 의존성 역전의 원칙(DIP, Dependency Inversion Principle)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;의존 관계를 맺을 때 변화하기 쉬운 것  또는 자주 변화하는 것보다는 변화하기 어렵거나 거의 변화가 없는 것에 의존하라는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;추상화된 (인터페이스 등) 것에 의존하게 만들고 구체 클래스에 의존하도록 만들지 않도록 함&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(3)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(3)/</guid><pubDate>Sat, 11 Jul 2020 22:23:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-절차적-프로그래밍-언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%A0%88%EC%B0%A8%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4&quot; aria-label=&quot;1 절차적 프로그래밍 언어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 절차적 프로그래밍 언어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;일련의 처리 절차를 정해진 문법에 따라 순서대로 기술해 나가는 언어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;절차적 프로그래밍 언어의 종류&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;언어&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;1972년 미국 벨 연구소의 데니스 리치에 의해 개발. 시스템 프로그래밍 언어로 사용. 포인터, 고급 프로그래밍 언어이면서 저급 프로그램 언어의 특징을 모두 갖춘 컴파일러 방식의 언어&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALGOL&lt;/td&gt;
&lt;td&gt;수치 계산이나 논리 연산을 위한 과학 기술 계산용 언어&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COBOL&lt;/td&gt;
&lt;td&gt;사무 처리용 언어. 영어 문장 형식으로 구성되어 있어 이해와 사용이 쉬움, 4개의 DIVISION으로 구성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FORTRAN&lt;/td&gt;
&lt;td&gt;과학 기술 계산용 언어. 수학과 공학 분야의 공식이나 수식과 같은 형태로 프로그래밍 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&quot;2-스크립트-언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4&quot; aria-label=&quot;2 스크립트 언어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 스크립트 언어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용하는 것으로, 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하게 하는 언어&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;스크립트 언어의 분류&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;서버용 스크립트 언어&lt;/code&gt; : 서버에서 해석되어 실행된 후 결과만 클라이언트로 보내는 스크립트 언어( ASP, JSP, PHP, 파이썬, 펄, 루비)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클라이언트용 스크립트 언어&lt;/code&gt; : 클라이언트의 웹 브라우저에서 해석되어 실행되는 스크립트 언어(자바 스크립트, VB 스크립트)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;자바 스크립트&lt;/th&gt;
&lt;th&gt;웹 페이지의 동작을 제어하며, 변수 선언이 필요 없음&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ASP&lt;/td&gt;
&lt;td&gt;서버 측에서 동적으로 수행되는 페이지를 만들기 위한 언어. 마이크로 소프트 사에서 제작하였으며, Windows 계열에서만 수행 가능한 프로그래밍 언어&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSP&lt;/td&gt;
&lt;td&gt;Java로 만들어진 서버용 스크립트 언어. 다양한 운영체제에서 사용이 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;td&gt;서버용 스크립트 언어, Linux, Unix, Windows 운영체제에서 사용이 가능. C, Java 등과 문법이 유사하여 배우기 쉽고 웹 페이지 제작에 많이 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;파이썬&lt;/td&gt;
&lt;td&gt;객체지향 기능을 지원하는 대화형 인터프리터 언어&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;3-선언형-언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%84%A0%EC%96%B8%ED%98%95-%EC%96%B8%EC%96%B4&quot; aria-label=&quot;3 선언형 언어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 선언형 언어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;프로그램이 수행해야 할 문제를 기술하는 언어로, 목표를 명시하고 알고리즘은 명시 X&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;선언형 언어의 분류&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;함수형 언어&lt;/code&gt; : 수학적 함수를 조합하여 문제를 해결하는 언어로, 알려진 값을 함수에 적용하는 것을 기반(LISP)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;논리형 언어&lt;/code&gt; : 기호 논리학에 기반을 둔 언어로, 논리 문장을 이용하여 프로그램을 표현하고 계산을 수행(PROLOG)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HTML&lt;/th&gt;
&lt;th&gt;인터넷의 표준 문서인 하이퍼텍스트 문서를 만들기 위해 사용하는 언어&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;LISP&lt;/td&gt;
&lt;td&gt;인공지능 분야에 사용되는 언어로, 기본 자료 구조가 연결 리스트 구조이며 재귀호출을 많이 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PROLOG&lt;/td&gt;
&lt;td&gt;논리학을 기초로 한 고급 언어로, 인공 지능 분야에서의 논리적인 추론이나 리스트 처리 등에 주로 사용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XML&lt;/td&gt;
&lt;td&gt;기존 HTML의 단점을 보완하여 웹에서 구조화된 폭넓고 다양한 문서들을 상호 교환할 수 있도록 설계된 언어. 사용자가 HTML에 새로운 태그를 정의 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Haskell&lt;/td&gt;
&lt;td&gt;함수형 프로그래밍 언어로, 부작용이 없고 코드가 간결하여 에러 발생 가능성이 낮음&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;4-객체지향-프로그래밍-언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4&quot; aria-label=&quot;4 객체지향 프로그래밍 언어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 객체지향 프로그래밍 언어&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;현실 세계의 개체(Entity)를 기계의 부품처럼 하나의 객체로 만들어 기계적인 부품들을 조립하여 제품을 만들듯이 소프트웨어를 개발할 때도 객체들을 조립해서 프로그램을 작성할 수 있도록 한 프로그래밍 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;언어&lt;/th&gt;
&lt;th&gt;특징&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;분산 네트워크 환경에 적용이 가능하며, 멀티스레드 기능을 제공하므로 여러 작업을 동시에 처리할 수 있음, 운영체제 및 하드웨어에 독립적이며, 이식성, 캡슐화, 재사용성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;C언어에 객체지향 개념을 적용한 언어. 모든 문제를 객체로 모델링하여 표현&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Smalltalk&lt;/td&gt;
&lt;td&gt;1세대 객체지향 프로그래밍 언어 중 하나로 순수한 객체지향 프로그래밍 언어. 최초로 GUI를 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;5-객체지향-프로그래밍-언어의-구성-요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EC%9D%98-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C&quot; aria-label=&quot;5 객체지향 프로그래밍 언어의 구성 요소 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 객체지향 프로그래밍 언어의 구성 요소&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;객체(Object)&lt;/code&gt; : &lt;em&gt;데이터(속성)와 이를 처리하기 위한 연산(메소드)을 결합시킨 실체&lt;/em&gt;. 데이터 구조와 그 위에서 수행되는 연산들을 가지고 있는 소프트웨어 모듈&lt;/li&gt;
&lt;li&gt;&lt;em&gt;속성(Attribute)&lt;/em&gt; : 한 클래스 내에 속한 객체들이 가지고 있는 데이터 값들을 단위별로 정의하는 것으로서 성질, 분류, 식별, 수량 또는 현재 상태 등을 표현&lt;/li&gt;
&lt;li&gt;&lt;em&gt;메소드(Method)&lt;/em&gt; : 객체가 메시지를 받아 실행해야 할 때 구체적인 연산을 정의하는 것, 객체의 상태를 참조하거나 변경하는 수단&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클래스(Class)&lt;/code&gt; : &lt;em&gt;두 개 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현하는 요소&lt;/em&gt; (공통된 특성과 행위를 갖는 객체의 집합, 객체의 유형 또는 타입을 의미, 데이터를 추상화하는 단위)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;메시지(Message)&lt;/code&gt; : &lt;em&gt;객체들 간에 상호작용을 하는데 사용되는 수단&lt;/em&gt;. 객체의 메소드(동작, 연산)를 일으키는 외부의 요구 사항, 메시지를 받은 객체는 대응하는 연산을 수행하여 예상된 결과를 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-객체지향-프로그래밍-언어의-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;6 객체지향 프로그래밍 언어의 특징 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 객체지향 프로그래밍 언어의 특징&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;캡슐화(Encapsulation)&lt;/code&gt; :&lt;em&gt;데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것&lt;/em&gt;. 캡슐화된 객체의 세부 내용이 외부에 은폐(정보 은닉)되어, 변경이 발생할 때 오류의 파급 효과 적음, 재사용이 용이&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정보 은닉(Information Hiding)&lt;/code&gt;: &lt;em&gt;다른 객체에게 자신의 정보를 숨기고 자신의 연산만을 통하여 접근을 허용하는 것&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;추상화(Abstraction)&lt;/code&gt; : &lt;em&gt;불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화하는 것&lt;/em&gt;. 모델화, 데이터의 공통된 성질을 추출하여 슈퍼 클래스를 선정하는 개념&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;상속성(Inheritance)&lt;/code&gt; : &lt;em&gt;이미 정의된 상위 클래스(부모 클래스)의 모든 속성과 연산을 하위 클래스가 물려받는 것&lt;/em&gt;. 상속성을 이용하면 하위 클래스는 상위 클래스의 모든 속성과 연산을 자신의 클래스 내에서 다시 정의 하지 않고서도 즉시 사용할 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;다형성(Polymorphism)&lt;/code&gt; : &lt;em&gt;메시지에 의해 객체(클래스)가 연산을 수행하게 될 때 하나의 메시지에 대해 각 객체(클래스)가 가지고 있는 고유한 방법(특성)으로 응답할 수 있는 능력&lt;/em&gt;. 객체(클래스)들은 동일한 메소드명을 사용하며 같은 의미의 응답을 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;7-예외-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;7 예외 처리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 예외 처리&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;예외(Exception)&lt;/em&gt; : 프로그램의 정상적인 실행을 방해하는 조건이나 상태&lt;/li&gt;
&lt;li&gt;&lt;em&gt;예외 처리(Exception Handling)&lt;/em&gt; : 예외가 발생했을 때 프로그래머가 해당 문제에 대비해 작성해 놓은 처리 루틴을 수행하도록 하는 것&lt;/li&gt;
&lt;li&gt;예외의 원인 : 하드웨어 문제, 운영체제의 설정 실수, 라이브러리 손상, 사용자의 입력 실수, 받아들일 수 없는 연산, 할당하지 못하는 기억장치 접근 등&lt;/li&gt;
&lt;li&gt;java의 예외 객체&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;예외 객체&lt;/th&gt;
&lt;th&gt;발생 원인&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ClassNotFoundException&lt;/td&gt;
&lt;td&gt;클래스를 찾지 못한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NoSuchMethodException&lt;/td&gt;
&lt;td&gt;메소드를 찾지 못한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FileNotFoundException&lt;/td&gt;
&lt;td&gt;파일을 찾지 못한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;InterruptedIOException&lt;/td&gt;
&lt;td&gt;입·출력 처리가 중단된 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArithmeticException&lt;/td&gt;
&lt;td&gt;0으로 나누는 등의 산술 연산에 대한 예외가 발생한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IllegalArgumentException&lt;/td&gt;
&lt;td&gt;잘못된 인자를 전달한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NumberFormatException&lt;/td&gt;
&lt;td&gt;숫자 형식으로 변환할 수 없는 문자열을 숫자 형식으로 변환한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayIndexOutOfBoundsException&lt;/td&gt;
&lt;td&gt;배열의 범위를 벗어난 접근을 시도한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NegativeArraySizeException&lt;/td&gt;
&lt;td&gt;0보다 작은 값으로 배열의 크기를 지정한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NullPointerException&lt;/td&gt;
&lt;td&gt;존재하지 않는 객체를 참조한 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(2)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(2)/</guid><pubDate>Sat, 11 Jul 2020 22:21:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-for문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-for%EB%AC%B8&quot; aria-label=&quot;1 for문 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. for문&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;초기값, 최종값, 증가값을 지정하는 수식을 이용해 정해진 횟수를 반복하는 제어문&lt;/li&gt;
&lt;li&gt;초기값을 정한 다음 최종값에 대한 조건이 참이면 실행할 문장을 실행한 후 초기값을 증가값 만큼 증가시키면서 최종값 에 대한 조건이 참인 동안 실행할 문장을 반복 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d × %d = %d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 8 x 5 = 40&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;2-while문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-while%EB%AC%B8&quot; aria-label=&quot;2 while문 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. while문&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;while&lt;/code&gt; : 조건이 참인 동안 실행할 문장을 반복 수행하는 제어문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while 문은 조건이 참인동안 실행할 문장을 반복 수행하다가 조건이 거짓이면 while문을 끝낸 후 다음 코드를 실행&lt;/li&gt;
&lt;li&gt;while 문은 조건이 처음부터 거짓이면 한 번도 수행하지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;do / while&lt;/code&gt; : 실행할 문장을 무조건 한 번 실행한 다음 조건을 판단하여 탈출 여부를 결정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do/while 문은 실행할 문장을 우선 실행한 후 조건을 판별하여 조건이 참이면 실행할 문장을 계속 반복 수행, 거짓이면 do/while 문을 끝낸 후 다음 코드를 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;break / continue&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch문이나 반복문의 실행을 제어하기 위해 사용되는 예약어&lt;/li&gt;
&lt;li&gt;&lt;em&gt;break&lt;/em&gt; : switch문이나 반복문 안에서 break가 나오면 블록을 벗어남&lt;/li&gt;
&lt;li&gt;&lt;em&gt;continue&lt;/em&gt; : continue 이후의 문장을 실행하지 않고 제어를 반복문의 처음으로 옮김&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        x &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d, %d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 25, 15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;3-배열과-문자열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%AC%B8%EC%9E%90%EC%97%B4&quot; aria-label=&quot;3 배열과 문자열 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 배열과 문자열&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;배열&lt;/code&gt; : 동일한 데이터 유형을 여러 개 사용해야 할 경우 이를 손쉽게 처리하기 위해 여러 개의 변수들을 조합해서 하나의 이름으로 정의해 사용하는 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열은 변수명 뒤에 대괄호 [ ]를 붙이고 그 안에 사용할 개수를 지정&lt;/li&gt;
&lt;li&gt;C언어에서 배열의 위치는 0부터 시작&lt;/li&gt;
&lt;li&gt;C언어에서 배열 위치를 나타내는 첨자 없이 배열 이름을 사용하면 배열의 첫 번째 요소의 주소를 지정하는 것과 같음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1차원 배열 : 변수들을 일직선상의 개념으로 조합한 배열(&lt;code class=&quot;language-text&quot;&gt;int a[5]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;2차원 배열 : 변수들을 평면, 즉 행과 열로 조합한 배열(&lt;code class=&quot;language-text&quot;&gt;int b[3][3]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;배열 형태의 문자열 변수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C언어에서는 큰따옴표(” “)로 묶인 글자는 글자 수에 관계없이 문자열로 처리&lt;/li&gt;
&lt;li&gt;C언어에는 문자열을 저장하는 자료형이 없기 때문에 배열 또는 포인터를 이용하여 처리&lt;/li&gt;
&lt;li&gt;char a[5] = “hello”&lt;/li&gt;
&lt;li&gt;배열에 문자열을 저장할 때는 배열 선언 시 초기값으로 지정해야 하며, 이미 선언된 배열에는 문자열을 저장할 수 없음&lt;/li&gt;
&lt;li&gt;문자열 끝에 자동으로 널 문자(“\0”)가 삽입되므로, 널 문자까지 고려하여 배열 크기를 지정해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; exint&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exint&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exint&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			value&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-java에서의-배열과-문자열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-java%EC%97%90%EC%84%9C%EC%9D%98-%EB%B0%B0%EC%97%B4%EA%B3%BC-%EB%AC%B8%EC%9E%90%EC%97%B4&quot; aria-label=&quot;4 java에서의 배열과 문자열 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Java에서의 배열과 문자열&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Java에서는 향상된 for문을 사용할 수 있는데, 향상된 for문은 객체를 대상으로만 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; hap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt; avg&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            hap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hap &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        avg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;hap &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d, %.2f&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; hap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; avg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 480, 68.57&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Information!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; st &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    	n&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; k&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    		st&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; st&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    		&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// !noitamrofiI&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;1회 기사 실기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;            
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 0 1 2 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;5-포인터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%8F%AC%EC%9D%B8%ED%84%B0&quot; aria-label=&quot;5 포인터 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 포인터&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포인터와 포인터 변수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포인터는 변수의 주소를 말하며, C언어에서는 주소를 제어할 수 있는 기능을 제공&lt;/li&gt;
&lt;li&gt;포인터 변수 : C언어에서 변수의 주소를 저장할 때 사용하는 변수&lt;/li&gt;
&lt;li&gt;포인터 변수를 선언할 때는 자료의 형을 먼저 쓰고 변수명 앞에 간접 연산자 *를 붙임(int *a;).&lt;/li&gt;
&lt;li&gt;연산자 &amp;#x26; : 포인터 변수에 주소를 저장하기 위해 변수의 주소를 알아낼 때(a = &amp;#x26;b;)&lt;/li&gt;
&lt;li&gt;연산자 * : 해당 포인터 변수가 가리키는 곳의 값(c = *a;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포인터와 배열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열을 포인터 변수에 저장한 후 포인터를 이용해 배열의 요소에 접근할 수 있음&lt;/li&gt;
&lt;li&gt;배열 위치를 나타내는 첨자를 생략하고 배열의 대표명만 지정하면 배열의 첫 번째 요소의 주소를 지정하는 것과 같음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// b = a → 배열의 대표명을 적었으므로 a 배열의 시작 주소인 a[0]의 주소를 b에 저장&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// b = &amp;amp;a[0] → a 배열의 첫 번째 요소인 a[0]의 주소(&amp;amp;)를 b에 저장&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d, %d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 70, 70&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sum &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        b &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// int a[5] = {81,27,9,3,1}&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        sum &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sum&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 91&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;6-사용자-정의-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98&quot; aria-label=&quot;6 사용자 정의 함수 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 사용자 정의 함수&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;사용자가 필요한 기능을 취향대로 만들어 사용할 수 있는 함수&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;실기 기출&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    	&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 50 75 85 95 100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;7-재귀-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98&quot; aria-label=&quot;7 재귀 함수 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 재귀 함수&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;자기가 자기를 호출하는 순환 프로그램&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;팩토리얼(Factorial)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   	&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
		  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; n &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;기능사 기출&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;hrd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;“&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;d ”&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;hrd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;hrd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 5 4 3 2 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;8-java의-클래스와-메소드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-java%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EB%A9%94%EC%86%8C%EB%93%9C&quot; aria-label=&quot;8 java의 클래스와 메소드 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8. Java의 클래스와 메소드&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;클래스는 객체 생성을 위한 필드(속성)와 메소드(함수)를 정의하는 설계도로, Java는 아무리 작은 프로그램이라도 클래스를 만들어서 사용해야 함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;두 수 교환&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Example&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AAclass&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;AAclass&lt;/span&gt; myVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AAclass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		myVal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myVal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;i=%d, j=%d\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AAclass&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;AAclass&lt;/span&gt; myVal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		myVal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; myVal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;예제 1&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; exp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; exp&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 1024(2의 10승)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;9-python의-기초&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-python%EC%9D%98-%EA%B8%B0%EC%B4%88&quot; aria-label=&quot;9 python의 기초 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9. Python의 기초&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; : &lt;em&gt;Python의 표준 입력 함수로, 키보드로 입력받아 변수에 저장하는 함수&lt;/em&gt;. 입력되는 값은 문자열로 취급되어 저장&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;print&lt;/code&gt; : Python의 표준 출력 함수로, 값을 화면에 출력하는 함수&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;리스트(List)&lt;/code&gt; : Python에서는 배열 대신 리스트를 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;range&lt;/code&gt; : 연속된 숫자를 생성하는 것으로, 리스트, 반복문 등에서 많이 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;슬라이스(Slice)&lt;/code&gt; : 문자열이나 리스트와 같은 순차형 객체에서 일부를 잘라(slicing) 반환하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 입력&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# abcde // fghij&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 13&lt;/span&gt;

x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;split&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;//&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
val &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# [0, 3, 6, 9, 12 ]&lt;/span&gt;
val&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;remove&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;i&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; val&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;10-라이브러리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC&quot; aria-label=&quot;10 라이브러리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10. 라이브러리&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;라이브러리&lt;/em&gt; : 프로그램을 효율적으로 개발할 수 있도록 자주 사용하는 함수나 데이터들을 미리 만들어 모아 놓은 집합체&lt;/li&gt;
&lt;li&gt;&lt;em&gt;표준 라이브러리&lt;/em&gt; : 프로그래밍 언어에 기본적으로 포함되어 있는 라이브러리로, 여러 종류의 모듈이나 패키지 형태&lt;/li&gt;
&lt;li&gt;&lt;em&gt;외부 라이브러리&lt;/em&gt; : 개발자들이 필요한 기능들을 만들어 인터넷 등에 공유해 놓은 것으로, 외부 라이브러리를 다운받아 설치한 후 사용&lt;/li&gt;
&lt;li&gt;c의 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;헤더 파일&lt;/th&gt;
&lt;th&gt;기능&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;stdio.h&lt;/td&gt;
&lt;td&gt;데이터의 입·출력에 사용되는 기능들을 제공(printf, scanf, fprintf, fscanf, fclose, fopen)등&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;math.h&lt;/td&gt;
&lt;td&gt;수학 함수들을 제공(sqrt, pow, abs)등&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string.h&lt;/td&gt;
&lt;td&gt;문자열 처리에 사용되는 기능들을 제공(strlen, strcpy, strcmp)등&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stdlib.h&lt;/td&gt;
&lt;td&gt;자료형 변환, 난수 발생, 메모리 할당에 사용되는 기능들을 제공(atoi, atof, srand, rand, malloc, free)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;time.h&lt;/td&gt;
&lt;td&gt;시간 처리에 사용되는 기능들을 제공(time, clock)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;java 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;패키지&lt;/th&gt;
&lt;th&gt;기능&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;java.lang&lt;/td&gt;
&lt;td&gt;Java에 기본적으로 필요한 인터페이스, 자료형, 예외 처리 등에 관련된 기능을 제공(import문x)(String, System, Process, Runtime, Math, Error)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java.util&lt;/td&gt;
&lt;td&gt;날짜 처리, 난수 발생, 복잡한 문자열 처리 등에 관련된 기능을 제공 (Date, Calender, Random, StringTokenizer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java.io&lt;/td&gt;
&lt;td&gt;파일 입·출력과 관련된 기능 및 프로토콜을 제공 (InputStream, OutputStream, Reader, Writer)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java.net&lt;/td&gt;
&lt;td&gt;네트워크와 관련된 기능을 제공(Socket, URL, InetAddress)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java.awt&lt;/td&gt;
&lt;td&gt;사용자 인터페이스(UI)와 관련된 기능(rame, Panel, Dialog, Button, Checkbox)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)]]></title><link>https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보 처리 기사 실기 요약 1-프로그래밍 언어 활용(1)/</guid><pubDate>Sat, 11 Jul 2020 20:21:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2020 정보 처리 기사 프로그래밍 언어 활용 요약 입니다. 정처기 공부를 할 때 활용하세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-데이터-타입data-type&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85data-type&quot; aria-label=&quot;1 데이터 타입data type permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 데이터 타입(Data Type)&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;변수(Variable)에 저장될 데이터의 형식을 나타내는 것으로, 변수에 값을 저장하기 전에 문자형, 정수형, 실수형 등 어 떤 형식의 값을 저장할지 데이터 타입을 지정하여 변수를 선언해야 함&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;데이터 타입의 유형&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;불린 타입 (Boolean Type)&lt;/code&gt;: 조건의 참(True), 거짓(False) 여부를 판단. 기본값은 거짓(False) (true, false)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;문자 타입 (Character Type)&lt;/code&gt; : 한 문자를 저장할 때, 작은따옴표(’ ’) 안에 표시 (‘A’, ‘a’, ‘1’, ’*‘)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;문자열 타입(Character String Type)&lt;/code&gt; : 문자열을 저장할 때, 큰따옴표(” ”) 안에 표시 (“Hello!”, “1+2=3”)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정수 타입 (Integer Type)&lt;/code&gt; : 정수, 즉 소수점이 없는 숫자를 저장 (1, -1, 10, -100)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;부동 소수점 타입 (Floating Point Type)&lt;/code&gt; : 소수점 이하가 있는 실수를 저장할 때 (0.123×102, -1.6×23)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;배열 타입 (Array Type)&lt;/code&gt; : 같은 타입의 데이터 집합을 만들어 저장 , 데이터는 중괄호({ }) 안에 콤마(,)로 구분하여 값들을 나열
({1, 2, 3, 4, 5})&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-변수와-기억-클래스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B3%80%EC%88%98%EC%99%80-%EA%B8%B0%EC%96%B5-%ED%81%B4%EB%9E%98%EC%8A%A4&quot; aria-label=&quot;2 변수와 기억 클래스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 변수와 기억 클래스&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;변수(Variable)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터가 명령을 처리하는 도중 발생하는 값을 저장하기 위한 공간으로, 변할 수 있는 값을 의미&lt;/li&gt;
&lt;li&gt;변수는 저장하는 값에 따라 정수형, 실수형, 문자형, 포인터형 등으로 구분&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;기억 클래스&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언 시 메모리 내에 변수의 값을 저장하기 위한 기억영역이 할당되는데, 할당되는 기억영역에 따라 사용 범위에 제한이 있음. 이러한 기억영역을 결정하는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C언어에서 제공하는 기억 클래스의 종류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;자동 변수(Automatic Variable)&lt;/em&gt; : 함수나 코드의 범위를 한정하는 블록 내에서 선언되는 변수&lt;/li&gt;
&lt;li&gt;&lt;em&gt;외부 변수(External Variable)&lt;/em&gt; : 현재 파일이나 다른 파일에서 선언된 변수나 함수를 참조(reference)하기 위한 변수&lt;/li&gt;
&lt;li&gt;&lt;em&gt;정적 변수(Static Variable)&lt;/em&gt; : 함수나 블록 내에서 선언하는 내부 정적 변수와 함수 외부에서 선언하는 외부 정적 변수&lt;/li&gt;
&lt;li&gt;&lt;em&gt;레지스터 변수(Register Variable)&lt;/em&gt; : 메모리가 아닌 CPU 내부의 레지스터에 기억영역을 할당받는 변수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-scanf-함수--printf-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-scanf-%ED%95%A8%EC%88%98--printf-%ED%95%A8%EC%88%98&quot; aria-label=&quot;3 scanf 함수  printf 함수 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. scanf 함수 / printf 함수&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;scanf 함수&lt;/code&gt; : C언어의 표준 입력 함수로, 키보드로 입력받아 변수에 저장하는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%3d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// % : 서식 문자 / 3 : 입력 자릿수 3자리 / d : 10진수로 입력 / &amp;amp;a : 입력받은 데이터를 변수 a의 주소에 저장&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;서식 문자열 : printf함수로 출력할 때도 동일하게 적용&lt;/li&gt;
&lt;li&gt;%d : 정수형 10진수&lt;/li&gt;
&lt;li&gt;%u : 부호없는 정수형 10진수&lt;/li&gt;
&lt;li&gt;%o : 정수형 8진수&lt;/li&gt;
&lt;li&gt;%x : 정수형 16진수&lt;/li&gt;
&lt;li&gt;%c : 문자를 입·출력&lt;/li&gt;
&lt;li&gt;%s : 문자열을 입·출력&lt;/li&gt;
&lt;li&gt;%f : 소수점을 포함하는 실수를 입·출력&lt;/li&gt;
&lt;li&gt;%e : 지수형 실수를 입·출력&lt;/li&gt;
&lt;li&gt;%ld : long형 10진수를 입·출력&lt;/li&gt;
&lt;li&gt;%lo : long형 8진수를 입·출력&lt;/li&gt;
&lt;li&gt;%lx : long형 16진수를 입·출력&lt;/li&gt;
&lt;li&gt;%p : 주소를 16진수로 입·출력&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;printf 함수&lt;/code&gt; : C언어의 표준 출력 함수로, 인수로 주어진 값을 화면에 출력하는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; %-5.2f &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// % : 서식 문자 / 8 : 출력 자릿수 5자리 / f : 실수로 출력 / 2 : 소수점 이하를 2자리로 지정 /- : 왼쪽부터 출력&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;\n : 커서를 다음 줄 앞으로 이동&lt;/li&gt;
&lt;li&gt;’ : 작은따옴표를 출력&lt;/li&gt;
&lt;li&gt;\b : 커서를 왼쪽으로 한 칸 이동&lt;/li&gt;
&lt;li&gt;” : 큰따옴표를 출력&lt;/li&gt;
&lt;li&gt;\t : 커서를 일정 간격 띄움&lt;/li&gt;
&lt;li&gt;\a : 스피커로 벨 소리를 출력&lt;/li&gt;
&lt;li&gt;\r : 커서를 현재 줄의 처음으로 이동&lt;/li&gt;
&lt;li&gt;\ : 역 슬래시를 출력&lt;/li&gt;
&lt;li&gt;\0 : 널 문자를 출력&lt;/li&gt;
&lt;li&gt;\f : 한 페이지를 넘김&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-java에서의-표준-입·출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-java%EC%97%90%EC%84%9C%EC%9D%98-%ED%91%9C%EC%A4%80-%EC%9E%85%C2%B7%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;4 java에서의 표준 입·출력 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Java에서의 표준 입·출력&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Java에서의 표준 입력 : Java에서 키보드로 입력받은 값을 변수에 저장하려면 먼저 Scanner 클래스를 이용해 키보드로부터 값을 입력받는 객체 변수를 생성한 후 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;객체 변수 생성&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scanner : 입력에 사용할 객체 변수를 생성할 때 사용하는 클래스 이름&lt;/li&gt;
&lt;li&gt;sc : 객체 변수명&lt;/li&gt;
&lt;li&gt;new : 객체 생성 예약어&lt;/li&gt;
&lt;li&gt;Scanner( ) : 클래스의 이름&lt;/li&gt;
&lt;li&gt;System.in : 표준 입력장치(키보드)를 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;객체 변수 활용&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scin.nextInt( )&lt;/li&gt;
&lt;li&gt;scin : 입력에 사용할 객체 변수 이름이다. 객체 변수 생성 시 사용한 객체 변수 이름과 동일해야 함&lt;/li&gt;
&lt;li&gt;nextInt( ) : 입력받은 값을 정수형으로 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Java에서의 표준 출력&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java에서 값을 화면에 출력할 때 : printf( ) 메소드를 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;java&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;util&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt; sc &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;in&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;==&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;5-연산자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;5 연산자 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 연산자&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;산술 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;덧셈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;뺄셈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;곱셈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;나눗셈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;나머지&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;++&lt;/td&gt;
&lt;td&gt;증가 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- -&lt;/td&gt;
&lt;td&gt;감소 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;관계 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;같다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;같지 않다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&gt;&lt;/td&gt;
&lt;td&gt;크다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&gt;=&lt;/td&gt;
&lt;td&gt;크거나 같다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3C;&lt;/td&gt;
&lt;td&gt;작다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3C;=&lt;/td&gt;
&lt;td&gt;작거나 같다&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;논리 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;부정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x26;&amp;#x26;&lt;/td&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;모두 참이면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;하나라도 참이면 참&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;비트 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;th&gt;비고&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x26;&lt;/td&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;모든 비트가 1일 때만 1&lt;/td&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;각 비트의 부정, 0이면 1, 1이면 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;xor&lt;/td&gt;
&lt;td&gt;모든 비트가 같으면 0, 하나라도 다르면 1&lt;/td&gt;
&lt;td&gt;&amp;#x3C;&amp;#x3C;&lt;/td&gt;
&lt;td&gt;왼쪽 시프트&lt;/td&gt;
&lt;td&gt;비트를 왼쪽으로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;모든 비트 중 한 비트라도 1이면 1&lt;/td&gt;
&lt;td&gt;&gt;&gt;&lt;/td&gt;
&lt;td&gt;오른쪽 시프트&lt;/td&gt;
&lt;td&gt;비트를 오른쪽으로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;대입 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;예&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;a += 1&lt;/td&gt;
&lt;td&gt;a = a + 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;a -= 1&lt;/td&gt;
&lt;td&gt;a = a - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;* =&lt;/td&gt;
&lt;td&gt;a * = 1&lt;/td&gt;
&lt;td&gt;a = a * 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;a /= 1&lt;/td&gt;
&lt;td&gt;a = a / 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;a %= 1&lt;/td&gt;
&lt;td&gt;a = a % 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;#x3C;&amp;#x3C;=&lt;/td&gt;
&lt;td&gt;a &amp;#x3C;&amp;#x3C;= 1&lt;/td&gt;
&lt;td&gt;a = a &amp;#x3C;&amp;#x3C; 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&gt;&gt;=&lt;/td&gt;
&lt;td&gt;a &gt;&gt;= 1&lt;/td&gt;
&lt;td&gt;a = a &gt;&gt; 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;조건 연산자 형 : &lt;code class=&quot;language-text&quot;&gt;조건 ? 1 : 2&lt;/code&gt; : 참이면 1, 거짓이면 2 반환&lt;/li&gt;
&lt;li&gt;기타 연산자&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sizeof&lt;/td&gt;
&lt;td&gt;자료형의 크기를 표시한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,(콤마)&lt;/td&gt;
&lt;td&gt;콤마로 구분하여 한 줄에 두 개 이상의 수식을 작성하거나 변수를 정의한다. 왼쪽에서 른쪽으로 순서대로 수행되며, 순서 연산자라 부르기도 한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(자료형)&lt;/td&gt;
&lt;td&gt;사용자가 자료형을 다른 자료형으로 변환할 때 사용하는 것으로, cast(캐스트) 연산자라고 부른다. 변환할 자료형을 괄호 안에 넣어서 변환할 값이나 변수명 앞에 놓는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;증가/감소 연산자는 변수의 앞(전치) 또는 변수의 뒤(후치)에 붙여 사용한다.&lt;/li&gt;
&lt;li&gt;전치 : 변수 앞에 증감 연산자가 오는 형태로 먼저 변수의 값을 증감시킨 후 변수를 연산에 사용한다(++a, —a).&lt;/li&gt;
&lt;li&gt;후치 : 변수 뒤에 증감 연산자가 오는 형태로 먼저 변수를 연산에 사용한 후 변수의 값을 증감시킨다(a++, a—).&lt;/li&gt;
&lt;li&gt;연산자 우선순위 : 단항, 산술, 시프트, 관계, 비트, 논리, 조건, 대입, 순서&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-if문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-if%EB%AC%B8&quot; aria-label=&quot;6 if문 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. if문&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;조건에 따라서 실행할 문장을 달리하는 제어문. 조건이 참일 때만 실행할 문장을 지정할 수도 있고, 참과 거짓에 대해 각각 다른 실행문을 지정할 수도 있음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;단순 if문&lt;/code&gt; : 조건이 한 개 일 때 사용하는 제어문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건이 참일 때 실행할 문장이 하나인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;조건이 참일 때 실행할 문장이 두 문장 이상인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;두 문장\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;조건이 참일 때와 거짓일 때 실행할 문장/이 다를 때&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;not 10\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;다중 if문&lt;/code&gt; : 조건이 여러 개 일 때 사용하는 제어문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1 &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;20 이상\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;7-switch문&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-switch%EB%AC%B8&quot; aria-label=&quot;7 switch문 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. switch문&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;조건에 따라 분기할 곳이 여러 곳인 경우 간단하게 처리할 수 있는 제어문&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;case문의 레이블에는 한 개의 상수만 지정할 수 있으며, int, char, enum형의 상수만 가능&lt;/li&gt;
&lt;li&gt;case문의 레이블에는 변수 지정 불가&lt;/li&gt;
&lt;li&gt;break문은 생략이 가능하지만 break문이 생략되면 수식과 레이블이 일치할 때 실행할 문장부터 break문 또는 switch 문이 종료될 때까지 모든 문장이 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;define&lt;/span&gt; _CRT_SECURE_NO_WARNINGS&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// scanf 보안 경고로 인한 컴파일 에러 방지&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;#&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; num1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1 \n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2 \n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;default\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 1(입력)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// default&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)]]></title><link>https://jigglog.netlify.app/2021 정보보안기사 필기 요점 정리 1/</link><guid isPermaLink="false">https://jigglog.netlify.app/2021 정보보안기사 필기 요점 정리 1/</guid><pubDate>Sun, 03 May 2020 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-네트워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;3 네트워크 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 네트워크&lt;/h1&gt;
&lt;h2 id=&quot;1-인터넷&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%B8%ED%84%B0%EB%84%B7&quot; aria-label=&quot;1 인터넷 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 인터넷&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 인터넷의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TCP/IP 프로토콜을 기반으로 전 세계 수많은 컴퓨터와 네트워크들이 연결된 광범위한 컴퓨터 통신망&lt;/li&gt;
&lt;li&gt;미 국방성의 ARPANET에서 시작&lt;/li&gt;
&lt;li&gt;유닉스 운영체제를 기반으로 함&lt;/li&gt;
&lt;li&gt;인터넷에 연결된 컴퓨터는 고유한 IP 주소를 가짐&lt;/li&gt;
&lt;li&gt;인터넷을 구성하기 위해서는 브리지, 라우터, 게이트웨이가 사용됨&lt;/li&gt;
&lt;li&gt;백본 : 네트워크를 연결하여 중추적 역할을 하는 네트워크로 인터넷의 주가 되는 기간망&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) IP주소(Internet Protocol Address)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터넷에 연결된 컴퓨터를 구분하기 위한 고유한 주소&lt;/li&gt;
&lt;li&gt;8비트씩 4부분으로 구성됨(IPv4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/QBwDO/btqC1Iuhb1K/PY4vWUEBcOKTiKxzgj6Xg1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;3) 서브네팅&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;할당된 네트워크 주소를 다시 여러 개의 작은 네트워크로 나누어 사용&lt;/li&gt;
&lt;li&gt;IPv4의 주소 부족 문제를 해결하기 위한 방법&lt;/li&gt;
&lt;li&gt;서브넷 마스크 : 네트워크 주소와 호스트 주소를 구분하기 위한 비트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) IPv6&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IPv4의 주소 부족 문제를 해결하기 위해 개발됨&lt;/li&gt;
&lt;li&gt;128비트의 긴 주소를 사용하여 주소 부족 문제를 해결할 수 있고, 자료 전송 속도가 빠름&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증성, 기밀성, 데이터 무결성의 지원으로 보안 문제 해결 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인증성&lt;/code&gt; : 사용자의 식별과 접근 권한 검증&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기밀성&lt;/code&gt; : 시스템 내의 정보와 자료는 인가된 사용자에게만 접근 허용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;무결성&lt;/code&gt; : 시스템 내의 정보는 인가된 사용자만 수정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traffic Class, Flow Label을 이용하여 등급별, 서비스별로 패킷을 구분할 수 있어 품질 보장이 용이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic Class : IPv6 패킷의 클래스나 우선순위를 나타내는 필드&lt;/li&gt;
&lt;li&gt;Flow Label : 네트워크 상에서 패킷들의 흐름에 대한 특성을 나타내는 필드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주소 체계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유니캐스트 : 1:1 통신&lt;/li&gt;
&lt;li&gt;멀티캐스트 : 1:N 통신&lt;/li&gt;
&lt;li&gt;애니캐스트 : 1:1 통신, 유니캐스트와 다르게 송신자와 가장 가까이 있는 수신자 간의 통신&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 도메인 네임&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP 주소 사람이 이해하기 쉬운 문자 형태로 표현한 것&lt;/li&gt;
&lt;li&gt;도메인 네임의 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bBbz7T/btqCZy62ybL/rGNbPMMU63zbAxV9QxKpk1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;도메인 네임을 IP 주소로 변환하는 역할을 하는 시스템을 DNS라고 하며 이런 역할을 하는 서버를 DNS 서버라고 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-osi-참조-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-osi-%EC%B0%B8%EC%A1%B0-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;2 osi 참조 모델 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) OSI 참조 모델&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다른 시스템 간의 원활한 통신을 위해 ISO(국제표준화기구)에서 제안한 통신 규약(프로토콜)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/csgUXu/btqCYE0EuFK/CyKsXLH0WkkJKxype3VC91/img.jpg&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;2) OSI 모델의 계층&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;물리 계층(비트)&lt;/li&gt;
&lt;li&gt;ex) 리피터, 허브&lt;/li&gt;
&lt;li&gt;전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의&lt;/li&gt;
&lt;li&gt;물리적 전송 매체와 신호 방식을 정의&lt;/li&gt;
&lt;li&gt;RS-232C, X.21 등의 표준&lt;/li&gt;
&lt;li&gt;데이터 링크 계층 (프레임)&lt;/li&gt;
&lt;li&gt;ex) 브리지&lt;/li&gt;
&lt;li&gt;두 개의 인접 개방 시스템들 간의 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 함&lt;/li&gt;
&lt;li&gt;주요 기능 : 흐름 제어, 프레임 동기화, 오류 제어, 순서 제어&lt;/li&gt;
&lt;li&gt;HDLC, LAPB, LLC, MAC, LAPD, PPP 등의 표준&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네트워크 계층(패킷) ex) 라우터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개방 시스템들 간의 네트워크 연결을 관리하고 데이터의 교환 및 중계 기능&lt;/li&gt;
&lt;li&gt;네트워크 연결 설정, 유지, 해제&lt;/li&gt;
&lt;li&gt;경로 설정, 데이터 교환 및 중계, 트래픽 제어, 패킷 정보 전송 수행&lt;/li&gt;
&lt;li&gt;X.25, IP 등의 표준&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전송 계층 (세그먼트) ex) 게이트웨이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;논리적 안정과 균일한 데이터 전송 서비스를 제공&lt;/li&gt;
&lt;li&gt;종단 시스템 간의 투명한 데이터 전송을 가능하게 함&lt;/li&gt;
&lt;li&gt;종단 시스템 간의 전송 연결 설정, 데이터 전송, 연결 해제 기능&lt;/li&gt;
&lt;li&gt;주소 설정, 다중화, 오류 제어, 흐름 제어&lt;/li&gt;
&lt;li&gt;TCP, UDP 등의 표준&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션 계층 (메세지)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송수신 측 간의 관련성을 유지하고 대화 제어를 담당&lt;/li&gt;
&lt;li&gt;동기점 : 송수신 측간의 대화 동기를 위해 전송하는 정보를 일정한 부분에 두어 정보의 수신 상태를 체크하는 포인트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;표현 계층 (메세지)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 응용 계층, 세션 계층에 보내기 전에 계층에 맞게 변환&lt;/li&gt;
&lt;li&gt;서로 다른 데이터 표현 형태를 갖는 시스템 간 상호 접속을 위해 필요한 계층&lt;/li&gt;
&lt;li&gt;코드 변환, 데이터 암호화, 데이터 압축, 구문 검색, 정보 형식 변환, 문맥 관리 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;응용 계층&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 OSI 환경에 접속할 수 있도록 서비스 제공&lt;/li&gt;
&lt;li&gt;프로세스 간의 정보 교환, 전자 사서함, 가상 터미널 등의 서비스 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-네트워크-관련-장비&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B4%80%EB%A0%A8-%EC%9E%A5%EB%B9%84&quot; aria-label=&quot;3 네트워크 관련 장비 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 네트워크 관련 장비&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 네트워크 인터페이스 카드(Network Interface Card)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터를 연결하는 장치로 정보 전송 시 정보가 케이블을 통해 전송될 수 있도록 정보 형태를 변경&lt;/li&gt;
&lt;li&gt;이더넷 카드 혹은 네트워크 어댑터라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 허브(hub)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가까운 거리의 컴퓨터를 연결하는 장치&lt;/li&gt;
&lt;li&gt;각 회선을 통합적으로 관리하며 신호 증폭 기능을 하는 리피터의 역할도 포함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;더미 허브&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네트워크에 흐르는 모든 데이터를 단순히 연결만 함&lt;/li&gt;
&lt;li&gt;LAN이 보유한 대역폭을 나누어 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스위칭 허브&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네트워크상에 흐르는 데이터의 유무 및 흐름을 제어하여 각각의 노드가 허브의 최대 대역폭을 사용할 수 있는 지능형 허브&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 리피터(Repeater)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;신호 재생&lt;/li&gt;
&lt;li&gt;전송되는 신호가 원래의 형태와 다르게 왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송하는 역할&lt;/li&gt;
&lt;li&gt;근접한 네트워크 사이에 신호를 전송&lt;/li&gt;
&lt;li&gt;전송 거리의 연장 또는 배선의 자유도를 높이는 용도&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 브리지(Bridge)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동종의 LAN 연결&lt;/li&gt;
&lt;li&gt;LAN과 LAN을 연결하거나 LAN안에서 컴퓨터 그룹을 연결&lt;/li&gt;
&lt;li&gt;데이터 링크 계층 중 MAC 계층에서 사용되므로 MAC 브리지라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 스위치(Switch)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치&lt;/li&gt;
&lt;li&gt;포트마다 각기 다른 전송속도를 지원하도록 제어할 수 있음&lt;/li&gt;
&lt;li&gt;수십 ~ 수백 개의 포트를 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 라우터(Router)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 LAN의 연결과 경로 설정&lt;/li&gt;
&lt;li&gt;LAN과 LAN의 연결 기능에 데이터 전송의 최적 경로를 선택할 수 있는 기능을 추가&lt;/li&gt;
&lt;li&gt;서로 다른 LAN이나 LAN과 WAN의 연결도 수행&lt;/li&gt;
&lt;li&gt;접속 가능한 경로에 대한 정보를 Routing Table에 저장하여 보관&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7) 게이트웨이(Gateway)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로토콜이 다른 네트워크 사이를 연결&lt;/li&gt;
&lt;li&gt;전 계층의 프로토콜 구조가 다른 네트워크의 연결을 수행&lt;/li&gt;
&lt;li&gt;LAN에서 다른 네트워크에 데이터를 송수신하는 출입구 역할을 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-프로토콜의-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;4 프로토콜의 개념 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 프로토콜의 개념&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화시켜 놓은 통신 규약&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 프로토콜의 기본 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구문&lt;/code&gt; : 전송하고자 하는 데이터의 형식, 부호화, 신호 레벨 등을 규정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;의미&lt;/code&gt; : 두 기기 간의 효율적이고 정확한 정보 전송을 위한 협조 사항과 오류 관리를 위한 제어 정보를 규정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시간&lt;/code&gt; : 두 기기 간의 통신 속도, 메시지의 순서 제어 등을 규정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 프로토콜의 기능&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단편화와 재결합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단편화 : 송신 측에서 전송할 데이터를 전송에 알맞은 작은 크기의 블록으로 자르는 작업&lt;/li&gt;
&lt;li&gt;재결합 : 수신 측에서 수신한 단편화된 데이터를 다시 모으는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;캡슐화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단편화 된 데이터에 주소, 오류 검출 코드, 프로토콜 제어 정보를 부가하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;흐름 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수신 측에서 송신 측의 데이터 전송 속도나 전송 량을 제어할 수 있는 기능&lt;/li&gt;
&lt;li&gt;정지-대기 방식이나 슬라이딩 윈도우 방식을 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오류 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송 중에 발생하는 오류를 검출하고 정정하여 데이터나 제어 정보의 파손에 대비하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동기화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송수신 측이 같은 상태를 유지하도록 타이밍을 맞추는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;순서 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송되는 데이터 블록에 전송 순서를 부여하여 연결 위주의 데이터 전송 방식에 사용&lt;/li&gt;
&lt;li&gt;흐름 제어 및 오류 제어를 용이하게 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주소 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 목적지까지 정확하게 전송될 수 있도록 목적지 이름, 주소, 경로를 부여하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다중화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 개의 통신 회선을 여러 가입자들이 동시에 사용하도록 하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경로 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송수신 측간의 송신 경로 중에서 최적의 패킷 교환 경로를 설정하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전송 서비스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송하려는 데이터가 사용하도록 하는 별도의 부가 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-tcpip&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-tcpip&quot; aria-label=&quot;5 tcpip permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) TCP/IP&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) TCP/IP의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터넷에 연결된 서로 다른 기종의 컴퓨터들이 데이터를 주고받을 수 있도록 하는 표준 프로토콜&lt;/li&gt;
&lt;li&gt;1960년대 말 ARPA에서 개발하여 ARPANET에서 사용하기 시작&lt;/li&gt;
&lt;li&gt;UNIX의 기본 프로토콜로 사용되었다가 현재는 인터넷 범용 프로토콜로 사용&lt;/li&gt;
&lt;li&gt;TCP(Transmission Control Protocol)과 IP(Internet Protocol)이 결합&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) TCP/IP의 구조&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cHEinG/btqCXwhPRII/r5Ir37wiGqp2w7lP4KeCPk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;3) 응용 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;FTP : 원격 파일 전송 프로토콜&lt;/li&gt;
&lt;li&gt;SMTP : 전자 우편 교환 서비스&lt;/li&gt;
&lt;li&gt;TELNET :원격 접속 서비스, 가상 터미널 기능 수행&lt;/li&gt;
&lt;li&gt;SNMP : TCP/IP의 관리 프로토콜, 기기의 네트워크 정보를 네트워크 관리 시스템에 보냄&lt;/li&gt;
&lt;li&gt;DNS : 도메인 네임을 IP주소로 매핑하는 시스템&lt;/li&gt;
&lt;li&gt;HTTP : WWW에서 HTML을 송수신하기 위한 표준 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 전송 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;양방향 연결형 서비스 제공&lt;/li&gt;
&lt;li&gt;가상 회선 연결 형태의 서비스 제공&lt;/li&gt;
&lt;li&gt;순서 제어, 오류 제어, 흐름 제어 기능을 함&lt;/li&gt;
&lt;li&gt;스트림 위주의 패킷 단위 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비연결형 서비스 제공&lt;/li&gt;
&lt;li&gt;실시간 전송에 유리하며, 신뢰성보다는 속도가 중요시되는 네트워크에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RTCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패킷의 전송 품질을 제어하기 위한 제어 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션에 참여한 각 참여자들에게 주기적으로 제어 정보를 전송&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 전송을 모니터링하고 최소한의 제어와 인증 기능만을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패킷은 항상 32비트의 경계로 끝남&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 인터넷 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP : 전송할 데이터에 주소를 지정하고 경로를 설정&lt;/li&gt;
&lt;li&gt;ICMP : IP와 조합하여 통신 중에 발생하는 오류의 처리와 전송 경로 변경 등을 위한 제어 메시지를 관리. 헤더는 8Byte로 구성&lt;/li&gt;
&lt;li&gt;IGMP : 멀티캐스트를 지원하는 호스트나 라우터 사이에서 멀티캐스트 그룹 유지를 위해 사용&lt;/li&gt;
&lt;li&gt;ARP : IP 주소를 MAC Address로 변환 (논리 주소 → 물리 주소)&lt;/li&gt;
&lt;li&gt;RARP : ARP의 반대로 MAC Address를 IP 주소로 변환 (물리 주소 → 논리 주소)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 네트워크 액세스 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IEEE 802 : LAN을 위한 표준 프로토콜&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IEEE 802.3(Ethernet) : CSMA/CD 방식의 LAN&lt;/li&gt;
&lt;li&gt;IEEE 802.4 : 토큰 박스&lt;/li&gt;
&lt;li&gt;IEEE 802.5 : 토큰링&lt;/li&gt;
&lt;li&gt;IEEE 802.11 : 무선 LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDLC : 비트 위주의 데이터 링크 제어 프로토콜&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;X.25 : 패킷 교환망을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DTE(신호 단말 장치), DCE(신호 통신 장비)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RS-232C : 공중전화 교환망을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(3)/</guid><pubDate>Sun, 03 May 2020 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-네트워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;3 네트워크 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 네트워크&lt;/h1&gt;
&lt;h2 id=&quot;1-인터넷&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9D%B8%ED%84%B0%EB%84%B7&quot; aria-label=&quot;1 인터넷 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 인터넷&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 인터넷의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TCP/IP 프로토콜을 기반으로 전 세계 수많은 컴퓨터와 네트워크들이 연결된 광범위한 컴퓨터 통신망&lt;/li&gt;
&lt;li&gt;미 국방성의 ARPANET에서 시작&lt;/li&gt;
&lt;li&gt;유닉스 운영체제를 기반으로 함&lt;/li&gt;
&lt;li&gt;인터넷에 연결된 컴퓨터는 고유한 IP 주소를 가짐&lt;/li&gt;
&lt;li&gt;인터넷을 구성하기 위해서는 브리지, 라우터, 게이트웨이가 사용됨&lt;/li&gt;
&lt;li&gt;백본 : 네트워크를 연결하여 중추적 역할을 하는 네트워크로 인터넷의 주가 되는 기간망&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) IP주소(Internet Protocol Address)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터넷에 연결된 컴퓨터를 구분하기 위한 고유한 주소&lt;/li&gt;
&lt;li&gt;8비트씩 4부분으로 구성됨(IPv4)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/QBwDO/btqC1Iuhb1K/PY4vWUEBcOKTiKxzgj6Xg1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;3) 서브네팅&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;할당된 네트워크 주소를 다시 여러 개의 작은 네트워크로 나누어 사용&lt;/li&gt;
&lt;li&gt;IPv4의 주소 부족 문제를 해결하기 위한 방법&lt;/li&gt;
&lt;li&gt;서브넷 마스크 : 네트워크 주소와 호스트 주소를 구분하기 위한 비트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) IPv6&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IPv4의 주소 부족 문제를 해결하기 위해 개발됨&lt;/li&gt;
&lt;li&gt;128비트의 긴 주소를 사용하여 주소 부족 문제를 해결할 수 있고, 자료 전송 속도가 빠름&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증성, 기밀성, 데이터 무결성의 지원으로 보안 문제 해결 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인증성&lt;/code&gt; : 사용자의 식별과 접근 권한 검증&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;기밀성&lt;/code&gt; : 시스템 내의 정보와 자료는 인가된 사용자에게만 접근 허용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;무결성&lt;/code&gt; : 시스템 내의 정보는 인가된 사용자만 수정 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Traffic Class, Flow Label을 이용하여 등급별, 서비스별로 패킷을 구분할 수 있어 품질 보장이 용이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Traffic Class : IPv6 패킷의 클래스나 우선순위를 나타내는 필드&lt;/li&gt;
&lt;li&gt;Flow Label : 네트워크 상에서 패킷들의 흐름에 대한 특성을 나타내는 필드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주소 체계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유니캐스트 : 1:1 통신&lt;/li&gt;
&lt;li&gt;멀티캐스트 : 1:N 통신&lt;/li&gt;
&lt;li&gt;애니캐스트 : 1:1 통신, 유니캐스트와 다르게 송신자와 가장 가까이 있는 수신자 간의 통신&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 도메인 네임&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP 주소 사람이 이해하기 쉬운 문자 형태로 표현한 것&lt;/li&gt;
&lt;li&gt;도메인 네임의 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bBbz7T/btqCZy62ybL/rGNbPMMU63zbAxV9QxKpk1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;도메인 네임을 IP 주소로 변환하는 역할을 하는 시스템을 DNS라고 하며 이런 역할을 하는 서버를 DNS 서버라고 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-osi-참조-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-osi-%EC%B0%B8%EC%A1%B0-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;2 osi 참조 모델 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) OSI 참조 모델&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다른 시스템 간의 원활한 통신을 위해 ISO(국제표준화기구)에서 제안한 통신 규약(프로토콜)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/csgUXu/btqCYE0EuFK/CyKsXLH0WkkJKxype3VC91/img.jpg&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;2) OSI 모델의 계층&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;물리 계층(비트)&lt;/li&gt;
&lt;li&gt;ex) 리피터, 허브&lt;/li&gt;
&lt;li&gt;전송에 필요한 두 장치 간의 실제 접속과 절단 등 기계적, 전기적, 기능적, 절차적 특성에 대한 규칙을 정의&lt;/li&gt;
&lt;li&gt;물리적 전송 매체와 신호 방식을 정의&lt;/li&gt;
&lt;li&gt;RS-232C, X.21 등의 표준&lt;/li&gt;
&lt;li&gt;데이터 링크 계층 (프레임)&lt;/li&gt;
&lt;li&gt;ex) 브리지&lt;/li&gt;
&lt;li&gt;두 개의 인접 개방 시스템들 간의 신뢰성 있고 효율적인 정보 전송을 할 수 있도록 함&lt;/li&gt;
&lt;li&gt;주요 기능 : 흐름 제어, 프레임 동기화, 오류 제어, 순서 제어&lt;/li&gt;
&lt;li&gt;HDLC, LAPB, LLC, MAC, LAPD, PPP 등의 표준&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네트워크 계층(패킷) ex) 라우터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개방 시스템들 간의 네트워크 연결을 관리하고 데이터의 교환 및 중계 기능&lt;/li&gt;
&lt;li&gt;네트워크 연결 설정, 유지, 해제&lt;/li&gt;
&lt;li&gt;경로 설정, 데이터 교환 및 중계, 트래픽 제어, 패킷 정보 전송 수행&lt;/li&gt;
&lt;li&gt;X.25, IP 등의 표준&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전송 계층 (세그먼트) ex) 게이트웨이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;논리적 안정과 균일한 데이터 전송 서비스를 제공&lt;/li&gt;
&lt;li&gt;종단 시스템 간의 투명한 데이터 전송을 가능하게 함&lt;/li&gt;
&lt;li&gt;종단 시스템 간의 전송 연결 설정, 데이터 전송, 연결 해제 기능&lt;/li&gt;
&lt;li&gt;주소 설정, 다중화, 오류 제어, 흐름 제어&lt;/li&gt;
&lt;li&gt;TCP, UDP 등의 표준&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션 계층 (메세지)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송수신 측 간의 관련성을 유지하고 대화 제어를 담당&lt;/li&gt;
&lt;li&gt;동기점 : 송수신 측간의 대화 동기를 위해 전송하는 정보를 일정한 부분에 두어 정보의 수신 상태를 체크하는 포인트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;표현 계층 (메세지)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 응용 계층, 세션 계층에 보내기 전에 계층에 맞게 변환&lt;/li&gt;
&lt;li&gt;서로 다른 데이터 표현 형태를 갖는 시스템 간 상호 접속을 위해 필요한 계층&lt;/li&gt;
&lt;li&gt;코드 변환, 데이터 암호화, 데이터 압축, 구문 검색, 정보 형식 변환, 문맥 관리 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;응용 계층&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 OSI 환경에 접속할 수 있도록 서비스 제공&lt;/li&gt;
&lt;li&gt;프로세스 간의 정보 교환, 전자 사서함, 가상 터미널 등의 서비스 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-네트워크-관련-장비&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B4%80%EB%A0%A8-%EC%9E%A5%EB%B9%84&quot; aria-label=&quot;3 네트워크 관련 장비 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 네트워크 관련 장비&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 네트워크 인터페이스 카드(Network Interface Card)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터를 연결하는 장치로 정보 전송 시 정보가 케이블을 통해 전송될 수 있도록 정보 형태를 변경&lt;/li&gt;
&lt;li&gt;이더넷 카드 혹은 네트워크 어댑터라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 허브(hub)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가까운 거리의 컴퓨터를 연결하는 장치&lt;/li&gt;
&lt;li&gt;각 회선을 통합적으로 관리하며 신호 증폭 기능을 하는 리피터의 역할도 포함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;더미 허브&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네트워크에 흐르는 모든 데이터를 단순히 연결만 함&lt;/li&gt;
&lt;li&gt;LAN이 보유한 대역폭을 나누어 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스위칭 허브&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네트워크상에 흐르는 데이터의 유무 및 흐름을 제어하여 각각의 노드가 허브의 최대 대역폭을 사용할 수 있는 지능형 허브&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 리피터(Repeater)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;신호 재생&lt;/li&gt;
&lt;li&gt;전송되는 신호가 원래의 형태와 다르게 왜곡되거나 약해질 경우 원래의 신호 형태로 재생하여 다시 전송하는 역할&lt;/li&gt;
&lt;li&gt;근접한 네트워크 사이에 신호를 전송&lt;/li&gt;
&lt;li&gt;전송 거리의 연장 또는 배선의 자유도를 높이는 용도&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 브리지(Bridge)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동종의 LAN 연결&lt;/li&gt;
&lt;li&gt;LAN과 LAN을 연결하거나 LAN안에서 컴퓨터 그룹을 연결&lt;/li&gt;
&lt;li&gt;데이터 링크 계층 중 MAC 계층에서 사용되므로 MAC 브리지라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 스위치(Switch)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치&lt;/li&gt;
&lt;li&gt;포트마다 각기 다른 전송속도를 지원하도록 제어할 수 있음&lt;/li&gt;
&lt;li&gt;수십 ~ 수백 개의 포트를 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 라우터(Router)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 LAN의 연결과 경로 설정&lt;/li&gt;
&lt;li&gt;LAN과 LAN의 연결 기능에 데이터 전송의 최적 경로를 선택할 수 있는 기능을 추가&lt;/li&gt;
&lt;li&gt;서로 다른 LAN이나 LAN과 WAN의 연결도 수행&lt;/li&gt;
&lt;li&gt;접속 가능한 경로에 대한 정보를 Routing Table에 저장하여 보관&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;7) 게이트웨이(Gateway)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로토콜이 다른 네트워크 사이를 연결&lt;/li&gt;
&lt;li&gt;전 계층의 프로토콜 구조가 다른 네트워크의 연결을 수행&lt;/li&gt;
&lt;li&gt;LAN에서 다른 네트워크에 데이터를 송수신하는 출입구 역할을 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-프로토콜의-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%98-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;4 프로토콜의 개념 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 프로토콜의 개념&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서로 다른 기기들 간의 데이터 교환을 원활하게 수행할 수 있도록 표준화시켜 놓은 통신 규약&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 프로토콜의 기본 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;구문&lt;/code&gt; : 전송하고자 하는 데이터의 형식, 부호화, 신호 레벨 등을 규정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;의미&lt;/code&gt; : 두 기기 간의 효율적이고 정확한 정보 전송을 위한 협조 사항과 오류 관리를 위한 제어 정보를 규정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시간&lt;/code&gt; : 두 기기 간의 통신 속도, 메시지의 순서 제어 등을 규정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 프로토콜의 기능&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단편화와 재결합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단편화 : 송신 측에서 전송할 데이터를 전송에 알맞은 작은 크기의 블록으로 자르는 작업&lt;/li&gt;
&lt;li&gt;재결합 : 수신 측에서 수신한 단편화된 데이터를 다시 모으는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;캡슐화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단편화 된 데이터에 주소, 오류 검출 코드, 프로토콜 제어 정보를 부가하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;흐름 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수신 측에서 송신 측의 데이터 전송 속도나 전송 량을 제어할 수 있는 기능&lt;/li&gt;
&lt;li&gt;정지-대기 방식이나 슬라이딩 윈도우 방식을 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오류 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송 중에 발생하는 오류를 검출하고 정정하여 데이터나 제어 정보의 파손에 대비하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동기화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송수신 측이 같은 상태를 유지하도록 타이밍을 맞추는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;순서 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송되는 데이터 블록에 전송 순서를 부여하여 연결 위주의 데이터 전송 방식에 사용&lt;/li&gt;
&lt;li&gt;흐름 제어 및 오류 제어를 용이하게 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주소 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 목적지까지 정확하게 전송될 수 있도록 목적지 이름, 주소, 경로를 부여하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다중화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 개의 통신 회선을 여러 가입자들이 동시에 사용하도록 하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경로 제어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;송수신 측간의 송신 경로 중에서 최적의 패킷 교환 경로를 설정하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전송 서비스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전송하려는 데이터가 사용하도록 하는 별도의 부가 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-tcpip&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-tcpip&quot; aria-label=&quot;5 tcpip permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) TCP/IP&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) TCP/IP의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터넷에 연결된 서로 다른 기종의 컴퓨터들이 데이터를 주고받을 수 있도록 하는 표준 프로토콜&lt;/li&gt;
&lt;li&gt;1960년대 말 ARPA에서 개발하여 ARPANET에서 사용하기 시작&lt;/li&gt;
&lt;li&gt;UNIX의 기본 프로토콜로 사용되었다가 현재는 인터넷 범용 프로토콜로 사용&lt;/li&gt;
&lt;li&gt;TCP(Transmission Control Protocol)과 IP(Internet Protocol)이 결합&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) TCP/IP의 구조&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cHEinG/btqCXwhPRII/r5Ir37wiGqp2w7lP4KeCPk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 67%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;3) 응용 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;FTP : 원격 파일 전송 프로토콜&lt;/li&gt;
&lt;li&gt;SMTP : 전자 우편 교환 서비스&lt;/li&gt;
&lt;li&gt;TELNET :원격 접속 서비스, 가상 터미널 기능 수행&lt;/li&gt;
&lt;li&gt;SNMP : TCP/IP의 관리 프로토콜, 기기의 네트워크 정보를 네트워크 관리 시스템에 보냄&lt;/li&gt;
&lt;li&gt;DNS : 도메인 네임을 IP주소로 매핑하는 시스템&lt;/li&gt;
&lt;li&gt;HTTP : WWW에서 HTML을 송수신하기 위한 표준 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 전송 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;양방향 연결형 서비스 제공&lt;/li&gt;
&lt;li&gt;가상 회선 연결 형태의 서비스 제공&lt;/li&gt;
&lt;li&gt;순서 제어, 오류 제어, 흐름 제어 기능을 함&lt;/li&gt;
&lt;li&gt;스트림 위주의 패킷 단위 전달&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;비연결형 서비스 제공&lt;/li&gt;
&lt;li&gt;실시간 전송에 유리하며, 신뢰성보다는 속도가 중요시되는 네트워크에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RTCP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패킷의 전송 품질을 제어하기 위한 제어 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세션에 참여한 각 참여자들에게 주기적으로 제어 정보를 전송&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 전송을 모니터링하고 최소한의 제어와 인증 기능만을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패킷은 항상 32비트의 경계로 끝남&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 인터넷 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP : 전송할 데이터에 주소를 지정하고 경로를 설정&lt;/li&gt;
&lt;li&gt;ICMP : IP와 조합하여 통신 중에 발생하는 오류의 처리와 전송 경로 변경 등을 위한 제어 메시지를 관리. 헤더는 8Byte로 구성&lt;/li&gt;
&lt;li&gt;IGMP : 멀티캐스트를 지원하는 호스트나 라우터 사이에서 멀티캐스트 그룹 유지를 위해 사용&lt;/li&gt;
&lt;li&gt;ARP : IP 주소를 MAC Address로 변환 (논리 주소 → 물리 주소)&lt;/li&gt;
&lt;li&gt;RARP : ARP의 반대로 MAC Address를 IP 주소로 변환 (물리 주소 → 논리 주소)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 네트워크 액세스 계층의 주요 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IEEE 802 : LAN을 위한 표준 프로토콜&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IEEE 802.3(Ethernet) : CSMA/CD 방식의 LAN&lt;/li&gt;
&lt;li&gt;IEEE 802.4 : 토큰 박스&lt;/li&gt;
&lt;li&gt;IEEE 802.5 : 토큰링&lt;/li&gt;
&lt;li&gt;IEEE 802.11 : 무선 LAN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDLC : 비트 위주의 데이터 링크 제어 프로토콜&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;X.25 : 패킷 교환망을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DTE(신호 단말 장치), DCE(신호 통신 장비)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RS-232C : 공중전화 교환망을 통한 DTE와 DCE 간의 인터페이스를 제공하는 프로토콜&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(2)/</guid><pubDate>Sat, 02 May 2020 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;2-응용-sw-기초-기술-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%9D%91%EC%9A%A9-sw-%EA%B8%B0%EC%B4%88-%EA%B8%B0%EC%88%A0-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;2 응용 sw 기초 기술 활용 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2 .응용 SW 기초 기술 활용&lt;/h1&gt;
&lt;h2 id=&quot;1-운영체제의-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;1 운영체제의 개념 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 운영체제의 개념&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 시스템의 자원들을 효율적으로 관리하며, 사용자가 컴퓨터를 편리하고 효과적으로 사용할 수 있도록 환경을 제공하는 여러 프로그램의 모임&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 운영체제의 목적(처리 능력, 반환 시간, 사용 가능도, 신뢰도)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;운영체제의 성능을 평가하는 기준&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;처리능력&lt;/code&gt; : 일정 시간 내에 시스템이 처리하는 일의 양&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;반환 시간(=응답 시간)&lt;/code&gt; : 시스템에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸리는 시간&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;사용 가능도&lt;/code&gt; : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;신뢰도&lt;/code&gt; : 주어진 문제를 정확하게 해결하는 정도&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 운영체제의 기능&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로세서(처리기 / Processor / CPU), 기억장치(주기억, 보조기억), 입 출력 장치, 파일 및 정보 등의 자원 관리&lt;/li&gt;
&lt;li&gt;자원을 효율적으로 관리하기 위해 스케쥴링 기능 제공&lt;/li&gt;
&lt;li&gt;사용자와 시스템 간 편리한 인터페이스 제공&lt;/li&gt;
&lt;li&gt;각종 하드웨어와 네트워크를 관리 제어&lt;/li&gt;
&lt;li&gt;데이터 관리, 데이터 및 자원의 공유 기능 제공&lt;/li&gt;
&lt;li&gt;시스템의 오류 검사 및 복구&lt;/li&gt;
&lt;li&gt;자원 보호 기능 제공&lt;/li&gt;
&lt;li&gt;입출력에 대한 보조 기능 제공&lt;/li&gt;
&lt;li&gt;가상 계산기 기능 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 운영체제의 주요 자원 관리(프로세스 관리, 기억장치 관리, 주변장치 관리, 파일 관리)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 관리 : 프로세스 스케쥴링 및 동기화 관리&lt;/li&gt;
&lt;li&gt;기억장치 관리 : 프로세스에게 메모리 할당 및 회수 관리&lt;/li&gt;
&lt;li&gt;주변장치 관리 : 입출력장치 스케쥴링 및 전반적인 관리&lt;/li&gt;
&lt;li&gt;파일 관리 : 파일의 생성과 삭제, 변경, 유지 등의 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 운영체제의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Windows, UNIX, LINUX, MacOS, MS-DOS 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-windows&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-windows&quot; aria-label=&quot;2 windows permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) Windows&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) windows&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;마이크로소프트에서 개발한 운영체제&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) Windows 시스템의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;그래픽 사용자 인터페이스(GUI, Graphci User Interface) : 키보드로 명령어를 수행하지 않고 마우스로 아이콘이나 메뉴를 선택하여 모든 작업을 수행&lt;/li&gt;
&lt;li&gt;선점형 멀티태스킹 : 동시에 여러 개의 프로그램을 실행하는 멀티태스킹을 하면서 운영체제가 각 작업의 CPU 이용 시간을 제어하여 응용 프로그램 실행 중 문제가 발생하면 해당 프로그램을 강제 종료시키고 모든 시스템 자원을 반환&lt;/li&gt;
&lt;li&gt;Pnp(Plug and Play) : 하드웨어를 설치할 때 해당 하드웨어를 사용하는데 필요한 시스템 환경을 운영체제가 자동으로 구성해주는 기능&lt;/li&gt;
&lt;li&gt;OLE(Object Linking and Embedding) : 다른 응용 프로그램에서 작성된 문자나 그림 등의 개체 현재 작성 중인 문서에 자유롭게 연결하거나 삽입하여 편집할 수 있는 기능&lt;/li&gt;
&lt;li&gt;Single User 시스템 : 컴퓨터 한대를 한 사람이 독점 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-unix--linux--macos&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-unix--linux--macos&quot; aria-label=&quot;3 unix  linux  macos permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) UNIX / LINUX / MacOS&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) UNIX의 개요 및 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1960년대 AT&amp;#x26;T 벨(Bell) 연구소, MIT, General Electric이 공동 개발한 운영체제&lt;/li&gt;
&lt;li&gt;시분할 시스템을 위해 설계된 대화식 운영체제&lt;/li&gt;
&lt;li&gt;소스코드가 개방형 시스템로 구성되어 있음&lt;/li&gt;
&lt;li&gt;대부분 C언어로 작성되어 이식성이 높으며 장치, 프로세스 간 호환성이 높음&lt;/li&gt;
&lt;li&gt;다중 사용자(Multi-User) 및 다중 작업(Multi-Tasking)을 지원&lt;/li&gt;
&lt;li&gt;트리 구조의 파일 시스템을 가짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) UNIX 시스템의 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;커널(Kernel)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터가 부팅될 때 주기억장치에 적재된 후 상주하면서 실행됨&lt;/li&gt;
&lt;li&gt;하드웨어를 보호하고 프로그램과 하드웨어 간의 인터페이스 역할을 담당&lt;/li&gt;
&lt;li&gt;프로세스 관리, 기억장치 관리, 파일 관리, 입출력 관리, 프로세스 간 통신, 데이터 전송 및 변환 등 여러 가지 기능 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;쉘(Shell)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어를 인식하여 수행하는 명령어 해석기&lt;/li&gt;
&lt;li&gt;시스템과 사용자 간의 인터페이스 담당&lt;/li&gt;
&lt;li&gt;DOS의 COMMAND.COM과 같은 기능 수행&lt;/li&gt;
&lt;li&gt;주기억장치에 상주하지 않고 명령어가 포함된 파일 형태로 존재&lt;/li&gt;
&lt;li&gt;보조기억장치에서 교체 처리 가능&lt;/li&gt;
&lt;li&gt;파이프라인 기능(둘 이상의 명령을 함께 묶어 처리한 결과를 다른 명령의 입력으로 전환하는 기능) 지원&lt;/li&gt;
&lt;li&gt;입출력 재지정을 통해 입력과 출력의 방향을 변경할 수 있음&lt;/li&gt;
&lt;li&gt;공용 Shell이나 사용자가 만들 Shell을 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유틸리티(Utility Program)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 작성한 외부 프로그램을 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOS에서의 외부 명령어에 해당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;에디터, 컴파일러, 인터프리터, 디버거 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) LINUX의 개요 및 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1991년 리누스 토발즈가 UNIX를 기반으로 개발한 운영체제&lt;/li&gt;
&lt;li&gt;프로그램 소스 코드가 무료로 공개되어 있어 사용자가 원하는 기능을 추할 수 있고 다양한 플랫폼에 설치하여 사용이 가능하여 재배포가 가능&lt;/li&gt;
&lt;li&gt;UNIX와 완벽하게 호환&lt;/li&gt;
&lt;li&gt;대부분의 특징이 UNIX와 동일&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) MacOS의 개요 및 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1980년대 애플사가 UNIX를 기반으로 개발한 운영체제&lt;/li&gt;
&lt;li&gt;애플사에서 생산하는 제품에서만 사용 가능&lt;/li&gt;
&lt;li&gt;드라이버 설치 및 install / uninstall 과정이 단순&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-저장장치-관리의-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98-%EA%B4%80%EB%A6%AC%EC%9D%98-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;3 저장장치 관리의 개요 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 저장장치 관리의 개요&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1 ) 저장장치 계층 구조의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;주기억장치는 각기 자신의 주소를 가지는 워드 또는 바이트들로 구성되어 주소를 이용하여 접근&lt;/li&gt;
&lt;li&gt;보조기억장치에 있는 프로그램이나 데이터는 CPU가 직접 액세스 할 수 없음&lt;/li&gt;
&lt;li&gt;보조기억장치에 있는 데이터는 주기억장치에 적재된 후 CPU에 의해 액세스&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 기억장치의 관리 전략의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;반입(Fetch)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;배치(Placement)&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;재배치(Replacement)&lt;/code&gt; 전략&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) 반입(Fetch) 전략&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치에 보관중인 데이터를 언제 주기억장치에 적재할 것인지를 결정하는 전략&lt;/li&gt;
&lt;li&gt;요구 반입 : 실행중인 프로그램이 특정 프로그램이나 데이터 등의 참조를 요구할 때 적재&lt;/li&gt;
&lt;li&gt;예상 반입 : 실행중인 프로그램에 의해 참조될 프로그램이나 데이터를 미리 예상하여 적재&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) 배치(Placement) 전략&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;새로 반입되는 데이터를 주기억장치의 어디에 위치시킬 것인지를 결정하는 전략&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;최초 적합(First Fit)&lt;/code&gt; : 배치가 가능한 크기의 빈 영역 중에서 첫 번째 분할 영역에 배치&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;최적 적합(Best Fit)&lt;/code&gt; : 배치가 가능한 크기의 빈 영역 중에서 단편화를 가장 적게 남기는 분할 영역에 배치&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;최악 적합(Worst Fit)&lt;/code&gt; : 배치가 가능한 크기의 빈 영역중에서 단편화를 가장 많이 남기는 분할 영역에 배치&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단편화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내부 단편화 : 배치 후 남은 공간&lt;/li&gt;
&lt;li&gt;외부 단편화 : 배치를 못해 빈 공간으로 남아있는 공간&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(3) 재배치(Replacement) 전략&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;주기억장치의 모든 영역이 이미 사용중인사용 중인 상태에서 새로운 프로그램이나 데이터가 배치하려고 할 때, 이미 사용 중인 영역에서 어느 영역을 교체할 것인지를 결정하는 전략&lt;/li&gt;
&lt;li&gt;FIFO, OPT, LRU, LFU, NUR, SCR 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-주기억장치-할당-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%A3%BC%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%ED%95%A0%EB%8B%B9-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;4 주기억장치 할당 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 주기억장치 할당 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 주기억장치 할당의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이나 데이터를 실행시키기 위해 주기억장치에 어떻게 할당할 것인지에 대한 내용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연속 할당 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 주 기억장치에 연속으로 할당하는 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단일 분할 할당 기법 : 오버레이, 스와핑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다중 분할 기법 : 고정 분할 할당 기법, 동적 분할 할당 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분산 할당 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 특정 단위의 조각으로 나누어 주기억장치 내에 분산하여 할당하는 기법&lt;/li&gt;
&lt;li&gt;페이징 기법, 세그먼테이션 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 단일 분할 할당 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;주기억장치를 운영체제 영역과 사용자 영역으로 나누어 한순간에는 오직 한 명의 사용자만이 주기억장치의 사용자 영역을 사용하는 기법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;오버레이 기법 : 주기억장치보다 큰 사용자 프로그램을 실행하기 위한 기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치에 저장된 하나의 프로그램을 여러개의 조각으로 분할한 후 필요한 조각을 차례로 주기억장치에 적재하여 프로그램을 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스와핑 기법 : 하나의 프로그램 전체를 주기억장치에 할당하여 사용하다 필요에 따라 다른 프로그램과 교체하는 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 다중 분할 할당 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;고정 분할 할당 기법 : 프로그램에 할당하기 전에 운영체제가 주기억장치의 사용자 영역을 여러 개의 고정된 크기로 분할하고 준비상태 큐에서 준비 중인 프로그램을 각 영역에서 할당하여 수행하는 기법&lt;/li&gt;
&lt;li&gt;가변 분할 할당 기법 : 미리 주기억장치에 분할해 놓는 것이 아닌 프로그램을 주기억장치에 적재하면서 필요한 만큼의 크기로 영역을 분할&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-가상-기억장치-구현-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EA%B0%80%EC%83%81-%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%EA%B5%AC%ED%98%84-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;5 가상 기억장치 구현 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 가상 기억장치 구현 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 가상 기억장치의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치의 일부를 주기억장치처럼 사용하는 것&lt;/li&gt;
&lt;li&gt;용량이 작은 주기억장치를 마치 큰 용량을 가진 것처럼 사용할 수 있음&lt;/li&gt;
&lt;li&gt;프로그램을 여러 작은 블록 단위로 나누어서 가상 기억장치에 보관해 놓고, 프로그램 실행 시 요구되는 블록만 주기억장치에 불연속적으로 할당하여 처리&lt;/li&gt;
&lt;li&gt;주기억장치의 이용률과 다중 프로그래밍의 효율 상승&lt;/li&gt;
&lt;li&gt;가상기억장치에 저장된 프로그램을 실행하려면 가상 기억장치의 주소를 주기억장치의 주소로 바꾸는 주소 변환(Mapping) 작업이 필요&lt;/li&gt;
&lt;li&gt;연속 할당 방식에서 발생할 수 있는 단편화를 해결할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 페이징 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가상기억장치의 보관되어 있는 프로그램과 주기억장치의 영역을 동일한 크기로 나눈 후 나눠진 프로그램을 동일하게 나눠진 주기억장치의 영역에 적재시켜 실행하는 기법&lt;/li&gt;
&lt;li&gt;프로그램을 일정한 크기로 나눈 크기를 페이지라 하고 페이지 크기로 일정하게 나누어진 주기억장치의 단위를 페이지 프레임이라고 함&lt;/li&gt;
&lt;li&gt;외부 단편화는 발생하지 않으나 &lt;code class=&quot;language-text&quot;&gt;내부 단편화&lt;/code&gt;는 발생할 수 있음&lt;/li&gt;
&lt;li&gt;Mapping 작업을 위해서 페이지 맵 테이블이 필요함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 세그먼트 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;가상기억장치에 보관되어 있는 프로그램을 다양한 크기의 논리적인 단위로 나눈 후 주기억장치에 적재시켜 실행시키는 방법&lt;/li&gt;
&lt;li&gt;프로그램을 논리적인 크기로 나눈 단위를 세그먼트라고 함&lt;/li&gt;
&lt;li&gt;내부 단편화는 발생하지 않으나 &lt;code class=&quot;language-text&quot;&gt;외부 단편화&lt;/code&gt;는 발생할 수 있음&lt;/li&gt;
&lt;li&gt;Mapping 작업을 위해서 세그먼트 맵 테이블이 필요함&lt;/li&gt;
&lt;li&gt;세그먼트가 주기억장치에 적재될 때 다른 세그먼트에게 할당된 영역을 침범할 수 없으며 이를 위해 기억장치 보호키가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-페이지-교체-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;6 페이지 교체 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) 페이지 교체 알고리즘&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 페이지 교체 알고리즘&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;페이지 부재가 발생했을 때 가상 기억장치의 필요한 페이지를 주기억장치에 적재해야 하는데 이럴 경우 주기억장치의 모든 페이지 프레임이 사용 중이면 어떤 페이지 프레임을 선택하여 교체할 것인지 결정하는 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(1) OPT(OPTimal replacement, 최적 교체)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;앞으로 가장 오랫동안 사용하지 않을 페이지를 교체(예상)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;(2) FIFO(First In First Out)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;페이지가 주기억장치에 적재될 때마다 시간을 기억시켜 가장 먼저 들어와서 오래 있었던 페이지를 교체&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;먼저 들어온 것이 먼저 나감&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;순서&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;요구&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1 -&gt; 4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2 -&gt; 5&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;부재&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;(3) LRU(Least Recently Used)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;최근에 가장 오랫동안 사용하지 않은 페이지를 교체&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;페이지마다 Counter나 Stack을 두어 현시점에서 가장 오래전에 사용된 페이지 교체&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;순서&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;요구&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1(1)&lt;/td&gt;
&lt;td&gt;1(1)&lt;/td&gt;
&lt;td&gt;1(1)&lt;/td&gt;
&lt;td&gt;1(1)&lt;/td&gt;
&lt;td&gt;1(5)&lt;/td&gt;
&lt;td&gt;1(5)&lt;/td&gt;
&lt;td&gt;1(5)&lt;/td&gt;
&lt;td&gt;1(5)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;1 -&gt; 5&lt;/em&gt;(9)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2(2)&lt;/td&gt;
&lt;td&gt;2(2)&lt;/td&gt;
&lt;td&gt;2(4)&lt;/td&gt;
&lt;td&gt;2(4)&lt;/td&gt;
&lt;td&gt;2(6)&lt;/td&gt;
&lt;td&gt;2(6)&lt;/td&gt;
&lt;td&gt;2(8)&lt;/td&gt;
&lt;td&gt;2(8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3(3)&lt;/td&gt;
&lt;td&gt;3(3)&lt;/td&gt;
&lt;td&gt;3(3)&lt;/td&gt;
&lt;td&gt;3(3)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;3 -&gt; 4&lt;/em&gt;(7)&lt;/td&gt;
&lt;td&gt;4(7)&lt;/td&gt;
&lt;td&gt;4(7)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;부재&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;(4) LFU(Least Frequently Used)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;사용 빈도가 가장 적은 페이지를 교체&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;순서&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;요구&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1 (+1)&lt;/td&gt;
&lt;td&gt;1 (+1)&lt;/td&gt;
&lt;td&gt;1 (+1)&lt;/td&gt;
&lt;td&gt;1 (+1)&lt;/td&gt;
&lt;td&gt;1 (+2)&lt;/td&gt;
&lt;td&gt;1 (+2)&lt;/td&gt;
&lt;td&gt;1 (+2)&lt;/td&gt;
&lt;td&gt;1 (+2)&lt;/td&gt;
&lt;td&gt;1 (+2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2 (+1)&lt;/td&gt;
&lt;td&gt;2 (+1)&lt;/td&gt;
&lt;td&gt;2 (+2)&lt;/td&gt;
&lt;td&gt;2 (+2)&lt;/td&gt;
&lt;td&gt;2 (+3)&lt;/td&gt;
&lt;td&gt;2 (+3)&lt;/td&gt;
&lt;td&gt;2 (+4)&lt;/td&gt;
&lt;td&gt;2 (+4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3 (+1)&lt;/td&gt;
&lt;td&gt;3 (+1)&lt;/td&gt;
&lt;td&gt;3 (+1)&lt;/td&gt;
&lt;td&gt;3 (+1)&lt;/td&gt;
&lt;td&gt;_3 -&gt; 4 _ (+1)&lt;/td&gt;
&lt;td&gt;4 (+1)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4 -&gt; 5&lt;/em&gt; (+1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;부재&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;(5) NUR(Not Used Frequency)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;최근에 사용하지 않은 페이지를 교체&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;최근 사용 여부를 확인하기 위해 페이지마다 참조 비트와 변형 비트를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-가상-기억장치-기타-관리-사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EA%B0%80%EC%83%81-%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-%EA%B8%B0%ED%83%80-%EA%B4%80%EB%A6%AC-%EC%82%AC%ED%95%AD&quot; aria-label=&quot;7 가상 기억장치 기타 관리 사항 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7) 가상 기억장치 기타 관리 사항&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 페이지 크기에 따른 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;페이지 크기가 작을 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단편화와 주기억장치로 이동하는 시간 감소&lt;/li&gt;
&lt;li&gt;불필요한 내용이 적재될 확률이 낮아 워킹 셋이 효율적으로 유지&lt;/li&gt;
&lt;li&gt;Locality에 더욱 일치하여 기억장치에 효율 상승&lt;/li&gt;
&lt;li&gt;페이지 맵 테이블 크기가 커지므로 매핑 속도가 늦어짐&lt;/li&gt;
&lt;li&gt;디스크 접근 횟수가 많아져 전체적인 입출력 시간이 늘어남&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;페이지 크기가 클 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단편화와 주기억장치로 이동하는 시간이 증가&lt;/li&gt;
&lt;li&gt;프로세스 수행에 불필요한 내용까지 적재될 수 있음&lt;/li&gt;
&lt;li&gt;페이지 맵 테이블 크기가 작아지므로 매핑 속도가 빨라짐&lt;/li&gt;
&lt;li&gt;디스크 접근 횟수가 줄어들어 전체적인 입출력 시간이 줄어듦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 구역성(Locality)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 실행되는 동안 주기억장치를 참조할 때 일부 페이지만 집중적으로 참조하는 성질이 있다는 이론&lt;/li&gt;
&lt;li&gt;스래싱을 방지하기 위한 워킹 셋 이론의 기반, 프로세스가 집중적으로 사용하는 페이지를 알아내는 방법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;시간 구역성&lt;/code&gt; : 프로세스가 실행되면서 하나의 페이지를 일정 시간 동안 집중적으로 액세스 하는 현상&lt;/p&gt;
&lt;p&gt;(순환, 서브 루틴, 스택, 집계에 사용되는 변수)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;공간 구역성&lt;/code&gt; : 프로세스 실행 시 일정 위치의 페이지를 집중적으로 액세스하는 현상&lt;/p&gt;
&lt;p&gt;(배열 순회, 순차 코드, 변수의 선언 부분)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 워킹 셋&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;자주 참조하는 페이지들의 집합&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;자주 참조되는 워킹 셋을 주기억장치에 상주시켜 페이지 부재 및 페이지 교체 현상이 줄어들어 프로세스의 기억장치 사용이 안정됨&lt;/li&gt;
&lt;li&gt;워킹 셋은 시간에 따라 변화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 페이지 부재 빈도 방식&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;페이지 부재 빈도는 페이지 부재가 일어나는 횟수&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;페이지 부재율에 따라 주기억장치에 있는 페이지 프레임 수를 조정하여 적정 수준으로 유지하는 방식&lt;/li&gt;
&lt;li&gt;운영체제는 프로세스 실행 초기에 임의의 페이지 프레임 할당 후 페이지 부재율에 따라 프레임을 할당하거나 회수&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 프리 페이징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;처음의 과도한 페이지 부재를 방지하기 위해 필요할 것 같은 모든 페이지를 한꺼번에 페이지 프레임에 적재하는 기법&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 스래싱&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;프로세스의 처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;전체 프로세스 성능이 저하됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-프로세스의-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;8 프로세스의 개요 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8) 프로세스의 개요&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 프로세스의 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로세서에 의해 처리되는 사용자 프로그램이나 시스템 프로그램을 의미&lt;/li&gt;
&lt;li&gt;실행 중인 프로그램을 의미하며 작업 혹은 태스크라고도 함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로세스의 또 다른 형태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCB를 가진 프로그램&lt;/li&gt;
&lt;li&gt;실기억 장치에 저장된 프로그램&lt;/li&gt;
&lt;li&gt;디스패치가 가능한 단위&lt;/li&gt;
&lt;li&gt;프로시저(부 프로그램)가 활동 중인 것&lt;/li&gt;
&lt;li&gt;비동기적 행위(다수의 프로세스가 서로 독립적으로 실행)를 일으키는 주체&lt;/li&gt;
&lt;li&gt;지정된 결과를 얻기 위한 일련의 계통적 동작&lt;/li&gt;
&lt;li&gt;목적 또는 결과에 따라 발생되는 사건들의 과정&lt;/li&gt;
&lt;li&gt;운영체제가 관리하는 실행 단위&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) PCB(Process Control Block)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;운영체제가 프로세스에 대한 중요한 정보를 저장해 놓은 곳&lt;/li&gt;
&lt;li&gt;프로세스가 생성될 때마다 고유의 PCB를 생성하고 프로세스 완료 시 제거됨&lt;/li&gt;
&lt;li&gt;PCB에 저장되는 정보 : 프로세스 현재 상태&lt;/li&gt;
&lt;li&gt;포인터 : 프로세스 고유 식별자&lt;/li&gt;
&lt;li&gt;스케줄링 및 프로세스의 우선순위 : CPU 레지스터 정보&lt;/li&gt;
&lt;li&gt;주기억장치 관리 정보 : 입출력 상태 정보&lt;/li&gt;
&lt;li&gt;계정 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 프로세스 상태 전이&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bEmmSV/btqCVC3gEVO/M12KKkK6iwuE0ZHTAxPnz0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 25%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제출&lt;/code&gt; : 작업을 처리하기 위해 사용자가 작업을 시스템에 제출한 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;접수&lt;/code&gt; : 제출된 작업이 스풀 공간인 디스크의 할당 위치에 저장한 상태&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;준비&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 프로세서를 할당받기 위해 기다리고 있는 상태&lt;/li&gt;
&lt;li&gt;프로세스는 준비상태 큐에서 실행 준비&lt;/li&gt;
&lt;li&gt;Job 스케줄러에 의해 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;실행&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;준비상태 큐에 있는 프로세스가 프로세서를 할당받아 실행되는 상태&lt;/li&gt;
&lt;li&gt;프로세스 수행이 완료되기 전에 프로세스에게 주어진 할당 시간이 종료되면 프로세스는 준비 상태로 전이&lt;/li&gt;
&lt;li&gt;실행 중인 프로세스에 입출력 처리가 필요하면 실행중인 프로세스는 대기상태로 전이&lt;/li&gt;
&lt;li&gt;CPU 프로세스에 의해 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;대기&lt;/code&gt; : 프로세스에 입출력 처리가 필요하면 현재 실행중인 프로세스가 중단되고, 입출력 처리가 완료될 때까지 대기하고 있는 상태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;종료&lt;/code&gt; : 프로세스의 실행이 끝나고 프로세스 할당이 해제된 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 프로세스 상태 전이 관련 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dispatch : 준비 상태에 대기하고 있는 프로세스 중 하나가 프로세스를 할당받아 실행 상태로 전이되는 과정&lt;/li&gt;
&lt;li&gt;Wake up : 입출력 작업이 완료되어 프로세스가 대기 상태에서 준비 상태로 전이되는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;9-병행-프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EB%B3%91%ED%96%89-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;9 병행 프로세스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9) 병행 프로세스&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 병행 프로세스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 여러 개가 수행 상태에 있는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 임계 구역&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다중 프로그래밍 운영체제에서 여러 개의 프로세스가 공유하는 데이터 및 자원에 대하여 어느 한 시점에서는 하나의 프로세스만 자원 또는 데이터를 사용하도록 지정된 공유 자원(영역)&lt;/li&gt;
&lt;li&gt;임계 구역에는 하나의 프로세스만 접근할 수 있으며, 해당 프로세스가 자원을 반납한 후에만 다른 프로세스가 자원이나 데이터를 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 상호 배제(Mutual Exclusion)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;특정 프로세스가 공유 자원을 사용하고 있을 경우 다른 프로세스가 해당 공유 자원을 사용하지 못하게 제어하는 기법&lt;/li&gt;
&lt;li&gt;여러 프로세스가 동시에 공유 자원을 사용하려 할 때 각 프로세스가 번갈아 가며 공유 자원을 사용하도록 하는 것으로 임계 구역을 유지하는 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 세마포어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;각 프로세스에 제어 신호를 전달하여 순서대로 작업을 수행하도록 하는 기법&lt;/li&gt;
&lt;li&gt;다익스트라가 제안하였으며, P와 V라는 2개의 연산에 의해서 동기화를 유지시키고, 상호 배제의 원리를 보장함&lt;/li&gt;
&lt;li&gt;S는 P와 V 연산으로만 접근 가능한 세마포어 변수로, 공유 자원의 개수를 나타내며 0과 1 혹은 0과 양의 값을 가질 수 있음&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;P 연산&lt;/code&gt; : 자원을 사용하려는 프로세스들의 진입 여부를 자원의 개수(S)를 통해 결정하는 것으로, wait 동작이라 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;V 연산&lt;/code&gt;: 대기 중인 프로세스를 깨우는 신호(Wake Up)로서, signal 동작이라 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 모니터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동기화를 구현하기 위한 특수 프로그램 기법으로 특정 공유 자원을 프로세스에게 할당하는데 필요한 데이터와 이 데이터를 처리하는 프로시저로 구성됨&lt;/li&gt;
&lt;li&gt;자료 추상화와 정보 은폐 개념을 기초로 하며 공유 자원을 할당하기 위한 병행성 구조로 이루어져 있음&lt;/li&gt;
&lt;li&gt;모니터 내의 공유 자원을 사용하려면 프로세스는 반드시 모니터의 진입부를 호출해야 함&lt;/li&gt;
&lt;li&gt;외부의 프로시저는 직접 액세스할 수 없으며, 모니터의 경계에서 상호 배제가 시행됨&lt;/li&gt;
&lt;li&gt;한순간에 하나의 프로세스만 진입하여 자원을 사용할 수 있음&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(5)-프로그래밍 언어 활용(1)/</guid><pubDate>Fri, 01 May 2020 01:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-서버-프로그램-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%84%9C%EB%B2%84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;1 서버 프로그램 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 서버 프로그램 구현&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-개발-환경-구축&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95&quot; aria-label=&quot;1 개발 환경 구축 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 개발 환경 구축&lt;/h2&gt;
&lt;h4&gt;1) 개발 환경 구축 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;응용 소프트웨어 개발을 위해 개발 프로젝트를 이해하고 S/W 및 H/W 장비를 구축하는 것&lt;/li&gt;
&lt;li&gt;응용 소프트웨어가 운영될 환경과 유사한 구조로 구축&lt;/li&gt;
&lt;li&gt;개발 프로젝트의 분석 단계의 산출물을 바탕으로 개발에 필요한 S/W와 H/W를 선정&lt;/li&gt;
&lt;li&gt;S/W와 H/W의 성능, 편의성, 라이선스 등 비즈니스 환경에 적합한 제품들을 최종적으로 결정하여 구축&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) H/W 환경&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 인터페이스를 역할을 하는 클라이언트와 클라이언트와 통신하여 서비스하는 서버로 구성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹 서버&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트로부터 직접 요청을 받아 처리하는 서버&lt;/li&gt;
&lt;li&gt;저용량의 정적 파일(HTML, CSS 등)을 제공&lt;/li&gt;
&lt;li&gt;ex) Apache HTTP Server, Microsoft Internet Information Service 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹 애플리케이션 서버(WAS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자에게 동적 서비스를 제공하기 위해 웹 서버로부터 요청을 받아 데이터 가공 작업을 수행&lt;/li&gt;
&lt;li&gt;웹 서버와 데이터베이스 서버 또는 웹 서버와 파일 서버 사이에서 인터페이스 역할 수행&lt;/li&gt;
&lt;li&gt;ex) Apache Tomcat, IBM WebSphere 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터베이스 서버&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스와 이를 관리하는 DBMS를 운영하는 서버&lt;/li&gt;
&lt;li&gt;ex) MySQL Server, Oracle Server 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파일 서버&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스에 저장하기에는 비효율적이거나 서비스 제공 목적으로 유지하는 파일들을 저장하는 서버&lt;/li&gt;
&lt;li&gt;ex) AWS S3 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) S/W 환경&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트 서버 운영을 위한 시스템 S/W와 개발에 사용되는 개발 S/W로 구성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시스템 S/W&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O/S, 웹 서버, WAS 운용을 위한 서버 프로그램&lt;/li&gt;
&lt;li&gt;DBMS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발 S/W&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요구사항 관리 도구 : 요구사항 수집과 분석, 추적 등을 편리하게 도와주는 S/W&lt;/li&gt;
&lt;li&gt;설계 모델링 도구 : UML을 지원하며 개발의 전 과정에서 설계 및 모델링을 도와주는 S/W&lt;/li&gt;
&lt;li&gt;구현 도구 : 개발 언어를 통해 애플리케이션의 실제 구현을 지원하는 S/W&lt;/li&gt;
&lt;li&gt;빌드 도구 : 구현 도구를 통해 작성된 소스의 빌드 및 배포, 라이브러리 관리를 지원하는 S/W&lt;/li&gt;
&lt;li&gt;테스트 도구 : 모듈들이 요구사항에 적합하게 구현되었는지 테스트하는 S/W&lt;/li&gt;
&lt;li&gt;형상 관리 도구 : 버전 관리를 하여 품질 향상을 지원하는 S/W&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-서버-개발&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%84%9C%EB%B2%84-%EA%B0%9C%EB%B0%9C&quot; aria-label=&quot;2 서버 개발 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 서버 개발&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 서버 개발의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;웹 애플리케이션의 로직을 구현할 서버 프로그램을 제작하여 WAS에 탑재하는 것&lt;/li&gt;
&lt;li&gt;서버 프로그램을 개발할 수 있도록 지원하는 프레임워크가 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 서버 개발 프레임워크&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서버 프로그램 개발 시 다양한 설정을 손쉽게 할 수 있도록 클래스나 인터페이스를 제공하는 S/W&lt;/li&gt;
&lt;li&gt;뷰-모델-컨트롤러(MVC) 패턴을 기반으로 개발됨&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 기반 프레임워크&lt;/li&gt;
&lt;li&gt;전자정부 표준 프레임워크의 기반 기술로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.js&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javascript 기반 프레임워크&lt;/li&gt;
&lt;li&gt;실시간으로 입출력이 빈번한 애플리케이션에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Django&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 기반 프레임워크&lt;/li&gt;
&lt;li&gt;컴포넌트 재사용 및 플러그인화를 기반으로 신속한 개발을 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Codeigniter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP 기반 프레임워크&lt;/li&gt;
&lt;li&gt;인터페이스가 간편하며 서버 자원을 적게 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ruby on Rails&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 기반 프레임워크&lt;/li&gt;
&lt;li&gt;테스트를 위한 웹 서버 지원&lt;/li&gt;
&lt;li&gt;데이터베이스 작업을 단순화, 자동화시켜 신속한 개발 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프레임워크의 특성 : 모듈화, 재사용성, 확장성, 제어의 역흐름&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 서버 프로그램 구현&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;응용 S/W와 동일하게 모듈 및 공통 모듈 개발 후 통합하는 방식으로 구현&lt;/li&gt;
&lt;li&gt;모듈 개발 시 다른 모듈과의 과도한 상호작용을 배제함으로써 특정 모듈의 수정이 다른 모듈에게 영향을 미치지 않아야 함&lt;/li&gt;
&lt;li&gt;모듈의 독립성은 결합도와 응집도에 의해 측정&lt;/li&gt;
&lt;li&gt;공통 모듈은 여러 프로그램에서 재사용할 수 있는 모듈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-보안-및-api&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EB%B3%B4%EC%95%88-%EB%B0%8F-api&quot; aria-label=&quot;3 보안 및 api permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 보안 및 API&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) S/W 개발 보안의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 S/W를 개발하기 위한 보안 활동&lt;/li&gt;
&lt;li&gt;데이터의 기밀성, 무결성, 가용성을 유지해야 함&lt;/li&gt;
&lt;li&gt;S/W 개발 보안 가이드를 참고하여 점검해야 할 보안 항목을 점검해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) S/W 개발 보안 점검 항목&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;세션 통제&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서버와 클라이언트의 연결 간 발생하는 정보를 관리&lt;/li&gt;
&lt;li&gt;불충분한 세션 관리 또는 잘못된 세션에 의한 정보 노출&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입력 데이터 검증 및 표현&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력 데이터에 대한 유효성 검증 체계를 갖추고 실패 시 이를 처리할 수 있도록 코딩하는 것&lt;/li&gt;
&lt;li&gt;SQL 삽입, 경로 조작 및 자원 삽입, 크로스 사이트 스크립팅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;보안 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인증, 접근제어, 기밀성, 암호화 등의 기능&lt;/li&gt;
&lt;li&gt;적절한 인증 없는 중요 기능 허용, 부적절한 인가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시간 및 상태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;병렬 처리 시스템이나 다수의 프로세스가 동작하는 환경에서 시간과 실행 상태를 관리하여 시스템이 원활히 동작되도록 하는 것&lt;/li&gt;
&lt;li&gt;검사 시점과 사용 시점 경쟁 조건, 무한 루프, 재귀 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;에러 처리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S/W 실행 중 발생할 수 있는 오류들을 사전에 정의하여 에러로 인해 발생할 수 있는 문제들을 예방&lt;/li&gt;
&lt;li&gt;오류 메시지를 통한 정보 노출, 오류 상황 대응 부재&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드 오류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;형 변환, 자원의 반환 등을 고려하여 코딩하는 것&lt;/li&gt;
&lt;li&gt;널 포인터 역참조, 부적절한 자원 해제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;캡슐화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터와 데이터를 처리하는 함수를 하나의 객체로 묶어 코딩하는 것&lt;/li&gt;
&lt;li&gt;잘못된 세션에 의한 정보 노출, 제거되지 않고 남은 디버그 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 오용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API를 잘못사용하거나 보안의 취약한 API를 사용하지 않도록 고려하여 코딩하는 것&lt;/li&gt;
&lt;li&gt;DNS lookup에 의존한 보안 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) API(Application Programming Interface)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;응용 프로그램 개발 시 운영체제나 프로그래밍 언어 등에 있는 라이브러리를 이용할 수 있도록 규칙 등을 정의해 놓은 인터페이스&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-배치-프로그램&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EB%B0%B0%EC%B9%98-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;4 배치 프로그램 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 배치 프로그램&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 배치 프로그램의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자와의 상호 작용 없이 여러 작업들을 미리 정해진 작업을 일괄적으로 처리하는 것&lt;/li&gt;
&lt;li&gt;배치 프로그램의 필수 요소 : 대용량 데이터, 자동화, 견고성, 안정성, 신뢰성, 성능&lt;/li&gt;
&lt;li&gt;정기 배치 : 정해진 기간에 정기적으로 수행&lt;/li&gt;
&lt;li&gt;이벤트성 배치 : 설정한 특정 조건이 충족될 때 수행&lt;/li&gt;
&lt;li&gt;On-Demand 배치 : 사용자 요청 시 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 배치 스케줄러&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;일괄 처리 작업이 설정된 주기에 맞춰 자동으로 수행되도록 지원해주는 도구&lt;/li&gt;
&lt;li&gt;잡 스케줄러라고도 함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프링 배치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Source 사와 Accenture 사가 공동 개발한 오픈소스 프레임워크&lt;/li&gt;
&lt;li&gt;스프링 프레임워크의 특성을 그대로 가져와 스프링의 기능을 모두 사용할 수 있음&lt;/li&gt;
&lt;li&gt;데이터베이스나 파일의 데이터를 교환하는데 필요한 컴포넌트를 제공&lt;/li&gt;
&lt;li&gt;로그 관리, 추적, 트랜잭션 관리, 작업 처리 통계, 작업 재시작 등의 다양한 기능 제공&lt;/li&gt;
&lt;li&gt;구성요소 : Job, Job Launcher, Step, Job Repository&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Quatz&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스프링 프레임워크로 개발되는 응용 프로그램들의 일괄 처리를 위한 다양한 기능을 제공하는 오픈소스 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수행할 작업과 수행 시간을 관리하는 요소들을 분리하여 일괄 처리 작업에 유연성을 제공&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구성요소 : Scheduler, Job, JobDetail, Trigger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-패키지-소프트웨어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4&quot; aria-label=&quot;5 패키지 소프트웨어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 패키지 소프트웨어&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;패키지 소프트웨어의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;기업에서 일반적으로 사용하는 여러 기능을 통합하여 제공하는 S/W&lt;/li&gt;
&lt;li&gt;기업에서는 패키지 소프트웨어를 구입하여 기업 환경에 적합하게 커스터마이징하여 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;패키지 소프트웨어의 특징&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;요구사항을 분석하여 업무 특성에 맞게 전용으로 개발되는 S/W와 비교하여 안정성, 라이선스, 생산성 등의 차이가 있음&lt;/li&gt;
&lt;li&gt;전문 업체에 의해 품질이 검증되었고 국제 산업계 표준을 준수하고 있어 안정적인 이용 가능&lt;/li&gt;
&lt;li&gt;S/W에 대한 라이선스가 판매자에게 있어 시스템 구축 후 기능 추가 및 코드 재사용 등에 제약이 있음&lt;/li&gt;
&lt;li&gt;개발 조직을 갖추어야 할 필요성이 없어 비용을 절감할 수 있음&lt;/li&gt;
&lt;li&gt;이미 개발된 S/W를 사용하기 때문에 프로젝트 기간 단축&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(3)/</guid><pubDate>Fri, 03 Apr 2020 03:05:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;3-소프트웨어-개발-보안-구축&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EB%B3%B4%EC%95%88-%EA%B5%AC%EC%B6%95&quot; aria-label=&quot;3 소프트웨어 개발 보안 구축 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 소프트웨어 개발 보안 구축&lt;/h1&gt;
&lt;h2 id=&quot;1-secure-sdlc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-secure-sdlc&quot; aria-label=&quot;1 secure sdlc permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) Secure SDLC&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;Secure SDLC의 개요(요구사항 분석, 설계, 구현, 테스트 단계, 유지 보수)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보안상 안전한 소프트웨어를 개발하기 위해 SDLC(소프트웨어 개발 생명주기)에 보안 강화를 위한 프로세스를 포함한 것&lt;/li&gt;
&lt;li&gt;유지보수 단계에서 보안 이슈를 해결하기 위해 소모되는 비용을 최소화하기 위함&lt;/li&gt;
&lt;li&gt;Secure Software 사의 CLASP, Microsoft 사의 SDL 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;요구사항 분석 단계에서의 보안 활동(기밀성, 무결성, 가용성, 인증, 부인 방지)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보안 항목에 해당하는 요구사항을 식별하는 작업 수행&lt;/li&gt;
&lt;li&gt;보안 수준을 보안 요소별로 등급을 구분하여 분류&lt;/li&gt;
&lt;li&gt;보안 요소 : 기밀성, 무결성, 가용성, 인증, 부인 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;설계 단계에서의 보안 활동&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;식별된 요구사항을 소프트웨어 설계서에 반영하고 보안 설계서 작성&lt;/li&gt;
&lt;li&gt;네트워크, 서버, 물리적 보안, 개발 프로그램 등 환경에 대한 보안통제 기준을 수립하여 설계에 반영&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;구현 단계에서의 보안 활동&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;표준 코딩 정의서 및 소프트웨어 개발 보안 가이드를 준수하여 설계서에 따라 보안 요구 사항 구현&lt;/li&gt;
&lt;li&gt;단위 테스트 실행&lt;/li&gt;
&lt;li&gt;시큐어 코딩 : 구현 단계에서 발생할 수 있는 보안 취약점을 최소화하기 위해 보안 요소들을 고려하여 코딩&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;테스트 단계에서의 보안 활동&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;작성된 보안 설계서를 바탕으로 보안 사항들이 정확히 반영되고 동작되는지 점검&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;유지보수 단계에서의 보안 활동&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;이전 과정을 모두 수행했음에도 발생할 수 있는 보안사고들을 식별하고 발생 시 해결하고 보안 패치 실시&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-세션-통제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%84%B8%EC%85%98-%ED%86%B5%EC%A0%9C&quot; aria-label=&quot;2 세션 통제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 세션 통제&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;세션 통제의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서버와 클라이언트의 연결인 세션 간의 연결로 인해 발생하는 정보를 관리&lt;/li&gt;
&lt;li&gt;요구사항 분석 및 설계 단계에서 진단해야 하는 보안 점검 내용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;불충분한 세션 관리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;일정한 규칙이 존재하는 세션ID가 발급되거나 타임아웃이 너무 길게 설정되어 있는 경우 발생&lt;/li&gt;
&lt;li&gt;세션 하이재킹(세션 정보를 가로채는 공격)을 통해 획득한 세션 ID로 접근할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;잘못된 세션에 의한 정보 노출&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다중 스레드 환경에서 멤버 변수에 정보를 저장할 때 발생&lt;/li&gt;
&lt;li&gt;변수의 범위를 제한하는 방법으로 방지 가능&lt;/li&gt;
&lt;li&gt;싱글톤 패턴에서 발생하는 레이스컨디션으로 인해 동기화 오류가 발생하거나 멤버 변수의 정보가 노출될 수 있음&lt;/li&gt;
&lt;li&gt;레이스컨디션 : 두 개 이상의 프로세스가 공용 자원을 획득하기 위해 경쟁하고 있는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;세션 설계 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;로그아웃 요청 시 할당된 세션이 완전히 제거되도록 함&lt;/li&gt;
&lt;li&gt;이전 세션이 종료되지 않으면 새로운 세션이 생성되지 못하도록 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-입력-데이터-검증-및-표현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%9E%85%EB%A0%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D-%EB%B0%8F-%ED%91%9C%ED%98%84&quot; aria-label=&quot;3 입력 데이터 검증 및 표현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 입력 데이터 검증 및 표현&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;입력 데이터 검증 및 표현의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;입력 데이터로 인해 발생하는 문제들을 예방하기 위해 구현 단계에서 검증해야 하는 보안 점검 항목&lt;/li&gt;
&lt;li&gt;개발 단계에서 유효성 검증 체계를 갖추고 검증되지 않은 데이터가 입력될 시 처리할 수 있도록 구현해야 함&lt;/li&gt;
&lt;li&gt;일관된 언어셋을 사용하여 코딩&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;입력 데이터 검증 및 표현의 보안 약점&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bTHH4m/btqDxubwG2C/TLQaRwFzkqZWfKiYtAjpIK/img.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;보안-기능&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%95%88-%EA%B8%B0%EB%8A%A5&quot; aria-label=&quot;보안 기능 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보안 기능&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;보안 기능의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;코딩하는 기능인 인증, 접근제어, 기밀성, 암호화들을 올바르게 구현하기 위해 구현 단계에서의 보안 점검 항목&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;보안 기능의 보안 약점&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/b7BGHl/btqDxuWR4Kn/my0kEHsJwmCAyMS7KaCak0/img.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-시간-및-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%8B%9C%EA%B0%84-%EB%B0%8F-%EC%83%81%ED%83%9C&quot; aria-label=&quot;4 시간 및 상태 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 시간 및 상태&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;시간 및 상태의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동시 수행을 지원하는 병렬 시스템이나 다수의 프로세스가 동작하는 환경에서 시간과 실행 상태를 관리하여 원활하게 동작되도록 하기 위한 보안 검증 항목&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;TOCTOU 경쟁 조건&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;검사 시점과 사용 시점을 고려하지 않고 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;종료되지 않은 반복문 또는 재귀 함수&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;조건이나 논리 구조를 잘못 구성하여 종료할 수 없게 되는 경우 시스템 자원을 끊임없이 사용하여 자원고갈로 인한 서비스 또는 시스템 장애 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-에러-처리의-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC%EC%9D%98-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;5 에러 처리의 개요 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 에러 처리의 개요&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;에러 처리의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 실행 중 발생할 수 있는 오류들을 사전에 정의하여 오류로 인해 발생할 수 있는 문제들을 예방하기 위한 보안 점검 항목&lt;/li&gt;
&lt;li&gt;예외처리 구문을 통해 오류에 대한 사항 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;오류 메시지를 통한 정보 노출&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;오류 발생으로 실행 환경, 사용자 정보, 디버깅 정보 등 중요 정보를 소프트웨어가 메시지로 외부에 노출하는 보안 약점&lt;/li&gt;
&lt;li&gt;오류 발생 시 최대한 내부에서 처리하거나 메시지를 최소한의 내용으로 출력하여 정보 노출을 방지해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;오류 상황 대응 부재&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 오류에 대한 에러 처리를 하지 않았거나 미비로 인해 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;부적절한 예외처리&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;함수의 반환 값 또는 오류들을 세분화하여 처리하지 않고 광범위하게 묶어서 한 번에 처리하거나 누락된 예외가 존재할 때 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-코드-오류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-%EC%BD%94%EB%93%9C-%EC%98%A4%EB%A5%98&quot; aria-label=&quot;6 코드 오류 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) 코드 오류&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;코드 오류의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 구현 단계에서 코딩 중 실수하기 쉬운 형 변환, 자원 반환 등 오류를 예방하기 위한 보안 점검 항목&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;널 포인터 역참조&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;널 포인터가 가리키는 메모리에 어떠한 값을 저장할 때 발생하는 보안 약점&lt;/li&gt;
&lt;li&gt;오류로 인해 반환되는 널 값을 포인터로 참조하는 경우 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;부적절한 자원 해제&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;자원을 반환하는 코드를 누락하거나 프로그램 오류로 할당된 자원을 반환하지 못했을 때 발생하는 보안 약점&lt;/li&gt;
&lt;li&gt;유한한 시스템 자원이 계속 점유하고 있으면 자원 부족이 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;해제된 자원 사용&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;이미 반환된 메모리를 참조하는 경우 발생하는 보안 약점&lt;/li&gt;
&lt;li&gt;반한 된 메모리를 참조하는 경우 예상하지 못한 값 또는 코드를 수행하게 되어 의도하지 않은 결과가 발생됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;초기화되지 않은 변수 사용&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언 후 값이 부여되지 않은 변수를 사용할 때 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-캡슐화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#7-%EC%BA%A1%EC%8A%90%ED%99%94&quot; aria-label=&quot;7 캡슐화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7) 캡슐화&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;캡슐화의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정보 은닉이 필요한 중요한 데이터와 기능을 불충분하게 캡슐화하거나 잘못 사용함으로써 발생할 수 있는 문제를 예방하기 위한 보안 점검 항목&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;제거되지 않고 남은 디버그 코드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발 중에 버그 수정이나 결과값을 확인을 위해 남겨둔 코드들로 인해 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 데이터 정보 노출&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템의 내부 정보를 시스템 메시지 등을 통해 외부로 출력하도록 구현했을 때 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Public 메소드로부터 반환된 Private 배열&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Private 배열을 Public 메소드에서 반환할 때 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Private 배열에 Public 데이터 할당&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Private 배열에 Public으로 선언된 데이터 또는 메소드의 파리 미터를 저장할 때 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-api-오용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#8-api-%EC%98%A4%EC%9A%A9&quot; aria-label=&quot;8 api 오용 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;8) API 오용&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;API 오용의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 구현 단계에서 API를 잘못 사용하거나 보안에 취약한 API를 사용하지 않도록 하는 보안 검증 항목&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DNS Lookup에 의존한 보안 결정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;도메인명에 의존하여 보안 결정을 내리는 경우 발생하는 보안 약점&lt;/li&gt;
&lt;li&gt;IP 주소를 직접 입력하여 접근하게 하여 방지 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;취약한 API 사용&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보안 문제로 사용이 금지된 API를 사용하거나 잘못된 방식으로 API를 사용했을 때 발생하는 보안 약점&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;9-암호-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#9-%EC%95%94%ED%98%B8-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;9 암호 알고리즘 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;9) 암호 알고리즘&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;암호 알고리즘의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;중요정보를 보호하기 위한 평문을 암호화된 문장으로 만드는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bxJv5D/btqDyEkZ8iJ/luizuOWMFhAncok6AkhdZK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;개인키 암호화 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동일한 키로 데이터를 암호화하고 복호화함&lt;/li&gt;
&lt;li&gt;대칭 암호 기법, 단일키 암호화 기법이라고도 함&lt;/li&gt;
&lt;li&gt;Stream 기법 : 평문과 동일한 길이의 스트림을 생성하여 비트 단위로 암호화&lt;/li&gt;
&lt;li&gt;Block 기법 : 한 번에 하나의 데이터 블록을 암호화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;공개키 암호화 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 암호화하는 공개키는 데이터베이스 사용자에게 공개하고 복호화하는 비밀키는 관리자에게만 공개&lt;/li&gt;
&lt;li&gt;비대칭 암호화 기법이라고도 함&lt;/li&gt;
&lt;li&gt;RSA기법 : 공개키와 비밀키는 메시지를 열고 잠그는 상수를 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;양방향 암호화 알고리즘 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SEED : 블록 크기는 128비트, 키의 길이에 따라 128, 256로 분류&lt;/li&gt;
&lt;li&gt;ARIA : 블록 크기는 128비트, 키의 길이에 따라 128, 192, 256로 분류&lt;/li&gt;
&lt;li&gt;DES : 블록 크기는 64비트, 키의 길이 56비트&lt;/li&gt;
&lt;li&gt;AES : 블록 크기는 128비트, 키의 길이에 따라 128, 192, 256로 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;해시(Hash)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환&lt;/li&gt;
&lt;li&gt;SHA 시리즈, MD5, N-NASH, SNEFRU 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-시스템-보안-구축-정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B3%B4%EC%95%88-%EA%B5%AC%EC%B6%95-%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;4 시스템 보안 구축 정리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 시스템 보안 구축 정리&lt;/h1&gt;
&lt;h2 id=&quot;서비스-공격-유형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%B5%EA%B2%A9-%EC%9C%A0%ED%98%95&quot; aria-label=&quot;서비스 공격 유형 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서비스 공격 유형&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;서비스 거부 공격의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;표적이 되는 서버의 자원을 고갈시킬 목적으로 다수의 공격자 또는 시스템에서 대량의 데이터를 한 곳의 서버를 집중적으로 전송함으로써 표적이 되는 서버의 정상적인 기능을 방해&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Ping of Death&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ping 명령 전송 시 패킷의 크기를 인터넷 프로토콜 허용 범위 이상으로 공격하여 대상의 네트워크를 마비시키는 서비스 거부 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SMURFING&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;IP나 ICMP의 특성을 악용하여 엄청난 양의 데이터를 한 사이트에 집중적으로 보냄으로써 네트워크를 불능 상태로 만드는 공격 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SYN Flooding&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;공격자가 가상의 클라이언트로 위장하여 3-way-handshake 과정을 의도적으로 중단시킴으로써 공격 대상지인 서버가 대기 상태에 놓여 정상적인 서비스를 수행하지 못하게 하는 공격 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;TearDrop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터의 송수신 단계에서 전송되는 Fragment Offset 값을 변경시켜 패킷을 재조립할 때 오류로 인한 과부하를 발생시킴으로 시스템이 다운되도록 하는 공격 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Land&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;패킷 전송 시 송수신 IP 주소를 모두 공격 대상의 IP주소로 하여 공격 대상에게 전송하여 무한히 자신에게 응답을 수행하게 되는 공격 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DDos(Distributed Denial of Service, 분산 서비스 거부) 공격&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;여러 곳에 분산된 공격 지점에서 한 곳의 서버에 대해 공격을 수행&lt;/li&gt;
&lt;li&gt;네트워크에서 취약점이 있는 호스트들을 탐색한 후 호스트들에게 분산 서비스 공격 툴을 설치하여 에이전트로 만든 후 공격에 이용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분산 서비스 공격 툴&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trin00 : 초기 형태의 데몬으로 UDP Flooding 공격 수행&lt;/li&gt;
&lt;li&gt;TFN : UDP Flooding, TCP SYN Flood 공격, ICMP 응답 요청, 스머핑 공격 등 수행&lt;/li&gt;
&lt;li&gt;TFN2K : TFN의 확장판&lt;/li&gt;
&lt;li&gt;Stacheldraht : 이전의 툴들을 유지하면서 암호화된 통신을 수행하며 툴이 자동으로 업데이트 되도록 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;네트워크 침해 공격 관련 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스미싱&lt;/code&gt; : 문자 메시지를 이용해 사용자의 개인 신용 정보를 빼내는 수법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;스피어 피싱&lt;/code&gt; : 일반적인 이메일로 위장한 메일을 지속적으로 발송하여 메일의 링크나 첨부된 파일을 클릭하게 유도하여 개인 정보를 탈취&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;APT(지능형 지속 위협)&lt;/code&gt; : 조직적으로 특정 기업이나 조직 네트워크에 침투해 활동 거점을 마련한 뒤 때를 기다리면서 보안을 무력화시키고 정보를 수집한 다음 외부로 빼돌리는 형태의 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;무작위 대입 공격(Brute Force Attack)&lt;/code&gt;: 암호화된 문서의 암호키를 찾기 위해 무작위로 값을 대입하여 공격하는 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;큐싱&lt;/code&gt; : QR코드를 통해 악성 앱을 다운받게 하여 개인 정보를 탈취하는 공격 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SQL 삽입 공격&lt;/code&gt; : 웹사이트를 무차별적으로 공격하는 과정에서 취약한 사이트 발견 시 데이터를 조작하는 일련의 공격 방식&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;크로스 사이트 스크립&lt;/code&gt; : 웹 페이지의 내용을 사용자 브라우저에 표현하기 위해 사용되는 스크립트의 취약점을 악용한 해킹 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;정보 보안 침해 공격 관련 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;좀비 PC&lt;/code&gt; : 악성코드에 감염되어 다른 프로그램이나 컴퓨터를 조종하도록 만들어진 컴퓨터&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;C&amp;amp;C 서버&lt;/code&gt; : 해커가 원격지에서 감염된 좀비 PC에 명령을 내리고 악성코드를 제어하기 위한 용도로 사용하는 서버&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;봇넷&lt;/code&gt; : 악성 프로그램에 감염된 컴퓨터들이 네트워크로 연결된 형태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;웜&lt;/code&gt; : 네트워크를 통해 연속적으로 자신을 복사하여 시스템의 부하를 높여 시스템을 다운시키는 바이러스의 일종&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제로 데이 공격&lt;/code&gt;: 보안 취약점이 발견됐을 때 공표되기도 전에 해당 취약점을 통해 신속하게 이루어지는 보안 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;키로거 공격&lt;/code&gt; : 사용자의 키보드 움직임을 탐지하여 개인 정보를 몰래 빼가는 공격&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;랜섬웨어&lt;/code&gt; : 사용자의 컴퓨터에 잡입해 파일을 암호화하여 사용자가 열지 못하게 하는 프로그램&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;백도어&lt;/code&gt; : 액세스 편의를 위해 시스템 보안을 제거하여 만들어 놓은 비밀 통로를 통해 범죄에 악용되는 형태&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;트로이 목마&lt;/code&gt; : 정상적인 기능을 하는 프로그램인 척 프로그램에 숨어 있다가 해당 프로그램이 동작될 때 활성화되어 부작용을 일으키는 형태&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;서버-인증&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%B2%84-%EC%9D%B8%EC%A6%9D&quot; aria-label=&quot;서버 인증 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서버 인증&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;보안 서버의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터넷을 통해 개인정보를 암호화하여 송수신할 수 있는 기능을 갖춘 서버&lt;/li&gt;
&lt;li&gt;서버에 SSL(Secure Socket Layer) 인증서를 설치하여 전송 정보를 암호화하여 송수신&lt;/li&gt;
&lt;li&gt;서버에 암호화 응용 프로그램을 설치하고 전송 정보를 암호화하여 송수신&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인증의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다중 사용자 컴퓨터 / 네트워크 시스템에서 로그인을 요청한 사용자의 정보를 확인하고 접근 권한을 검증하는 보안 절차&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지식 기반 인증&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 기억하고 있는 정보를 기반으로 인증을 수행&lt;/li&gt;
&lt;li&gt;고정된 패스워드, 패스 프레이즈, 아이핀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소유 기반 인증&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 소유하고 있는 것을 기반으로 인증을 수행&lt;/li&gt;
&lt;li&gt;신분증, 메모리 카드, 스마트 카드, OTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;생체 기반 인증&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 고유한 생체 정보를 기반으로 인증을 수행&lt;/li&gt;
&lt;li&gt;지문, 홍채/망막, 얼굴, 음성, 정맥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기타 인증 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;행위 기반 인증 : 사용자의 행동 정보를 이용해 인증 수행&lt;/li&gt;
&lt;li&gt;위치 기반 인증 : 인증을 시도하는 위치나 적절성 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;보안-아키텍처--프레임워크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%95%88-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98--%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC&quot; aria-label=&quot;보안 아키텍처  프레임워크 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보안 아키텍처 / 프레임워크&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;보안 아키텍처&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정보 시스템의 무결성, 가용성, 기밀성을 확보하기 위해 보안 요소 및 보안 체계를 식별하고 이들 간의 관계를 정의한 구조&lt;/li&gt;
&lt;li&gt;ITU-T, X.805의 보안 표준을 기준으로 하여 보안 아키텍처 모델 구성&lt;/li&gt;
&lt;li&gt;보안 계층 : 인프라 시스템, 응용 프로그램, 데이터, 단말기, 인터페이스&lt;/li&gt;
&lt;li&gt;보안 영역 : 정보 시스템, 제어 시스템, 클라우드, 무선, 사물인터넷&lt;/li&gt;
&lt;li&gt;보안 요소 : 인증, 접근 통제, 데이터 처리 보호, 암호화, 감사 추적, 위협 탐지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;보안 프레임워크&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;안전한 정보 시스템 환경을 유지하고 보안 수준을 향상시키기 위한 체계&lt;/li&gt;
&lt;li&gt;ISO 27001 : 정보 보안 관리를 위한 국제 표준이며 가장 대표적인 보안 프레임워크&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;로그-분석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8-%EB%B6%84%EC%84%9D&quot; aria-label=&quot;로그 분석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그 분석&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;로그의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템 사용에 대한 모든 내역을 기록하여 시스템 침해 사고 발생 시 해킹 흔적이나 공격 기법을 파악할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;리눅스 로그&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;var/log 디렉토리에서 기록하고 관리&lt;/li&gt;
&lt;li&gt;syslogd 데몬은 etc/syslog.conf 파일을 읽어 로그 관련 파일들의 위치를 파악 후 작업 시작&lt;/li&gt;
&lt;li&gt;커널 로그, 부팅 로그, 크론 로그, 시스템 로그, 보안 로그, FTP 로그, 메일 로그&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;윈도우 로그&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Windows 시스템에서 이벤트 로그 형식으로 시스템의 로그 확인&lt;/li&gt;
&lt;li&gt;응용 프로그램, 보안, 시스템, Setup, Forwareded Event에 대한 로그 확인 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;보안-솔루션&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%95%88-%EC%86%94%EB%A3%A8%EC%85%98&quot; aria-label=&quot;보안 솔루션 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보안 솔루션&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;접근 통제, 침입 차단 등을 수행하여 외부로부터 불법적인 침입을 막는 기술 및 시스템&lt;/p&gt;
&lt;h4&gt;방화벽&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기업이나 조직 내부의 네트워크와 인터넷 간에 전송되는 정보를 선별하여 수용, 거부, 수정하는 기능을 가진 침입 차단 시스템&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;침입 탐지 시스템(IDS)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 시스템의 비정상적인 행위를 실시간으로 탐지하는 시스템&lt;/li&gt;
&lt;li&gt;문제 발생 시 모든 내외부 정보의 흐름을 실시간으로 차단하기 위해 해커 침입 패턴에 대한 추적과 유해 정보 감시가 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;침입 방지 시스템(IPS)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;방화벽과 침입 탐지 시스템을 결합&lt;/li&gt;
&lt;li&gt;비정상적인 트래픽을 능동적으로 차단하고 격리하는 방어 조치를 취하는 보안 솔루션&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 유출 방지(DLP)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;내부 정보의 외우 유출을 방지하는 보안 솔루션&lt;/li&gt;
&lt;li&gt;내부 PC와 네트워크 상의 모든 정보를 검색하고 사용자 행위를 탐지, 통제해 외부로의 유출을 사전에 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;웹 방화벽&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;일반 방화벽이 탐지하지 못하는 SQL 삽입 공격, XSS 등의 웹 기반 공격을 방어할 목적으로 만들어진 웹 서버에 특화된 방화벽&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;VPN(가상 사설 통신망)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터넷 등 통신 사업자의 공중 네트워크와 암호화 기술을 이용하여 사용자가 마치 자신의 전용 회선을 사용하는 것처럼 해주는 보안 솔루션&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;NAC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네트워크에 접속하는 내부 PC의 MAC 주소를 IP 관리 시스템에 등록 후 일관된 보안 관리 기능을 제공하는 보안 솔루션&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ESM&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다양한 장비에서 발생하는 로그 및 보안 이벤트를 통합하여 관리하는 보안 솔루션&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(2)/</guid><pubDate>Thu, 02 Apr 2020 03:05:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;2-프로젝트-정보-시스템-구축-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A0%95%EB%B3%B4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;2 프로젝트 정보 시스템 구축 관리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 프로젝트 정보 시스템 구축 관리&lt;/h1&gt;
&lt;h2 id=&quot;신기술-관련-용어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A0%EA%B8%B0%EC%88%A0-%EA%B4%80%EB%A0%A8-%EC%9A%A9%EC%96%B4&quot; aria-label=&quot;신기술 관련 용어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;신기술 관련 용어&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;네트워크 관련 신기술 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;IoT(Internet of Things, 사물인터넷)&lt;/code&gt; : 정보 통신 기술을 기반으로 실세계와 가상 세계의 다양한 사물과 사람을 인터넷으로 소로 연결하여 진보된 서비스를 제공하기 위한 서비스 기반 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;M2M(Machine to Machine, 사물 통신)&lt;/code&gt; : 무선 통신을 이용한 기계와 기계 사이의 통신&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모바일 컴퓨팅&lt;/code&gt; : 휴대형 기기로 이동하면서 자유롭게 네트워크에 접속하여 업무를 처리할 수 있는 환경&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클라우딩 컴퓨팅&lt;/code&gt; : 각종 컴퓨터 자원을 중앙 컴퓨터에 두고 인터넷 기능을 갖는 단말기로 언제 어디서나 인터넷을 통해 컴퓨터 작업을 수행할 수 있는 환경&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;모바일 클라우딩 컴퓨팅&lt;/code&gt; : 모바일 컴퓨팅과 클라우딩 컴퓨팅을 혼합하여 클라우드 서비스를 이용하여 모바일 기기로 클라우딩 컴퓨팅 인프라를 구성하여 여러 가지 정보와 자원을 공유하는 ICT 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인터클라우드 컴퓨팅&lt;/code&gt; : 각기 다른 클라우드 서비스를 연동하거나 컴퓨팅 자원의 동적 할당이 가능하도록 여러 클라우드 서비스 제공자들이 제공하는 클라우드 서비스나 자원을 연결하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;매시 네트워크&lt;/code&gt; : 차세대 이통통신, 홈네트워킹, 공공 안전 등 특수 목적을 위한 새로운 방식의 네트워크 기술로 대규모 디바이스의 네트워크 생성에 최적화&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;와이선&lt;/code&gt; : 장거리 무선 통신을 필요로 하는 사물인터넷 서비스를 위한 저전력 장거리 통신 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;NDN(Named Data Networking)&lt;/code&gt; : 콘텐츠 자체의 정보와 라우터 기능만으로 데이터 전송을 수행하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;NGN(Next Generation Network, 차세대 통신망)&lt;/code&gt;: 유선망 기반의 차세대 통신망으로 유선망뿐만 아니라 이동 사용자를 목표로 하며 이동 통신에서 제공하는 완전하 이동성 제공을 목표로 개발&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SDN(Software Defined Networking)&lt;/code&gt;: 네트워크를 컴퓨터처럼 모델링하여 여러 사용자가 각각의 소프트웨어들로 네트워킹을 가상화하여 제어하고 관리하는 네트워크&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;NFC(Near Field Communication)&lt;/code&gt;: 고주파를 이용한 근거리 무선 통신 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;UWB(Ultra WideBand)&lt;/code&gt;: 짧은 거리에서 많은 양의 디지털 데이터를 낮은 전력으로 전송하기 위한 무선 기술로 무선 디지털 펄스라고도 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;피코넷&lt;/code&gt; : 여러 개의 독립된 통신 장치가 블루투스 기술이나 UWB 통신 기술을 사용하여 통신망을 형성하는 무선 네트워크 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;WBAN(Wireless Body Area Network)&lt;/code&gt; : 웨어러블 또는 몸에 심는 형태의 센서나 기기를 무선으로 연결하는 개인 영역 네트워킹 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;GIS(Geographic Information System)&lt;/code&gt;: 지리적인 자료를 수집, 저장, 분석, 출력할 수 있는 컴퓨터 응용 시스템으로 위성을 이용해 모든 사물의 위치 정보를 제공해줌&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;USN(Ubiquitous Sensor Network)&lt;/code&gt;: 각종 센서로 수집한 정보를 무선으로 수집할 수 있도록 구성하는 네트워크&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;SON(Self Organizing Network)&lt;/code&gt;: 주변 상황에 맞추어 스스로 망을 구성하는 네트워크&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;애드 혹 네트워크&lt;/code&gt; : 재난 현장과 같이 별도의 고정된 유선망을 구축할 수 없는 장소에서 모바일 호스트만을 이용하여 구성한 네트워크&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;네트워크 슬라이싱&lt;/code&gt; : 여러 글로벌 이동통신 표준화 단체가 선정한 5G의 핵심기술 중 하나로 네트워크에서 하나의 물리적인 코어 네트워크 인프라를 독립된 다수의 가상 네트워크로 분리하여 각각의 네트워크를 통해 다양한 고객 맞춤형 서비스를 제공하는 것을 목적으로 하는 네트워크 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;저전력 블루투스 기술&lt;/code&gt;: 일반 블루투스와 동일한 주파수 대역을 사용하지만 연결되지 않은 상태에서는 절전 모드를 유지하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;지능형 초연결망&lt;/code&gt; : 스마트 시티, 스마트 스테이션 등 4차 산업혁명 시대를 맞아 새로운 변화에 따라 급격하게 증가흐는 데이터 트래픽을 효과적으로 수용하기 위해 시행되는 정부 주관 사업&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SW 관련 신기술 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인공지능&lt;/code&gt; : 인간의 두뇌와 같이 컴퓨터 스스로 추론, 학습, 판단 등 인간 지능적인 작업을 수행하는 시스템&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;뉴럴링크&lt;/code&gt; : 테슬라의 CEO 일론 머스크가 사람의 뇌와 컴퓨터와 결합하는 기술을 개발하기 위해 설립한 회사&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;딥 러닝&lt;/code&gt; : 인간의 두뇌를 모델로 만들어진 인공 신경망을 기반으로 하는 기계 학습 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;전문가 시스템&lt;/code&gt; : 특정 분야의 전문가가 수행하는 고도의 업무를 지원하기 위한 컴퓨터 응용 프로그램&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;증강현실&lt;/code&gt; : 실제 촬영한 화면에 가상의 정보를 부가하여 보여주는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;블록체인&lt;/code&gt; : P2P 네트워크를 이용하여 온라인 금융 거래 정보를 온라인 네트워크 참여자의 디지털 장비에 분산 저장하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;분산 원장 기술&lt;/code&gt; : 중앙 관리자나 중앙 데이터 저장소가 존재하지 않고 P2P 망내의 참여자들에게 모든 거래 목록이 분산 저장되어 거래가 발생할 때마다 지속적으로 갱신되는 디지털 원장&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;해시&lt;/code&gt; : 임의의 길이의 입력 데이터나 메시지를 고정된 길이의 값이나 키로 변환&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;양자 암호키 분배&lt;/code&gt; : 양자 통신을 위해 비밀키를 분배하여 관리하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;프라이버시 강화 기술&lt;/code&gt; : 개인 정보 위험 관리 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;공통 평가 기준&lt;/code&gt; : ISO 15408 표준으로 채택된 정보 보호 제품 평가 기준&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;개인정보 영향평가 제도&lt;/code&gt; : 개인정보를 활용하는 새로운 정보 시스템의 도입 및 기존 정보시스템의 중요한 변경 시 시스템의 구축, 운영이 기업의 고객은 물론 국민의 사생활에 미칠 영향에 대해 미리 조사, 분석, 평가하는 제도&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;그레이웨어&lt;/code&gt; : 소프트웨어를 제공하는 입장에서는 악의적이지 않은 유용한 소프트웨어 일지라도 사용자 입장에서는 유용할 수도 있고 악의적일 수도 있는 악성 코드나 공유 웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;매시업&lt;/code&gt; : 웹에서 제공하는 정보 및 서비스를 이용하여 새로운 소프트웨어나 서비스 데이터베이스 등을 만드는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;리치 인터넷 애플리케이션&lt;/code&gt; : 플래스 애니메이션 기술과 웹 서버 애플리케이션 기술을 통합하여 기존 HTML보다 역동적인 웹페이지를 제공하는 플래시 웹페이지 제작 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시맨틱 웹&lt;/code&gt; : 컴퓨터가 사람을 대신하여 정보를 읽고 이해하고 가공하여 새로운 정보를 만들어 낼 수 있도록 이해하기 쉬운 의미를 가진 차세대 지능형 웹&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;증발품&lt;/code&gt; : 판매 계획 또는 배포 계획은 발표되었으나 실제로 고객에게는 판매되거나 배포하지 않고 있는 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;오픈 그리드 서비스 아키텍처&lt;/code&gt; : 애플리케이션 공유를 위한 웹 서비스를 그리드 상에서 제공하기 위해 만든 개방형 표준&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;서비스 지향 아키텍처&lt;/code&gt; : 기업의 소프트웨어 인프라인 정보시스템을 공유와 재사용이 가능한 서비스 단위나 컴포넌트 중신으로 구축하는 정보기술 아키텍처&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;서비스형 소프트웨어(SaaS)&lt;/code&gt; : 소프트웨어의 여러 기능 중에서 사용자가 필요로 하는 서비스만 이용할 수 있도록 한 소프트웨어&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;소프트웨어 에스크로&lt;/code&gt; : 소프트웨어 개발자의 지적재산권을 보호하고 사용자는 저렴한 비용으로 소프트웨어를 안정적으로 사용 및 유지보수받을 수 있도록 소스 프로그램과 기술 정보 등을 제3의 기관에 보관하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;복잡 이벤트 처리&lt;/code&gt; : 실시간으로 발생하는 많은 사건들 중 의미가 있는 것만을 추출할 수 있도록 사건 발생 조건을 정의하는 데이터 처리 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;디지털 트윈&lt;/code&gt; : 현실속의 사물을 소프트웨어로 가상화한 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;HW 관련 신기술 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;고가용성&lt;/code&gt; : 긴 시간동안 안정적인 서비스 운영을 위해 장애 즉시 다른 시스템으로 대체 가능한 환경을 구축하는 메커니즘&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;3D 프린팅&lt;/code&gt; : 평면에 출력하는 것이 아닌 얇은 두께로 한층 한층 적재시켜 하나의 형태를 만들어내는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;4D 프린팅&lt;/code&gt; : 특정 시간이나 환경 조건이 갖추어지면 스스로 형태를 변화시키거나 제조되는 자가 조립 기술이 적용된 제품을 3D 프린팅 하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;RAID&lt;/code&gt; : 여러 개의 하드디스크로 디스크 배열을 구성하여 파일을 구성하여 파일을 구성하고 있는 데이터 블록들을 서로 다른 디스크들에 분산 저장하는 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;앤 스크린&lt;/code&gt; : N개의 서로 다른 단말기에서 동일한 콘텐츠를 자유롭게 이용할 수 있는 서비스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;컴패니언 스크린&lt;/code&gt; : TV 방송 시청 시 방송 내용을 공유하며 추가적인 기능을 수행할 수 있는 디바이스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;씬(Thin) 클라이언트 PC&lt;/code&gt; : 하드디스크나 주변 장치 없이 기본적인 메모리만 갖추고 서버와 네트워크로 운용되는 개인용 컴퓨터&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;멤스&lt;/code&gt; : 초정밀 반도체 기술을 바탕으로 센서나 액추에이터 등 기계 구조를 다양한 기술로 미세 가공하여 전기기계적 동작을 할 수 있도록 한 초미세 장치&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;패블릿&lt;/code&gt; : 태블릿 기능을 포함한 5인치 이상의 대화면 스마트폰&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;트러스트존 기술&lt;/code&gt; : ARM에서 개발한 하나의 프로세서 내에 일반 애플리케이션을 처리하는 일반 구역과 보안이 필요한 애플리케이션을 처리하는 보안 구역으로 분할하여 관리하는 하드웨어 기반의 보안 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;엠디스크&lt;/code&gt; : 한 번의 기록만으로도 자료를 영구 보관할 수 있는 광 저장 장치&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;멤리스터&lt;/code&gt; : 메모리와 레지스터의 합성어로 전류의 방향과 양 등 기존의 경험을 모두 기억하는 소자&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DB 관련 신기술 용어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;빅데이터&lt;/code&gt; : 기존의 관리 방법이나 분석 체계로는 처리하기 어려운 막대한 양의 정형 / 비정형 데이터 집합&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;브로드 데이터&lt;/code&gt; : 다양한 채널에서 소비자와 상호 작용을 통해 생산 되었거나 기업 마케팅에 있어 효율적이고 다양한 데이터, 이전에 사용하지 않거나 몰랐던 새로운 데이터나 기존 데이터에 새로운 가치가 더해진 데이터&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;메타 데이터&lt;/code&gt; : 일련의 데이터를 정의하고 설명해주는 데이터&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;디지털 아카이빙&lt;/code&gt; : 디지털 정보 자원을 장기적으로 보존하기 위한 작업&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;하둡&lt;/code&gt; : 오픈 소스를 기반으로 한 분산 컴퓨팅 플랫폼&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;타조&lt;/code&gt; : 우리나라가 주도적으로 개발 중인 하둡 기반의 분산 데이터 웨어하우스 프로젝트&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 다이어트&lt;/code&gt; : 데이터를 삭제하는 것이 아닌 압축하고 중복된 정보를 배제하고 새로운 기분에 따라 나누어 저장하는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;네트워크-구축&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B5%AC%EC%B6%95&quot; aria-label=&quot;네트워크 구축 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;네트워크 구축&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;정보를 전달하기 위해 통신 규약에 의해 연결한 통신 설비의 집합&lt;/p&gt;
&lt;h4&gt;성형(중앙 집중형)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;중앙 컴퓨터에 단말 장치들이 연결되는 구조&lt;/li&gt;
&lt;li&gt;Point-to-Point 방식으로 연결&lt;/li&gt;
&lt;li&gt;중앙 집중식이므로 교환 노드의 수가 가장 적음&lt;/li&gt;
&lt;li&gt;단말장치가 고장이나도 전체에 영향을 주지 않지만 중앙 장치가 고장이 나면 전체에 영향을 줌&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;링형(루프형)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터와 단말장치들을 서로 이웃하는 것끼리 Point-to-Point 방식으로 연결&lt;/li&gt;
&lt;li&gt;데이트는 단방향 또는 양방향으로 전송 가능&lt;/li&gt;
&lt;li&gt;하나의 단말장치라도 고장이나면 전체에 영향을 줌&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;버스형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;한 개의 통신 회선에 여러 대의 단말 장치가 연결되어 있는 형태&lt;/li&gt;
&lt;li&gt;단말장치가 고장이나도 전체에 영향을 주지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;계층형(분산형)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;중앙 컴퓨터와 일정 지역의 단말 장치까지는 하나의 회선으로 연결시키고 이웃하는 단말장치는 일정 지역 내 설치된 중간 단말장치로부터 다시 연결&lt;/li&gt;
&lt;li&gt;분산처리 시스템을 구성하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;망형(메쉬형)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;모든 지점의 컴퓨터와 단말장치를 서로 연결시킨 상태&lt;/li&gt;
&lt;li&gt;많은 양의 통신을 필요로 하는 경우 사용&lt;/li&gt;
&lt;li&gt;필요한 포트의 수 = 노드 수 - 1&lt;/li&gt;
&lt;li&gt;필요한 회선의 수 = 노드 수(노드 수 -1) / 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;포트 수 = 4 / 회선 수 = 5x4/2 = 10&lt;/p&gt;
&lt;h4&gt;네트워크 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;근거리 통신망(LAN)&lt;/li&gt;
&lt;li&gt;비교적 가까운 거리에 있는 노드들을 연결하여 구성&lt;/li&gt;
&lt;li&gt;주로 버스형이나 링형 구조 사용&lt;/li&gt;
&lt;li&gt;광대역 통신망(WAN)&lt;/li&gt;
&lt;li&gt;국가와 국가, 대륙과 대륙 등 멀리 떨어진 사이트들을 연결하여 구성&lt;/li&gt;
&lt;li&gt;일정 지역은 LAN으로 연결하고 각 LAN을 연결하는 방식을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;스위치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EC%9C%84%EC%B9%98&quot; aria-label=&quot;스위치 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스위치&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;LAN과 LAN을 연결하여 훨씬 더 큰 LAN을 만드는 장치&lt;/p&gt;
&lt;h4&gt;스위치의 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;L2 스위치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI 2계층에 속함&lt;/li&gt;
&lt;li&gt;일반적으로 부르는 스위치를 말함&lt;/li&gt;
&lt;li&gt;MAC주소를 기반으로 프레임 전송&lt;/li&gt;
&lt;li&gt;동일 네트워크 간 연결만 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L3 스위치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI 3계층에 속함&lt;/li&gt;
&lt;li&gt;L2 스위치에 라우터 기능이 추가&lt;/li&gt;
&lt;li&gt;IP 주소를 기반으로 패킷 전송&lt;/li&gt;
&lt;li&gt;서로 다른 네트워크 연결 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L4 스위치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI 4계층에 속함&lt;/li&gt;
&lt;li&gt;L3 스위치에 로드밸런서(트래픽 분산 장치) 추가&lt;/li&gt;
&lt;li&gt;IP 주소 및 TCP/UDP를 기반으로 사용자들의 요구를 서버의 부하가 적은 곳에 배분하는 로드밸런싱 기능 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L7 스위치&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI 7계층에 속함&lt;/li&gt;
&lt;li&gt;IP 주소, TCP/UDP 포트 ㅈ어보에 패킷 내용까지 참조하여 세밀하게 로드밸런싱함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;스위칭 방식&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;스위치가 프레임을 전달하는 방식에 따라 나뉨&lt;/li&gt;
&lt;li&gt;Store and Forwarding : 데이터를 모두 받은 후 스위칭&lt;/li&gt;
&lt;li&gt;Cut-through : 데이터의 목적지 주소만 확인 후 바로 스위칭&lt;/li&gt;
&lt;li&gt;Fragment Free : 위의 두 방식의 장점만을 결합한 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;백본 스위치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;여러 네트워크들을 연결할 때 중추적 역할을 하는 네트워크인 백본에서 스위칭하는 장비&lt;/li&gt;
&lt;li&gt;모든 패킷이 지나가는 네트워크 중심에 배치&lt;/li&gt;
&lt;li&gt;주로 L3 스위치가 백본 스위치 역할을 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;경로--트래픽-제어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%BD%EB%A1%9C--%ED%8A%B8%EB%9E%98%ED%94%BD-%EC%A0%9C%EC%96%B4&quot; aria-label=&quot;경로  트래픽 제어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;경로 / 트래픽 제어&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;경로 제어의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;전송 경로 중 어느 한 경로에 데이터의 양이 집중되는 것을 피하면서 최저의 비용으로 최단 시간에 송신할 수 있는 경로인 최적 패킷 교환 경로를 결정&lt;/li&gt;
&lt;li&gt;경로 제어표를 참조해서 라우터에 의해 수행&lt;/li&gt;
&lt;li&gt;경로 제어 요소 : 성능 기준, 경로의 결정 시간 / 장소, 정보 발생지, 경로 정보의 갱신 시간&lt;/li&gt;
&lt;li&gt;-&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;경로 제어 프로토콜&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;효율적인 경로 제어를 위해 네트워크를 제어하는 프로토콜&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IGP(내부 게이트웨이 프로토콜)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 자율 시스템(AS) 내의 라우팅에 사용&lt;/li&gt;
&lt;li&gt;RIP : 현재 가장 널리 사용되며 소규모 네트워크에서 효율적인 방법&lt;/li&gt;
&lt;li&gt;OSPF : 대규모 네트워크에서 많이 사용되는 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EGP(외부 게이트웨이 프로토콜)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자율 시스템 / 게이트웨이 간 라우팅에 사용되는 프로토콜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BGP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자율 시스템 간의 라우팅 프로토콜&lt;/li&gt;
&lt;li&gt;EGP의 단점을 보완하기 위해 만들어짐&lt;/li&gt;
&lt;li&gt;초기 연결 시 라우팅 테이블을 교환하고 이후에는 변화된 정보만을 교환&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;트래픽 제어의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네트워크의 보호, 성능 유지, 자원의 효율적인 이용을 위해 전송되는 패킷의 흐름, 양을 조절하는 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;흐름 제어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 내의 원활한 흐름을 위해 송수신 사이 전송되는 패킷의 양이나 속도를 규제&lt;/li&gt;
&lt;li&gt;송수신간 처리 속도 또는 버퍼 크기의 차이에 의해 생길 수 있는 버퍼 오버플로우를 방지&lt;/li&gt;
&lt;li&gt;정지-대기 : 수신 측에서 확인 신호를 받아야 다음 패킷을 전송&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;슬라이딩 윈도우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;확인 신호를 이용하여 송신 데이터의 양을 조절&lt;/li&gt;
&lt;li&gt;수신 측의 확인 신호를 받지 않아도 정해진 패킷 수만큼 연속적으로 전송하는 방식&lt;/li&gt;
&lt;li&gt;한 번에 여러 개의 패킷을 전송할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;혼잡 제어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;네트워크 내의 패킷 수를 조절하여 네트워크의 오버플로우를 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;교착상태 방지&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;교환기 내에 패킷들을 축적하는 기억 공간이 꽉 차있을 때 다음 패킷들을 이 기억 공간에 들어가기 위해 무한정 기다리는 현상을 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;소프트웨어-개발-보안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EB%B3%B4%EC%95%88&quot; aria-label=&quot;소프트웨어 개발 보안 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 개발 보안&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;소프트웨어 개발 보안의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개발 과정에서 발생할 수 있는 보안 취약점을 최소화하여 보안 위협으로부터 안전한 소프트웨어를 개발하기 보안 활동&lt;/li&gt;
&lt;li&gt;데이터의 기밀성, 무결성, 가용성을 유지하는 것이 목표&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;소프트웨어 개발 보안 관련 기관&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;행정안전부(정책기관), 한국인터넷진흥원(전문기관), 행정기관(발주기관), 사업자(개발기관), 감리법인(보안 약점 진단)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;소프트웨어-개발-직무별-보안-활동&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EC%A7%81%EB%AC%B4%EB%B3%84-%EB%B3%B4%EC%95%88-%ED%99%9C%EB%8F%99&quot; aria-label=&quot;소프트웨어 개발 직무별 보안 활동 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 개발 직무별 보안 활동&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;소프트웨어 개발 직무별 보안 활동&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 관리자 : 보안 전략을 조직 구성원에게 전달하고 모니터링&lt;/li&gt;
&lt;li&gt;요구사항 분석가 : 아키텍트가 고려해야 할 보안 관련 비즈니스 요구사항을 설명&lt;/li&gt;
&lt;li&gt;아키텍트 : 보안 오류가 발생하지 않도록 보안 기술 문제를 충분히 이해하고 시스템에 사용되는 모든 리소스 정의 및 보안 요구사항 적용&lt;/li&gt;
&lt;li&gt;설계자 : 특정 기술에 대해 보안 요구사항의 만족성 여부를 파악하고 소프트웨어에서 발견된 보안 위협에 대해 적절히 대응&lt;/li&gt;
&lt;li&gt;구현 개발자 : 개발 환경에서 프로그램을 구현할 수 있도록 시큐어 코딩 표준을 준수하여 개발&lt;/li&gt;
&lt;li&gt;테스트 분석가 : 개발 요구사항과 구현 결과를 반복적으로 확인&lt;/li&gt;
&lt;li&gt;보안 감시자 : 개발 프로젝트의 전체 단계에서 활동하며 현재 상태와 보안을 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;secure-os&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#secure-os&quot; aria-label=&quot;secure os permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Secure OS&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;Secure OS의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기존 운영체제에 내재된 보안 취약점을 해소하기 위해 보안 기능을 갖춘 커널을 이식한 운영체제&lt;/li&gt;
&lt;li&gt;TCB를 기반으로 참조모니터의 개념을 구현하고 집행&lt;/li&gt;
&lt;li&gt;참조 모니터와 보안 커널의 특징 : 격리성, 검증 가능성, 완전성&lt;/li&gt;
&lt;li&gt;보호 대상 : 메모리, 보조 기억장치 및 저장된 데이터, 하드웨어 장치, 자료 구조, 명령어, 각종 보호 메커니즘 등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/xsUip/btqDxJ64w7n/GajzR0kU8O26n3ls8lUkDK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;Secure OS의 보안 기능&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;식별 및 인증, 임의적 접근통제, 강제적 접근 통제, 객체 재사용 보호, 완전한 조정, 신뢰 경로, 감사 및 감사기록 축소&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;회복--병행제어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9A%8C%EB%B3%B5--%EB%B3%91%ED%96%89%EC%A0%9C%EC%96%B4&quot; aria-label=&quot;회복  병행제어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;회복 / 병행제어&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;회복&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션을 수행하는 도중 장애가 발생하여 데이터베이스가 손상되었을 때 복구하는 작업&lt;/li&gt;
&lt;li&gt;장애의 유형 : 트랜잭션 장애, 시스템 장애, 미디어 장애&lt;/li&gt;
&lt;li&gt;회복 관리기 : 트랜잭션이 실행이 완료되지 못하면 트랜잭션이 데이터베이스에 생성했던 모든 변화를 취소(Undo)시키고 이전의 원래 상태로 복구하는 역할을 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;병행 제어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동시에 여러 개의 트랜잭션을 수행할 때 데이터베이스의 일관성을 유지할 수 있도록 트랜잭션 간 상호작용을 제어&lt;/li&gt;
&lt;li&gt;병행 제어의 목적&lt;/li&gt;
&lt;li&gt;데이터베이스의 공유 및 시스템의 활용도 최대화&lt;/li&gt;
&lt;li&gt;데이터베이스 일관성 유지&lt;/li&gt;
&lt;li&gt;응답 시간 최소화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;병행 수행의 문제점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;갱신 분실 : 두 개 이상의 트랜잭션이 같은 자료를 공유하여 갱신할 때 갱신 결과의 일부가 없어짐&lt;/li&gt;
&lt;li&gt;비 완료 의존성 : 하나의 트랜잭션이 실패한 후 회복되기 전에 다른 트랜잭션이 실패한 갱신 결과를 참조&lt;/li&gt;
&lt;li&gt;모순성 : 병행 수행될 때 원치 않는 자료를 이용하여 문제가 발생&lt;/li&gt;
&lt;li&gt;연쇄 복귀 : 트랜잭션 중 하나에 문제가 생겨 ROLLBACK 하는 경우 다른 트랜잭션도 같이 ROLLBACK 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터-표준화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%91%9C%EC%A4%80%ED%99%94&quot; aria-label=&quot;데이터 표준화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 표준화&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;데이터 표준화의 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템을 구성하는 데이터 요소의 명칭, 정의, 형식, 규칙에 대한 원칙을 수립하고 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 표준&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 모델이나 데이터베이스에서 정의할 수 있는 모든 오브젝트를 대상으로 수행&lt;/li&gt;
&lt;li&gt;표준 단어 : 업무에서 사용하는 일정한 의미를 가진 최수 단위의 단어&lt;/li&gt;
&lt;li&gt;표준 도메인 : 칼럼을 성질에 따라 그룹핑함&lt;/li&gt;
&lt;li&gt;표준 코드 : 선택할 수 있는 값을 기준에 맞게 이미 정의된 코드값&lt;/li&gt;
&lt;li&gt;표준 용어 : 표준 단어 / 도메인 / 코드를 바탕으로 표준 용어 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 표준화 절차&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bhCoqs/btqDxuh4AHO/8qBVmAc6NBXL5sNy1Ohv31/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;데이터 표준화의 대상&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 명칭 : 데이터를 유일하게 구별, 의미 전달, 업무적 보편성을 갖는 이름을 가져야 함&lt;/li&gt;
&lt;li&gt;데이터 정의 : 제3자의 입장에서도 쉽게 이해할 수 있도록 데이터가 의미하는 범위와 자격 요건을 규정&lt;/li&gt;
&lt;li&gt;데이터 형식 : 데이터를 형식을 일관적으로 정의함으로써 데이터 입력 오류 및 통제 위험 등을 최소화&lt;/li&gt;
&lt;li&gt;데이터 규칙 : 데이터 값을 사전에 지정해 데이터의 정합성 및 완전성 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 표준화의 기대효과&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터의 의미나 위치를 파악하고 의사소통하기 쉽다&lt;/li&gt;
&lt;li&gt;데이터 유지보수 및 운용에 있어 여러 이점이 있음&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(4)-정보시스템 구축 관리(1)/</guid><pubDate>Wed, 01 Apr 2020 03:05:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;1-소프트웨어-개발-방법론-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EB%B2%95%EB%A1%A0-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;1 소프트웨어 개발 방법론 활용 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 소프트웨어 개발 방법론 활용&lt;/h1&gt;
&lt;h2 id=&quot;1-소프트웨어-개발-방법론&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-%EB%B0%A9%EB%B2%95%EB%A1%A0&quot; aria-label=&quot;1 소프트웨어 개발 방법론 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 소프트웨어 개발 방법론&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개발, 유지보수에 필요한 수행 방법과 효율적으로 수행하려는 과정에서 필요한 기법 및 도구를 정리하여 표준화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;구조적 방법론&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정형화된 분석 절차에 따라 사용자 요구사항을 파악하여 문서화하는 처리 중심의 방법론&lt;/li&gt;
&lt;li&gt;Divide and Conquer 원리 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bDJfwm/btqDuq8ArKY/SxVNAlkkhjhsEasI7Nw691/img.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h4&gt;정보공학 방법론&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정보 시스템 개발을 위해 계획, 분석, 설계, 구축에 정형화된 기법들을 상호 연관성 있게 통합 및 적용하는 자료 중심의 방법론&lt;/li&gt;
&lt;li&gt;대규모 정보시스템 구축에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/tKz2I/btqDtA4DU6w/b7hkt3ksSIG3XuOLhlRN00/img.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h4&gt;객체지향 방법론&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기계의 부품을 조립하듯이 객체들을 조립하여 소프트웨어를 구현하는 방법론&lt;/li&gt;
&lt;li&gt;구조적 기법의 해결책으로 채택&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bFkLcZ/btqDvXScLG3/LCApxJv0HOkA98aKDNXShk/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;컴포넌트 기반(CBD) 방법론&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트를 조합하여 새로운 애플리케이션을 만드는 방법론&lt;/li&gt;
&lt;li&gt;컴포넌트의 재사용이 가능하여 시간, 노력, 비용을 절감하고 품질을 높임&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/H8pn4/btqDwdUMh0o/MxHQTALefgVxSgF9FSETG0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;애자일 방법론&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;고객의 요구사항 변화에 빠르고 유연하게 대응하도록 일정한 주기를 반복하면서 개발 과정을 진행하는 방법론&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/q2CRK/btqDvhwKleY/62itLkLmBj9lNTiocxSyQ0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;제품 계열 방법론&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론&lt;/li&gt;
&lt;li&gt;임베디드 소프트웨어 개발에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-비용-산정-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%B9%84%EC%9A%A9-%EC%82%B0%EC%A0%95-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;2 비용 산정 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 비용 산정 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 개발 규모를 소요되는 인원, 자원, 기간 등으로 확인하여 실행 가능한 계획을 수립하기 위해 필요한 비용을 산정하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;소프트웨어 비용 결정 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 요소 : 제품 복잡도, 시스템 크기, 요구되는 신뢰도&lt;/li&gt;
&lt;li&gt;자원 요소 : 인적 자원, 하드웨어 자원, 소프트웨어 자원&lt;/li&gt;
&lt;li&gt;생산성 요소 : 개발자 능력, 개발 기간&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;하향식 산정 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;과거의 유사한 경험을 바탕으로 전문 지식이 많은 개발자들이 참여한 회의를 통해 비용을 산정&lt;/li&gt;
&lt;li&gt;전문가 감정 기법&lt;/li&gt;
&lt;li&gt;조직 내 경험이 많은 두 명 이상의 전문가에게 비용 산정을 의뢰&lt;/li&gt;
&lt;li&gt;진행했던 유사한 프로젝트와 진행할 새로운 프로젝트 간 새로운 요소가 있을 수 있고 경험이 없을 수 있음&lt;/li&gt;
&lt;li&gt;델파이 기법&lt;/li&gt;
&lt;li&gt;많은 전문가의 여러 의견을 종합하여 산정&lt;/li&gt;
&lt;li&gt;한 명의 조정자와 여러 전문가로 구성되어 객관적임&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;상향식 산정 기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트의 세부적인 작업 단위별로 비용을 산정 후 집계하여 전체 비용을 산정&lt;/li&gt;
&lt;li&gt;LOC(source Line Of Code) 기법&lt;/li&gt;
&lt;li&gt;소프트웨어의 각 기능의 원시 코드 라인 수로 예측치를 구하고 비용을 산정하는 기법&lt;/li&gt;
&lt;li&gt;노력(인월) = 개발 기간 x 투입 인원 = LOC / 1인당 월평균 생산 코드 라인 수&lt;/li&gt;
&lt;li&gt;개발 비용 = 노력(인월) x 단위 비용(1인당 월평균 인건비)&lt;/li&gt;
&lt;li&gt;개발 기간 = 노력(인월) / 투입 인원&lt;/li&gt;
&lt;li&gt;생산성 = LOC / 노력(인월)&lt;/li&gt;
&lt;li&gt;개발 단계별 인월수 기법&lt;/li&gt;
&lt;li&gt;각 기능을 구현시키는 데 필요한 노력을 생명 주기의 각 단계별로 산정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-수학적-산정-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%88%98%ED%95%99%EC%A0%81-%EC%82%B0%EC%A0%95-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;3 수학적 산정 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 수학적 산정 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;수학적 산정 기법의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;상향식 선정 기법&lt;/li&gt;
&lt;li&gt;개발 비용 산정의 자동화를 목표로 함&lt;/li&gt;
&lt;li&gt;경험적 / 실험적 추정 모형이라고도 함&lt;/li&gt;
&lt;li&gt;과거 유사한 프로젝트를 기반으로 공식을 유도&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;COCOMO 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보헴이 제안하였으며 LOC에 의한 비용 산정 기법&lt;/li&gt;
&lt;li&gt;개발 유형 : 소프트웨어의 복잡도 또는 원시 프로그램의 규모에 따라 분류&lt;/li&gt;
&lt;li&gt;조직형(Organinc Mode) : 기관 내부에서 개발된 중·소규모의 소프트웨어로 5만 라인 이하의 소프트웨어를 개발하는 유형&lt;/li&gt;
&lt;li&gt;반분리형(Semi-Detached Mode) : 트랜잭션 처리 시스템이나 운영체제, 데이터베이스 관리 시스템 등 30만 라인 이하의 소프트웨어를 개발하는 유형&lt;/li&gt;
&lt;li&gt;내장형(Embedded Mode) : 최대형 규모의 트랜잭션 처리 시스템이나 운영체제 등 30만 라인 이상의 소프트웨어를 개발하는 유형&lt;/li&gt;
&lt;li&gt;모형의 종류 : 비용 산정 단계 및 적용 변수의 구체화 정도로 구분&lt;/li&gt;
&lt;li&gt;기본형(Basic) : 소프트웨어의 크기와 개발 유형만을 이용하여 비용을 산정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중간형(Intermediate) : 기본형의 공식을 사용하거나 4가지 특성의 15가지 요인에 의해 비용을 산정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제품의 특성 : 요구되는 신뢰도, 데이터베이스 크기, 제품의 복잡도&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴퓨터의 특성 : 수행 시간의 제한, 기억 장소의 제한, 가상 기계의 안정성, 반환 시간&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 요원의 특성 : 분석가의 능력, 개발 분야의 경험, 가상 기계의 경험, 프로그래머의 능력, 프로그래밍 언어의 경험&lt;/li&gt;
&lt;li&gt;프로젝트 특성 : 소프트웨어 도구의 이용, 프로젝트 개발 일정, 최신 프로그래밍 기법의 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;발전형(Detailed) : 개발 공정별로 보다 자세하고 정확하게 노력을 산출하여 비용을 산정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Putnam 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 생명 주기의 전 과정 동안에 사용될 노력의 분포를 가정해주는 모형&lt;/li&gt;
&lt;li&gt;생명 주기 예측 모형이라고도 함&lt;/li&gt;
&lt;li&gt;시간에 따라 함수로 표현되는 Rayleigh-Norden 곡선의 노력 분포도를 기초로 함&lt;/li&gt;
&lt;li&gt;대형 프로젝트 노력 분포 산정에 이용&lt;/li&gt;
&lt;li&gt;SLIM : Rayleigh-Norder 곡선과 Putnam 예측 모델을 기초로 하여 개발된 자동화 측정 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;기능 점수(FP) 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 기능을 증대시키는 요인별로 가중치를 부여하고 합산하여 총 기능 점수를 산출하며 총 기능 점수와 영향도를 이용하여 기능 점수를 구한 후 이를 이용해서 비용을 산정&lt;/li&gt;
&lt;li&gt;알브레히트가 제안&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(3)/</guid><pubDate>Tue, 03 Mar 2020 02:01:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-애플리케이션-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;3 애플리케이션 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 애플리케이션 설계&lt;/h1&gt;
&lt;h2 id=&quot;1-소프트웨어-아키텍처&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98&quot; aria-label=&quot;1 소프트웨어 아키텍처 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 소프트웨어 아키텍처&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;소프트웨어 아키텍처의 설계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 골격이 되는 기본 구조&lt;/li&gt;
&lt;li&gt;소프트웨어를 구성하는 요소들 간의 관계를 표현하는 시스템의 구조 또는 구조체&lt;/li&gt;
&lt;li&gt;좋은 품질을 유지하면서 사용자의 비기능적 요구사항으로 나타난 제약을 반영하고,&lt;/li&gt;
&lt;li&gt;기능적 요구사항을 구현하는 방법을 찾는 해결 과정&lt;/li&gt;
&lt;li&gt;애플리케이션의 분할 방법과 분할된 모듈에 할당될 기능, 모듈 간의 인터페이스 등을 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;모듈화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 성능을 향상하거나 시스템의 수정 및 재사용, 유지 관리 등이 용이하도록 시스템의 시스템의 기능들을 모듈 단위로 나누는 것&lt;/li&gt;
&lt;li&gt;모듈의 크기와 개수는 반비례관계 개수와 통합 비용은 비례 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;추상화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제의 전체를 설계 후 세분화하여 구체화하는 과정&lt;/li&gt;
&lt;li&gt;완전한 시스템을 구축하기 전에 그 시스템과 유사한 모델을 만들어 여러 가지 요인들을 테스트할 수 있음&lt;/li&gt;
&lt;li&gt;최소 비용으로 실제 상황에 대처할 수 있고 시스템의 구조 및 구성을 대략적으로 파악할 수 있음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;추상화 유형&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;과정 추상화&lt;/code&gt; : 전반적인 흐름만 파악&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데이터 추상화&lt;/code&gt; : 데이테의 세부사항은 정의하지 않고 구조를 대표할 수 있는 표현으로 대체&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어 추상화&lt;/code&gt;: 이벤트의 발생의 세부사항은 정의하지 않고 구조를 대표할 수 있는 표현으로 대체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;단계적 분해&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문제를 상위 중요 개념으로부터 하위의 개념으로 구체화하는 분할 기법&lt;/li&gt;
&lt;li&gt;추상화의 반복으로 세분화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;정보 은닉&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;한 모듈 내부에 포함된 정보들을 감추어 다른 모듈이 접근하거나 변경하지 못하도록 하는 기법&lt;/li&gt;
&lt;li&gt;다른 모듈과 커뮤니케이션을 할 때는 필요한 정보만 인터페이스를 통해 주고받음&lt;/li&gt;
&lt;li&gt;모듈을 독립적으로 수행하기 때문에 다른 모듈에 영향을 주지 않아 수정, 시험, 유지보수가 용이&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;소프트웨어 아키텍처의 품질 속성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 아키텍처가 이해 관계자들이 요구하는 수준의 품질을 유지하고 보장할 수 있게 설계되었는지를 확인하기 위해 품질 요소들을 구체화시켜 놓은 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bgPcgi/btqDhu4fZlW/lalDfRU3B7CaksQKOIK3gk/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;소프트웨어 아키텍처의 설계 과정&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/Tp1TU/btqDjHVV6TD/ipV4O8QLpKkaJKi39az4x0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 80%;&quot;&gt;\&lt;/p&gt;
&lt;h2 id=&quot;2-아키텍쳐-패턴&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;2 아키텍쳐 패턴 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 아키텍쳐 패턴&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;아키텍처 패턴의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;아키텍처를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제&lt;/li&gt;
&lt;li&gt;시스템의 구조를 구성하기 위한 기본적인 틀을 제공&lt;/li&gt;
&lt;li&gt;서브시스템과 그 역할이 정의되어 있어 서브시스템 사이 관계와 규칙, 지침 등이 포함되어 있음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아키텍처 패턴의 장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 시간을 단축시킴&lt;/li&gt;
&lt;li&gt;고품질의 소프트웨어 생산&lt;/li&gt;
&lt;li&gt;검증된 구조로 작업&lt;/li&gt;
&lt;li&gt;시스템 구조를 이해하기 쉬워 개발에 참여하지 않아도 유지보수가 쉬움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;레이어 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템을 계층으로 구분하여 구성&lt;/li&gt;
&lt;li&gt;각각의 서브 시스템이 계층 구조를 이룸&lt;/li&gt;
&lt;li&gt;상위 계층은 하위 계층에 대한 서비스 제공자가 되고 하위 계층은 상위 계층의 클라이언트가 됨&lt;/li&gt;
&lt;li&gt;마주 보는 두 계층 사이에만 상호 작용이 이루어짐&lt;/li&gt;
&lt;li&gt;특정 계층만을 교체해 시스템을 개선하는 것이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;클라이언트-서버 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;하나의 서버와 다수의 클라이언트로 구성&lt;/li&gt;
&lt;li&gt;사용자는 클라이언트를 통해 서버에 요청하고 응답을 받아 사용자에게 제공&lt;/li&gt;
&lt;li&gt;서버는 클라이언트의 요청에 대비해 항상 대기 상태 유지&lt;/li&gt;
&lt;li&gt;요청을 위하여 동기화되는 경우를 제외하고는 서로 독립적임&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;파이프-필터 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 스트림(데이터가 송수신되거나 처리되는 흐름) 절차의 각 단계를 필터 컴포넌트로 캡슐화하여 파이프를 통해 데이터를 전송&lt;/li&gt;
&lt;li&gt;필터 컴포넌트는 재사용성이 좋고 추가가 쉬워 확장이 용이&lt;/li&gt;
&lt;li&gt;필터 컴포넌트를 재배치하여 다양한 파이프라인 구축 가능&lt;/li&gt;
&lt;li&gt;데이터 변환, 버퍼링, 동기화 등에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;모델-뷰-컨트롤러 패턴(MVC)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서브시스템을 3개의 부분으로 구조화&lt;/li&gt;
&lt;li&gt;모델 : 서브시스템의 핵심 기능과 데이터 보관&lt;/li&gt;
&lt;li&gt;뷰 : 사용자에게 정보 표시&lt;/li&gt;
&lt;li&gt;컨트롤러 : 사용자로부터 받은 입력 처리&lt;/li&gt;
&lt;li&gt;각 부분은 별도로 분리되어 있어 서로 영향을 받지 않고 독립적인 개발 작업 수행&lt;/li&gt;
&lt;li&gt;여러 개의 뷰를 만들 수 있어 한 개의 모델에 여러 개의 뷰를 필요로 하는 대화형 애플리케이션에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;기타 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;마스터-슬레이브 패턴 : 마스터 컴포넌트에서 슬레이브 컴포넌트로 작업을 분할한 후 슬레이브 컴포넌트에서 처리된 결과물을 다시 돌려받는 방식&lt;/li&gt;
&lt;li&gt;보로커 패턴 : 사용자가 원하는 서비스와 특성을 브로커 컴포넌트에 요청하면 브로커 컴포넌트가 요청에 맞는 컴포넌트를 연결&lt;/li&gt;
&lt;li&gt;피어-투-피어 패턴 : 피어를 하나의 컴포넌트로 간주하여 각 피어는 클라이언트 또는 서버가 될 수도 있음&lt;/li&gt;
&lt;li&gt;이벤트-버스 패턴 : 소스가 특정 채널에 이벤트 메시지를 발행하면 해당 채널을 구독한 리스너들이 메시지를 받아 이벤트를 처리하는 방식&lt;/li&gt;
&lt;li&gt;블랙보드 패턴 : 모든 컴포넌트들이 공유 데이터 저장소와 블랙보드 컴포넌트에 접근이 가능하여 검색을 통해 블랙보드에서 원하는 데이터를 찾을 수 있음&lt;/li&gt;
&lt;li&gt;인터프리터 패턴 : 프로그램 코드의 각 라인을 수행하는 방법을 지정하고 기호마다 클래스를 갖도록 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;객체지향object-oriented&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5object-oriented&quot; aria-label=&quot;객체지향object oriented permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체지향(Object-Oriented)&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;객체지향의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;현실 세계의 개체를 기계의 부품처럼 하나의 객체(Object)로 만들어 소프트웨어를 개발할 때 객체를 조립하여 작성할 수 있는 기법&lt;/li&gt;
&lt;li&gt;구조적 기법의 문제점을 해결하기 위해 사용&lt;/li&gt;
&lt;li&gt;소프트웨어의 재사용 및 확장이 용이하여 고품질의 소프트웨어를 빠르게 개발할 수 있어 유지보수가 쉬움&lt;/li&gt;
&lt;li&gt;복잡한 구조를 단계적이고 계층적이게 표현&lt;/li&gt;
&lt;li&gt;멀티미디어 데이터 및 병렬 처리 지원&lt;/li&gt;
&lt;li&gt;객체, 클래스, 캡슐화, 상속, 다형성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;객체&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터와 데이터를 처리하는 함수를 묶어 캡슐화한 하나의 소프트웨어 모듈&lt;/li&gt;
&lt;li&gt;데이터 : 객체가 가지고 있는 정보&lt;/li&gt;
&lt;li&gt;함수 : 객체가 수행하는 기능으로 데이터를 처리하는 알고리즘&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;객체의 특성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체는 독립적으로 식별 가능한 이름을 가지고 있음&lt;/li&gt;
&lt;li&gt;객체의 상태는 시간에 따라 변함&lt;/li&gt;
&lt;li&gt;객체 간의 상호 연관성에 의해 관계 형성&lt;/li&gt;
&lt;li&gt;객체가 반응할 수 있는 메시지의 집합을 행위라고 하며 객체는 행위의 특징을 나타낼 수 있음&lt;/li&gt;
&lt;li&gt;객체는 일정한 기억 장소를 가지고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;클래스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;공통된 속성과 연산을 갖는 객체의 집합으로 객체의 일반적인 타입을 의미&lt;/li&gt;
&lt;li&gt;각각의 객체들이 갖는 속성과 연산을 정의하고 있는 틀&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인스턴스&lt;/code&gt; : 클래스에 속한 각각의 객체&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인스턴스화&lt;/code&gt; : 클래스로부터 새로운 객체를 생성하는 것&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;슈퍼 클래스&lt;/code&gt; : 특정 클래스의 부모(상위) 클래스&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;서브 클래스&lt;/code&gt; : 특정 클래스의 자식(하위) 클래스&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;캡슐화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터와 함수를 하나로 묶은 것&lt;/li&gt;
&lt;li&gt;인터페이스를 제외한 세부 내용이 은폐되어 외부에서 접근이 제한적이기 때문에 외부에서 변경하기 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;상속&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;이미 정의된 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것&lt;/li&gt;
&lt;li&gt;하위 클래스는 부모 클래스의 모든 속성과 연산을 다시 정의하지 않고 사용할 수 있음&lt;/li&gt;
&lt;li&gt;하위 클래스는 상속받은 속성 외에 새로운 속성과 연산을 첨가하여 사용할 수 있음&lt;/li&gt;
&lt;li&gt;다중 상속 : 한 개의 클래스가 두 개 이상의 상위 클래스로부터 상속받는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;다형성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;메시지에 의해 객체가 연산 수행하게 될 때 하나의 메시지에 대해 각각의 클래스가 가지고 있는 고유한 특성으로 응답할 수 있는 능력&lt;/li&gt;
&lt;li&gt;객체지향의 오버로딩의 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;모듈&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88&quot; aria-label=&quot;모듈 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;모듈의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;모듈화를 통해 분리된 시스템의 각 기능들&lt;/li&gt;
&lt;li&gt;서브루틴, 서브시스템, 소프트웨어 내의 프로그램, 작업 단위 등과 같은 의미로 사용&lt;/li&gt;
&lt;li&gt;단독으로 컴파일 가능하며 재사용 할 수 있음&lt;/li&gt;
&lt;li&gt;각 모듈의 기능이 서로 독립적이고 모듈이 하나의 기능만을 수행하고 다른 모듈과의 과도한 상호작용을 배제함&lt;/li&gt;
&lt;li&gt;독립성이 높을수록 모듈을 수정해도 다른 모듈에 영향이 없어 오류가 발생해도 쉽게 해결 가능&lt;/li&gt;
&lt;li&gt;모듈의 독립성을 높이기 위해서는 결합도는 약하게, 응집도는 강하게 해야함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;결합도&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;모듈 간에 상호 의존도 또는 모듈 사이의 연관 관계&lt;/li&gt;
&lt;li&gt;결합도와 품질은 반비례 관계&lt;/li&gt;
&lt;li&gt;결합도가 강하면 시스템 구현 및 유지보수 작업이 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/D69Nr/btqDj2luZEp/gPcAc6E5mT7m7yQnX7pW20/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;응집도&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정보 은닉 개념을 확장한 것으로 모듈의 내부 요소들의 서로 관련되어 있는 정도&lt;/li&gt;
&lt;li&gt;모듈이 독립적인 기능으로 정의되어 있는 정도&lt;/li&gt;
&lt;li&gt;응집도와 품질은 비례 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bwJ57H/btqDiaENFQz/XKeGSlDatP2eXrUHdx534k/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;팬 인/아웃&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;팬 인 : 호출하는 모듈의 수&lt;/li&gt;
&lt;li&gt;팬 아웃 : 호출되는 모듈의 수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/IzNpN/btqDj2eJF2D/puVuK7M3jvks5GvDffzwkk/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h2 id=&quot;공통-모듈&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%ED%86%B5-%EB%AA%A8%EB%93%88&quot; aria-label=&quot;공통 모듈 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공통 모듈&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;공통 모듈의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;여러 프로그램에서 공통적으로 사용할 수 있는 모듈&lt;/li&gt;
&lt;li&gt;자주 사용되는 계산식이나 매번 필요한 사용자 인증 같은 기능들이 공통 모듈로 구성될 수 있음&lt;/li&gt;
&lt;li&gt;공통 모듈의 명세 기법 : 정확성, 명확성, 완전성, 일관성, 추적성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;재사용&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;비용과 시간을 절약하기 위해 이미 개발된 기능들을 파악하고 재구성하여 새로운 시스템 개발에 사용하기 적합하도록 최적화 시키는 작업&lt;/li&gt;
&lt;li&gt;재사용되는 대상은 외부 모듈과의 결합도는 낮고 응집도는 높아야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;효과적인 모듈 설계 방안&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;결합도는 줄이고 응집도는 높여 모듈의 독립성과 재사용성을 높임&lt;/li&gt;
&lt;li&gt;하나의 입구와 하나의 출구를 가져야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C&quot; aria-label=&quot;코드 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;코드의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터를 이용하여 자료를 처리하는 과정에서 분류, 조합 및 집계를 용이하게 하고 특정 자료의 추출을 쉽게 하기 위해 사용하는 기호&lt;/li&gt;
&lt;li&gt;코드의 기능 : 식별 기능, 분류 기능, 배열 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;코드의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;순차 코드&lt;/code&gt; : 일정 기준에 따라 최초의 자료부터 일련번호를 부여하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;블록 코드&lt;/code&gt; : 대상 항목에서 공통적인 것을을 블록으로 구분하고 블록 내에 일련번호를 부여하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;10진 코드&lt;/code&gt; : 대상 항목을 0~9까지 10진 분할하고 다시 각각에 대하여 10진 분할을 필요한 만큼 반복하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;그룹 분류 코드&lt;/code&gt; : 일정 기준에 따라 대분류, 중분류, 소분류 등으로 구분하고 그룹 안에서 일련번호를 부여하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;연상 코드&lt;/code&gt; : 항목의 명칭이나 약호와 관계있는 숫자, 문자, 기호를 이용하여 코드를 부여하는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;표의 숫자 코드&lt;/code&gt; : 항목의 성질(길이, 넓이, 부피 등)의 물리적인 수치를 그대로 코드에 적용시키는 방법&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;합성 코드&lt;/code&gt; : 하나의 코드로 수행하기 어려운 경우 2개 이상의 코드를 조합하여 적용시키는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;코드 부여 체계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;코드(이름)만으로도 개체의 용도와 적용 범위를 알 수 있도록 코드를 부여하는 방식&lt;/li&gt;
&lt;li&gt;시스템의 고유한 코드와 개체를 나타내는 코드 등이 정의되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;디자인-패턴&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4&quot; aria-label=&quot;디자인 패턴 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디자인 패턴&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;디자인 패턴의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;각 모듈의 세분화된 역할이나 모듈들 간의 인터페이스와 같은 코드를 작성하는 수준의 세부적인 구현 방안을 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제&lt;/li&gt;
&lt;li&gt;개발 과정에 문제가 발생 시 새로 해결책을 구상하기보다 문제에 해당하는 디자인 패턴을 참고하여 적용하는 것이 더욱 효율적임&lt;/li&gt;
&lt;li&gt;재사용할 수 있는 기본형 코드들이 포함되어 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;생성 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;객체의 생성과 참조 과정을 샘플화 하여 객체가 생성되거나 변경되어도 프로그램의 구조에 영향을 크게 받지 않도록 하여 프로그램의 유연성을 더해줌&lt;/li&gt;
&lt;li&gt;추상 팩토리 : 구체적인 클래스에 의존하지 않고 인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현&lt;/li&gt;
&lt;li&gt;빌더 : 작게 분리된 인스턴스를 건축 하듯이 조합하여 객체 생성&lt;/li&gt;
&lt;li&gt;팩토리 메소드 : 객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴&lt;/li&gt;
&lt;li&gt;프로토타입 : 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴&lt;/li&gt;
&lt;li&gt;싱글톤 : 하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만 여러 프로세스가 동시에 참조할 수는 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;구조 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;클래스나 객체들을 조합하여 더 큰 구조로 만들 수 있게 해주는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;어댑터&lt;/code&gt; : 호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;브리지&lt;/code&gt; : 구현부에서 추상층을 분리하여 서로가 독립적으로 확장할 수 있도록 구성한 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;컴포지트&lt;/code&gt; : 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;데코레이터&lt;/code&gt; : 객체 간의 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;퍼싸드&lt;/code&gt; : 복잡한 서브 클래스들을 피해 더 상위에 인터페이스를 구상함으로써 서브 클래스의 기능을 간편하게 사용할 수 있도록 하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;플라이웨이트&lt;/code&gt; : 인스턴스가 필요할 때마다 생성하는 것이 아닌 공유해서 사용함으로써 메모리를 절약하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;프록시&lt;/code&gt; : 접근이 어려운 객체와 여기에 연결하려는 객체 사이에서 인터페이스 역할을 수행하는 패턴&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;행위 패턴&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의한 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;책임 연쇄&lt;/code&gt; : 요청을 처리할 수 있는 객체가 둘 이상 존재하여 한 객체가 처리하지 못하면 다음 객체로 넘어가는 형태의 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;커맨드&lt;/code&gt; : 요청을 객체의 형태로 캡슐화하여 재이용하거나 취소할 수 있도록 요청에 필요한 정보를 저장하거나 로그에 남기는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인터프리터&lt;/code&gt; : 언어에 문법 표현을 정의하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;반복자&lt;/code&gt; : 자료 구조와 같이 접근이 잦은 객체에 대해 동일한 인터페이스를 사용하도록 하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;중재자&lt;/code&gt; : 수많은 객체들 간의 복잡한 상호작용을 캡슐화하여 객체로 정의하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;메멘토&lt;/code&gt; : 특정 시점에서의 객체 내부 상태를 객체화함으로써 이후 요청에 따라 객체를 해당 시점의 상태로 돌릴 수 있는 기능을 제공하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;옵서버&lt;/code&gt; : 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;상태&lt;/code&gt; : 객체의 상태에 따라 동일한 동작을 다르게 처리해야 할 때 사용하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;전략&lt;/code&gt; : 동일한 계열의 알고리즘들을 개별적으로 캡슐화하여 상호 교환할 수 있게 정의하는 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;템플릿 메소드&lt;/code&gt; : 상위 클래스에서 골격을 정의하고 하위 클래스에서 처리를 구체화하는 구조의 패턴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;방문자&lt;/code&gt; : 각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성하는 패턴&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-인터페이스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;4 인터페이스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 인터페이스 설계&lt;/h1&gt;
&lt;h2 id=&quot;시스템-인터페이스-요구사항-분석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EB%B6%84%EC%84%9D&quot; aria-label=&quot;시스템 인터페이스 요구사항 분석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 인터페이스 요구사항 분석&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;시스템 인터페이스 요구사항 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;시스템 인터페이스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;독립적으로 떨어져 있는 시스템들끼리 서로 연동하여 상호작용하기 위한 접속 방법이나 규칙&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시스템 인터페이스 요구사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발을 목표로 하는 시스템과 외부 시스템을 연동하는데 필요한 필요한 시스템 인터페이스에 대한 요구사항을 기술한 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;인터페이스 이름, 연계 대상 시스템, 연계 범위 및 내용, 연계 방식, 송신 데이터, 인터페이스 주기, 기타 고려사항 등&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;시스템 인터페이스 요구사항 분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구사항 명세서에서 요구사항을 기능적 요구사항과 비기능적 요구사항으로 분류하고 조직화하여 요구사항 명세를 구체화하고 이를 이해관계자에게 전달하는 일련의 과정&lt;/li&gt;
&lt;li&gt;기능적 요구사항 : 시스템이 무엇을 하고 어떤 기능을 하는 가&lt;/li&gt;
&lt;li&gt;비기능적 요구사항 : 시스템이나 프로젝트 개발 과정 등에서 지켜야 할 제약 사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 인터페이스 요구사항 분석 절차&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;요구사항 선별 -* 요구사항 관련 자료 준비 -* 요구사항 분류 -* 요구사항 분석 및 명세서 구체화 -* 요구사항 명세서 공유&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;인터페이스-요구사항-검증&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EA%B2%80%EC%A6%9D&quot; aria-label=&quot;인터페이스 요구사항 검증 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 요구사항 검증&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;인터페이스의 설계 및 구현 전 사용자들의 요구사항이 요구사항 명세서에 정확하고 완전하게 기술되었는지 검토하고 개발 범위의 기준인 베이스라인을 설정하는 것&lt;/p&gt;
&lt;h4&gt;인터페이스 요구사항 검토 계획 수립&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/EYJ0E/btqDj2nplTb/0N1pp9Qj2Gj42Qqt9Pdu30/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;인터페이스 요구사항 검토 및 오류 수정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;체크리스트의 항목에 따라 인터페이스 요구사항 명세서 검토&lt;/li&gt;
&lt;li&gt;요구사항 검토 시 오류가 발견되면 이를 수정할 수 있도록 오류 목록과 시정 조치서 작성&lt;/li&gt;
&lt;li&gt;시정 조치서를 작성할 경우 조치가 완료되었는지를 확인하여 조치가 완료되면 인터페이스 요구사항 검토 작업을 완료&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 요구사항 베이스라인 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;검증된 인터페이스 요구사항은 주요 의사 결정자에게 공식적으로 승인을 받음&lt;/li&gt;
&lt;li&gt;소프트웨어 설계 및 구현을 위해 요구사항 명세서의 베이스라인 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;요구사항 검증 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요구사항 검토 : 요구사항 명세서의 결함 여부를 검토 담당자들이 수작업으로 분석하는 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동료검토 : 명세서 작성자가 직접 설명하는걸 동료들이 들으면서 결함을 발견하는 방법&lt;/li&gt;
&lt;li&gt;워크스루 : 검토 회의 전 미리 명세서를 배포하여 사전 검토 후 짧은 회의를 통해 결함을 발견하는 방법&lt;/li&gt;
&lt;li&gt;인스펙션 : 명세서 작성자를 제외한 다른 검토 전문가들이 명세서를 확인하면서 결함을 발견하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로토타이핑 : 요구사항을 파악하기 위해 실제 개발될 소프트웨어에 대한 견본품을 만들어서 최종 결과물을 예측&lt;/li&gt;
&lt;li&gt;테스트 설계 : 테스트 케이스를 생성하여 이후에 요구사항이 현실적으로 테스트 가능한지 검토&lt;/li&gt;
&lt;li&gt;CASE(Computer Aided Software Enginerring) 도구 활용 : 일관성 분석을 통해 요구사항 변경사항의 추적, 분석, 관리하고 표준 준수 여부를 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 요구사항 검증의 주요 항목&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;완전성 : 누락되지 않고 반영되었는가&lt;/li&gt;
&lt;li&gt;일관성 : 모순되거나 충돌되는 점 없이 일관성을 유지하는가&lt;/li&gt;
&lt;li&gt;명확성 : 모든 참여자가 명확하게 이해할 수 있는가&lt;/li&gt;
&lt;li&gt;기능성 : 어떻게보다 무엇을에 중점을 두고 있는가&lt;/li&gt;
&lt;li&gt;검증 가능성 : 사용자의 요구를 모두 만족하고 개발된 소프트웨어가 요구 내용과 일치하는지를 검증할 수 있는가&lt;/li&gt;
&lt;li&gt;추적 가능성 : 명세서와 설계서를 추적할 수 있는가&lt;/li&gt;
&lt;li&gt;변경 용이성 : 명세서의 변경이 쉽도록 작성되었는가&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;인터페이스-시스템-식별&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%8B%9D%EB%B3%84&quot; aria-label=&quot;인터페이스 시스템 식별 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 시스템 식별&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;개발 시스템 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 관련 자료들을 기반으로 개발하고자 하는 시스템의 상세 식별 정보를 정의하고 목록을 작성&lt;/li&gt;
&lt;li&gt;시스템 아키텍쳐 : 시스템 내부에서 하위 시스템이 어떻게 상호작용하는지 파악할 수 있도록 구성이나 동작원리를 나타냄&lt;/li&gt;
&lt;li&gt;유스케이스 : 사용자의 요구사항을 기능 단위로 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;내/외부 시스템 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 관련 자로들을 기반으로 개발할 시스템과 연계할 시스템들의 상세 식별 정보를 정의하고 목록을 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;내˙외부 시스템 환경 및 관리 주체 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;연계할 시스템 접속에 필요한 IP, URL, Port 정보 등 시스템의 실제 운용 환경 및 하드웨어를 실제적으로 관리하는 담당자를 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;내˙외부 시스템 네트워크 연결 정보 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;내˙외부 시스템을 연계하는데 필요한 네트워크 연결 정보 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 요구사항 명세서와 인터페이스 요구사항 목록을 기반으로 개발할 시스템과 연계할 시스템 사이의 인터페이스를 식별하고 목록을 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 시스템 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스별로 인터페이스에 참여하는 시스템들을 송신 시스템과 수신 시스템으로 구분하여 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;송수신-데이터-식별&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%A1%EC%88%98%EC%8B%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9D%EB%B3%84&quot; aria-label=&quot;송수신 데이터 식별 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;송수신 데이터 식별&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;식별 대상 데이터 : 송수신 사이에 교환되는 데이터. 규격화된 표준 형식에 따라 전송&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인터페이스 표준 항목 : 송수신 시스템을 연계하는데 표준적으로 필요한 데이터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템 공통부 : 시스템 연동 시 필요한 공통 정보&lt;/li&gt;
&lt;li&gt;거래 공통부 : 시스템이 연동된 후 송수신되는 데이터를 처리할 때 필요한 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;송수신 데이터 항목 : 송수신 시스템이 업무를 수행하는 데 사용하는 데이터&lt;/li&gt;
&lt;li&gt;공통 코드 : 시스템들에서 공통적으로 사용하는 코드&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;정보 흐름 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발할 시스템과 내외부 시스템 사이에서 전송되는 정보들의 방향성 식별&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;송수신 데이터 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발할 시스템과 연계할 시스템 사이의 정보 흐름과 데이터베이스 산출물을 기반으로 식별&lt;/li&gt;
&lt;li&gt;인터페이스 표준 항목과 송수신 데이터 항목 식별&lt;/li&gt;
&lt;li&gt;코드성 데이터 항목 식별&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;인터페이스-방법-명세화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B0%A9%EB%B2%95-%EB%AA%85%EC%84%B8%ED%99%94&quot; aria-label=&quot;인터페이스 방법 명세화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 방법 명세화&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;내외부 시스템이 연계하여 작동할 때 인터페이스별 송수신 방법, 손수신 데이터, 오류 식별 및 처리 방안에 대한 내용을 문서화한 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 연계 기술&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발할 시스템과 내외부 시스템을 연계될 때 사용하는 기술&lt;/li&gt;
&lt;li&gt;DB Link : DB에서 제공하는 DB Link 객체 이용&lt;/li&gt;
&lt;li&gt;API/Open API : 송신 시스템의 DB에서 데이터를 읽어 와 제공하는 Application Programming Interface 프로그램&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연계 솔루션 : EAI 서버와 송수신 시스템에 설치되는 클라이언트 이용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EAI : 송수신 데이터를 식별하기 위해 송수신 처리 및 진행 현황을 모니터링하고 통제하는 시스템&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Socket : 서버에서 소켓을 생성하여 클라이언트의 통신 요청 시 클라이언트와 연결하여 통신하는 네트워크 기술&lt;/li&gt;
&lt;li&gt;Web Service : 웹 서비스에서 WSDL, UDDI, SOAP 프로토콜을 이용하여 연계하는 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 통신 유형(단방향, 동기, 비동기)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 송수신 하는 형태&lt;/li&gt;
&lt;li&gt;단방향 : 시스템에서 거래 요청 후 응답 없음&lt;/li&gt;
&lt;li&gt;동기 : 시스템에서 거래 요청 후 응답이 올 때까지 대기&lt;/li&gt;
&lt;li&gt;비동기 : 시스템에서 거래를 요청 후 응답이 올때까지 다른 작업을 하면서 대기&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 처리 유형(실시간, 지연, 배치)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;송수신 데이터를 어떤 형태로 처리할 것인지에 대한 방식&lt;/li&gt;
&lt;li&gt;실시간 방식, 지연 처리 방식, 배치 방식(대량 데이터 처리)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인터페이스 발생 주기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;송수신 데이터가 전송되어 인터페이스가 사용되는 주기&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;송수신 방법 명세화(연계 방식, 통신 유형, 처리 유형, 발생 주기)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;연계 방식, 통신 유형, 처리 유형, 발생 주기&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;송수신 데이터 명세화&lt;/h4&gt;
&lt;h4&gt;오류 식별 및 처리 방안 명세화&lt;/h4&gt;
&lt;h2 id=&quot;시스템-인터페이스-설계서-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84%EC%84%9C-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;시스템 인터페이스 설계서 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 인터페이스 설계서 작성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;시스템의 인터페이스 현황을 확인하기 위해 시스템이 갖는 인터페이스 목록과 상세 데이터 명세를 정의한 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 인터페이스 목록 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;업무 시스템과 내외부 시스템 간 데이터를 주고받는 경우에 사용하는 인터페이스에 대해 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 인터페이스 정의서 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스별로 시스템 간의 연계를 위해 필요한 데이터 항목 및 구현 요건 등을 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;미들웨어-솔루션-명세&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%EC%86%94%EB%A3%A8%EC%85%98-%EB%AA%85%EC%84%B8&quot; aria-label=&quot;미들웨어 솔루션 명세 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;미들웨어 솔루션 명세&lt;/h2&gt;
&lt;h4&gt;미들웨어의 개념 및 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;운영체제와 응용 프로그램 사이에서 운영체제가 제공하는 서비스 이외에 추가적인 서비스를 제공하는 소프트웨어&lt;/li&gt;
&lt;li&gt;표준화된 인터페이스를 제공하여 시스템 간의 데이터 교환에 일관성을 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bhF6A6/btqDmV8nZwp/zJKXKavU81JXu9AlGVgXB0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;미들웨어 솔루션 식별&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발 및 운용 환경에 사용될 미들웨어 솔루션을 확인하고 목록을 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;미들웨어 솔루션 명세서 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;미들웨어 솔루션 목록의 미들웨어 솔루션별로 관련 정보들을 상세하게 기술&lt;/li&gt;
&lt;li&gt;제조사의 제품 소개서 검토&lt;/li&gt;
&lt;li&gt;제공 기능 및 특징 검토&lt;/li&gt;
&lt;li&gt;제약사항 검토&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(2)/</guid><pubDate>Mon, 02 Mar 2020 02:01:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;2-화면-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%99%94%EB%A9%B4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;2 화면 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 화면 설계&lt;/h1&gt;
&lt;h2 id=&quot;1사용자-인터페이스user-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4user-interface&quot; aria-label=&quot;1사용자 인터페이스user interface permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;(1)사용자 인터페이스(User Interface)&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 사용자 인터페이스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자와 시스템 간의 상호작용을 원활하게 도와주는 장치나 소프트웨어&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 인터페에스의 3가지 분야&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정보 제공과 전달을 위한 물리적 제어에 관한 분야&lt;/li&gt;
&lt;li&gt;콘텐츠의 상세적인 표현과 전체적인 구성에 관한 분야&lt;/li&gt;
&lt;li&gt;모든 사용자가 편리하고 간편하게 사용하도록 하는 기능에 관한 분야&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 사용자 인터페이스의 구분&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CLI(Command Line Interface) : 명령과 출력이 텍스트 형태로 이루어지는 인터페이스&lt;/li&gt;
&lt;li&gt;GUI(Graphic User Interface) : 아이콘이나 메뉴를 마우스로 선택하여 작업을 수행하는 인터페이스&lt;/li&gt;
&lt;li&gt;NUI(Natural User Interface) : 말이나 행동으로 조작하는 인터페이스&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 사용자 인터페이스의 기본 원칙&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;직관성&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;유효성&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;학습성&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;유연성&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 사용자 인터페이스의 설계 지침&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자 중심, 일관성, 단순성, 결과 예측 가능, 가시성, 표준화, 접근성, 명확성, 오류 발생 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-ui-표준-및-지침&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-ui-%ED%91%9C%EC%A4%80-%EB%B0%8F-%EC%A7%80%EC%B9%A8&quot; aria-label=&quot;2 ui 표준 및 지침 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) UI 표준 및 지침&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) UI 표준 및 지침의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;UI 표준과 지침을 토대로 기술의 중립성(표준), 보편적 표현 보장성(접근성), 기능의 호환성이 고려되었는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 한국형 웹 콘텐츠 접근성 지침(KWCAG)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;장애인과 비장애인이 동등하게 접근할 수 있는 웹 콘텐츠 제작의 방법 제시&lt;/li&gt;
&lt;li&gt;웹 콘텐츠 접근성 지침 준수를 위한 고려사항&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/Ajzuh/btqDcd3UaEH/skIew2tgTOmlZA7WveXdPK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;네비게이션 : 사용자가 사이트에서 원하는 정보를 빠르게 찾도록 도와주는 장치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 전자정보 웹 표준 준수 지침&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정부기관의 홈페이지 구축시 반영해야 할 최소한의 규약&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;전자정부 웹 표준 준수 지침 사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내용의 문법 준수&lt;/li&gt;
&lt;li&gt;내용과 표현의 분리&lt;/li&gt;
&lt;li&gt;동작의 기술 중립성 보장&lt;/li&gt;
&lt;li&gt;플러그인의 호환성&lt;/li&gt;
&lt;li&gt;콘텐츠의 보편적 표현&lt;/li&gt;
&lt;li&gt;운영체제에 독립적인 콘텐츠 제공&lt;/li&gt;
&lt;li&gt;부가 기능의 호환성 확보&lt;/li&gt;
&lt;li&gt;다양한 프로그램 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-ui-설계-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-ui-%EC%84%A4%EA%B3%84-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;3 ui 설계 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) UI 설계 도구&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 요구사항에 맞게 UI를 설계할 때 사용하는 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1) 와이어프레임&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기획 초기 단계에서 제작하는 것으로 페이지에 대한 대략적인 레이아웃이나 UI 요소 등에 대한 뼈대를 설계&lt;/li&gt;
&lt;li&gt;손그림, 파워포인트, 키노트, 스케치, 일러스트, 포토샵 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 목업&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;와이어프레임보다 좀 더 실제 화면과 유사하게 만드는 정적인 형태의 모형&lt;/li&gt;
&lt;li&gt;파워 목업, 발사믹 목업 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 스토리보드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;와이어프레임에 콘텐츠에 대한 설명이나 페이지 간 이동 흐름 등을 추가한 문서&lt;/li&gt;
&lt;li&gt;디자이너와 개발자가 최종적으로 참고하는 작업 지침서&lt;/li&gt;
&lt;li&gt;서비스 구축을 위한 모든 정보가 담겨 있어야 함&lt;/li&gt;
&lt;li&gt;파워포인트, 키노트, 스케치, Axure 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 프로토타입&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;와이어프레임이나 스토리보드 등에 인터랙션을 적용해 실제 구현된 것처럼 테스트가 가능한 동적인 형태의 모형&lt;/li&gt;
&lt;li&gt;작성 방법에 따라 페이퍼/디지털 프로토타입으로 나눔&lt;/li&gt;
&lt;li&gt;HTML/CSS, Axure, Flinto, 네이버 포로토나우, 카카오 오븐 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 유스케이스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자 측면에서의 요구사항으로 사용자가 원하는 목표를 달성하기 위해 수행할 내용 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-ui-요구사항-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-ui-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;4 ui 요구사항 확인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) UI 요구사항 확인&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;새로 개발할 시스템에 적용할 UI 관련 요구사항을 조사해서 작성하는 단계&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/smIWV/btqDdH4g19a/zwVgMeHRXSbuieHNCfEMV0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;1) 목표 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자들을 대상으로 인터뷰를 하고 사용자들의 의견이 수렴된 비즈니스 요구사항을 정의&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터뷰 진행 시 유의 사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사업적, 기술적 요구사항을 명확히 이해&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가능한 개별적인 진행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 시간을 넘기지 않는게 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용자 리서치 시작 전 해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) 활동 사항 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;조사한 요구사항을 토대로 앞으로 해야 할 활동 사항을 정의&lt;/li&gt;
&lt;li&gt;기술의 발전 가능성을 파악하고 UI 디자인의 방향 제시&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) UI 요구사항 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;여러 경로로 수집된 사용자의 요구사항을 검토하고 분석하여 UI 개발 목적에 맞게 작성해야 함&lt;/li&gt;
&lt;li&gt;실 사용자 중심, 여러 사람 인터뷰&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) 요구사항 요소 확인&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;파악된 요구사항 요소의 종류와 각각의 표현 방식 등을 검토&lt;/li&gt;
&lt;li&gt;데이터 요구, 기능 요구, 제품/서비스의 품질, 제약 사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) 정황 시나리오 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 요구사항을 도출하기 위해 작성&lt;/li&gt;
&lt;li&gt;사용자가 목표를 달성하기 위해 수행하는 방법을 순차적으로 묘사&lt;/li&gt;
&lt;li&gt;개발하는 서비스의 모습을 상상하는 첫번째 단계로 사용자 관점에서 시나리오를 작성해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;6) 요구사항 작성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정황 시나리오를 토대로 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-품질-요구사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%ED%92%88%EC%A7%88-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD&quot; aria-label=&quot;5 품질 요구사항 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5) 품질 요구사항&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) 품질 요구사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 기능, 성능, 만족도 등 소프트웨어에 대한 요구사항이 얼마나 충족하는 가를 나타내는 것&lt;/li&gt;
&lt;li&gt;ISO/IEC 9126 : 국제 표준으로 소프트웨어 품질 특성과 평가를 위한 표준 지침&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bmRTuN/btqDgy6ECmR/8y6v7rADx0uOekBtwkOw0K/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/czAkeI/btqDibQraBi/p0HhVCXpNbeNtRQfXrqlj0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h2 id=&quot;6-ui-프로토타입-제작-및-검토&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#6-ui-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%A0%9C%EC%9E%91-%EB%B0%8F-%EA%B2%80%ED%86%A0&quot; aria-label=&quot;6 ui 프로토타입 제작 및 검토 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6) UI 프로토타입 제작 및 검토&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;1) UI 프로토타입의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자 요구사항을 기반으로 실제 동작하는 것처럼 만든 동적인 형태의 모형&lt;/li&gt;
&lt;li&gt;테스트 가능, 최대한 간단하게 만들어야 함, 최종 제품의 작동 방식 반드시 포함, 실사용자 대상 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2) UI 프로토타입의 장단점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자를 설득, 이해시키기 쉬움&lt;/li&gt;
&lt;li&gt;요구사항을 점검하며 혼선은 예방하므로써 개발 시간을 줄일 수 있음&lt;/li&gt;
&lt;li&gt;사전 오류 검출 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로토타입 제작으로 인해 작업 시간을 증가시킬 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필요 이상의 자원 소모 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부분적으로 작업 시 중요한 작업이 생략될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;3) 프로토타이핑의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;페이퍼 프로토타입&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;아날로그 방법(스케치, 글, 그림) 등을 이용하여 직접 작성&lt;/li&gt;
&lt;li&gt;제작 기간이 짧고, 제작 비용이 적을 경우, 업무 회의가 빠를 경우, 급하게 만들어야 하는 경우 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;디지털 프로토타입&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 사용하여 작성&lt;/li&gt;
&lt;li&gt;재사용이 필요하거나, 완성 제품과 비슷하게 만들어야 하거나, 숙련된 전문가가 있을 때 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;4) UI 프로토타입 계획 및 작성 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;계획 시 고려사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일정은 아키텍처가 확정 ~ 프로젝트 실제 분석 작업 완료 사이에 진행해야 함&lt;/li&gt;
&lt;li&gt;프로토타입을 통해서 발생하는 이슈를 모두 취합하여 해결 방법을 제시&lt;/li&gt;
&lt;li&gt;진행하면서 가장 많은 시간이 소요된 구간을 찾아 그 원인을 분석하여 해결 방법을 제시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;작성 시 고려사항&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트의 상황을 감안해서 프로토타입의 범위를 정해야 함&lt;/li&gt;
&lt;li&gt;완성된 프로토타입이 실제 개발에 참조될 수 있는 지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;5) UI 프로토타입 제작 단계&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/vQawQ/btqDgyTbzHo/5Sd5UKCC0Ik8jiJE4yBHq1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;ui-설계서-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ui-%EC%84%A4%EA%B3%84%EC%84%9C-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;ui 설계서 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UI 설계서 작성&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;UI 설계서의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 요구사항을 바탕으로 UI 설계를 구체화하여 작성하는 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UI 설계서 작성 순서&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/4DZdd/btqDhv2G2Fz/frWBzMJ3BAABB3FX3VhiSK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;ui-상세-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ui-%EC%83%81%EC%84%B8-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;ui 상세 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UI 상세 설계&lt;/h3&gt;
&lt;hr&gt;
&lt;h4&gt;UI 시나리오 문서의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;UI 설계서를 바탕으로 실제 설계 및 구현을 위해 모든 화면에 대한 자세한 설계를 진행&lt;/li&gt;
&lt;li&gt;시나리오를 작성해야 함&lt;/li&gt;
&lt;li&gt;사용자 인터페이스의 기능 구조, 대표 화면, 화면 간 상호작용의 흐름, 다양한 상황에서의 예외 처리 등을 문서로 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UI 시나리오 문서 작성 원칙&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발자가 전체 UI 기능과 작동 방식을 이해할 수 있도록 구체적으로 작성&lt;/li&gt;
&lt;li&gt;UI 요소와 인터랙션을 일반 규칙으로 정의&lt;/li&gt;
&lt;li&gt;인터랙션의 흐름을 정의하고 인터랙션의 순서, 분기, 조건, 반복 등을 명시&lt;/li&gt;
&lt;li&gt;예외 상황에 대비한 다양한 케이스를 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UI 시나리오 문서 작성을 위한 일반 규칙&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주요 키의 위치와 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 화면에 공통적으로 배치되는 주요 키의 위치와 기능을 설명&lt;/li&gt;
&lt;li&gt;여러 화면 간 일관성 보장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;공통 UI 요소&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI 요소를 언제 어떤 형태로 사용할 지 정의&lt;/li&gt;
&lt;li&gt;사용자의 조작에 대한 반응하는지에 대한 흐름을 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기본 스크린 레이아웃&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 화면에 공통적으로 나타나는 요소들에 대한 위치와 속성을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기본 인터랙션 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;터치 제스처 등에 공통적으로 사용되는 조작 방법과 화면 전환 효과 등을 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;공통 단위 태스크 흐름&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;많은 기능들에 공통적으로 사용되는 삭제, 검색, 매너 모드 상태 등에 대한 인터랙션 흐름 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;케이스 문서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다양한 상황에서 공통적으로 적용되는 시스템의 동작을 정의한 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UI 시나리오 문서의 요건&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;완전성&lt;/code&gt; : 누락되지 않도록 상세히 기술&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;일관성&lt;/code&gt; : 서비스의 목표, 요구사항, UI 스타일이 모두 일관성을 유지해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;이해성&lt;/code&gt; : 누구나 쉽게 이해할 수 있도록 설명&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;가독성&lt;/code&gt; : 표준화된 템플릿을 활용하여 읽기 쉽도록 해야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;수정 용이성&lt;/code&gt; : 시나리오의 수정, 개선이 쉬워야 함&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;추적 용이성&lt;/code&gt; : 변경 사항이 언제 어떻게 왜 발생했는지 쉽게 추적할 수 있어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hci--ux--감성공학&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#hci--ux--%EA%B0%90%EC%84%B1%EA%B3%B5%ED%95%99&quot; aria-label=&quot;hci  ux  감성공학 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HCI / UX / 감성공학&lt;/h3&gt;
&lt;h4&gt;HCI(Human Computer Interaction or Interface)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사람이 시스템을 보다 편리하고 안전하게 사용할 수 있도록 개발, 연구하는 학문&lt;/li&gt;
&lt;li&gt;최종 목표는 시스템을 사용하는데 있어 최적의 사용자 경험을 만드는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UX(User Experience)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 시스템이나 서비스를 이용하면서 느끼고 생각하게 되는 총제적인 경험&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;감성 공학&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;제품이나 작업환경을 사용자의 감성에 맞도록 설계 제작하는 기술&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(3)-소프트웨어 설계(1)/</guid><pubDate>Sun, 01 Mar 2020 02:01:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-요구사항-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;1 요구사항 확인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 요구사항 확인&lt;/h1&gt;
&lt;h2 id=&quot;소프트웨어-생명-주기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0&quot; aria-label=&quot;소프트웨어 생명 주기 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 생명 주기&lt;/h2&gt;
&lt;h4&gt;소프트웨어 생명 주기(Life Cycle)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개발 방법론의 바탕이 되어 소프트웨어를 개발하기 위해 정의하고 운용 유지보수 등의 과정을 각 단계별로 나눈 것&lt;/li&gt;
&lt;li&gt;스프트웨어 개발 단계와 각 단계별 주요 활동 및 활동의 결과를 산출물로 표현&lt;/li&gt;
&lt;li&gt;표현 형태 : 소프트웨어 생명 주기 모형, 소프트웨어 프로세스 모형, 소프트웨어 공학 패러다임&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;폭포수 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;폭포수가 거슬러 올라갈 수 없듯이 이전 단계를 확실히 마무리하고 다음 단계로 진행하는 개발 방법론&lt;/li&gt;
&lt;li&gt;소프트웨어 공학에서 가장 오래되고 폭넓게 사용된 생명 주기 모형&lt;/li&gt;
&lt;li&gt;한 단계가 끝나고 결과물이 명확히 나와야 다음 단계로 넘어갈 수 있는 선형 순차적 모형&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cYHa5g/btqC9xAlfqH/mR6ekiDjKPhOBIBtLpszM1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;프로토타입 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어에 대한 시제품을 만들어 최종 결과물을 예측하는 모형&lt;/li&gt;
&lt;li&gt;폭포수 모델의 단점을 보완하기 위해 만들어진 모형&lt;/li&gt;
&lt;li&gt;사용자와 시스템 사이 인터페이스에 중점을 두어 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/G1Sfm/btqDbEEZ4mj/uaV6nSTJNqeIh1lSZfNHw0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;나선형 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;폭포수 모형과 프로토타입 모형의 장점에 위험 분석 기능을 추가한 모형&lt;/li&gt;
&lt;li&gt;나선을 따라 돌듯이 여러 번의 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발&lt;/li&gt;
&lt;li&gt;누락되거나 추가된 요구사항을 첨가할 수 있음&lt;/li&gt;
&lt;li&gt;정밀하고 유지보수 과정이 필요 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cUyBOy/btqC85jIP9p/UJ35RTZZP4Le0dzAWBQ0n1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;애자일 모형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 진행하는 모형&lt;/li&gt;
&lt;li&gt;고객과의 소통에 초점을 맞춘 모든 방법론을 통칭&lt;/li&gt;
&lt;li&gt;스프린트 또는 이터레이션이라고 불리는 짧은 개발 주기를 반복&lt;/li&gt;
&lt;li&gt;반복되는 주기마다 결과물에 해단 평가와 요구 수용&lt;/li&gt;
&lt;li&gt;요구사항에 우선순위를 부여하여 개발 진행&lt;/li&gt;
&lt;li&gt;스크럼, XP, 칸반, Lean, 크리스탈, ASD, FDD, DSDM&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;스크럼-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%81%AC%EB%9F%BC-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;스크럼 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스크럼 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;스크럼의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;팀이 중심이 되어 개발의 효율성을 높임&lt;/li&gt;
&lt;li&gt;팀원 스스로가 팀을 구성하고 개발 작업에 대한 모든 것을 스스로 해결할 수 있어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;스크럼의 구성 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;제품 책임자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발될 제품에 대한 이해도가 높고 요구사항을 책임지고 의사 결정할 사람&lt;/li&gt;
&lt;li&gt;개발 의뢰자나 사용자가 담당&lt;/li&gt;
&lt;li&gt;제품에 대한 요구사항, 백로그를 작성, 우선순위를 지정, 우선순위 갱신&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스크럼 마스터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;팀이 잘 수행할 수 있도록 객관적인 시각에서 조언을 해주는 가이드 역할&lt;/li&gt;
&lt;li&gt;일일 스크럼 회의를 주관하여 진행 사항을 점검하고 개발과정에서 발생된 장애 요소를 공론화하여 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발팀&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자 외에도 디자이너, 테스터 등 제품 개발을 위해 참여하는 모든 사람&lt;/li&gt;
&lt;li&gt;최대 인원은 7~8명&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;스크럼 개발 프로세스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;제품 백로그(Product Backlog)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발에 필요한 요구사항을 우선순위에 따라 나열한 목록&lt;/li&gt;
&lt;li&gt;새롭게 도출되는 요구사항으로 인해 지속적 업데이트&lt;/li&gt;
&lt;li&gt;작성된 사용자 스토리를 기반으로 릴리즈 계획을 수립&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프린트 계획 회의(Sprint Planning Meeting)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이번 스프린트에서 수행할 작업을 대상으로 단기 일정 수립&lt;/li&gt;
&lt;li&gt;처리할 요구사항을 개발자들이 나눠서 작업할 수 있도록 태스크라는 작업 단위로 나눠 개발자 별로 수행할 작업 목록인 스프린트 백로그(Sprint Backlog) 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프린트(Sprint)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제 개발 작업을 진행하는 과정&lt;/li&gt;
&lt;li&gt;스프린트 백로그에 작성된 태스크를 대상으로 작업 시간이나 양을 추정한 후 개발 담당자에게 할당&lt;/li&gt;
&lt;li&gt;태스크를 할당할 때는 개발자가 원하는 태스트를 직접 선별하여 담당할 수 있도록 하는 것이 좋음&lt;/li&gt;
&lt;li&gt;할당된 태스크는 할 일, 진행 중, 완료의 상태를 가짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일일 스크럼 회의(Daliy Scrum Meeting)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 팀원이 매일 약속된 시간에 짧은 시간동안 진행 상황을 점검&lt;/li&gt;
&lt;li&gt;스크럼 마스터는 발견된 장애 요소를 해결할 수 있도록 도와줌&lt;/li&gt;
&lt;li&gt;남은 작업 시간은 소멸 차트에 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프린트 검토 회의(Spring Review)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부분 또는 완성 제품이 요구사항에 잘 부합되는지 사용자가 포함된 참석자 앞에서 테스트 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스프린트 회고(Sprint Retrospective)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스프린트가 끝나고 정해놓은 규칙을 잘 준수했는지, 개선할 점은 없는지 등을 점검하고 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;xpextreme-programming-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#xpextreme-programming-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;xpextreme programming 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;XP(eXtreme Programming) 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;XP의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 기법&lt;/li&gt;
&lt;li&gt;짧고 반복적인 개발주기, 단순한 설계, 고객의 적극적인 참여를 통해 빠르게 개발하는 것이 목적&lt;/li&gt;
&lt;li&gt;릴리즈의 기간을 짧게 반복하면서 요구사항 반영에 대한 가시성을 높임&lt;/li&gt;
&lt;li&gt;XP의 5가지 핵심 가치 : &lt;code class=&quot;language-text&quot;&gt;의사소통, 단순성, 용기, 존중, 피드백&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;XP 개발 프로세스&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cZ6Bay/btqC9y0kVk8/KdieXqH2clhuToBHmIGWX1/img.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;사용자 스토리&lt;/p&gt;
&lt;p&gt;고객의 요구사항을 간단한 시나리오로 표현&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;릴리즈 계획 수립&lt;/p&gt;
&lt;p&gt;몇 개의 스토리가 적용되어 부분적으로 기능이 완료된 제품을 제공하는 것에 대한 계획 수립&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스파이크&lt;/p&gt;
&lt;p&gt;요구사항의 신뢰성을 높이고 기술 문제에 대한 위험을 감소시키기 위해 별도로 만드는 프로그램&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주기(이터레이션)&lt;/p&gt;
&lt;p&gt;하나의 릴리즈를 더 세분화하여 한 단위&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;승인 검사&lt;/p&gt;
&lt;p&gt;하나의 이터레이션 안에서 계획된 릴리즈 단위의 부분 완료 제품이 구현되면 수행하는 테스트&lt;/p&gt;
&lt;p&gt;사용자 스토리 작성 시 함께 기재한 테스트 사항에 대해 고객이 직접 수행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소규모 릴리즈&lt;/p&gt;
&lt;p&gt;고객의 반응을 기능별로 확인하고 고객의 요구사항에 유연하게 대응&lt;/p&gt;
&lt;p&gt;진행된 이터레이션이 모두 완료되면 고객에 의한 최종 테스트 수행 후 최종 결과물을 고객에게 전달&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;XP의 주요 실천 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Pair Programming : 다른 사람과 함께 프로그래밍 수행&lt;/li&gt;
&lt;li&gt;Test-Driven Development : 실제 코드 작성 전 테스트 케이스를 먼저 작성하여 무엇을 해야할지 파악&lt;/li&gt;
&lt;li&gt;Whole Team : 개발에 참여하는 모든 구성원은 각기 역할이 있어 책임을 다해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;개발-기술-환경-파악&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%88%A0-%ED%99%98%EA%B2%BD-%ED%8C%8C%EC%95%85&quot; aria-label=&quot;개발 기술 환경 파악 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발 기술 환경 파악&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;개발 기술 환경의 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발하고자 하는 소프트웨어와 관련된 O/S, DBMS, Middle Ware 등을 선정할 때 고려해야 할 사항을 기술하고 오픈 소스 사용 시 주의해야 할 내용을 제시&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;운영체제(Operating System)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 시스템 자원을 효율적으로 관리하여 사용자가 컴퓨터를 편리하고 사용할 수 있도록 환경을 제공하는 소프트웨어&lt;/li&gt;
&lt;li&gt;요구사항 식별 시 고려사항 : 가용성, 성능, 기술 지원, 주변 기기, 구축 비용&lt;/li&gt;
&lt;li&gt;사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고 관리해주는 소프트웨어&lt;/li&gt;
&lt;li&gt;요구사항 식별 시 고려사항 : 가용성, 성능, 기술 지원, 상호 호환성, 구축 비용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;웹 애플리케이션 서버(WAS)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 요구에 따라 변하는 동적인 컨텐츠를 처리하기 위해 사용되는 미들웨어&lt;/li&gt;
&lt;li&gt;요구사항 식별 시 고려사항 : 가용성, 성능, 기술 지원, 구축 비용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;오픈 소스(Open Source)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;누구나 제한없이 사용할 수 없도록 소스 코드를 공개한 것&lt;/li&gt;
&lt;li&gt;라이선스를 만족하는 소프트웨어&lt;/li&gt;
&lt;li&gt;요구사항 식별 시 고려사항 : 라이선스의 종류, 사용자의 수, 기술의 지속 가능성&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;요구사항-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;요구사항 정의 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요구사항 정의&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;요구사항의 개념과 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어가 어떤 문제를 해결하기 위해 제공하는 서비스에 대한 설명과 정상적으로 운영되는데 필요한 제약조건 등&lt;/li&gt;
&lt;li&gt;요구사항이 제대로 정의되어야 이를 토대로 이후 과정의 목표와 계획의 수립이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;요구사항의 유형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기술하는 내용에 따른 분류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기능 요구사항 : 시스템이 무엇을 하고 어떤 기능을 하는지에 대한 사항&lt;/li&gt;
&lt;li&gt;비기능 요구사항 : 품질이나 제약사항에 대한 사항&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기술 관점과 대상의 범위에 따른 분류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 요구사항 : 사용자의 관점에서 본 시스템이 제공해야 할 사항&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시스템 요구사항 : 개발자의 관점에서 본 시스템 전체가 사용자와 다른 시스템에 제공해야 할 사항&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;요구사항 개발 프로세스&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/wknni/btqDaVOy0ON/A8Gdqxrb45XjHdfOY4nKck/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요구사항 도출&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요구사항이 어디에 있고 어떻게 수집할지 식별하고 이해하는 과정&lt;/li&gt;
&lt;li&gt;인터뷰, 설문, 브레인스토밍, 워크샵, 프로토타이핑, 유스 케이스 등&lt;/li&gt;
&lt;li&gt;브레인스토밍 : 3인 이상이 자유롭게 아이디어를 산출해 내는 방법&lt;/li&gt;
&lt;li&gt;유스케이스 : 사용자의 요구사항을 기능 단위로 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;요구사항 분석&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 대상에 대한 사용자의 요구사항 중 명확하지 않거나 모호하여 이해되지 않는 부분을 발견하고 걸러내는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;요구사항 명세&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요구사항을 분석한 후 승인될 수 있도록 문서화하는 과정&lt;/li&gt;
&lt;li&gt;소프트웨어 요구사항 명세서 : 소프트웨어가 반드시 제공해야 하는 기능, 특징, 제약조건을 명시&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;요구사항 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 자원을 요구사항에 할당하기 전에 요구사항 명세서가 정확하게 작성되었는지 검토하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;요구사항-분석-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EB%B6%84%EC%84%9D-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;요구사항 분석 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요구사항 분석 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;요구사항 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;요구사항을 명확히 확인할 수 있도록 정해진 기준으로 분류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기능/비기능 요구사항 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제품/과정으로 분류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선순위로 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;개념 모델링&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구사항의 현실 세계의 상황을 단순화하여 개념적으로 표현하는 과정&lt;/li&gt;
&lt;li&gt;실세계 문제에 대한 모델링은 요구사항 분석의 핵심&lt;/li&gt;
&lt;li&gt;개체와 개체 간의 관계 및 종속성을 반영&lt;/li&gt;
&lt;li&gt;개념 모델은 다양하게 표현&lt;/li&gt;
&lt;li&gt;주로 UML을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;요구사항 할당&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구사항을 만족시키기 위한 구성 요소를 식별&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;요구사항 협상&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구사항이 서로 충돌될 경우 해결하는 과정&lt;/li&gt;
&lt;li&gt;적절한 기준점을 찾아 합의하는게 좋음&lt;/li&gt;
&lt;li&gt;서로 충돌하는 경우 우선순위를 부여하면 해결에 도움이 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;정형 분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;구문과 의미를 같은 정형화된 언어를 이용해 요구사항을 수학적 기호로 표현하고 분석하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;요구사항-확인-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%ED%99%95%EC%9D%B8-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;요구사항 확인 기법 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요구사항 확인 기법&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;요구사항 검토&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;문서화된 요구사항을 훑어보면서 확인하는 과정&lt;/li&gt;
&lt;li&gt;시스템 정의서, 시스템 사양서, 소프트웨어 요구사항 명세서 등을 완성한 시점에 이루어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;프로토타이핑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;초기 도출된 요구사항을 토대로 프로토타입을 만든 후 개발이 진행되는 동안 도출되는 요구사항을 반영하면서 지속적으로 프로토타입을 재작성하는 과정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빠르고 반복되는 제작을 할 수 있어 발전된 결과물을 얻을 수 있음&lt;/li&gt;
&lt;li&gt;최종 시스템을 완성하기 전에 추가 또는 변경된 요구사항에 대한 피드백 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 관심이 핵심에서 벗어나 프로토타입 제작에만 집중될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;지속적이고 반복적인 개선에 대한 비용이 부담될 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;모델 검증&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구사항 분석 단계에서 개발된 모델이 요구사항을 충족하는지 검증하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인수 테스트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 실제로 사용될 환경에서 요구사항이 모두 충족되는지 사용자 입장에서 확인하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;umlunified-modeling-language&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#umlunified-modeling-language&quot; aria-label=&quot;umlunified modeling language permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UML(Unified Modeling Language)&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;UML의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템 개발 과정에서 시스템 개발자와 고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 객체지향 모델링 언어&lt;/li&gt;
&lt;li&gt;객체지향 방법론의 장점을 통합하였으며 OMG(Object Management Group)에서 표준으로 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;사물&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;모델을 구성하는 가장 중요한 기본 요소&lt;/li&gt;
&lt;li&gt;다이어그램 안에서 관계가 형성될 수 있는 대상&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구조 사물&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템의 개념적, 물리적 요소 표현&lt;/li&gt;
&lt;li&gt;클래스, 유스케이스, 컴포넌트, 노드 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;행동 사물&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간과 공간에 따른 요소들의 행위 표현&lt;/li&gt;
&lt;li&gt;상호작용, 상태 머신 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그룹 사물&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소들의 그룹으로 묶어서 표현&lt;/li&gt;
&lt;li&gt;패키지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주해 사물&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부가적인 설명이나 제약조건 등 표현&lt;/li&gt;
&lt;li&gt;노트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;관계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사물과 사물 사이의 연관성 표현&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연관 관계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2개 이상의 사물이 서로 관련되어 있음을 표현&lt;/li&gt;
&lt;li&gt;실선과 화살표로 연결하여 표현하지만 양방향 관계의 경우 화살표 없이 실선으로 연결하여 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/biIcB9/btqDeUu0YpT/sv8YSAlu0rNOXS6mBlU1Yk/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dGoy1e/btqDc5xAcIo/RQEcBDk6Ntwop2yhQK88mK/img.png&quot; alt=&quot;img&quot;&gt;사람과 집이 1:1 관계&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bmLrp8/btqDgxTq9BK/vjKDLDhb6aTOViKqNCfYE0/img.png&quot; alt=&quot;img&quot;&gt;교수는 1명 이상의 학생을 가르치고 학생은 1명 이상의 교수에게 가르침을 받음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;집합 관계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 사물이 다른 사물에 포함되어 있는 관계&lt;/li&gt;
&lt;li&gt;부분(포함되는 쪽)에서 전체(포함하는 쪽)로 속이 빈 마름모를 연결하여 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/LI7uG/btqDceBDPI8/HEdI36pkHNjcTRd3czc1t0/img.png&quot; alt=&quot;img&quot;&gt;프린터는 컴퓨터에 연결해서 사용할 수 있음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포함 관계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;집합 관계의 특수한 형태로 포함하는 사물의 변화가 포함되는 사물에게 영향을 미치는 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;부분(포함되는 쪽)에서 전체(포함하는 쪽)로 속이 채워진 마름모를 연결하여 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dV4kN3/btqDeJHjVQV/uxwfl6lwev7MDkoImHACPk/img.png&quot; alt=&quot;img&quot;&gt;문을 열 수 있는 키는 하나이고 해당 키로 다른 문은 열 수 없음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;의존 관계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사물 사이에 연관은 있으나 필요에 의해서 서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계&lt;/li&gt;
&lt;li&gt;영향을 주는 사물이 영향을 받는 사물 쪽으로 점선 화살표 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/VV7Xa/btqDfAJSBEk/WydHkqKsqiBgc7MiuKW15K/img.png&quot; alt=&quot;img&quot;&gt;출석률은 학점을 낼 때 영향을 미침&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;일반화 관계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 사물이 다른 사물에 비해 일반적인지 구체적인지 표현&lt;/li&gt;
&lt;li&gt;구체적인 사물에서 일반적인 사물 쪽으로 속이 빈 화살표를 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/biu12l/btqDce9vJxh/iP25uipIfZKPb9QRgtalQK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;실체화 관계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사물이 할 수 있거나 해야 하는 기능으로 서로를 그룹화할 수 있는 관계&lt;/li&gt;
&lt;li&gt;사물에서 기능 쪽으로 속이 빈 점선 화살표 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/R2DJq/btqDeKe5qYk/h2vad3s4AKVjowt2Vu7Zl0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;다이어그램&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사물과 관계를 도형으로 표현&lt;/li&gt;
&lt;li&gt;정적 모델링에서는 주로 구조적 다이어그램을 사용하고 동적 모델링에서는 주로 행위 다이어그램 사용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구조적 다이어그램&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클래스 다이어그램 : 클래스, 클래스가 가지는 속성, 클래스 사이 관계 표현&lt;/li&gt;
&lt;li&gt;객체 다이어그램 : 인스턴스를 특정 시점의 객체와 객체 사이의 관계로 표현&lt;/li&gt;
&lt;li&gt;컴포넌트 다이어그램 : 구현 단계에서 사용되며 컴포넌트 간의 관계나 인터페이스를 표현&lt;/li&gt;
&lt;li&gt;패치 다이어그램 : 구현단계에서 사용되며 결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치 표현&lt;/li&gt;
&lt;li&gt;복합체 구조 다이어그램 : 복잡한 구조를 가지는 클래스 혹은 컴포넌트의 내부 구조 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;행위 다이어그램&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;유스케이스 다이어그램&lt;/code&gt;: 사용자의 요구를 분석하여 기능 모델링 작업에 사용됨&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;시퀀스 다이어그램&lt;/code&gt;: 상호 작용하는 시스템이나 객체들이 주고받는 메시지 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;커뮤니케이션 다이어그램&lt;/code&gt; : 객체들이 주고받는 메시지를 표현할 뿐 아니라 객체들 간의 연관까지 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;상태 다이어그램&lt;/code&gt;: 하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 어떻게 변화하는지 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;활동 다이어그램&lt;/code&gt;: 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;상호작용 개요 다이어그램&lt;/code&gt; : 상호작용 다이어그램 간의 제어 흐름 표현&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;타이밍 다이어그램&lt;/code&gt; : 객체 상태 변화와 시간 제약을 명시적으로 표현&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;패키지 다이어그램 : 유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계 표현&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(3)/</guid><pubDate>Mon, 03 Feb 2020 05:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-애플리케이션-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;3 애플리케이션 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 애플리케이션 테스트&lt;/h1&gt;
&lt;h5&gt;애플리케이션 테스트의 개념&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션에 잠재된 결함을 찾아내는 과정&lt;/li&gt;
&lt;li&gt;확인(Validation) : 개발된 소프트웨어가 요구사항을 만족시키는지 사용자의 입장에서 확인&lt;/li&gt;
&lt;li&gt;검증(Verification) : 기능을 제대로 수행하고 명세서에 맞게 만들었는지 개발자의 입장에서 점검&lt;/li&gt;
&lt;li&gt;테스트 전 개발한 소프트웨어의 유형을 분류하고 특성을 정리해서 중점적으로 테스트할 사항을 정리&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;애플리케이션 테스트의 필요성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;미리 오류를 발견하고 새로운 오류의 유입 예방&lt;/li&gt;
&lt;li&gt;사용자의 요구사항에 만족하는지 테스트해 제품의 신뢰도 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;애플리케이션 테스트의 기본 원리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;잠재적인 결함을 줄일 수 있지만 소프트웨어 자체 결함이 없다곤 할 수 없음&lt;/li&gt;
&lt;li&gt;결함은 특정 모듈에 집중되어 있어 애플리케이션의 20%에 해당하는 코드에서 80%의 결함이 발견된다고 하여 파레토 법칙을 적용하기도 함&lt;/li&gt;
&lt;li&gt;살충제 패러독스 현상을 방지하기 위해 테스트 케이스를 지속적으로 보완 및 개선&lt;/li&gt;
&lt;li&gt;테스트를 정황에 따라 다르게 진행&lt;/li&gt;
&lt;li&gt;결함을 모두 제거해도 사용자의 요구사항을 만족할 수 없으면 안 됨&lt;/li&gt;
&lt;li&gt;작은 부분에서 시작해서 점점 확대하며 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;애플리케이션-테스트의-분류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%B6%84%EB%A5%98&quot; aria-label=&quot;애플리케이션 테스트의 분류 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;애플리케이션 테스트의 분류&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;프로그램 실행 여부&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정적 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 실행하지 않고 소스코드나 명세서를 분석하여 테스트&lt;/li&gt;
&lt;li&gt;개발 초기에 결함을 발견할 수 있어 비용이 절감&lt;/li&gt;
&lt;li&gt;워크 스루, 인스펙션, 코드 검사 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동적 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 실행하여 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개발의 모든 단계에서 진행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블랙박스 테스트, 화이트 박스 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 기반&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;명세 기반 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 요구사항을 테스트 케이스로 만들어 구현하고 있는지 확인하여 테스트&lt;/li&gt;
&lt;li&gt;동등 분할, 경계 값 분석&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구조 기반 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 내부 논리 흐름에 따라 테스트 케이스를 만들어 테스트&lt;/li&gt;
&lt;li&gt;구문 기반, 결정 기반, 조건 기반, 결정 기반 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;경험 기반 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스터의 경험을 기반으로 테스트&lt;/li&gt;
&lt;li&gt;요구사항에 대한 명세가 부족하거나 시간의 제약이 있는 경우&lt;/li&gt;
&lt;li&gt;에러 추정, 체크 리스트, 탐색적 테스팅&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;시각&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;확인 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 시각에서 결과를 테스트&lt;/li&gt;
&lt;li&gt;요구사항을 만족하면서 정상적으로 동작이 되는지 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;검증 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자의 시각에서 과정을 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명세서에 맞게 완성되었는지 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;목적에 따른 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;회복 테스트 : 결함을 주고 잘 복구되는지 테스트&lt;/li&gt;
&lt;li&gt;안전 테스트 : 시스템 보호 도구가 볼법적인 침입으로부터 보호할 수 있는지 테스트&lt;/li&gt;
&lt;li&gt;강도 테스트 : 과부하 시 정상적으로 실행되는지 테스트&lt;/li&gt;
&lt;li&gt;성능 테스트 : 응답 시간, 처리량 등을 테스트&lt;/li&gt;
&lt;li&gt;구조 테스트 : 내부의 논리적인 경로, 소스 코드 복잡도 등을 평가&lt;/li&gt;
&lt;li&gt;회귀 테스트 : 변경 혹은 수정에 따른 새로운 결함이 없는지를 테스트&lt;/li&gt;
&lt;li&gt;병행 테스트 : 기존의 소프트웨어와 변경된 소프트웨어에 동일한 데이터를 입력하여 결과를 비교하는 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;동적-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EC%A0%81-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;동적 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동적 테스트&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;화이트박스 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모듈의 원시 코드를 오픈하여 논리적인 모든 경로를 한번 이상 실행하면서 테스트하여 테스트 케이스를 설계&lt;/li&gt;
&lt;li&gt;테스트 과정의 초기에 진행&lt;/li&gt;
&lt;li&gt;설계된 절차에 초점을 둔 구조적 테스트&lt;/li&gt;
&lt;li&gt;모듈 안의 동작을 직접 관찰&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;화이트박스 테스트의 종류&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기초 경로 검사&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트 케이스 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주는 테스트 기법&lt;/li&gt;
&lt;li&gt;테스트 측정 결과를 통해 실행 경로의 기초를 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어 구조 검사&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건 검사 : 프로그램 내의 논리적 조건을 테스트&lt;/li&gt;
&lt;li&gt;루프 검사 : 프로그램 내의 반복 구조에 초점을 맞춰 테스트&lt;/li&gt;
&lt;li&gt;데이터 흐름 검사 : 프로그램 내의 변수의 정의와 사용의 위치에 초점을 맞춰 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;화이트박스 테스트 검증 기준&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;문장 검증 기준 : 모든 구문이 한 번 이상 수행되도록 설계&lt;/li&gt;
&lt;li&gt;분기 검증 기준 : 모든 조건문이 한 번 이상 수행되도록 설계&lt;/li&gt;
&lt;li&gt;조건 검증 기준 : 모든 조건문에 대해 참/거짓인 경우가 한번 이상 수행되도록 설계&lt;/li&gt;
&lt;li&gt;분기/조건 기준 : 모든 조건문과 조건문에 포함된 개별 조건식의 결과가 참/거짓인 경우가 한번 이상 수행되도록 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;블랙박스 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어가 수행할 특정 기능을 알기 위해 기능이 완전히 작동되는 것을 입증하는 기능 테스트&lt;/li&gt;
&lt;li&gt;테스트 과정의 후반부에 진행&lt;/li&gt;
&lt;li&gt;사용자의 요구사항 명세를 보면서 구현된 기능을 테스트&lt;/li&gt;
&lt;li&gt;소프트웨어 인터페이스에서 실시&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;블랙박스 테스트의 종류&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;동치(동등) 분할 검사 : 입력 자료에 초점을 맞춰 테스트 케이스를 만들고 검사&lt;/li&gt;
&lt;li&gt;경계값 분석 : 입력 조건의 경계값을 테스트 케이스로 선정하여 검사&lt;/li&gt;
&lt;li&gt;원인-효과 그래프 검사 : 입력 데이터 간의 관계과 출력의 영향을 미치는 상황을 분석 후 효용성이 높은 테스트 케이스를 선정하여 검사&lt;/li&gt;
&lt;li&gt;오류 예측 검사 : 과거 경험이나 확인자의 감각으로 테스트&lt;/li&gt;
&lt;li&gt;비교 검사 : 여러 프로그램에 동일한 테스트 자료를 제공하여 동일한 출력이 나오는지 확인하는 검사&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;개발-단계에-따른-애플리케이션-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C-%EB%8B%A8%EA%B3%84%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;개발 단계에 따른 애플리케이션 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발 단계에 따른 애플리케이션 테스트&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;단위 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;코딩 직후 모듈이나 컴포넌트에 초점을 맞춰 테스트&lt;/li&gt;
&lt;li&gt;인터페이스, 외부적 I/O, 자료 구조 등을 검사&lt;/li&gt;
&lt;li&gt;사용자의 요구사항을 기반으로 한 기능성 테스트를 최우선으로 수행&lt;/li&gt;
&lt;li&gt;구조 기반 테스트 : 화이트 박스 테스트를 시행하여 제어 흐름이나 조건 결정을 목적으로 함&lt;/li&gt;
&lt;li&gt;명세 기반 테스트 : 블랙 박스 테스트를 시행하여 동등 분할이나 경계값 분석을 목적으로 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;통합 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성하는 과정에서 테스트&lt;/li&gt;
&lt;li&gt;모듈 간 또는 통합된 컴포넌트 간 상호 작용 오류 검사&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비점진적 통합 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 모듈이 미리 결합되어 있는 프로그램 전체를 테스트&lt;/li&gt;
&lt;li&gt;빅뱅 통합 테스트 방식&lt;/li&gt;
&lt;li&gt;오류 발견 및 장애 위치 파악이 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;점진적 통합 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모듈 단위로 단계적으로 통합하면서 테스트&lt;/li&gt;
&lt;li&gt;하향식 / 상향식 / 혼합식 테스트 방식&lt;/li&gt;
&lt;li&gt;오류 수정이 용이하고 인터페이스 관련 오류를 완전히 테스트할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하향식 통합 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트&lt;/li&gt;
&lt;li&gt;깊이 우선 통합법이나 넓이 우선 통합법 사용&lt;/li&gt;
&lt;li&gt;상위 모듈에선 테스트 케이스 사용이 어려움&lt;/li&gt;
&lt;li&gt;스텁 : 상위 모듈은 있지만 하위 모듈이 없는 경우 하위 모듈 대체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bvCxCa/btqDrj9LpfE/2OQ3xmF7bm2KKIvUChXvKk/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;상향식 통합 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트&lt;/li&gt;
&lt;li&gt;하나의 주요 제어 모듈과 종속 모듈의 그룹인 클러스터가 필요&lt;/li&gt;
&lt;li&gt;드라이버 : 상위 모듈 없이 하위 모듈이 있는 경우 하위 모듈 구동&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/Mkyo6/btqDqiDcMXK/vQO606vD8agz1TObsBQQa0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;혼합식 통합 테스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하위 수준에서는 상향식 통합 상위 수준에서는 하향식 통합을 사용하여 최적의 테스트를 지원&lt;/li&gt;
&lt;li&gt;샌드위치 통합 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;회귀 테스팅&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이미 테스트된 프로그램의 테스팅을 반복&lt;/li&gt;
&lt;li&gt;통합 테스트로 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;시스템 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발된 소프트웨어가 원하는 환경에서 수행되는지 테스트&lt;/li&gt;
&lt;li&gt;실제 환경과 유사하게 만든 테스트 환경에서 진행&lt;/li&gt;
&lt;li&gt;기능적 요구사항 : 명세서 기반의 블랙박스 테스트&lt;/li&gt;
&lt;li&gt;비기능적 요구사항 : 구조적 요소에 대한 화이트박스 테스트&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인수 테스트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점을 두고 테스트&lt;/li&gt;
&lt;li&gt;사용자가 직접 테스트&lt;/li&gt;
&lt;li&gt;사용자 인수 테스트 : 사용자가 시스템 사용의 적절성 여부 확인&lt;/li&gt;
&lt;li&gt;운영상의 인수 테스트 : 시스템 관리자가 시스템 인수 시 수행&lt;/li&gt;
&lt;li&gt;계약 인수 테스트 : 계약상의 조건을 준수하는지 확인&lt;/li&gt;
&lt;li&gt;규정 인수 테스트 : 규정에 맞게 개발되었는지 확인&lt;/li&gt;
&lt;li&gt;알파 테스트 : 개발된 환경에서 사용자가 개발자 앞에서 수행&lt;/li&gt;
&lt;li&gt;베타 테스트 : 사용자의 환경에서 사용자가 직접 테스트 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;애플리케이션-테스트-프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;애플리케이션 테스트 프로세스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;애플리케이션 테스트 프로세스&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;애플리케이션 테스트 프로세스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발된 소프트웨어가 제대로 만들어 졌는지 테스트하는 절차&lt;/li&gt;
&lt;li&gt;테스트를 마치면 테스트 계획서, 케이스, 시나리오, 결과서가 산출&lt;/li&gt;
&lt;li&gt;에러는 빨리 발견될수록 좋음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/YFHmJ/btqDsaY2vIR/Sy6c4gzmKDKeyTfkcJeRP1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트 계획 : 프로젝트 계획서 및 요구 명세서를 기반으로 테스트 목표를 정의하고 테스트 대상 및 범위 결정&lt;/li&gt;
&lt;li&gt;테스트 분석 및 디자인 : 테스트의 목적과 원칙을 검토하고 사용자의 요구사항 분석&lt;/li&gt;
&lt;li&gt;테스트 케이스 및 시나리오 작성 : 테스트 케이스를 작성, 검토 및 확인 후 시나리오 작성&lt;/li&gt;
&lt;li&gt;테스트 수행 : 테스트 환경 구축 후 테스트 수행&lt;/li&gt;
&lt;li&gt;테스트 결과 평가 및 리포팅 : 테스트 결과를 분석하여 테스트 결과 작성&lt;/li&gt;
&lt;li&gt;결함 추적 및 관리 : 테스트 수행 후 결함이 어디에서 발생했고 어떤 결함인지 추적하고 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;테스트-케이스--시나리오--오라클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4--%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4--%EC%98%A4%EB%9D%BC%ED%81%B4&quot; aria-label=&quot;테스트 케이스  시나리오  오라클 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 케이스 / 시나리오 / 오라클&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;테스트 케이스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 요구사항이 준수되었는지 확인하기 위해 테스트 항목에 대한 명세서&lt;/li&gt;
&lt;li&gt;명세 기반 테스트의 설계 산출물&lt;/li&gt;
&lt;li&gt;테스트 케이스 작성 순서&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/d7TsrF/btqDuqte949/wSWlaK3rbsPS5ArPAiY3v0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h5&gt;테스트 시나리오&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트 케이스를 적용하는 구체적인 절차를 명세한 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 오라클&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트 결과가 올바른지 판단하기 위해 정의된 참 값을 대입하여 비교&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 오라클의 특징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제한된 검증 : 모든 테스트 케이스에는 적용 불가&lt;/li&gt;
&lt;li&gt;수학적 기법 : 수학적 기법을 통해 테스트 오라클 값을 구할 수 있음&lt;/li&gt;
&lt;li&gt;자동화 기능 : 테스트 대상에 대한 실행, 결과 비교 등을 자동화할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 오라클의 종류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참 오라클 : 모든 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공&lt;/li&gt;
&lt;li&gt;샘플링 오라클 : 특정 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공&lt;/li&gt;
&lt;li&gt;추정 오라클 : 특정 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하고 나머지 값에 대해서는 추정으로 처리&lt;/li&gt;
&lt;li&gt;일관성 검사 오라클 : 변경 시 테스트 케이스 수행 전과 후의 결과 값이 동일한지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;테스트-자동화-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%90%EB%8F%99%ED%99%94-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;테스트 자동화 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;테스트 자동화 도구&lt;/h3&gt;
&lt;p&gt;반복적인 테스트 절차를 스크립트 형태로 구현하는 자동화 도구를 적용하여 쉽고 효율적으로 테스트 수행&lt;/p&gt;
&lt;h5&gt;테스트 자동화 도구의 장단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반복적인 작업을 자동화해 인력 및 시간 절감&lt;/li&gt;
&lt;li&gt;향상된 테스트 품질 보장&lt;/li&gt;
&lt;li&gt;사용자의 요구사항 등을 일관성 있게 검증&lt;/li&gt;
&lt;li&gt;테스트 결과에 대한 객관적인 평가 기준 제공&lt;/li&gt;
&lt;li&gt;테스트 결과를 다양한 표시 형태로 제공&lt;/li&gt;
&lt;li&gt;UI가 없는 서비스도 정밀 테스트 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용방법에 대한 교육 및 학습 필요&lt;/li&gt;
&lt;li&gt;자동화 도구를 프로세스 단계별로 적용하기 위한 시간, 비용, 노력이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 자동화 수행 시 고려사항&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모든 과정이 아닌 그때그때 맞는 적절한 도구를 선택&lt;/li&gt;
&lt;li&gt;자동화 도구를 고려하여 프로젝트 일정 계획&lt;/li&gt;
&lt;li&gt;프로젝트 초기에 테스트 엔지니어 투입 시기 계획&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 자동화 도구의 유형&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;정적 분석 도구 : 프로그램을 실행하지 않고 소스코드를 통해 결함을 발견&lt;/li&gt;
&lt;li&gt;테스트 실행 도구 : 스크립트 언어를 사용하여 테스트를 실행&lt;/li&gt;
&lt;li&gt;성능 테스트 도구 : 가상의 사용자를 만들어 테스트를 수행&lt;/li&gt;
&lt;li&gt;테스트 통제 도구 : 테스트 계획 및 관리, 수행, 결함 관리 등을 수행&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테스트 하네스 도구&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트가 실행될 환경을 시뮬레이션하여 컴포넌트 및 모듈이 정상적으로 테스트되도록 함&lt;/li&gt;
&lt;li&gt;구성요소 : 테스트 드라이버, 테스트 스텁, 테스트 슈트, 테스트 케이스, 테스트 스크립트, 목 오브젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 수행 단계별 테스트 자동화 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트 계획 단계 : 요구사항 관리 도구&lt;/li&gt;
&lt;li&gt;테스트 분석 및 설계 단계 : 테스트 케이스 생성 도구&lt;/li&gt;
&lt;li&gt;테스트 수행 단계 : 테스트 자동화 / 정적 분석 / 동적 분석 / 성능 테스트 / 모니터링 도구&lt;/li&gt;
&lt;li&gt;테스트 관리 단계 : 커버리지 분석 / 형상 관리 / 결함 추적 및 관리 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;결함-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B2%B0%ED%95%A8-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;결함 관리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;결함 관리&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;소프트웨어가 개발자가 설계한 것과 다르게 동작하거나 다른 결과가 발생하는 것&lt;/p&gt;
&lt;h5&gt;결함 관리 프로세스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 테스트에서 발견된 결함을 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dyUW30/btqDsO2wcG0/wBVwdyZyNhpTjq0qLs009k/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h5&gt;결함 상태 추적&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트에서 발견된 결함은 지속적으로 상태 변화를 추적하고 관리해야 함&lt;/li&gt;
&lt;li&gt;결함 분포 : 특정 속성에 해당하는 결함 수 측정&lt;/li&gt;
&lt;li&gt;결함 추세 : 시간에 따른 결함 수의 추이 분석&lt;/li&gt;
&lt;li&gt;결함 에이징 : 결함 상태로 지속되는 시간 측정&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;결함 추적 순서&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;결함이 발견되고 해결될 때까지의 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cFIW6a/btqDsadJyTF/0bCMccXfal6FKIGtZbBCiK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h5&gt;결함 분류&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;시스템 결함 : 주로 애플리케이션이나 데이터베이스 처리에서 발생된 결함&lt;/li&gt;
&lt;li&gt;기능 결함 : 애플리케이션의 기획, 설계, 업무 시나리오 등의 단계에서 유입된 결함&lt;/li&gt;
&lt;li&gt;GUI 결함 : 화면 설계에서 발생된 결함&lt;/li&gt;
&lt;li&gt;문서 결함 : 기획자, 사용자, 개발자 간 의사소통 및 기록이 원활하지 않아 발생된 결함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;결함 심각도&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;결함이 전체 시스템에 미치는 치명도를 High, Medium, Low로 나눔&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;결함 우선순위&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;발견된 결함 처리에 대한 신속성을 나타내는 척도&lt;/li&gt;
&lt;li&gt;결함의 중요도와 심각도에 따라 설정되고 수정 여부 결정&lt;/li&gt;
&lt;li&gt;Critical, High, Medium, Low 또는 즉시 해결, 주의 요망, 대기, 개선 권고 등으로 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;결함 관리 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Mantis : 소프트웨어 설계 시 단위 별 작업 내용을 기록할 수 있어 결함 및 이슈 관리, 추적 도구&lt;/li&gt;
&lt;li&gt;Trac : 결함 추적 및 통합 관리 도구&lt;/li&gt;
&lt;li&gt;Redmine : 프로젝트 관리 및 결함 추적 도구&lt;/li&gt;
&lt;li&gt;Bugzilla : 결함을 지속적으로 관리하고 심각도와 우선순위를 지정할 수 있는 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;애플리케이션-성능-분석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%B1%EB%8A%A5-%EB%B6%84%EC%84%9D&quot; aria-label=&quot;애플리케이션 성능 분석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;애플리케이션 성능 분석&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;애플리케이션 성능&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 요구한 기능을 최소한의 자원을 사용하여 최대한 많은 기능을 신속하게 처리하는 정도&lt;/li&gt;
&lt;li&gt;측정 지표 : 처리량, 응답 시간, 경과 시간, 자원 사용률&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;성능 테스트 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션의 성능을 테스트 하기 위해 부하나 스트레스를 가해 성능 측정 지표를 점검하는 도구&lt;/li&gt;
&lt;li&gt;JMeter : 다양한 프로토콜을 지원하는 부하 테스트 도구&lt;/li&gt;
&lt;li&gt;LoadUI : 사용자의 편리성이 강화된 부하 테스트 도구&lt;/li&gt;
&lt;li&gt;OpenSTA : HTTP, HTTPS 프로토콜에 대한 부하 테스트 및 생산품 모니터링 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;시스템 모니터링 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 실행 중 시스템 자원의 사용량을 확인하고 분석하는 도구&lt;/li&gt;
&lt;li&gt;성능 저하의 원인 / 시스템 부하량 / 사용자 분석과 같은 시스템을 안정적으로 운영할 수 있는 기능 제공&lt;/li&gt;
&lt;li&gt;Scouter, Zabbix&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;애플리케이션 성능 저하 원인 분석&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션을 DB에 연결하기 위해 커넥션 객체를 생성하거나 쿼리를 실행하는 애플리케이션 로직에서 자주 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;애플리케이션-성능-개선&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0&quot; aria-label=&quot;애플리케이션 성능 개선 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;애플리케이션 성능 개선&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;소스코드 최적화&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;나쁜 코드를 배제하고 클린 코드로 작성&lt;/li&gt;
&lt;li&gt;클린 코드 작성 원칙 : 가독성, 단순성, 의존성 배제, 중복성 최소화, 추상화&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;소스 코드 최적화 유형&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;클래스 분할 배치, 느슨한 결합, 코딩 형식 준수, 좋은 이름 사용, 적절한 주석문 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;소스 코드 품질 분석 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;정적 분석 도구&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작성한 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함을 확인하는 도구&lt;/li&gt;
&lt;li&gt;pmd, cppcheck, SonarQube, checkstyle, ccm, cobertuna 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동적 분석 도구&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작성한 코드 소스를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석하는 도구&lt;/li&gt;
&lt;li&gt;Avalanche, Valgrind&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;5-인터페이스-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;5 인터페이스 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 인터페이스 구현&lt;/h1&gt;
&lt;h3 id=&quot;모듈-간-공통-기능-및-데이터-인터페이스-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EA%B0%84-%EA%B3%B5%ED%86%B5-%EA%B8%B0%EB%8A%A5-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;모듈 간 공통 기능 및 데이터 인터페이스 확인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 간 공통 기능 및 데이터 인터페이스 확인&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;모듈 간 공통 기능 및 데이터 인터페이스의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;공통 기능 : 모듈에 공통적으로 제공되는 기능&lt;/li&gt;
&lt;li&gt;데이터 인터페이스 : 모듈 간 교환되는 데이터가 저장될 파라미터&lt;/li&gt;
&lt;li&gt;인터페이스 설계서에서 정의한 모듈의 기능을 기반으로 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 설계서&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;교환 데이터 및 관련 업무, 송수신 시스템 등에 대한 내용을 정리한 문서&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반적인 인터페이스 설계서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 목록, 상세 데이터 명세, 기능의 세부 정보를 정의한 문서&lt;/li&gt;
&lt;li&gt;시스템 인터페이스 설계서 : 시스템 인터페이스 목록과 상세 데이터 명세를 정의&lt;/li&gt;
&lt;li&gt;상세 기능별 인터페이스 명세서 : 기능의 세부 인터페이스 정보 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정적/도형 모형을 통한 인터페이스 설계서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템의 구성요소를 다이어그램으로 표현하여 만든 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 설계서 별 모듈 기능 확인&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/Hg0Gw/btqDvyYM21e/GR8eobp1GD1YBIWupdbwx1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 80%;&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;모듈-연계를-위한-인터페이스-기능-식별&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EC%97%B0%EA%B3%84%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B8%B0%EB%8A%A5-%EC%8B%9D%EB%B3%84&quot; aria-label=&quot;모듈 연계를 위한 인터페이스 기능 식별 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 연계를 위한 인터페이스 기능 식별&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;모듈 연계의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모듈 간 데이터 교환을 위해 관계를 설정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;EAI(Enterprise Application Intergration)&lt;/code&gt; : 기업 내 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Point-to-Point&lt;/em&gt; : 애플리케이션끼리 1:1로 연결. 변경 및 재사용이 어려움&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hub &amp;#x26; Spoke&lt;/em&gt; : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식. 확장 및 유지보수 용이, 허브 장애 시 전체 시스템에 영향&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Message Bus(ESB 방식)&lt;/em&gt; : 애플리케이션 사이 미들웨어를 두어 처리. 확장성이 뛰어나고 대용량 처리 가능&lt;/li&gt;
&lt;li&gt;Hybrid : Hub &amp;#x26; Spoke와 Message Bus의 혼합 방식. 그룹 내에선 Hub &amp;#x26; Spoke 방식을 그룹 간에는 Message Bus 방식 이용. 데이터 병목 현상 최소화&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ESB(Enterprise Service Bus)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 간 표준 기반 인터페이스를 제공하는 솔루션&lt;/li&gt;
&lt;li&gt;애플리케이션보다는 서비스 중신의 통합을 지향&lt;/li&gt;
&lt;li&gt;애플리케이션과의 결합도를 약하게 유지&lt;/li&gt;
&lt;li&gt;관리 및 보안 유지가 쉽고 높은 수준의 품질 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;모듈 간 연계 기능 식별&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모듈 간 공통 기능 및 데이터 인터페이스를 기반으로 모듈과 연계된 기능을 시나리오 형태로 구체화하여 식별&lt;/li&gt;
&lt;li&gt;인터페이스 기능을 식별하는 데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;모듈 간 인터페이스 기능 식별&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;식별된 모듈 간 기능을 검토하여 인터페이스 동작에 필요한 기능을 식별&lt;/li&gt;
&lt;li&gt;해당 업무에 대한 시나리오를 통해 내부 모듈과 관련된 인터페이스 기능 식별&lt;/li&gt;
&lt;li&gt;외부 및 인터페이스 모듈 간 동작하는 기능을 통해 인터페이스 기능 식별&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;모듈-간-인터페이스-데이터-표준-확인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88-%EA%B0%84-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%91%9C%EC%A4%80-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;모듈 간 인터페이스 데이터 표준 확인 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈 간 인터페이스 데이터 표준 확인&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;모듈 간 인터페이스에 사용되는 데이터의 형식을 표준화&lt;/p&gt;
&lt;h5&gt;데이터 인터페이스 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;데이터 표준을 위해 식별된 데이터 인터페이스에서 입출력 값의 의미와 데이터의 특성 등을 구체적으로 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 기능 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;데이터 표준을 위해 식별된 인터페이스 기능을 기반으로 인터페이스 기능 구현을 위해 필요한 데이터 항목 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 데이터 표준 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;데이터 인터페이스에서 확인된 데이터 표준과 인터페이스 기능을 통해 확인된 데이터 항목을 검토하여 최종적으로 데이터 표준 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스-기능-구현-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;인터페이스 기능 구현 정의 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 기능 구현 정의&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;인터페이스 기능 구현 정의에 대한 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스를 실제로 구현하기 위해 인터페이스 기능에 대한 구현 방법을 기능별로 기술&lt;/li&gt;
&lt;li&gt;인터페이스 기능 구현 정의 순서&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bJqWut/btqDtAC23W3/4sKlbuXOfkFseiFEu3aCLk/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h5&gt;모듈 세부 설계서&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모듈의 구성 요소와 세부적인 동작 등을 정의한 설계서&lt;/li&gt;
&lt;li&gt;컴포넌트 명세서 : 컴포넌트의 개요 및 내부 클래스의 동작, 인터페이스를 통해 외부와 통신하는 명세 등을 정의&lt;/li&gt;
&lt;li&gt;인터페이스 명세서 : 컴포넌트 명세서의 항목 중 인터페이스 클래스의 세부 조건 및 기능 등을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;모듈 세부 설계서 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모듈의 컴포넌트 명세서와 인터페이스 명세서를 기반으로 인터페이스에 필요한 기능 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 기능 구현 정의&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;인터페이스의 기능&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;데이터 표준&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;모듈 세부 설계서&lt;/code&gt;를 기반으로 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;인터페이스 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 구현&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;송수신 시스템 간의 데이터 교환 및 처리를 실현해주는 작업&lt;/p&gt;
&lt;p&gt;정의된 인터페이스 기능 구현을 기반으로 인터페이스 구현 방법을 분석하고 분석한 인터페이스 구현 정의를 기반으로 구현&lt;/p&gt;
&lt;h5&gt;데이터 통신을 이용한 인터페이스 구현&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 영역에서 인터페이스 형식에 맞춘 데이터 포맷을 인터페이스 대상으로 전송하고 이른 수신 측에서 파싱 하여 해석하는 방식&lt;/li&gt;
&lt;li&gt;JSON, XML 형식 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 엔티티를 이용한 인터페이스 구현&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스가 필요한 시스템 사이에 별도의 인터0페이스 엔티티를 두어 상호 연계하는 방식&lt;/li&gt;
&lt;li&gt;인터페이스 테이블 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스-예외-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;인터페이스 예외 처리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 예외 처리&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;인터페이스 예외 처리의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;구현된 인터페이스가 동작하는 과정에서 기능상 예외 상황이 발생했을 때 처리하는 절차&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;데이터 통신을 이용한 인터페이스 예외 처리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 객체를 이용해 구현한 인터페이스 동작이 실패할 경우를 대비&lt;/li&gt;
&lt;li&gt;송수신 시 발생할 수 있는 예외 케이스를 정의하고 예외 처리 방법을 기술&lt;/li&gt;
&lt;li&gt;시스템 환경, 송수신 데이터, 프로그램 자체 원인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 엔티티를 이용한 인터페이스 예외 처리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;엔티티에 인터페이스의 실패 상황과 원인을 기록&lt;/li&gt;
&lt;li&gt;조치를 취할 수 있도록 사용자와 관리자에게 알려주는 방식으로 예외 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스-보안&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B3%B4%EC%95%88&quot; aria-label=&quot;인터페이스 보안 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 보안&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;인터페이스 보안 취약점 분석&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 기능이 수행되는 각 구간들의 구현 현황을 확인 후 어떤 취약점이 있는지 확인&lt;/li&gt;
&lt;li&gt;송수신 영역의 구현 기술 및 특징을 구체적으로 확인&lt;/li&gt;
&lt;li&gt;확인된 인터페이스 기능을 기반으로 영역별로 발생할 수 있는 취약점을 시나리오 형태로 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 보안 기능 적용&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;분석한 인터페이스 기능과 취약점을 기반으로 보안 기능 적용&lt;/li&gt;
&lt;li&gt;네트워크 영역 : 송수신간 스니핑 등을 이용한 데이터 탈취 및 변조 위험을 방지하기 위해 네트워크 트래픽에 대한 암호화 설정&lt;/li&gt;
&lt;li&gt;애플리케이션 영역 : 소프트웨어 개발 보안 가이드를 참조하여 코드 상의 취약점을 보완&lt;/li&gt;
&lt;li&gt;데이터베이스 영역 : 접근 권한과 데이터베이스 동작 객체의 취약점에 보안 기능 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;연계-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EA%B3%84-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;연계 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연계 테스트&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;구축된 연계 시스템과 구성 요소가 정상적으로 동작하는지 확인&lt;/p&gt;
&lt;h5&gt;연계 테스트 케이스 작성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;연계 시스템 간의 데이터 및 프로세스 흐름을 분석하여 필요한 테스트 항목을 도출&lt;/li&gt;
&lt;li&gt;송수신 연계 응용 프로그램의 단위 테스트 케이스와 연계 테스트 케이스를 각각 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;연계 테스트 환경 구축&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트의 환경을 송수신 기관과의 협의를 통해 결정하고 구축&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;연계 테스트 수행&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;연계 응용 프로그램을 실행하여 연계 테스트 케이스의 시험 항목 및 처리 절차 등을 실제로 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;연계 테스트 수행 결과 검증&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;연계 테스트 케이스의 시험 항목 및 처리 절차를 수행한 결과가 예상 결과와 동일한지 확인&lt;/li&gt;
&lt;li&gt;연계 서버에서 적용하는 모니터링 현황 확인&lt;/li&gt;
&lt;li&gt;시스템에서 기록하는 로그 확인&lt;/li&gt;
&lt;li&gt;테이블 또는 파일을 열어 데이터를 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스-구현-검증&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B5%AC%ED%98%84-%EA%B2%80%EC%A6%9D&quot; aria-label=&quot;인터페이스 구현 검증 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 구현 검증&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;인터페이스 구현 검증 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;xUnit : Java, C++, .Net 등 다양한 언어를 지원&lt;/li&gt;
&lt;li&gt;STAF : 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원&lt;/li&gt;
&lt;li&gt;FitNesse : 웹 기반 테스트케이스 설계, 진행, 결과 확인 등을 지원&lt;/li&gt;
&lt;li&gt;NTAF : FitNess의 협업 기능과 STAF의 재사용 및 확장성을 통합한 NHN의 프레임워크&lt;/li&gt;
&lt;li&gt;Selenium : 다양한 브라우저 및 개발 언어 지원&lt;/li&gt;
&lt;li&gt;watir : Ruby를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 구현 감시 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;APM을 사용하여 감시 가능&lt;/li&gt;
&lt;li&gt;애플리케이션 성능 관리 도구를 통해 데이터베이스와 웹 애플리케이션의 다양한 정보를 조회하고 분석할 수 있음&lt;/li&gt;
&lt;li&gt;스카우터(Scouter), 제니퍼(Jennifer) 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 구현 검증 도구 및 감시 도구 선택&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 명세서의 세부 기능을 참조하여 검증 도구와 감시 도구의 요건을 분석&lt;/li&gt;
&lt;li&gt;분석 후 시장 및 솔루션 조사를 통해 적절한 도구 선택&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 구현 검증 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;외부 시스템과 연계 모듈 동작 상태 확인&lt;/li&gt;
&lt;li&gt;예상되는 결과값과 실제 검증 값이 동일한지 비교&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 구현 감시 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;외부 시스템과 연결 모듈이 서비스를 제공하는 동안 정상적으로 동작하는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스-오류-확인-및-처리-보고서-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%98%A4%EB%A5%98-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%B2%98%EB%A6%AC-%EB%B3%B4%EA%B3%A0%EC%84%9C-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;인터페이스 오류 확인 및 처리 보고서 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스 오류 확인 및 처리 보고서 작성&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;인터페이스 오류 발생 시 오류사항을 확인하고 오류 처리 보고서를 작성하여 관리 조직에 보고&lt;/p&gt;
&lt;h5&gt;인터페이스 오류 발생 즉시 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;화면에 오류 메시지를 표시하고 자동으로 SMS나 이메일을 발생하는 것으로 즉시 오류 발생 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;주기적인 인터페이스 오류 발생 확인&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;시스템 로그나 인터페이스 오류 관련 테이블 등을 통해 주기적으로 오류 발생 여부 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;인터페이스 오류 처리 보고서 작성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스 작동 시 발생하는 오류의 발생 및 종료 시점, 원인 및 증상, 처리사항 등을 정리한 문서&lt;/li&gt;
&lt;li&gt;보고 시기를 최초 발생 시, 오류 처리 경과 시, 완료 시로 나누어 작성&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(2)/</guid><pubDate>Sun, 02 Feb 2020 05:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;2-통합-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%ED%86%B5%ED%95%A9-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;2 통합 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 통합 구현&lt;/h1&gt;
&lt;h3 id=&quot;단위-모듈-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9C%84-%EB%AA%A8%EB%93%88-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;단위 모듈 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단위 모듈 구현&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;단위 모듈의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 구현에 필요한 여러 동작 중 한 가지 동작을 수행하는 기능을 모듈로 구현한 것&lt;/li&gt;
&lt;li&gt;사용자 또는 다른 모듈로부터 값을 전달받아 시작되는 작은 프로그램&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bc9O7j/btqDmmfk3eI/xDtfitxikymn93E0cQfAkK/img.png&quot; alt=&quot;img&quot;&gt;단위 모듈 구현 순서&lt;/p&gt;
&lt;h5&gt;단위 기능 명세서 작성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;단위 기능을 명세화한 문서&lt;/li&gt;
&lt;li&gt;복잡한 시스템을 단순하게 구현하기 위한 추상화 작업이 필요&lt;/li&gt;
&lt;li&gt;대형 시스템을 분해하여 단위 기능별로 구분하고 각 기능들로 계층적으로 구성하는 구조화 과정을 거침&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;입출력 기능 구현&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;단위 기능 명세서에서 정의한 데이터 형식에 따라 입출력 기능을 위한 알고리즘 및 데이터 구현&lt;/li&gt;
&lt;li&gt;모듈 간 연동 또는 통신을 위한 데이터 구현&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPC(Inter Process Communication) : 모듈 간 통신을 구현하기 위해 사용되는 프로그래밍 인터페이스 집합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공유 메모리 : 다수의 프로세스가 공유 가능한 메모리를 구성하여 통신 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소켓 : 네트워크 소켓을 이용하여 네트워크를 경유하는 통신 수행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;세마포어 : 공유 자원에 대한 접근 제어를 통해 통신 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파이프 : 선입선출의 형태로 구성된 메모리를 여러 프로세스가 공유하여 통신 수행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메시지 큐잉 : 메시지가 발생하면 이를 전달하는 형태로 통신 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;알고리즘 구현&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;입출력 데이터를 바당으로 단위 기능별 요구 사항들을 구현 가능 언어를 이용하여 모듈로 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;단위-모듈-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9C%84-%EB%AA%A8%EB%93%88-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;단위 모듈 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단위 모듈 테스트&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;단위 모듈 테스트의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;모듈이 정해진 기능을 정확히 수행하는지 검증&lt;/li&gt;
&lt;li&gt;단위 테스트라고도 하며 화이트박스 테스트와 블랙박스 테스트 기법 사용&lt;/li&gt;
&lt;li&gt;시스템 수준의 오류는 발견할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 케이스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;구현된 소프트웨어가 요구사항을 정확히 준수했는지 확인하기 위한 테스트 항목에 대한 명세서로 명세 기반 테스트의 설계 산출물에 해당&lt;/li&gt;
&lt;li&gt;입력 데이터, 테스트 조건, 예상 결과 등을 모아 테스트 케이스를 만듦&lt;/li&gt;
&lt;li&gt;테스트 케이스의 구성 요소 : 식별자, 테스트 항목, 입력 / 출력 명세, 환경 설정, 특수 절차 요구, 의존성 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;테스트 프로세스&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트를 위해 수행하는 작업이 테스트의 목적과 조건을 달성할 수 있도록 도와주는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/nqqFu/btqDnv3ZVxa/hf0kl3xEAsO0liV7VyPRY0/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;개발-지원-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C-%EC%A7%80%EC%9B%90-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;개발 지원 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발 지원 도구&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;통합 개발 환경(IDE)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발에 필요한 편집기, 컴파일러 디버거 등의 다양한 툴을 하나의 인터페이스로 통합하여 제공&lt;/li&gt;
&lt;li&gt;Eclipse, Visual Studio, Xcode, Android Studio, IDEA 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;빌드 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소스 코드 파일들을 컴퓨터에서 실행할 수 있는 제품 소프트웨어로 변환하는 과정 또는 결과물&lt;/li&gt;
&lt;li&gt;소스 코드를 소프트웨어로 변환하는 과정에 필요한 전처리, 컴파일 등의 작업을 수행&lt;/li&gt;
&lt;li&gt;Ant : 자바 프로젝트의 공식적인 빌드 도구&lt;/li&gt;
&lt;li&gt;Maven : Ant의 대안으로 의존성을 설정하여 라이브러리 관리&lt;/li&gt;
&lt;li&gt;Gradle : 안드로이드 스튜디오의 공식 빌드 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;협업 도구&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발에 참여하는 사람들이 서로 다른 작업 환경에서 프로젝트를 수행할 수 있도록 도와주는 도구&lt;/li&gt;
&lt;li&gt;협업 소프트웨어, 그룹웨어라고도 함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;협업 도구의 종류&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 및 일정 관리 : 구글 캘린더, 분더리스트, 트렐, 지라, 플로우 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정보 공유 및 커뮤니케이션 : 슬랙, 잔디, 태스크 월드 등&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;디자인 : 스케치, 제플린 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아이디어 공유 : 에버노트 등&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 문서화 : 스웨거 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Git 웹 호스팅 서비스 : 깃허브 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;3-제품-소프트웨어-패키징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-%EC%A0%9C%ED%92%88-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%ED%8C%A8%ED%82%A4%EC%A7%95&quot; aria-label=&quot;3 제품 소프트웨어 패키징 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 제품 소프트웨어 패키징&lt;/h1&gt;
&lt;h3 id=&quot;소프트웨어-패키징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%ED%8C%A8%ED%82%A4%EC%A7%95&quot; aria-label=&quot;소프트웨어 패키징 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 패키징&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;소프트웨어 패키징의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;실행 파일을 묶어 배포용 설치 파일을 만듦&lt;/li&gt;
&lt;li&gt;사용자 중심&lt;/li&gt;
&lt;li&gt;모듈화 하여 일반 배포 형태로 패키징&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;패키징 고려사항&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 운영체제, CPU, 메모리 등에 필요한 최소 환경 정의&lt;/li&gt;
&lt;li&gt;UI는 시각적인 자료와 함께 매뉴얼과 일치시켜 패키징&lt;/li&gt;
&lt;li&gt;소프트웨어는 하드웨어와 함께 관리될 수 있도록 Managed Service 형태로 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;패키징 작업 순서&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/tvV6d/btqDqi3YpSP/8e5aU5etuwmdBh5RIcYmEK/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;릴리즈-노트-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%B4%EB%A6%AC%EC%A6%88-%EB%85%B8%ED%8A%B8-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;릴리즈 노트 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;릴리즈 노트 작성&lt;/h3&gt;
&lt;h5&gt;릴리즈 노트의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발 과정에서 정의된 릴리즈 정보를 고객에게 공유하기 위한 문서&lt;/li&gt;
&lt;li&gt;테스트 진행 방법에 대한 결과가 소프트웨어 사양에 대한 개발팀의 정확한 준수 여부 파악&lt;/li&gt;
&lt;li&gt;소프트웨어의 버전 관리 및 릴리즈 정보를 체계적으로 관리&lt;/li&gt;
&lt;li&gt;소프트웨어 초기 배포, 출시 후 개선 사항을 적용한 추가 배포 시 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;릴리즈 노트 초기 버전 작성 시 고려사항&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;정확하고 완전한 정보를 기반으로 개발팀에서 직접 현재 시제로 작성&lt;/li&gt;
&lt;li&gt;신규 코드, 빌드 등의 이력이 정확하게 관리되어 변경 또는 개선된 항목에 대한 이력 정보들도 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;릴리즈 노트 추가 버전 작성 시 고려사항&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;테스트 과정에서 베타 버전이 출시되거나 긴급 버그 수정, 업그레이드, 사용자 요청 등의 특수한 상황의 경우 작성&lt;/li&gt;
&lt;li&gt;긴급 버그 수정 시 수정하는 경우 릴리즈 버전을 출시하고 그 번호를 포함한 모든 내용을 수정된 내용을 담음&lt;/li&gt;
&lt;li&gt;요구사항에 의해 추가 혹은 수정된 경우 자체 기능 향상과는 다른 별도의 릴리즈 버전으로 출시하고 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;릴리즈 노트 작성 순서&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cOQGhQ/btqDpgFu9Ja/CmbkYk3dfto2Ay7T1k9k0k/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;디지털-저작권-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%94%EC%A7%80%ED%84%B8-%EC%A0%80%EC%9E%91%EA%B6%8C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;디지털 저작권 관리 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디지털 저작권 관리&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;저작권의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;창작자가 가지는 배타적 독점적 권리로 타인의 침해를 받지 않을 고유한 권한&lt;/li&gt;
&lt;li&gt;컴퓨터 프로그램처럼 복제하기 쉬운 저작물에 대해 저작권을 보호하는 방법을 저작권 보호 기술이라 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;디지털 저작권 관리(Digital Right Management)의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;저작권자가 배포한 디지털 콘텐츠가 저작권자가 의도한 용도로만 사용되도록 생성, 유통, 이용까지 전 과정에 걸쳐 사용되는 디지털 콘텐츠 관리 및 보호 기술&lt;/li&gt;
&lt;li&gt;크기가 작은 경우 사용자가 콘텐츠를 요청하는 시점에 실시간 패키징 수행&lt;/li&gt;
&lt;li&gt;크기가 큰 경우 미리 패키징을 수행 후 배포&lt;/li&gt;
&lt;li&gt;종량제 방식을 적용한 소프트웨어의 경우 서비스의 실제 사용량을 측정하여 이용한 만큼 이용 부과&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;디지털 저작권 관리의 흐름도&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/Y1uPR/btqDp1BoeTY/XOSELzNbREhMbMQX81BTW1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;클리어링 하우스&lt;/code&gt; : 저작권에 대한 사용 권한, 라이선스 발급, 사용량에 따른 결제 관리 등 수행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;콘텐츠 제공자&lt;/code&gt; : 콘텐츠를 제공하는 저작권자&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;패키저&lt;/code&gt; : 콘텐츠를 메타 데이터와 함께 배포 가능한 형태로 묶어 암호화는 프로그램&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;콘텐츠 분배자&lt;/code&gt; : 암호화된 콘텐츠를 유통&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;콘텐츠 소비자&lt;/code&gt; : 콘텐츠를 구매해서 사용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;DRM 컨트롤러&lt;/code&gt; : 배포된 콘텐츠의 이용 권한을 통제하는 프로그램&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;보안 컨테이너&lt;/code&gt; : 콘텐츠 원본을 안전하게 유통하기 위한 전자적 보안 장치&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;디지털 저작권 관리의 기술 요소&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;암호화, 키 관리, 암호화 파일 생성, 식별 기술, 저작권 표현, 정책 관리, 크랙 방지, 인증&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;소프트웨어-설치-매뉴얼-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%84%A4%EC%B9%98-%EB%A7%A4%EB%89%B4%EC%96%BC-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;소프트웨어 설치 매뉴얼 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 설치 매뉴얼 작성&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;소프트웨어 설치 매뉴얼의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개발 초기에서부터 적용된 기준이나 사용자가 소프트웨어를 설치하는 과정에 필요한 내용을 기록한 문서&lt;/li&gt;
&lt;li&gt;설치 시작부터 완료까지의 과정을 순서대로 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;서문&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;문서 이력, 설치 매뉴얼의 주석, 설치 도구의 구성, 설치 환경 체크 항목 기술&lt;/li&gt;
&lt;li&gt;설치 매뉴얼의 주석 : 주의 사항과 참고 사항 기술&lt;/li&gt;
&lt;li&gt;설치 환경 체크 항목 : 사용자 환경, 응용 프로그램, 업그레이드 버전, 백업 폴더 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;기본 사항&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개요, 설치 관련 파일, 설치 아이콘, 프로그램 삭제, 관련 추가 정보 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;설치 매뉴얼 작성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 설치 과정을 이해하기 쉽게 설치 화면을 누락 없이 캡처하여 순서대로 설명&lt;/li&gt;
&lt;li&gt;설치 화면 및 UI, 설치 이상 메시지, 설치 완료 및 결과, 설치 시 점검 사항, Network 환경 및 보안, 고객 지원 방법, FAQ, 준수 정보 &amp;#x26; 제한 보증에 대해 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;설치 매뉴얼 작성 순서&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cLCERZ/btqDurFmuU5/JyEgDKh5N1Ej8ZxykCeK2K/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;소프트웨어-사용자-매뉴얼-작성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%A7%A4%EB%89%B4%EC%96%BC-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;소프트웨어 사용자 매뉴얼 작성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 사용자 매뉴얼 작성&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;소프트웨어 사용자 매뉴얼의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 소프트웨어를 사용하는 과정에서 필요한 내용을 기록한 문서&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;서문&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;문서 이력, 사용자 매뉴얼의 주석, 기록 보관 내용 기술&lt;/li&gt;
&lt;li&gt;기록 보관 내용 : 소프트웨어를 사용하면서 필요한 기술 지원이나 추가 정보를 얻기 위한 소프트웨어 등록 정보 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;기본 사항&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개요, 사용 환경, 관리, 모델 버전별 특징, 기능 및 인터페이스의 특징, 구동 환경 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;사용자 매뉴얼 작성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 사용방법을 이해하기 쉽도록 작성&lt;/li&gt;
&lt;li&gt;사용자 화면 및 UI, 주요 기능 분류, 응용 프로그램 및 설정, 장치 연동, Network 환경, Profile 안내, 고객 지원 방법, 준수 정보 및 제한 보증에 대해 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;사용자 매뉴얼 작성 순서&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/sSgwA/btqDpgrZvc2/vhYiFionTKvksiRwPhHxL1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;h3 id=&quot;소프트웨어-버전-등록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%B2%84%EC%A0%84-%EB%93%B1%EB%A1%9D&quot; aria-label=&quot;소프트웨어 버전 등록 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 버전 등록&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;소프트웨어 패키징 형상 관리&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;형상관리는 소프트웨어의 변경 사항을 관리하기 위한 활동&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;형상 관리의 중요성&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;지속적으로 변경사항을 체계적으로 관리 및 추적할 수 있음&lt;/li&gt;
&lt;li&gt;발견된 버그나 수정 사항을 추적&lt;/li&gt;
&lt;li&gt;무절제한 변경 방지&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;형상 관리 기능&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;형상 식별 : 대상에 이름과 관리 번호를 부여하고 계층 구조로 구분하여 수정 및 추적이 용이하도록 하는 작업&lt;/li&gt;
&lt;li&gt;버전 제어 : 소프트웨어 유지 보수 과정에서 생성된 다른 버전의 형상 항목을 관리하고 특정 절차와 도구를 결합하는 작업&lt;/li&gt;
&lt;li&gt;형상 통제 : 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기준선이 잘 반영될 수 있도록 하는 작업&lt;/li&gt;
&lt;li&gt;형상 감사 : 기준선의 무결성을 평가하기 위해 확인, 검증, 검열 과정을 통해 공식적으로 승인하는 작업&lt;/li&gt;
&lt;li&gt;형상 기록 : 형상의 식별, 통제, 감사 작업의 결과를 기록, 관리하고 보고서를 작성하는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;소프트웨어 버전 등록 관련 주요 용어&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;저장소(Repository) : 형상에 대한 정보들이 저장되어 있는 곳&lt;/li&gt;
&lt;li&gt;가져오기 : 아무것도 없는 저장소에 처음으로 파일 복사&lt;/li&gt;
&lt;li&gt;체크아웃 : 저장소에서 소스 파일, 버전 관리를 위한 파일을 받아옴&lt;/li&gt;
&lt;li&gt;체크인 : 체크아웃으로 받아온 파일을 수정 후 저장소에 새로운 버전으로 갱신&lt;/li&gt;
&lt;li&gt;커밋 : 체크인 수행 시 이전에 갱신된 내용이 있는 경우 충돌을 알리고 diff 도구를 이용해 수정한 후 갱신&lt;/li&gt;
&lt;li&gt;동기화 : 저장소에 있는 최신 버전을 동기화&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;소프트웨어-버전-관리-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;소프트웨어 버전 관리 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소프트웨어 버전 관리 도구&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;공유 폴더 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;버전 관리 자료가 로컬 컴퓨터의 공유 폴더에 저장되어 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;클라이언트/서버 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;버전 관리 자료가 서버에 저장되어 관리&lt;/li&gt;
&lt;li&gt;서버의 자료를 자신의 PC로 복사하여 작업 후 변경 내용을 서버에 반영&lt;/li&gt;
&lt;li&gt;모든 버전 관리는 서버에서 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;분산 저장소 방식&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;버전 관리 자료가 하나의 원격 저장소와 분산된 PC의 로컬 저장소에 함께 저장되어 관리&lt;/li&gt;
&lt;li&gt;원격 저장소의 자료를 자신의 로컬 저장소로 복사하여 작업 후 변경 내용을 로컬 저장소에서 버전 관리 후 이를 원격 저장소에 반영&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Subversion(SVN)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;아파치 소프트웨어 재단에서 2000년에 발표&lt;/li&gt;
&lt;li&gt;클라이언트/서버 방식&lt;/li&gt;
&lt;li&gt;모든 작업은 trunk 디렉토리에서 추가 작업은 branches 디렉토리 안에 별도의 디렉토리를 만들어 작업 후 trunk 디렉토리와 병합&lt;/li&gt;
&lt;li&gt;커밋 시 커밋의 버전인 리버전이 1씩 증가&lt;/li&gt;
&lt;li&gt;서버는 주로 유닉스에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;명령어&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;add&lt;/code&gt; : 새로운 파일이나 디렉토리를 관리 대상으로 지정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;commit&lt;/code&gt;: add한 소스파일을 서버의 소스파일에 적용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; : 서버의 최신 commit 이력을 클라이언트 소스에 적용&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;checkout&lt;/code&gt; : 서버에서 버전 관리 정보와 소스 파일을 받아옴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt; : 다른 디렉토리에서 작업된 버전 관리 내역을 기본 개발 작업과 병행&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;import&lt;/code&gt;: 아무것도 없는 서버의 저장소에 맨 처음 소스 파일을 저장&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;export&lt;/code&gt;: 버전 관리 정보 빼고 소스 파일만 서버에서 받아옴&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;info&lt;/code&gt;: 지정된 파일에 대한 정보를 표시&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;diff&lt;/code&gt;: 지정된 파일이나 경로에 대해 이전 리버전과의 차이를 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Git&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;리누스 토발즈가 2005년에 개발&lt;/li&gt;
&lt;li&gt;분산 저장소 방식&lt;/li&gt;
&lt;li&gt;버전 관리가 지역 저장소에서 진행되어 버전 관리가 신속하게 처리되고, 원격 저장소나 네트워크에 문제가 있어도 작업 가능&lt;/li&gt;
&lt;li&gt;브랜치를 이용하여 기본 버전 관리 틀에 영향을 주지않으면서 다양항 형태의 테스팅 가능&lt;/li&gt;
&lt;li&gt;파일의 변화를 스냅샷으로 저장하고 이전 스냅샷의 포인터를 가져 버전의 흐름 파악 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;명령어&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;add&lt;/code&gt; : 작업 내역을 스테이징 영역에 추가하여 버전 관리 대상으로 지정&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;commit&lt;/code&gt; : 작업 내역을 지역 저장소에 저장&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;branch&lt;/code&gt;: 새로운 브런치 생성 / 삭제&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;checkout&lt;/code&gt;: 지정한 브런치로 이동&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt;: 두 브랜치 병합&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;init&lt;/code&gt; : 지역 저장소 생성&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;remote add&lt;/code&gt; : 원격 저장소에 연결&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;push&lt;/code&gt; : 로컬 저장소의 변경 내용을 원격 저장소에 반영&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fetch&lt;/code&gt; : 원격 저장소의 변경 이력만 지역 저장소에 반영&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;clone&lt;/code&gt;: 원격 저장소의 전체 내용을 지역 저장소로 복제&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;fork&lt;/code&gt;: 지정한 원격 저장소의 내용을 자신의 원격 저장소로 복제&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;빌드-자동화-도구&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C-%EC%9E%90%EB%8F%99%ED%99%94-%EB%8F%84%EA%B5%AC&quot; aria-label=&quot;빌드 자동화 도구 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌드 자동화 도구&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;빌드 자동화 도구의 개념&lt;/h5&gt;
&lt;p&gt;소스 코드를 컴파일한 후 여러 개의 모듈로 묶어 실행 파일로 만드는 과정을 포함하여 테스트 및 배포를 자동화하는 도구&lt;/p&gt;
&lt;h5&gt;Jenkins&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Java 기반의 오픈소스&lt;/li&gt;
&lt;li&gt;서블릿 컨테이너에서 실행되는 서버 기반 도구&lt;/li&gt;
&lt;li&gt;형상 관리 도구와 연동 가능&lt;/li&gt;
&lt;li&gt;Web GUI 제공으로 사용이 쉬움&lt;/li&gt;
&lt;li&gt;여러 대의 컴퓨터를 이용한 분산 빌드나 테스트 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Gradle&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Groovy를 기반으로 한 오픈 소스 형태의 자동화 도구&lt;/li&gt;
&lt;li&gt;안드로이드 앱 개발 환경에 사용&lt;/li&gt;
&lt;li&gt;Java, C/C++, Python 등의 언어도 빌드 가능&lt;/li&gt;
&lt;li&gt;Groovy를 사용해서 만든 DSL을 스크립트 언어로 사용&lt;/li&gt;
&lt;li&gt;실행할 처리 명령들을 모아 태스크로 만든 후 태스크 단위로 실행&lt;/li&gt;
&lt;li&gt;이전의 태스크를 재사용하거나 다른 시스템의 태스크를 공유하여 빌드의 속도를 향상시킬 수 있음&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(2)-소프트웨어 개발(1)/</guid><pubDate>Sat, 01 Feb 2020 05:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정보처리기사 공부 후 정리 자료입니다. 정확하지 않을 수 있으니 꼭 책을 참고해서 공부하세요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;h1 id=&quot;1-데이터-입출력-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;1 데이터 입출력 구현 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 데이터 입출력 구현&lt;/h1&gt;
&lt;h3 id=&quot;자료구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;자료구조 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자료구조&lt;/h3&gt;
&lt;p&gt;프로그램에서 사용하기 위한 자료를 기억장치의 공간 내에 저장하는 방법과 자료 간의 관계, 처리 방법 등을 저장공간의 효율성 및 실행 간의 신속성을 높이기 위한 연구 분석하는 것&lt;/p&gt;
&lt;h5&gt;자료 구조의 분류&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;배열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동일한 자료형의 데이터들이 같은 크기로 나열되어 순서를 갖고 있는 집합&lt;/li&gt;
&lt;li&gt;첨자를 이용하여 데이터에 접근&lt;/li&gt;
&lt;li&gt;첨자의 개수에 따라 n차원 배열이라 부름&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선형 리스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일정한 순서에 의해 나열된 자료 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연속 리스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열을 이용한 선형 리스트&lt;/li&gt;
&lt;li&gt;중간에 데이터를 삽입하기 위해 연속된 빈 공간이 있어야 하며 삽입, 삭제 시 자료의 이동 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연결 리스트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자료 항목의 순서에 따라 노드의 포인터 부분을 이용하여 서로 연결시킨 자료 구조&lt;/li&gt;
&lt;li&gt;연결을 위한 포인터를 찾는 시간이 필요해 접근 속도가 느림&lt;/li&gt;
&lt;li&gt;노드의 삽입 삭제 작업이 용이&lt;/li&gt;
&lt;li&gt;노드 부분 때문에 연속 리스트에 비해 기억 공간의 효율이 좋지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bJe01h/btqDof0wQtR/JIiMXyTZaPqHiFlWg6WIX1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스택&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트의 한쪽으로 자료의 삽입, 삭제가 이루어짐&lt;/li&gt;
&lt;li&gt;LIFO(Last In First Out)의 구조를 가지고 있음&lt;/li&gt;
&lt;li&gt;오버플로우(overflow) : 기억 공간이 모두 차있는 상태에서 데이터를 삽입하면 일어나는 현상&lt;/li&gt;
&lt;li&gt;언더플로우(underflow) : 기억 공간이 비어있는 상태에서 데이터를 삭제하면 일어나는 현상&lt;/li&gt;
&lt;li&gt;Top : 스택에 가장 마지막으로 삽입된 자료의 위치&lt;/li&gt;
&lt;li&gt;Bottom : 스택의 가장 바닥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dkXkWm/btqDnxUYnEx/nkXn1U4BiyEZh2zTxGX0ok/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;큐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트의 한쪽에서는 삽입 다른 한쪽에서는 삭제가 이루어짐&lt;/li&gt;
&lt;li&gt;FIFO(First In First Out)의 구조를 가지고 있음&lt;/li&gt;
&lt;li&gt;F(Front) : 먼저 삽입된 자료의 기억 공간을 가르키는 포인터&lt;/li&gt;
&lt;li&gt;R(Rear) : 마지막에 삽입된 자료의 기억 공간을 가르키는 포인터&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/4VVz3/btqDohRDIg5/8UBtRrUDmGOyakrIZqcoz1/img.png&quot; alt=&quot;img&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;트리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;노드와 가지를 이용하여 사이클이 없이 구성한 그래프의 특수 형태&lt;/li&gt;
&lt;li&gt;디그리 : 노드에서 뻗어나온 가지의 개수&lt;/li&gt;
&lt;li&gt;단말노드 / 잎 노드 : 자식이 없는 노드&lt;/li&gt;
&lt;li&gt;트리의 디그리 : 노드들의 디그리 중 가장 많은 수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터저장소--데이터베이스--dbms&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%A0%80%EC%9E%A5%EC%86%8C--%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4--dbms&quot; aria-label=&quot;데이터저장소  데이터베이스  dbms permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터저장소 / 데이터베이스 / DBMS&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;데이터저장소의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 개발 과정에서 다루어야 할 데이터들을 논리적인 구조로 조직화하거나 물리적인 공간에 구현한 것&lt;/li&gt;
&lt;li&gt;논리 데이터저장소는 데이터 및 데이터 간의 연간성, 제약 조건을 식별하여 논리적인 구조로 조직화한 것&lt;/li&gt;
&lt;li&gt;물리 데이터저장소는 논리 데이터저장소에 저장된 데이터와 구조들을 하드웨어적인 저장장치에 저장한 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;데이터베이스의 정의 (통합, 저장, 운영, 공용)&lt;/h5&gt;
&lt;p&gt;특정 조직의 업무를 수행하는데 필요한 데이터들의 모임&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;통합된 데이터&lt;/code&gt; : 자료의 중복을 최소화&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;저장된 데이터&lt;/code&gt;: 컴퓨터가 접근할 수 있는 저장 매체에 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영 데이터 : 조직의 고유한 업무를 수행하는데 필요&lt;/li&gt;
&lt;li&gt;공용 데이터 : 여러 시스템이 공동으로 소유하고 유지함&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;DBMS(DataBase Management System)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해주고 데이터베이스를 관리하는 소프트웨어&lt;/li&gt;
&lt;li&gt;기존의 파일 시스템이 가지는 데이터의 종속성과 종복성 문제를 해결하기 위해 제안된 시스템&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DBMS의 기능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;정의 기능&lt;/code&gt; : 데이터베이스에 저장될 데이터의 타입과 구조에 대해 명시하는 기능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;조작 기능&lt;/code&gt; : 데이터를 검색, 갱신, 삽입, 삭제 등 처리하기 위해 사용자와 데이터베이스 간 인터페이스 수단을 제공하는 기능&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어 기능&lt;/code&gt; : 데이터의 무결성이 유지되도록 제어 , 사용자에게 허가된 데이터만 접근하도록 보안을 유지하고 권한을 검사&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여러 사용자가 동시에 접근하여 데이터를 처리할 때 정확성을 유지하도록 병행 제어&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;DBMS의 장단점&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 독립성, 일관성, 무결성 유지&lt;/li&gt;
&lt;li&gt;보안 유지&lt;/li&gt;
&lt;li&gt;데이터 실시간 처리, 통합 관리, 표준화 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전문가 부족&lt;/li&gt;
&lt;li&gt;전산화 비용 증가&lt;/li&gt;
&lt;li&gt;파일의 백업과 회복이 어려움&lt;/li&gt;
&lt;li&gt;시스템이 복잡함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;데이터 입출력 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 입출력&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;데이터 입출력의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어의 기능을 구현하기 위해 데이터베이스에 데이터를 입력, 출력하는 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;SQL&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;국제 표준 데이터베이스 언어&lt;/li&gt;
&lt;li&gt;데이터 정의어, 조작어, 제어어로 구분됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;데이터 접속(Data Mapping)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 코드와 데이터베이스의 데이터를 연결하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;트랜잭션&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 수행돼야 할 일련의 연산&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCL(Transaction Control Language) : 트랜잭션을 제어하기 위해 사용되는 명령어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COMMIT : 트랜잭션 처리가 비정상적으로 종료되어 트랜잭션이 수행한 변경 내용을 데이터베이스에 반영&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROLLBACK : 트랜잭션 처리가 비정상적으로 종료되어 데이터베이스의 일관성이 깨졌을 때 트랜잭션이 행한 모든 변경 작업을 취소하고 이전 상태로 되돌림&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SAVEPOINT(CHECKPOINT) : 트랜잭션 내에 ROLLBACK 할 위치인 저장점을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;절차형-sql&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%88%EC%B0%A8%ED%98%95-sql&quot; aria-label=&quot;절차형 sql permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;절차형 SQL&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;절차형 SQL의 개요&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍 언어와 같이 연속적인 실행이나 분기, 반복 등의 제어가 가능한 SQL&lt;/li&gt;
&lt;li&gt;단일 SQL문장으로 처리가 어려운 연속적인 작업을 처리하는데 적합&lt;/li&gt;
&lt;li&gt;BEGIN ~ END 형식의 블록 구조로 되어 있어 기능별 모듈화가 가능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(3)/</guid><pubDate>Fri, 03 Jan 2020 05:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;3-sql-응용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3-sql-%EC%9D%91%EC%9A%A9&quot; aria-label=&quot;3 sql 응용 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. SQL 응용&lt;/h1&gt;
&lt;h2 id=&quot;sql-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sql-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;sql 개념 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL 개념&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;국제 표준 데이터베이스 언어이며 많은 관계형 데이터베이스(RDB)를 지원하는 언어로 채택&lt;/p&gt;
&lt;h4&gt;SQL의 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DDL(Data Define Language, 데이터 정의어): 스키마, 도메인, 테이블, 뷰, 인덱스를 정의, 변경, 삭제할 때 사용하는 언어&lt;/p&gt;
&lt;p&gt;CREATE : 스키마, 도메인, 테이블, 뷰, 인덱스를 정의&lt;/p&gt;
&lt;p&gt;ALTER : 테이블에 대한 정의를 변경&lt;/p&gt;
&lt;p&gt;DELETE : 스키마, 도메인, 테이블, 뷰, 인덱스를 삭제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DML(Data Manipulation Language, 데이터 조작어) : 사용자가 저장된 데이터를 실질적으로 처리하는 데 사용&lt;/p&gt;
&lt;p&gt;SELECT : 테이블에서 조건에 맞는 튜플 검색&lt;/p&gt;
&lt;p&gt;INSERT : 테이블에 새로운 튜플 삽입&lt;/p&gt;
&lt;p&gt;DELETE : 테이블에서 조건에 맞는 튜플 삭제&lt;/p&gt;
&lt;p&gt;UPDATE : 테이블에서 조건에 맞는 튜플의 내용 변경&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DCL(Data Control Language, 데이터 제어어) : 데이터의 보안, 무결성, 회복, 병행 수행 제어 등을 정의하는 데 사용하는 언어&lt;/p&gt;
&lt;p&gt;COMMIT : 명령에 의해 수행된 결과를 실제 물리적 디스크로 저장하고 데이터베이스 조작 작업이 정상적으로 완료되었음을 알려줌&lt;/p&gt;
&lt;p&gt;ROLLBACK : 데이터베이스 조작 작업이 비정상적으로 종료되었을 때 원래의 상태로 복구&lt;/p&gt;
&lt;p&gt;GRANT : 데이터베이스 사용자에게 사용 권한을 부여&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ddl&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ddl&quot; aria-label=&quot;ddl permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DDL&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;DDL(데이터 정의어)는 DB 구조, 데이터 형식, 접근 방식 등 DB를 구축하거나 수정할 목적으로 사용하는 언어&lt;/p&gt;
&lt;h4&gt;CREATE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CREATE SCHEM : 스키마(데이터베이스 구조와 제약 조건에 관한 전반적인 명세를 기술한 것)를 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE SCHEMA 스키마명 AUTHORIZATION 사용자_id;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE SCHEMA 성적 AUTHORIZATION 김이박;
소유권자의 사용자 ID가 &amp;#39;김이박&amp;#39;이고 스키마 &amp;#39;성적&amp;#39;을 정의하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;CREATE DOMAIN : 도메인을 정의(대괄호는 생략 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE DOMAIN 도메인명 [AS] 데이터_타입
	[DEFAULT 기본값]
	[CONSTRAINT 제약조견명 CHECK (범위값)];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE DOMAIN [AS] CHAR(1)
	DEFAULT &amp;#39;남&amp;#39;
    CONSTRAINT VALID-GENDER CHECK(VALUE IN(&amp;#39;남&amp;#39;,&amp;#39;여&amp;#39;);
성별을 &amp;#39;남&amp;#39; 또는 &amp;#39;여&amp;#39;와 같이 정해진 1개 문자로 표현되는 도메인 GENDER를 정의하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;CREATE TABLE : 테이블을 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE TABLE 테이블명
    (속성명 데이터_타입 [DEFAULT 기본값][NOT NULL], ...
    [, PRIMARAY KEY(기본키_속성명), ...)]
    [, UNIQUE(대체키_속성명), ...)]
    [, FOREIGN KEY(외래키_속성명, ...)]
    	REFERENCES 참조테이블(기본키_속성명, ...)]
        [ON DELETE 옵션]
        [ON UPDATE 옵션]
    [, CONSTRAINT 제약조건명][CHECK (조건식)]);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;‘이름’, ‘학번’, ‘전공’, ‘성별’, ‘생년월일’로 구성된 학생 테이블을 정의하는 SQL문&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제약조건&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘이름’은 NULL 일 수 없음&lt;/li&gt;
&lt;li&gt;‘학번’은 기본키&lt;/li&gt;
&lt;li&gt;‘전공’은 학과 테이블의 ‘학과 코드’를 참조하는 외래키로 사용&lt;/li&gt;
&lt;li&gt;학과 테이블에서 삭제가 일어나면 관련된 튜플들의 전공 값을 NULL로 만듦&lt;/li&gt;
&lt;li&gt;학과 테이블에서 ‘학과 코드’가 변경되면 전공 값도 같은 값으로 변경&lt;/li&gt;
&lt;li&gt;‘생년월일’은 1980-01-01 이후의 데이터&lt;/li&gt;
&lt;li&gt;제약 조건의 이름은 ‘생년월일 제약’&lt;/li&gt;
&lt;li&gt;각 속성의 데이터 타입은 적당하게 지정&lt;/li&gt;
&lt;li&gt;‘성별’은 도메인 GENDER 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE TABLE 학생
    (이름 VARCHAR(15) NOT NULL,
    학번 CHAR(8)
    전공 CHAR(5)
    성별 GENDER
    생년월일 DATE
    PRIMARY KEY(학번)
    FOREIGN KEY(전공) REFERENCES 학과(학과코드)
    	ON DELETE SET NULL
        ON UPDATE CASCADE
    CONSTRAINT 생년월일제약 CHECK(생년월일*=&amp;#39;1980-01-01&amp;#39;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CREATE VIEW&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;뷰(하나 이상의 기본 테이블로부터 유도되는 이름을 갖는 가상 테이블)를 정의&lt;/li&gt;
&lt;li&gt;SELECT문의 결과로써 뷰를 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE VIEW 뷰명[(속성명[, 속성명, ...])]
AS SELECT문;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;고객 테이블에서 ‘주소’가 ‘포천시’인 고객들의 ‘이름’과 ‘전화번호’를 ‘포천 고객’이라는 뷰로 정의하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE VIEW 포천고객(이름, 전화번호)
AS SELECT 이름,전화번호
FROM 고객
WHERE 주소 = &amp;#39;포천시&amp;#39;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CREATE INDEX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인덱스(검색 시간을 단축시키기 위해 만든 보조적인 데이터 구조)를 정의&lt;/li&gt;
&lt;li&gt;ASC : 오름차순 정렬, 생략 시 기본 값 / DESC : 내림차순 정렬&lt;/li&gt;
&lt;li&gt;CLUSTER : 사용 시 인덱스를 클러스터드 인덱스로 지정&lt;/li&gt;
&lt;li&gt;클러스터드 인덱스 : 인덱스 키의 순서에 따라 데이터가 정렬되어 저장되는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE [UNIQUE] INDEX 인덱스명
ON 테이블명(속성명 [ASC|DESC][,속성명 [ASC|DESC]])
[CLUSTER];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;고객 테이블에서 UNIQUE 한 특성을 갖는 ‘고객번호’속성에 대해 내림차순으로 정렬하여 ‘고객번호_idx’라는 이름으로 인덱스를 정의하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE UNIQUE INDEX 고객번호_idx
ON 고객(고객번호 DESC);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;ALTER&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ALTER TABLE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블에 대한 정의를 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ALTER TABLE 테이블명 ADD 속성명 데이터_타입 [DEFAULT &amp;#39;기본값&amp;#39;];
ALTER TABLE 테이블명 ALTER 속성명 [SET DEFAULT &amp;#39;기본값&amp;#39;];
ALTER TABLE 테이블명 DROP COLUMN 속성명 [CASCADE];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;학생 테이블에 최대 3 문자로 구성되는 ‘학년’ 속성을 추가하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ALTER TABLE 학생 ADD 학년 VARCHAR(3);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;학생 테이블의 학년 필드의 데이터 타입과 크기를 최대 10글자로 하고 NULL값이 입력되지 않게 하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ALTER TABLE 학생 ALTER 학년 VARCHAR(10) NOT NULL;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;DROP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;스키마, 도메인, 기본 테이블, 튜 테이블, 인덱스, 제약 조건 등을 제거하는 명령문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP SCHEMA 스키마명 [CASCADE | RESTRICTED];
DROP DOMAIN 도메인명 [CASCADE | RESTRICTED];
DROP TABLE 테이블명 [CASCADE | RESTRICTED];
DROP VIEW 뷰명 [CASCADE | RESTRICTED];
DROP INDEX 인덱스명 [CASCADE | RESTRICTED];
DROP CONSTRAINT 제약조건명&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;CASCADE : 제거할 때 참조 관계에 있는 테이블의 데이터도 연쇄 삭제&lt;/li&gt;
&lt;li&gt;RESTRICTED : 제거할 때 참조하고 있는 테이블이 있다면 삭제를 취소&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dcl&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dcl&quot; aria-label=&quot;dcl permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DCL&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;DCL(데이터 제어어)는 데이터의 보안, 무결성, 회복, 병행 제어 등을 정의하는 데 사용하는 언어&lt;/p&gt;
&lt;h4&gt;GRANT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 관리자가 사용자에게 권한 부여&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;REVOKE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 관리자가 사용자에게 권한 취소&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;COMMIT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이 성공적으로 끝난 후 변경된 내용을 데이터베이스에 반영&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ROLLBACK&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;COMMIT 되지 않은 변경된 내용을 취소하고 데이터베이스를 이전 상태로 되돌리는 명령&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SAVEPOINT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션 내에 ROLLBACK 할 위치인 저장점을 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dml&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dml&quot; aria-label=&quot;dml permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DML&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;DML의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DML(데이터 조작어)는 데이터베이스 사용자가 응용 프로그램이나 질의어를 통해 저장된 데이터를 관리하는 데 사용하는 언어&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;INSERT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블에 새로운 튜플을 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;INSERT INTO 테이블명([속성명1, 속성명2, ...])
VALUES (데이터1, 데이터2, ...)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에 (이름 - 김이박, 부서 - 개발)을 삽입하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;INSERT INTO 사원(이름, 부서) VALUE(김이박, 개발);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에 있는 개발의 모든 튜플을 개발 부원(이름, 생일) 테이블에 삽입하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;INSERT INTO 개발부원(이름, 주소)
SELECT 이름, 주소
FROM 사원
WHERE 부서 = &amp;quot;개발&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;DELETE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 튜플 중 특정 튜플을 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DELETE
FROM 테이블명
[WHERE 조건]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 부서가 개발인 튜플을 삭제하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DELETE FROM 사원 WHERE 부서 = &amp;quot;개발&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;UPDATE&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 튜플 중 특정 튜플의 내용을 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;UPDATE 테이블명
SET 속성명 = 데이터[, 속성명=데이터, ...]
[WHERE 조건];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;사원 테이블에서 김이박의 부서를 IT로 변경하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;UPDATE 사원
SET 부서 = &amp;quot;IT&amp;quot;
WHERE 이름 = &amp;quot;김이박&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;SELECT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블에서 튜플을 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT [PREDICATE] [테이블명.]속성명 [AS 별칭][, [테이블명.]속성명, ...]
FROM 테이블명[, 테이블명, ...]
[, WINDOW 함수 OVER (PARTITION BY 속성명1, 속성명2, ... ORDER BY 속성명3, 속성명4, ...) [AS 별칭]]
[WHERE 조건]
[GROUP BY 속성명, 속섬영, ..]
[HAVING 조건]
[ORDER BY 속성명 [ASC | DESC]];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ORDER BY : 특정 속성을 기준으로 정렬하여 검색&lt;/p&gt;
&lt;p&gt;ASC : 오름차순&lt;/p&gt;
&lt;p&gt;DESC : 내림차순&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WINDOW 함수 : GROUP BY 절을 이용하지 않고 속성의 값을 집계할 함수를 기술&lt;/p&gt;
&lt;p&gt;PARTITION BY : WINDOW 함수가 적용될 범위로 사용할 속성을 지정&lt;/p&gt;
&lt;p&gt;ORDER BY : PARTITION 안에서 정렬 기준으로 사용할 속성을 지정&lt;/p&gt;
&lt;p&gt;ROW_NUMBER() : 각 레코드에 대한 일련번호 반환&lt;/p&gt;
&lt;p&gt;RANK() : 순위를 반환하되 공동 순위를 반영&lt;/p&gt;
&lt;p&gt;DENSE_RANK() : 순위를 반환하되 공동 순위를 반영하지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GROUP BY : 특정 속성을 기준으로 그룹화하여 검색할 때 사용. 그룹 함수와 같이 사용&lt;/p&gt;
&lt;p&gt;COUNT(속성명) : 그룹별 튜플 수를 구하는 함수&lt;/p&gt;
&lt;p&gt;SUM(속성명) : 그룹별 합계를 구하는 함수&lt;/p&gt;
&lt;p&gt;AVG(속성명) : 그룹별 평균을 구하는 함수&lt;/p&gt;
&lt;p&gt;MAX(속성명) : 그룹별 최대값을 구하는 함수&lt;/p&gt;
&lt;p&gt;MIN(속성명) : 그룹별 최소값을 구하는 함수&lt;/p&gt;
&lt;p&gt;ROLLUP(속성명, 속성명, …) : 인수로 주어진 속성을 대상으로 그룹별 소계를 구하는 함수&lt;/p&gt;
&lt;p&gt;CUBE(속성명, 속성명, …) : 인수로 주어진 속성을 대상으로 모든 조합의 그룹별 소계를 구함&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;HAVING : GROUP BY와 함께 사용하여 그룹에 조건을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SELECT 예제&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/1E1NK/btqCcBRRfmo/XD0DZV4tJEJVgBy8ACxF8K/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본 검색 : 사원 테이블에 있는 모든 튜플을 검색하는 SQL문&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELETE * FROM 사원;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bLSbZ6/btqCcVvR4ry/7HeIVmgUxEjkvy9I92v481/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT DISTINCT 부서 FROM 사원;
사원 테이블에서 부서를 중복없이 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bG0ynK/btqCcCiZufW/JqyR0s4W9K7jAZgrGjeTY1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건 지정 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM 사원 WHERE 부서 = &amp;quot;개발&amp;quot;;
사원 테이블에서 부서가 개발인 튜플을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/PsTAx/btqCevJZ4p1/UYkBUTlWWRAfIIflVRg8Sk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM 사원 WHERE 부서 = &amp;quot;개발&amp;quot; OR 부서 = &amp;quot;IT&amp;quot;;
SELECT * FROM 사원 WHERE 부서 IN(&amp;quot;개발&amp;quot;,&amp;quot;IT&amp;quot;);
사원 테이블에서 부서가 개발 혹은 IT인 튜플을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bS079d/btqCcBYKMA5/8Ze1MmcXQhKKuriZYoZEQ0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM 사원 WHERE 이름 LIKE &amp;quot;김%&amp;quot;;
사원 테이블에서 성이 김인 튜플을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/rpbge/btqCcUX4XdU/zswQIP3KHbcQRADBUknxh0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM 사원 WHERE 부서 IS NULL;
사원 테이블에서 부서가 NULL인 튜플을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/nvIyD/btqCgRewrdi/1v1qHuykYWhEdS6qFePH8K/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정렬 검색 : ORDER BY를 이용한 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT * FROM 사원 ORDER BY 이름 ASC;
사원 테이블에서 이름을 오름차순으로 정렬하여 튜플을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dKNwfJ/btqCdh6xBN4/qXJDsvkvp8Y1GGNSL5adkk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하위 질의 : 조건절에 다시 SELECT문을 넣어 그 결과를 조건으로 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT 이름 FROM 사원 WHERE 이름 = (SELECT 이름 FROM 취미 WHERE 취미활동 = &amp;quot;축구&amp;quot;);
취미 테이블에서 취미활동이 축구인 사원 이름의 튜플을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cfdW9Y/btqCe30MC0G/M6mKZ1nqvCpNUVV4wAqP20/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복수 테이블 : 여러 테이블을 대상으로 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT 사원.이름, 사원.부서
FROM 사원, 취미
WHERE 사원.경력 *= 10 AND 사원.이름 = 취미.이름;
경력이 10년 이상인 사원의 이름, 부서, 취미활동을 검색하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/boWh8o/btqCd1CnEgM/w0pfFPJl0A8aGqhIzJKjdK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;SELECT 예제 2&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/wHR7r/btqCeuEhuZz/XFRpIe2TAvBXfbgBLYiix1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WINDOW 함수 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT 부서, 경력
    ROW_NUMBER() OVER (PARTITION BY 부서 ORDER BY 경력 DESC) AS 짬순
FROM 사원;
사원 테이블에서 부서 별로 경력에 대한 일련번호를 구하여 짬순이라는 이름을 붙이는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bDzv2a/btqCgnSemIS/z1qFgOzdE1fkMpcwgsuSkK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GROUP BY : 그룹 지정 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT 부서, AVG(경력) AS 평균
FROM 사원
GROUP BY 부서;
사원 테이블에서 부서별 경력의 평균을 구하는 SQL문&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cKHnAP/btqCgSqWxVR/FykcN2yB4opD46BsQ0Bk41/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;집합 연산자를 이용한 통합 질의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT 속성명1, 속성명2, ...
FROM 테이블명
UNION | UNION ALL | INTERSECT | EXCEPT
SELECT 속성명1, 속성명2, ...
FROM 테이블명
[ORDER BY 속성명 [ASC | DESC]];&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;UNION : 두 SELECT 문의 결과를 통합하고 중복된 행은 한 번만 출력&lt;/li&gt;
&lt;li&gt;UNION ALL : 두 SELECT 문의 결과를 통합하고 중복된 행도 그대로 출력&lt;/li&gt;
&lt;li&gt;INTERSECT : 두 SELECT 문의 결과 중 공통된 행만 출력&lt;/li&gt;
&lt;li&gt;EXCEPT : 첫번째 SELECT 문의 결과에서 두 번째 SELECT 문의 결과를 제외한 행을 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-sql-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4-sql-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;4 sql 활용 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. SQL 활용&lt;/h1&gt;
&lt;h2 id=&quot;프로시저&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%8B%9C%EC%A0%80&quot; aria-label=&quot;프로시저 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로시저&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;프로시저의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;절차형 SQL을 활용하여 특정 기능을 수행하는 일종의 트랜잭션 언어&lt;/li&gt;
&lt;li&gt;호출을 통해 실행되어 미리 저장해놓은 SQL 작업 수행&lt;/li&gt;
&lt;li&gt;여러 프로그램에서 호출하여 사용 가능&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장되어 수행되기 때문에 스토어드 프로시저라고도 함&lt;/li&gt;
&lt;li&gt;시스템의 일일 마감 작업, 일괄 작업 등에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;프로시저의 구성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/b3mXZa/btqCsHcsZK3/cYrQt6mv8KyuAEz9ayide0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DECLARE : 프로시저의 명칭, 변수, 인수, 데이터 타입을 정의하는 선언부&lt;/li&gt;
&lt;li&gt;BEGIN / END : 프로시저의 시작과 종료를 의미&lt;/li&gt;
&lt;li&gt;CONTROL : 조건문 또는 반복문이 삽입되어 순차적으로 처리&lt;/li&gt;
&lt;li&gt;SQL : DML, DCL이 삽입되어 데이터 관리를 위한 작업(조회, 추가, 수정, 삭제) 수행&lt;/li&gt;
&lt;li&gt;EXCPETION : BEGIN ~ END 안의 구문 실행 시 예외 처리&lt;/li&gt;
&lt;li&gt;TRANSACTION : 수행된 데이터 작업들을 DB에 저장할지 취소할지 결정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;프로시저 생성&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE [OR REPLACE] PROCEDURE 프로시저명(파라미터)
[지역번수 선언]
BEGIN
    프로시저 BODY;
END;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;OR REPLACE : 동일한 프로시저 이름이 이미 존재하는 경우 기존의 프로시저를 대체&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파라미터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IN : 호출 프로그램이 프로시저에게 값을 전달할 때 사용&lt;/li&gt;
&lt;li&gt;OUT : 프로시저가 호출 프로그램에게 값을 전달할 때 사용&lt;/li&gt;
&lt;li&gt;INOUT : 호출 프로그램이 프로시저에게 값을 전달하고, 프로시저 실행 후 호출 프로그램에게 값을 반환할 때 지정&lt;/li&gt;
&lt;li&gt;매개변수명 : 호출 프로그램으로부터 전달받은 값을 저장할 변수의 이름을 지정&lt;/li&gt;
&lt;li&gt;자료형 : 변수의 자료형을 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로시저 BODY&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로시저의 코드를 기록&lt;/li&gt;
&lt;li&gt;BEGIN과 END 사이에 적어도 하나의 SQL 문이 존재해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사원번호를 입력받아 해당 사원의 지급방식을 S로 변경하는 프로시저&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE OR REPLACE PROCEDURE emp_change_s(i_사원번호 IN INT)
IS
BEGIN
    UPDATE 급여 SET 지급방식 = &amp;#39;S&amp;#39; WHERE 사원번호 = i_사원번호;
    EXCEPTION
        WHEN PROGRAM_ERROR THEN
            ROLLBACK;
    COMMIT;
END;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;프로시저 실행&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EXECUTE 프로시저명;
EXEC 프로시저명;
CALL 프로시저명;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위 3가지 명령어 중 하나를 사용&lt;/li&gt;
&lt;li&gt;위에 정의한 emp&lt;em&gt;change&lt;/em&gt;s 프로시저를 사원번호 32를 인수로 하여 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;EXECUTE emp_change_s(32);
EXEC emp_change_s(32);
CALL emp_change_s(32);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;프로시저 제거&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP PROCEDURE 프로시저명;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위에 정의한 emp&lt;em&gt;change&lt;/em&gt;s 프로시저를 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP PROCEDURE emp_change_s;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;트리거&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%A6%AC%EA%B1%B0&quot; aria-label=&quot;트리거 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트리거&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;트리거의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 시스템에서 데이터의 삽입 갱신 삭제 등의 이벤트가 발생할 때마다 관련 작업이 자동으로 수행되는 절차형 SQL&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장&lt;/li&gt;
&lt;li&gt;데이터 변경 및 무결성 유지 로그 메시지 출력 등의 목적으로 사용&lt;/li&gt;
&lt;li&gt;DCL을 사용할 수 없으며, DCL이 포함된 프로시저나 함수를 호출하는 경우에도 오류 발생&lt;/li&gt;
&lt;li&gt;트리거에 오류가 있는 경우 트리거가 처리하는 데이터에도 영향을 미침&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;트리거의 구성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/b1SOap/btqCtYSzWrt/IAtZiJtHTnx6QE4kcQwQhk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DECLARE : 트리거의 명칭, 변수 및 상수, 데이터 타입을 정의&lt;/li&gt;
&lt;li&gt;EVENT : 트리거가 실행되는 조건&lt;/li&gt;
&lt;li&gt;BEGIN / END : 트리거의 시작과 끝&lt;/li&gt;
&lt;li&gt;CONTROL : 조건문 또는 반복문이 삽입되어 순차적으로 처리&lt;/li&gt;
&lt;li&gt;SQL : DML문이 삽입되어 데이터 관리를 위한 작업(조회, 추가, 수정, 삭제) 수행&lt;/li&gt;
&lt;li&gt;EXCEPTION : BEGIN ~ END 안의 구문에서 예외가 발생 시 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;트리거의 생성&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE [OR REPLACE] TRIGGER 트리거명 [동작시기 옵션][동작 옵션] ON 테이블명
REFERENCING [NEW | OLD] AS 테이블명
FOR EACH ROW
[WHEN 조건식]
BEGIN
    트리거 BODY;
END;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;동작 시기 옵션 : 트리거가 실행될 때를 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AFTER : 테이블이 변경된 후&lt;/li&gt;
&lt;li&gt;BEFORE : 테이블이 변경되기 전&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;동작 옵션 : 트리거가 실행되게 할 작업의 종류를 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INSERT : 새로운 튜플을 삽입할 때&lt;/li&gt;
&lt;li&gt;DELETE : 튜플을 삭제할 때&lt;/li&gt;
&lt;li&gt;UPDATE : 튜플을 수정할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NEW | OLD : 트리거가 적용될 테이블의 별칭을 지정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NEW : 추가되거나 수정에 참여할 튜플들의 집합(테이블)을 의미&lt;/li&gt;
&lt;li&gt;OLD : 수정되거나 삭제 전 대상이 되는 튜플들의 집합(테이블)을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FOR EACH ROW : 각 튜플마다 트리거를 적용한다는 의미&lt;/li&gt;
&lt;li&gt;WHEN 조건식 : 트리거를 적용할 튜플의 조건을 지정&lt;/li&gt;
&lt;li&gt;학생 테이블에 새로운 튜플이 삽입될 때 튜플에 학년 정보가 누락되었으면 학년 필드에 신입생을 치환하는 트리거를 학년 정보_tri라는 이름으로 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE TRIGGER 학생정보_tri BEFORE INSERT ON 학생
REFERENCING NEW AS new_table
FOR EACH ROW
WHEN (new_table.학년 IS NULL)
BEGIN
    :new_table.학년 := &amp;#39;신입생&amp;#39;;
END;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;트리거의 제거&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP TRIGGER 트리거명;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위에 정의한 학생정보_tri를 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP TRIGGER 학생정보_tri;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;사용자-정의-함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98&quot; aria-label=&quot;사용자 정의 함수 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 정의 함수&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;사용자 정의 함수의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로시저와 유사하게 SQL을 사용하여 일련의 작업을 연속적으로 처리하여 종료 시 처리 결과를 단일 값으로 반환하는 절차형 SQL&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장되어 DML문의 호출에 의해 실행&lt;/li&gt;
&lt;li&gt;예약어 RETURN을 통해 값이 반환되기 때문에 출력 파라미터가 없음&lt;/li&gt;
&lt;li&gt;테이블 조작은 할 수 없고 SELECT를 통해 검색만 할 수 있음&lt;/li&gt;
&lt;li&gt;프로시저를 호출하여 사용할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;사용자 정의 함수의 구성&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/PrIeI/btqCrPWdc3a/2xNz3k7BOigKWrbya5UeH1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로시저의 구성과 유사&lt;/li&gt;
&lt;li&gt;RETURN : 호출 프로그램에 반환할 값이나 변수를 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;사용자 정의 함수 생성&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE [OR REPLACE] FUNCTION 사용자 정의 함수명(파라미터)
[지역변수 선언]
BEGIN
    사용자 정의 함수 BODY;
    RETURN 반환;
END;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;프로시저와 유사하며 파라미터에의 구성요소는 IN, 매개변수명, 자료형이 있음&lt;/li&gt;
&lt;li&gt;RETURN 반환값 : 반환할 값이나 반환할 값이 저장된 변수를 호출 프로그램으로 돌려줌&lt;/li&gt;
&lt;li&gt;i&lt;em&gt;성별코드를 입력받아 1이면 남자, 2면 여자를 반환하는 사용자 정의 함수를 Get_S&lt;/em&gt;성별로 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;CREATE FUNCTION Get_S_성별(i_성별코드 IN INT)
RETURN VARCHAR2
IS
BEGIN
    IF (i_성별코드 = 1) THEN
        RETURN &amp;#39;남자&amp;#39;;
    ELSE
        RETURN &amp;#39;여자&amp;#39;;
    END IF;
END;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;사용자 정의 함수 실행&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;SELECT 사용자 정의 함수명 FROM 테이블명;
INSERT INTO 테이블명(속성명) VALUES (사용자 정의 함수명);
DELETE FROM 테이블명 WHERE 속성명 = 사용자 정의 함수명;
UPDATE 테이블명 SET 속성명 = 사용자 정의 함수명;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;사용자 정의 함수 제거&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP FUNCTION 사용자 정의 함수명;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위에 정의한 Get&lt;em&gt;S&lt;/em&gt;성별을 제거&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DROP FUNCTION Get_S_성별;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;dbms-접속-기술&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dbms-%EC%A0%91%EC%86%8D-%EA%B8%B0%EC%88%A0&quot; aria-label=&quot;dbms 접속 기술 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DBMS 접속 기술&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;DBMS 접속 기술의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자가 데이터를 접속하기 위해 응용 시스템을 이용하여 DBMS에 접근하는 것&lt;/li&gt;
&lt;li&gt;응용 시스템은 사용자로부터 매개 변수를 전달받아 SQL을 실행하고 DBMS로부터 전달받은 결과를 사용자에게 전달&lt;/li&gt;
&lt;li&gt;웹 응용프로그램은 웹 응용 시스템을 통해 DBMS에 접근&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;웹 응용 시스템은 웹 서버와 웹 애플리케이션 서버(WAS)로 구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 ↔ 웹 서버 ↔ WAS ↔ DBMS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;DBMS 접속 기술&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DBMS에 접근하기 위해 사용하는 API 또는 프레임워크를 의미&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API(Application Programming Interface) : 응용 프로그램 개발 시 운영 체제나 DBMS 등을 이용할 수 있도록 규칙 등에 대해 정의해 놓은 인터페이스&lt;/li&gt;
&lt;li&gt;프레임워크 : 소프트웨어에서는 특정 기능을 수행하기 위해 필요한 클래스나 인터페이스 등을 모아둔 집합체&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDBC(Java DataBase Connectivity)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 언어&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;썬 마이크로시스템에서 출시&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java SE에 포함되어 있고 JDBC 클래스는 java.sql, javax.sql에 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;접속하려는 DBMS에 대한 드라이버 필요&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ODBC(Open DataBase Connectivity)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발 언어와 상관 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;마이크로소프트에서 출시&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MS-Access, DBase, DB2, Excel, Text 등 다양한 데이터베이스에 접근 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MyBatis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDBC 코드를 단순화하여 사용할 수 있는 SQL Mapping 기반 오픈소스 접속 프레임워크&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL 문장을 분리하여 XML 파일을 만들고 Mapping을 통해 SQL을 실행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL을 거의 그대로 사용할 수 있어 국내 환경에 적합&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;동적 SQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발 언어에 삽입되는 SQL 코드를 문자열 변수에 넣어 처리하는 것&lt;/li&gt;
&lt;li&gt;조건에 따라 SQL 구문을 동적으로 변경하여 처리 가능&lt;/li&gt;
&lt;li&gt;NVL 함수를 사용할 필요가 없음&lt;/li&gt;
&lt;li&gt;응용 프로그램 수행 시 SQL이 변형될 수 있어 프리컴파일할 때 구문 분석, 접근 권한 확인 등을 할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sql-테스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sql-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;sql 테스트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SQL 테스트&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;SQL 테스트의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SQL이 작성 의도에 맞게 원하는 기능을 수행하는지 검증하는 과정&lt;/li&gt;
&lt;li&gt;단문 SQL은 코드를 직접 실행한 후 결과를 확인&lt;/li&gt;
&lt;li&gt;절차형 SQL은 테스트 전에 생성을 통해 구문 오류나 참조 오류의 존재 여부 확인&lt;/li&gt;
&lt;li&gt;정상적으로 생성된 절차형 SQL은 디버깅을 통해 로직을 검증하고 결과를 통해 최종 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;단문 SQL 테스트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DDL, DML, DCL이 포함되어 있는 SQL과 TCL을 직접 실행하여 테스트&lt;/li&gt;
&lt;li&gt;DESCRIBE 명령어를 이용하면 DDL로 작성된 테이블이나 뷰의 속성, 자료형, 옵션들을 확인할 수 있음&lt;/li&gt;
&lt;li&gt;DCL로 설정된 사용자 권한은 사용자 권한 정보가 저장된 테이블을 SELECT문으로 조회하거나 SHOW 명령어로 확인할 수 있음&lt;/li&gt;
&lt;li&gt;Oracle : SELECT * FROM DBA&lt;em&gt;ROLE&lt;/em&gt;PRIVES WHERE GRANTEE = 사용자;&lt;/li&gt;
&lt;li&gt;MySQL : SHOW GRANTS FOR 사용자@호스트;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;절차형 SQL 테스트&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프로시저, 사용자 정의 함수, 트리거 등의 절차형 SQL은 디버깅을 통해 기능의 적합성 여부 검증, 실행을 통해 결과를 확인하는 테스트를 수행&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SHOW 명령어를 통해 오류 내용을 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHOW ERRORS;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터베이스에 변화를 줄 수 있는 SQL문은 주석 처리 후 출력문을 이용하여 결과 확인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Oracle : DBMS&lt;em&gt;OUTPUT.ENABLE; / DBMS&lt;/em&gt;OUTPUT.PUT_LINE(데이터);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MySQL : SELECT 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;orm&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#orm&quot; aria-label=&quot;orm permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ORM&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;ORM(Object-Relational Mapping)의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;객체지향 프로그래밍의 객체와 관계형 데이터베이스의 데이터를 연결하는 기술&lt;/li&gt;
&lt;li&gt;객체지향 프로그래밍에서 사용할 수 있는 가상의 객체지향 데이터베이스를 만들어 프로그래밍 코드와 데이터 연결&lt;/li&gt;
&lt;li&gt;프로그래밍 코드 또는 데이터베이스와 독립적이므로 재사용 및 유지보수가 용이&lt;/li&gt;
&lt;li&gt;SQL 코드를 직접 사용하지 않기 때문에 직관적이고 간단하게 데이터 조작 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ORM 프레임워크&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ORM을 구현하기 위한 구조와 구현을 위해 필요한 여러 기능들을 제공하는 소프트웨어&lt;/li&gt;
&lt;li&gt;JAVA : JPA, Hibernate, EclipseLink, DataNucleus, Ebean 등&lt;/li&gt;
&lt;li&gt;C++ : ODB, QxOrm 등&lt;/li&gt;
&lt;li&gt;Python : Django, SQLAlchemy, Storm 등&lt;/li&gt;
&lt;li&gt;iOS : DatabaseObjects, Core Data 등&lt;/li&gt;
&lt;li&gt;.NET : NHibernate, DatabaseObjects, Dapper 등&lt;/li&gt;
&lt;li&gt;PHP : Doctrine, Propel, RedBean 등&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;ORM의 한계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;프레임워크가 자동으로 작성하기 때문에 의도대로 작성되었는지 확인할 필요가 있음&lt;/li&gt;
&lt;li&gt;객체지향적 사용을 고려, 설계한 데이터베이스가 아닌 경우 프로젝트가 크고 복잡할수록 ORM 기술을 적용하기 어려움&lt;/li&gt;
&lt;li&gt;기존의 기업들은 ORM 고려하지 않은 데이터베이스를 사용하고 있어 ORM에 적합하게 변환하려면 많은 시간과 노력이 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;쿼리-성능-최적화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BF%BC%EB%A6%AC-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94&quot; aria-label=&quot;쿼리 성능 최적화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쿼리 성능 최적화&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;쿼리 성능 최적화의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 입출력 애플리케이션의 성능 향상을 위해 SQL 코드를 최적화&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최적화 전 APM을 사용하여 최적화할 쿼리 선정&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APM(Application Performance Management/Monitoring) : 애플리케이션의 성능 관리를 위해 다양한 모니터링 기능을 제공하는 도구&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RBO(Rule Based Optimizer) : 규칙 기반 옵티마이저&lt;/li&gt;
&lt;li&gt;CBO(Cost Based Optimizer) : 비용 기반 옵티마이저&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/ckjOUW/btqCqMyPjBa/QrzfQlGSkvijENlO8ZQzZ1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 80%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;실행 계획&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DBMS의 옵티마이저가 수립한 SQL 코드의 실행 절차와 방법을 의미&lt;/li&gt;
&lt;li&gt;EXPLAIN 명령어를 통해 확인&lt;/li&gt;
&lt;li&gt;그래픽이나 텍스트로 표현&lt;/li&gt;
&lt;li&gt;요구사항을 처리하기 위한 연산 순서가 적혀있고 연산에는 조인, 테이블 검색, 필터, 정렬 등이 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;쿼리 성능 최적화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;실행 계획에 표시된 연산 순서, 조인 방식, 테이블 조회 방법 등을 참고하여 SQL문이 더 빠르고 효율적으로 작동하도록 코드와 인덱스를 재구성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL 코드 재구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WHERE 절을 추가하여 일부 레코드만 조회&lt;/li&gt;
&lt;li&gt;WHERE 절에 연산자 사용 자제&lt;/li&gt;
&lt;li&gt;특정 데이터 확인 시 IN보다 EXISTS 사용&lt;/li&gt;
&lt;li&gt;힌트를 활용하여 실행 계획의 액세스 경로 및 조인 순서 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인덱스 재구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL 코드에서 조회되는 속성과 조건들을 고려하여 인덱스 구성&lt;/li&gt;
&lt;li&gt;인덱스를 추가하거나 기존 인덱스의 열 순서 변경&lt;/li&gt;
&lt;li&gt;단일 인덱스로 쓰기나 수정 없이 읽기로만 사용되는 경우 IOT(Index-Organized Table)로 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(2)/</guid><pubDate>Thu, 02 Jan 2020 05:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;2-물리-데이터베이스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-%EB%AC%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;2 물리 데이터베이스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 물리 데이터베이스 설계&lt;/h1&gt;
&lt;h2 id=&quot;사전-조사-분석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%A0%84-%EC%A1%B0%EC%82%AC-%EB%B6%84%EC%84%9D&quot; aria-label=&quot;사전 조사 분석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사전 조사 분석&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;물리 데이터베이스 설계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;논리적 구조로 표현된 논리적 데이터베이스를 디스크 등의 물리적 저장장치에 저장할 수 있는 물리적 구조의 데이터로 변화하는 과정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;물리적 설계 단계에서 수행해야 할 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;저장 레코드의 양식 설계, 레코드 집중의 분석 및 설계, 접근 경로 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;물리적 설계 옵션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반응시간 : 트랜잭션 수행을 요구한 시점부터 처리 결과를 얻을 때까지의 경과 시간&lt;/li&gt;
&lt;li&gt;공간 활용도 : 데이터베이스 파일과 액세스 경로 구조에 의해 사용되는 저장공간의 양&lt;/li&gt;
&lt;li&gt;트랜잭션 처리량 : 단위시간 동안 데이터베이스 시스템에 의해 처리될 수 있는 트랜잭션의 평균 개수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 명명 규칙 파악&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;물리 데이터 모델에 적용해야하는 규칙&lt;/li&gt;
&lt;li&gt;데이터 표준화 및 논리 데이터베이스 설계의 결과물들을 통해 파악&lt;/li&gt;
&lt;li&gt;물리-논리 데이터베이스 설계 적용되는 명명규칙은 일관성 유지&lt;/li&gt;
&lt;li&gt;명명 규칙을 파악하기 위해선 도메인과 데이터 사전에 대한 지식 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 자원 파악&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 설치에 영향을 미칠 수 있는 물리적인 요소&lt;/li&gt;
&lt;li&gt;하드웨어 자원, 운영체제 및 DBMS의 버전, DMBS 파라미터 정보 등으로 구분&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 관리 요소 파악&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 운영과 관련된 관리요소&lt;/li&gt;
&lt;li&gt;데이터베이스 관리 요소를 파악한 후 이를 기반으로 시스템 조사 분석서를 작성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시스템 조사 분석서를 기반으로 다음과 같은 요소들을 파악&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 구조 : 데이터베이스 구조에 따라 문제 발생 시 대응 방법이 다름&lt;/li&gt;
&lt;li&gt;이중화 구성 : 문제 발생에 대비하여 동일한 데이터베이스를 복제하여 관리&lt;/li&gt;
&lt;li&gt;분산 데이터베이스 : 물리적인 피해에 데이터 유실을 최소화할 수 있고 장애로 인한 데이터 유실 복구에 효과적&lt;/li&gt;
&lt;li&gt;접근 제어 / 통제 : 접근 가능한 사용자의 권한 남용으로 인한 정보 유출 및 변조가 빈번하게 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DB암호화 : 데이터 암호화, 암호 키에 대한 인증 등을 통해 데이터 유출 시 데이터의 복호화를 어렵게 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터베이스-저장-공간-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A0%80%EC%9E%A5-%EA%B3%B5%EA%B0%84-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;데이터베이스 저장 공간 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 저장 공간 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스의 가장 기본적인 객체로써 행(Row)과 열(Column)으로 구성됨&lt;/li&gt;
&lt;li&gt;논리 설계 단계의 개체(Entity)에 대응하는 객체&lt;/li&gt;
&lt;li&gt;일반 테이블, 클러스터 인덱스 테이블, 파티셔닝 테이블, 외부 테이블, 임시 테이블&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;일반 테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;현재 사용되는 대부분의 DBMS(DataBase Management System)에서 표준 테이블로 사용되는 테이블&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/G9QrY/btqCgSFgXbM/BKbTHTqsG3rKPE54FuUbN1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;클러스터드 인덱스 테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기본키나 인덱스키의 순서에 따라 데이터가 저장되는 테이블&lt;/li&gt;
&lt;li&gt;일반적인 인덱스를 사용하는 테이블에 비해 접근 경로가 단축&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cE6yXQ/btqCiowTfuB/NxaeWspvpJtWqU6lcdk3s0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;파티셔닝 테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;대용량의 테이블을 작은 논리적인 단위인 파티션으로 나눈 테이블&lt;/li&gt;
&lt;li&gt;대용량의 데이터를 효과적으로 관리할 수 있지만 파티션 키를 잘못 구성하면 성능 저하 등 역효과를 초래할 수 있음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;방식에 따라 범위 분할, 해시 분할, 조합 분할 등으로 나뉨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;범위 분할 : 지정한 열의 값을 기준으로 분할&lt;/li&gt;
&lt;li&gt;해시 분할 : 해시 함수를 적용한 결과 값에 따라 데이터를 분할&lt;/li&gt;
&lt;li&gt;조합 분할 : 범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/npi3j/btqCdhzpT0L/BL2Oc8u1ALkaHpJ7uqDxPK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;외부 테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스에서 일반 테이블처럼 이용할 수 있는 외부 파일로 데이터베이스 내에 객체로 존재&lt;/li&gt;
&lt;li&gt;데이터 쉐어하우스, ETL(Extraction Transformation Loading, 추출 변환 적재) 등의 작업에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;임시 테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이나 세션별로 데이터를 저장하고 처리할 수 있는 테이블&lt;/li&gt;
&lt;li&gt;절차적인 처리를 위해 임시로 사용&lt;/li&gt;
&lt;li&gt;저장된 데이터는 트랜잭션이 종료되면 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;칼럼&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 열을 구성하는 요소로 데이터 타입과 길이 등으로 정의&lt;/li&gt;
&lt;li&gt;데이터 타입은 데이터의 일관성 유지를 위해 사용되는 가장 기본적인 것&lt;/li&gt;
&lt;li&gt;도메인을 정의한 경우 도메인에 따라 데이터의 타입과 길이가 정의&lt;/li&gt;
&lt;li&gt;두 칼럼을 비교하는 연산에서 두 칼럼의 데이터 타입이나 길이가 다르면 DBMS 내부적으로 데이터 타입 변화 후 비교 연산 수행&lt;/li&gt;
&lt;li&gt;참조 관계인 칼럼들은 데이터 타입과 길이가 일치해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;테이블스페이스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블이 저장되는 논리적인 영역으로 하나의 테이블스페이스에 하나 또는 그 이상의 테이블을 저장할 수 있음&lt;/li&gt;
&lt;li&gt;테이블을 저장하면 논리적으론 테이블스페이스에 물리적으론 연관된 데이터 파일에 저장됨&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테이블스페이스를 테이블, 테이블스페이스, 데이터 파일로 나눠 관리하면 논리적 구성이 물리적 구성에 종속되지 않아 투명성이 보장됨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;투명성 : 사실의 존재 여부를 염두에 두지 않아도 되는 성질&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장되는 내용에 따라 테이블, 인덱스, 임시 등의 용도로 구분하여 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;트랜잭션-및-crud-분석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EB%B0%8F-crud-%EB%B6%84%EC%84%9D&quot; aria-label=&quot;트랜잭션 및 crud 분석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 및 CRUD 분석&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;데이터베이스의 상태를 변환시키는 하나의 논리적인 기능을 수행하기 위한 작업 단위 또는 한꺼번에 수행되어야 할 일련의 연산들을 의미&lt;/p&gt;
&lt;p&gt;데이터베이스 시스템에서 병행 제어 및 회복 작업 시 처리되는 작업의 논리적인 단위&lt;/p&gt;
&lt;p&gt;사용자가 시스템에 대한 서비스 요구 시 시스템이 응답하기 위한 상태 변환 과정의 작업 단위&lt;/p&gt;
&lt;h4&gt;트랜잭션의 특성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;원자성(Atomicity)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스에 반영되도록 완전히 완료 아니면 전혀 반영되지 않도록 복구되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;어느 하나라도 오류가 발생하면 트랜잭션 전부가 취소되어야 함&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일관성(Consistency)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문법을 일괄적으로 맞춰야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트랜잭션을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템이 가지고 있는 고정 요소는 트랜잭션 수행 전과 후가 상태가 같아야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;독립성(Isolation)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 트랜잭션 연산 중에는 다른 트랜잭션이 관여하면 안 됨&lt;/li&gt;
&lt;li&gt;수행 중인 트랜잭션은 완전히 완료될 때까지 다른 트랜잭션에서 수행 결과를 참조할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지속성(Durability)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성공적으로 완료된 트랜잭션의 결과는 영구적으로 유지, 반영되어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;CRUD 분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스의 테이블에 변화를 주는 트랜잭션 연산 중 생성(Create), 읽기(Read), 갱신(Update), 삭제(Delete)의 연산에 대해 CRUD 매트릭스를 작성하여 분석하는 것&lt;/li&gt;
&lt;li&gt;테이블에 발생되는 트랜잭션의 주기별 발생 횟수를 파악하고 연관된 테이블들을 분석하면 테이블에 저장되는 데이터의 양을 유추할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;CRUD 매트릭스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2차원 표로 행에는 프로세스 열에는 테이블을 행과 열이 만나는 위치에는 프로세스가 테이블에 발생시키는 변화를 표시하는 업무 프로세스와 데이터 간 상관 분석표&lt;/li&gt;
&lt;li&gt;CRUD 매트릭스를 통해 프로세스의 트랜잭션이 테이블에 수행하는 작업을 검증&lt;/li&gt;
&lt;li&gt;CRUD 매트릭스의 각 셀에는 C, R, U, D가 들어가고 복수의 작업 시에는 우선순위는 C &gt;D &gt; U &gt; R를 적용&lt;/li&gt;
&lt;li&gt;CRUD 매트릭스가 완성되면 C, R, U, D 중 어느 것도 적히지 않는 행이나 열, C나 R이 없는 행을 확인하여 불필요하거나 누락된 테이블 또는 프로세스를 찾음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/rDa6p/btqCinx0CJT/k3CKsAsKJWN2Dpa28rUVv0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;트랜잭션 분석&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CRUD 매트릭스를 기반으로 테이블에 발생하는 트랜잭션 양을 분석하고 테이블에 저장되는 데이터의 양을 유추하고 이를 근거로 DB용량을 산정, DB 구조를 최적화하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;트랜잭션 분석서&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;단위 프로세스와 CRUD 매트릭스를 이용하여 작성&lt;/li&gt;
&lt;li&gt;구성 요소에는 단위 프로세스, CRUD 연산, 테이블 명, 칼럼명, 테이블 참조 횟수, 트랜잭션 수, 발생 주기 등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dI5d1M/btqCeuSETbH/u9smlvIDB2MRPQSqPVcppK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h2 id=&quot;인덱스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;인덱스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;인덱스의 개념&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 레코드를 빠르게 접근하기 위해 키값, 포인터 쌍으로 구성되는 데이터 구조&lt;/li&gt;
&lt;li&gt;책의 목차와 유사&lt;/li&gt;
&lt;li&gt;데이터가 저장된 물리적 구조와 밀접한 관계가 있음&lt;/li&gt;
&lt;li&gt;파일의 레코드에 대한 액세스를 빠르게 수행할 수 있음&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인덱스가 없으면 특정한 값을 찾기 위해 모든 데이터 페이지를 확인하는 TABLE SCAN이 발생&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TABLE SCAN : 데이터가 나올 때까지 모든 레코드를 순차적으로 읽는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레코드의 삽입과 삭제가 수시로 일어나는 경우에는 인덱스의 개수를 최소로 하는 것이 효율적&lt;/li&gt;
&lt;li&gt;클러스터드 인덱스 : 인덱스 키의 순서에 따라 데이터가 정렬되어 저장되는 방식&lt;/li&gt;
&lt;li&gt;넌클러스터드 인덱스 : 인덱스의 키 값만 정렬되어 있을 뿐 실제 데이터는 정렬되지 않는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bmbstJ/btqCjffJ9AL/tq3kDZ3ky1FAp9HeQZSp21/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;트리 기반 인덱스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인덱스를 저장하는 블록들이 트리 구조를 이루고 있는 것으로 상용 DBMS에서는 트리 구조 기반의 B+ 트리 인덱스를 주로 활용&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 트리 인덱스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 사용하는 인덱스 방식&lt;/li&gt;
&lt;li&gt;루트 노드에서 하위 노드로 키값의 크기를 비교하면서 데이터를 검색&lt;/li&gt;
&lt;li&gt;모든 리프 노드의 레벨은 같음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B+ 트리 인덱스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단말 노드가 아닌 노드로 구성된 인덱스 세트, 단말 노드로만 구성된 순차 세트로 구분&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인덱스 세트에 있는 노드들은 단말 노드에 있는 키 값을 찾아갈 수 있는 경로로만 제공&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순차 세트에 있는 단말 노드가 해당 데이터 레코드의 주소를 가리킴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인덱스 세트에 있는 모든 키 값이 단말 노드에 다시 나타나므로 단말 노드 만을 이용한 순차 처리 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;비트맵 인덱스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인덱스 칼럼의 데이터를 Bit 값인 0 또는 1로 변환하여 인덱스 키로 사용하는 방법&lt;/li&gt;
&lt;li&gt;키 값을 포함하는 로우(Row)의 주소를 제공&lt;/li&gt;
&lt;li&gt;데이터가 Bit로 구성되어 있어 효율적인 논리 연산이 가능하고 저장공간이 작음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;함수 기반 인덱스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;칼럼의 값 대신 칼럼의 특정 함수나 수식을 적용하여 산출된 값을 사용&lt;/li&gt;
&lt;li&gt;B+ 트리 인덱스 또는 비트맵 인덱스를 생성하여 사용&lt;/li&gt;
&lt;li&gt;데이터를 입력하거나 수정할 때 함수를 적용하기 때문에 부하가 발생할 수 있음&lt;/li&gt;
&lt;li&gt;사용자 정의 함수를 사용했을 경우 시스템 함수보다 부하가 더 크다&lt;/li&gt;
&lt;li&gt;대소문자, 띄어쓰기 등에 상관없이 조회할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;비트맵 조인 인덱스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;다수의 조인된 객체로 구성된 인덱스&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;도메인 인덱스&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개발자가 필요한 인덱스를 직접 만들어 사용하는 것으로 확장형 인덱스라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인덱스 설계 순서&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인덱스의 대상 테이블이나 칼럼 등을 선정 → 인덱스의 효율성을 검토하여 인덱스 최적화 수행 → 인덱스 정의서 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인덱스 테이블 선정 기준&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MULTI BLOCK READ 수에 따라 판단&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MULTI BLOCK READ : 테이블 액세스 시 메모리에 한 번에 읽어 들일 수 있는 블록의 수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;랜덤 액세스가 빈번한 테이블&lt;/li&gt;
&lt;li&gt;특정 범위나 특정 순서로 데이터 조회가 필요한 테이블&lt;/li&gt;
&lt;li&gt;다른 테이블과 순차적 조인이 발생되는 테이블&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인덱스 설계 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;새로 추가되는 인덱스는 기존 액세스 경로에 영향을 미칠 수 있음&lt;/li&gt;
&lt;li&gt;인덱스를 지나치게 만들면 오버헤드 발생&lt;/li&gt;
&lt;li&gt;넓은 범위를 인덱스로 처리하면 많은 오버헤드 발생&lt;/li&gt;
&lt;li&gt;인덱스를 만들면 추가적인 저장공간 필요&lt;/li&gt;
&lt;li&gt;인덱스와 테이블 데이터의 저장 공간이 분리되도록 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;뷰-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B7%B0-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;뷰 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뷰 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;뷰의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자에게 접근이 허용된 자료만을 제한적으로 보여주기 위해 하나 이상의 기본 테이블로부터 유도된 이름을 가지는 가상 테이블&lt;/li&gt;
&lt;li&gt;물리적으로 존재하지는 않지만 사용자에게는 있는 것처럼 간주됨&lt;/li&gt;
&lt;li&gt;데이터 보정 작업, 처리 과정 시험 등 임시적인 작업을 위한 용도로 활용&lt;/li&gt;
&lt;li&gt;조인문의 최소화로 사용자 편의성을 최대화함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/8DeDC/btqCe47C7yk/iYx2xC0dIfvx3ryKZnA8gk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;뷰의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기본 테이블과 같은 형태의 구조를 사용하고 조작도 기본 테이블과 거의 같음&lt;/li&gt;
&lt;li&gt;가상테이블이기 때문에 물리적으로 구현되어 있지 않음&lt;/li&gt;
&lt;li&gt;데이터의 논리적 독립성을 제공할 수 있음&lt;/li&gt;
&lt;li&gt;필요한 데이터만 뷰로 정의해서 처리할 수 있기 때문에 관리가 용이하고 명령문이 간단해짐&lt;/li&gt;
&lt;li&gt;뷰를 통해서만 데이터에 접근하게 되면 뷰에 나타나지 않는 데이터를 안전하게 보호하는 효율적인 기법으로 사용할 수 있음&lt;/li&gt;
&lt;li&gt;뷰가 정의된 기본 테이블이나 뷰를 삭제 시 그 테이블이나 뷰를 기초로 정의된 다른 뷰도 자동으로 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;뷰의 장단점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;논리적 데이터 독립성 제공&lt;/li&gt;
&lt;li&gt;동일 데이터에 대해 동시에 여러 사용자의 상이한 요구를 지원&lt;/li&gt;
&lt;li&gt;사용자의 데이터 관리가 용이&lt;/li&gt;
&lt;li&gt;접근 제어를 통한 자동 보안 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;독립적인 인덱스를 가질 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;뷰의 정의 변경 불가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;뷰로 구성된 내용에 대해 INSERT, DELETE, UPDATE 연산에 제약이 따름&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;뷰 설계 순서&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;대상 테이블 선정 → 대상 칼럼 선정 → 정의서 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;뷰 설계 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블 구조가 단순화될 수 있도록 반복적으로 조인을 설정하여 사용하거나 동일한 조건절을 사용하는 테이블을 뷰로 생성&lt;/li&gt;
&lt;li&gt;동일한 테이블이라도 업무에 따라 테이블을 이용하는 부분이 달라질 수 있으므로 사용할 데이터를 다양한 관점에서 제시&lt;/li&gt;
&lt;li&gt;데이터의 보안을 유지하며 설계&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;클러스터-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;클러스터 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클러스터 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;클러스터의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 저장 시 데이터 액세스 효율을 향상시키기 위해 동일한 성격의 데이터를 데이터 블록에 저장하는 물리적 저장 방법&lt;/li&gt;
&lt;li&gt;클러스터링키로 지정된 칼럼 값의 순서대로 저장되고 여러 개의 테이블이 하나의 클러스터에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;클러스터의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 조회 속도는 향상시키지만 데이터 입력 수정 삭제에 대한 성능은 저하시킴&lt;/li&gt;
&lt;li&gt;데이터의 분포도가 넓을수록 유리&lt;/li&gt;
&lt;li&gt;대용량을 처리하는 트랜잭션은 전체 테이블을 스캔하는 일이 자주 발생하므로 클러스터링을 지양&lt;/li&gt;
&lt;li&gt;파티셔닝 된 테이블에는 적용할 수 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;클러스터 대상 테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;분포도가 넓은 테이블&lt;/li&gt;
&lt;li&gt;대량의 범위를 자주 조회하는 테이블&lt;/li&gt;
&lt;li&gt;입력, 수정, 삭제가 자주 발생하지 않는 테이블&lt;/li&gt;
&lt;li&gt;자주 조인되어 사용되는 테이블&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ORDER BY, GROUP BY, UNION이 빈번한 테이블&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORDER BY : 특정 속성을 기준으로 정렬하여 검색&lt;/li&gt;
&lt;li&gt;GROUP BY : 특정 속성을 기준으로 그룹화하여 검색할 때 사용. 그룹 함수와 같이 사용&lt;/li&gt;
&lt;li&gt;UNION : 두 SELECT 문의 결과를 통합하고 중복된 행은 한 번만 출력&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파티션-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%98-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;파티션 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파티션 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;파티션의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;대용량의 테이블이나 인덱스를 작은 논리적 단위인 파티션으로 나누는 것&lt;/li&gt;
&lt;li&gt;대용량 DB의 경우 테이블들을 작은 단위로 나눠 분산시키면 성능 저하를 방지하고 데이터 관리가 용이함&lt;/li&gt;
&lt;li&gt;데이터 처리는 테이블 단위, 데이터 저장은 파티션 별로 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;파티션의 장단점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 접근 시 액세스 범위를 줄여 쿼리 성능 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터가 분산되어 저장되므로 디스크 성능 향상&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파티션별로 백업 및 복구를 수행하므로 속도 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시스템 장애 시 데이터 손상 정도 최소화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 가용성 향상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;파티션 단위로 입출력 분산&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 테이블을 세분화하여 관리하기 때문에 세심한 관리가 요구됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테이블 간 조인에 대한 비용이 증가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;용량이 작은 테이블에 파티셔닝을 수행하면 성능이 저하됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;파티션의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;범위 분할 : 지정한 열의 값을 기준으로 분할&lt;/li&gt;
&lt;li&gt;해시 분할 : 해시 함수를 적용한 결과 값에 따라 데이터를 분할&lt;/li&gt;
&lt;li&gt;조합 분할 : 범위 분할로 분할한 다음 해시 함수를 적용하여 다시 분할&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;파티션 키 선정 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;파티션 키는 테이블 접근 유형에 따라 파티셔닝이 이루어지도록 선정&lt;/li&gt;
&lt;li&gt;데이터 관리의 용이성을 위해 이력성 데이터는 파티션 생성 주기와 소멸 주기를 일치시켜야 함&lt;/li&gt;
&lt;li&gt;매일 생성되는 날짜 칼럼, 백업의 기준이 되는 날짜 칼럼, 파티션 간 이동이 없는 칼럼, I/O 병목을 줄일 수 있는 데이터 분포가 양호한 칼럼 등을 파티션 키로 선정&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;인덱스 파티션&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;파티션 된 테이블의 데이터를 관리하기 위해 인덱스를 나눈 것&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파티션된 테이블의 종속 여부에 따른 구분&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local Partitioned Index : 테이블 파티션, 인덱스 파티션이 1:1 대응(관리 용이)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Global Partitioned Index : 테이블 파티션, 인덱스 파티션이 독립적&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인덱스 파티션 키 칼럼의 위치에 따른 구분&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prefixed Partitioned Index : 인덱스 파티션 키와 인덱스 첫 번째 칼럼이 같음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-Prefixed Partitioned Index : 인덱스 파티션키와 인덱스 첫 번째 칼럼이 다름&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터베이스-용량-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9A%A9%EB%9F%89-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;데이터베이스 용량 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 용량 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;데이터베이스 용량 설계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 테이블에 저장될 공간을 정의&lt;/li&gt;
&lt;li&gt;테이블에 저장할 데이터양, 인덱스, 클러스터 등이 차지하는 공간 등을 예측하여 반영&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 용량 설계의 목적&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;디스크의 저장공간을 효과적으로 사용하고 확장성 및 가용성을 높임&lt;/li&gt;
&lt;li&gt;디스크의 입출력 부하를 분산시키고 채널의 병목현상 최소화&lt;/li&gt;
&lt;li&gt;디스크에 대한 입출력 경합이 최소화되도록 설계함으로써 데이터 접근성이 향상&lt;/li&gt;
&lt;li&gt;데이터베이스에 생성되는 오브젝트의 익스텐트 발생을 최소화하여 성능을 향상&lt;/li&gt;
&lt;li&gt;테이블과 인덱스에 적합한 저장 옵션을 지정&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 접근성을 향상시키는 설계 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 테이블스페이스와 인덱스의 테이블스페이스를 분리하여 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테이블스페이스와 임시 테이블스페이스를 분리하여 구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블을 마스터 테이블과 트랜잭션 테이블로 분류&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 용량 분석 절차&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 예상 건수, 로우 길이, 보존 기간, 증가율 등 기초 자료를 수집하여 용량 분석&lt;/li&gt;
&lt;li&gt;분석된 자료를 바탕으로 DBMS에 이용될 테이블, 인덱스 등 오브젝트별 용량을 산정&lt;/li&gt;
&lt;li&gt;테이블과 인덱스의 테이블스페이스 용량을 산정&lt;/li&gt;
&lt;li&gt;데이터베이스에 저장될 모든 데이터 용량과 데이터베이스 설치 및 관리를 위한 시스템 용량을 합해 디스크 용량 산정&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;분산-데이터베이스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%84%EC%82%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;분산 데이터베이스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;분산 데이터베이스 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;분산 데이터베이스 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;논리적인 하나의 시스템이지만 물리적으로는 네트워크로 연결된 여러 개의 컴퓨터 사이트에 분산되어 있는 데이터베이스&lt;/li&gt;
&lt;li&gt;데이터베이스를 네트워크를 이용해 나눠놓음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;분산 데이터베이스의 구성 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;분산 처리기 : 지리적으로 분산되어 있는 컴퓨터 시스템&lt;/li&gt;
&lt;li&gt;분산 데이터베이스 : 지리적으로 분산되어 있는 데이터베이스&lt;/li&gt;
&lt;li&gt;통신 네트워크 : 분산 처리기들을 네트워크로 연결하여 하나의 시스템처럼 동작할 수 있도록 하는 통신 네트워크&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;분산 데이터베이스 설계 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;작업 부하의 노드별 분산 정책&lt;/li&gt;
&lt;li&gt;지역의 자치성 보장 정책&lt;/li&gt;
&lt;li&gt;데이터의 일관성 정책&lt;/li&gt;
&lt;li&gt;사이트나 회선의 고장으로부터의 회복 기능&lt;/li&gt;
&lt;li&gt;통신 네트워크를 통한 원격 접속 기능&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;분산 데이터베이스의 목표&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;위치 투명성 : 접근하려는 데이터베이스의 실제 위치를 알 필요 없이 논리적인 명칭만으로 접근 가능&lt;/li&gt;
&lt;li&gt;중복 투명성 : 동일 데이터가 여러 곳에 중복되어 있어도 사용자는 하나의 데이터만 존재하는 것처럼 사용 가능&lt;/li&gt;
&lt;li&gt;병행 투명성 : 분산 데이터베이스와 관련된 다수의 트랜잭션들이 동시에 실현되더라도 그 트랜잭션의 결과는 영향을 받지 않음&lt;/li&gt;
&lt;li&gt;장애 투명성 : 트랜잭션, DBMS, 네트워크, 컴퓨터 등 장애에도 트랜잭션을 정확하게 처리&lt;/li&gt;
&lt;li&gt;투명성 : 사실 존재 여부를 염두에 두지 않아도 되는 성질&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;분산 데이터베이스의 장점&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;지역 자치성이 높음&lt;/li&gt;
&lt;li&gt;자료의 공유성 향상&lt;/li&gt;
&lt;li&gt;분산 제어 가능&lt;/li&gt;
&lt;li&gt;시스템 성능 향상&lt;/li&gt;
&lt;li&gt;중앙 컴퓨터의 장애가 전체 시스템에 영향을 끼치지 않음&lt;/li&gt;
&lt;li&gt;효용성과 융통성이 높음&lt;/li&gt;
&lt;li&gt;신뢰성 및 가용성이 좋음&lt;/li&gt;
&lt;li&gt;점진적 시스템 용량 확장 용이&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DBMS가 수행할 기능이 복잡&lt;/li&gt;
&lt;li&gt;DB 설계가 어려움&lt;/li&gt;
&lt;li&gt;소프트웨어 개발 비용 증가&lt;/li&gt;
&lt;li&gt;처리 비용 증가&lt;/li&gt;
&lt;li&gt;잠재적 오류 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;분산 데이터베이스 설계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션이나 사용자가 분산되어 저장된 데이터에 접근하는 것이 목적&lt;/li&gt;
&lt;li&gt;전역 관계망을 논리적 측면에서 소규모 단위로 분할, 분할된 결과를 복수의 노드에 할당&lt;/li&gt;
&lt;li&gt;분산 설계 방법에는 테이블 위치 분산, 분할, 할당이 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;테이블 위치 분산&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스의 테이블을 각기 다른 서버에 분산시켜 배치&lt;/li&gt;
&lt;li&gt;테이블의 구조를 변경시키지 않고 다른 데이터베이스의 테이블과 중복되지 않게 배치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;분할&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 데이터를 분할하여 분산&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분할 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;완전성 : 전체 데이터를 대상으로 분할해야 함&lt;/li&gt;
&lt;li&gt;재구성 : 분할된 데이터는 관계 연산을 활용하여 본래의 데이터로 재구성이 가능해야 함&lt;/li&gt;
&lt;li&gt;상호 중첩 배제 : 분할된 데이터는 서로 다른 분할의 항목에 속하지 않아야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분할 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;수평 분할 : 행 단위로 분할&lt;/li&gt;
&lt;li&gt;수직 분할 : 속성 단위로 분할&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dpAf2F/btqCkRer3Xn/j1Wv8RzXPxT7vsVSZYvpeK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;할당&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;동일한 분할을 여러 개의 서버에 생성하는 분산 방법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비중복 할당 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최적의 노드를 선택해서 분산 데이터베이스의 단일 노드에서만 분할이 존재&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중복 할당 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동일한 테이블을 다른 서버에 복제하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터베이스-이중화--서버-클러스터링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9D%B4%EC%A4%91%ED%99%94--%EC%84%9C%EB%B2%84-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81&quot; aria-label=&quot;데이터베이스 이중화  서버 클러스터링 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 이중화 / 서버 클러스터링&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;데이터베이스 이중화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템 오류로 인한 데이터베이스 서비스 중단이나 물리적 손상 발생 시 이를 복구하기 위해 동일한 데이터베이스를 복제하여 관리하는 것&lt;/li&gt;
&lt;li&gt;하나 이상의 데이터베이스가 항상 같은 상태를 유지&lt;/li&gt;
&lt;li&gt;데이터베이스가 문제가 생기면 즉시 해결 가능&lt;/li&gt;
&lt;li&gt;사용자가 작업을 수행하면 이중화 시스템에 연결된 다른 데이터베이스도 동일하게 적용&lt;/li&gt;
&lt;li&gt;애플리케이션을 여러 개의 데이터베이스로 분산시켜 처리해 데이터베이스의 부하를 감소&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 이중화의 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;내용 전달 방식에 따른 분류&lt;/li&gt;
&lt;li&gt;Eager 기법 : 트랜잭션 수행 중 데이터 변경 발생 시 이중화된 모든 데이터베이스에 즉시 전달하여 변경 내용이 즉시 적용&lt;/li&gt;
&lt;li&gt;Lazy 기법 : 트랜잭션 수행이 종료되면 변경 사실을 새로운 트랜잭션에 작성하여 각 데이터베이스에 전달하여 데이터베이스마다 새로운 트랜잭션이 수행되는 것으로 간주&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 이중화 구성 방법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;활동-대기 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 DB가 서비스 시 다른 DB는 대기&lt;/li&gt;
&lt;li&gt;활성 DB에 장애 발생 시 대기 중이었던 DB가 모든 서비스를 대신 수행&lt;/li&gt;
&lt;li&gt;구성 방법 및 관리가 쉬워 많은 기업에서 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;활동-활동 방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 개의 DB가 서로 다른 서비스를 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;한쪽 DB에 장애 발생 시 다른 DB가 서비스를 제공&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 DB가 모두 처리를 해 처리율이 높지만 구성 방법 및 설정이 복잡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;클러스터링&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;두 대 이상의 서버를 하나의 서버처럼 운영하는 기술&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서버 이중화 및 공유 스트로지를 사용하여 서버의 고가용성을 제공&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;고가용성 : 시스템을 오랜 시간 동안 계속해서 정상적으로 운영이 가능한 성질&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;병렬 처리 클러스터링 : 처리율을 높이기 위해 하나의 작업을 여러 개의 서버에서 분산하여 처리&lt;/li&gt;
&lt;li&gt;고가용성 클러스터링 : 하나의 서버에 장애가 발생 시 다른 서버가 받아서 처리하여 서비스 중단을 방지하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터베이스-보안--암호화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%B3%B4%EC%95%88--%EC%95%94%ED%98%B8%ED%99%94&quot; aria-label=&quot;데이터베이스 보안  암호화 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 보안 / 암호화&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;데이터베이스의 일부분 또는 전체에 권한이 없는 사용자가 액세스 하는 것을 금지하기 위해 사용&lt;/p&gt;
&lt;h4&gt;암호화 / 복호화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;암호화는 데이터를 보낼 때 송신자가 지정한 수신자 외는 그 내용을 알 수 없도록 평문을 암호문으로 변환&lt;/li&gt;
&lt;li&gt;암호화 과정 : 암호화되지 않은 평문을 정보 보호를 위해 암호문으로 바꿈&lt;/li&gt;
&lt;li&gt;복호화 과정 : 암호문을 원래의 평문으로 바꿈&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;개인키 / 공개키 암호 방식&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;암호화 방식의 키와 복호화 방식의 키가 같을 때&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개인키 / 비밀키 / 대칭키 암호 방식&lt;/li&gt;
&lt;li&gt;종류 : 전위 기법, 대수 기법, 합성 기법(DES)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;암호화 방식의 키와 복호화 방식의 키가 다를 때&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공개키 / 비대칭키&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSA 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터베이스-보안---접근통제&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%B3%B4%EC%95%88---%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C&quot; aria-label=&quot;데이터베이스 보안   접근통제 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 보안 - 접근통제&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;접근통제&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 저장된 객체와 사용하려는 주체 사이의 정보 흐름을 제한&lt;/li&gt;
&lt;li&gt;데이터에 대해 통제를 함으로써 자원의 불법적인 접근 및 파괴를 예방&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임의 접근통제(Discretionary Access Control)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터에 접근하는 사용자의 신원에 따라 접근 권한 부여&lt;/li&gt;
&lt;li&gt;통제 권한이 주체에 있어 접근통제 권한을 주체가 지정하고 제어&lt;/li&gt;
&lt;li&gt;객체를 생성한 사용자가 객체에 대한 모든 권한을 부여받고 다른 사용자에게 허가 가능&lt;/li&gt;
&lt;li&gt;SQL 명령어로는 GRANT, REVOKE가 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;강제 접근통제(Mandatory Access Control)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주체와 객체의 등급을 비교하여 접근 권한을 부여&lt;/li&gt;
&lt;li&gt;제 3자가 접근통제 권한 지정&lt;/li&gt;
&lt;li&gt;객체별로 보안 등급을 부여할 수 있으며 사용자별로 인가 등급을 부여할 수 있음&lt;/li&gt;
&lt;li&gt;주체의 보안 등급이 자신의 보안등급보다 높으면 읽기, 수정, 등록이 모두 불가하고 동등하면 읽기, 수정, 등록이 모두 가능하며 낮으면 읽기만 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;접근통제 정책&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;어떤 주체(Who)가 언제(When) 어디서(Where) 어떤 객체(What)에게 어떤 행위(How)에 대한 허용 여부를 정의하는 것&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신분 기반 정책&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주체나 그룹의 신분에 근거하여 객체의 접근을 제한&lt;/li&gt;
&lt;li&gt;IBP(Individual-Based Policy) : 최소 권한 정책, 단일 주체에게 하나의 객체에 대한 허가를 부여&lt;/li&gt;
&lt;li&gt;GBP(Group-Based Policy) : 복수 주체에 대한 허가를 부여&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;규칙 기반 정책&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주체가 갖는 권한에 근거하여 객체의 접근을 제한&lt;/li&gt;
&lt;li&gt;MLP(Multi-Level Policy) : 사용자 및 객체별로 지정된 기밀 분류에 따른 정책&lt;/li&gt;
&lt;li&gt;CBP(Compartment-Based Policy) : 집단별로 지정된 기밀 허가에 따른 정책&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;역할 기반 정책&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주체의 신분이 아니라 주체가 맡은 역할에 근거하여 객체의 접근을 제한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;접근통제 매커니즘&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정의된 접근통제 정책을 구현하는 기술적인 방법&lt;/li&gt;
&lt;li&gt;접근통제 목록 : 객체를 기준으로 특정 객체에 대해 어떤 주체가 어떤 행위를 할 수 있는지 기록한 목록&lt;/li&gt;
&lt;li&gt;능력 리스트 : 주체를 기준으로 주체에게 허가된 자원 및 권한을 기록한 목록&lt;/li&gt;
&lt;li&gt;보안 등급 : 주체나 객체에 부여된 보안 속성의 집합&lt;/li&gt;
&lt;li&gt;패스워드 : 주체가 자신임을 증명할 때 사용하는 인증 방법&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;암호화 / 복호화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;암호화는 데이터를 보낼 때 송신자가 지정한 수신자 외는 그 내용을 알 수 없도록 평문을 암호문으로 변환&lt;/li&gt;
&lt;li&gt;암호화 과정 : 암호화되지 않은 평문을 정보 보호를 위해 암호문으로 바꿈&lt;/li&gt;
&lt;li&gt;복호화 과정 : 암호문을 원래의 평문으로 바꿈&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;접근통제 보안 모델&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보안 정책을 구현하기 위한 정형화된 모델&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기밀성 모델&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;군사적인 목적으로 개발된 최초의 수학적 모델로 기밀성 보장이 최우선&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;무결성 모델&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기밀성 모델에서 발생하는 불법적인 정보 변경을 방지하기 위해 무결성을 기반으로 개발된 모델&lt;/li&gt;
&lt;li&gt;데이터 일관성 유지에 중점을 두어 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;접근통제 모델&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;접근통제 매커니즘을 보안 모델로 발전시킨 것&lt;/li&gt;
&lt;li&gt;접근통제 모델 : 임의적인 접근 통제를 관리하기 위한 모델로 행은 주체 열은 객체를 의미&lt;/li&gt;
&lt;li&gt;R : 읽기 권한&lt;/li&gt;
&lt;li&gt;W : 쓰기 권한&lt;/li&gt;
&lt;li&gt;ALL : 모든 권한&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/rta76/btqCl98Jb6d/5pgW3PFCpUnO7ngPQQotqK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;접근통제 조건&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;접근통제 매커니즘의 취약점을 보안하기 위해 접근 통제 정책에 부가하여 적용할 수 있는 조건&lt;/li&gt;
&lt;li&gt;값 종속 통제 : 객체에 저장된 값에 따라 다르게 접근통제를 허용해야 하는 경우&lt;/li&gt;
&lt;li&gt;다중 사용자 통제 : 지정된 객체에 다수의 사용자가 동시에 접근을 요구하는 경우&lt;/li&gt;
&lt;li&gt;콘텍스트 기반 통제 : 특정 시간, 네트워크 주소, 접근 경로, 인증 경로 등에 근거하여 접근을 제어하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;감사 추적&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자나 애플리케이션의 데이터베이스에 접근하여 수행한 모든 활동을 기록하는 기능&lt;/li&gt;
&lt;li&gt;오류가 발생한 데이터베이스를 복구하거나 부적절한 데이터 조작을 파악하기 위해 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터베이스-백업&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%B0%B1%EC%97%85&quot; aria-label=&quot;데이터베이스 백업 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 백업&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;전산 장비의 장애에 대비하여 데이터베이스에 저장된 데이터를 보호하고 복구하기 위한 작업&lt;/p&gt;
&lt;h4&gt;데이터베이스 장애 유형&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자 실수 : 사용자의 실수로 인한 오류&lt;/li&gt;
&lt;li&gt;미디어 장애 : 하드웨어 장애나 데이터가 파손된 경우&lt;/li&gt;
&lt;li&gt;구문 장애 : 프로그램 오류나 사용 공간의 부족으로 발생하는 장애&lt;/li&gt;
&lt;li&gt;사용자 프로세스 장애 : 프로그램이 비정상적으로 종료되거나 네트워크 이상으로 세션이 종료되어 발생하는 장애&lt;/li&gt;
&lt;li&gt;인스턴스 장애 : 하드웨어 장애, 정전, 시스템 파일 파손 등 비정상적 요인으로 메모리나 데이터베이스 서버의 프로세스가 중단된 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;로그 파일&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스의 처리 내용이나 이용 상황 등 상태 변화를 시간의 흐름에 따라 기록한 파일&lt;/li&gt;
&lt;li&gt;로그 파일을 기반으로 과거 상태로 복귀(UNDO)시키거나 현재 상태로 재생(REDO)시켜 데이터베이스 상태를 일관성 있게 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 복구 알고리즘&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;NO-UNDO/REDO : 비동기적으로 갱신한 경우&lt;/li&gt;
&lt;li&gt;UNDO/NO-REDO : 동기적으로 갱신한 경우&lt;/li&gt;
&lt;li&gt;UNDO/REDO : 동기/비동기적으로 갱신한 경우&lt;/li&gt;
&lt;li&gt;NO-UNDO/NO-REDO : 동기적으로 저장 매체에 기록하지만 데이터베이스와는 다른 영역에 기록한 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;백업 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;물리 백업 : 데이터베이스 파일을 백업하는 방법&lt;/li&gt;
&lt;li&gt;논리 백업 : 데이터베이스 내의 논리적 객체들을 백업하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;스토리지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80&quot; aria-label=&quot;스토리지 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스토리지&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;단일 디스크로 처리할 수 없는 대용량의 데이터를 저장하기 위해 서버와 저장장치를 연결하는 기술\&lt;/p&gt;
&lt;h4&gt;DAS(Direct Attached Storage)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서버와 저장장치를 전용 케이블로 직접 연결하는 방식&lt;/li&gt;
&lt;li&gt;서버에서 저장장치를 관리&lt;/li&gt;
&lt;li&gt;저장장치를 직접 연결하므로 속도가 빠르고 설치 및 운영이 쉬움&lt;/li&gt;
&lt;li&gt;다른 서버에서 스토리지에 접근하여 사용 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;NAS(Network Attacked Storage)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;서버와 저장장치를 네트워크를 통해 연결하는 방식&lt;/li&gt;
&lt;li&gt;별도의 파일 관리 기능이 있는 NAS Storage가 내장된 저장장치를 직접 고나리&lt;/li&gt;
&lt;li&gt;DAS에 비해 확장성 및 유연성이 좋음&lt;/li&gt;
&lt;li&gt;서버들이 자유롭게 스토리지에 접근하여 파일 공유&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;SAN(Storage Area Network)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DAS의 빠른 처리와 NAS의 파일 공유 장점을 혼합한 방식&lt;/li&gt;
&lt;li&gt;서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파이버 채널(FC) 스위치를 이용하여 네트워크를 구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파이버 채널 : 장치 간 데이터 전송 속도를 기가바이트로 높이기 위한 네트워크 기술&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;서버나 저장장치를 광케이블로 연결하므로 처리 속도가 빠름&lt;/li&gt;
&lt;li&gt;서버들이 저장장치 및 파일을 자유롭게 공유&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;논리-데이터-모델의-물리-데이터-모델-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%85%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EB%AC%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8-%EB%B3%80%ED%99%98&quot; aria-label=&quot;논리 데이터 모델의 물리 데이터 모델 변환 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;논리 데이터 모델의 물리 데이터 모델 변환&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;테이블&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터를 저장하는 데이터베이스의 가장 기본적인 오브젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;엔티티를 테이블로 변환&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;논리 데이터 모델에서 정의된 엔티티를 물리 데이터 모델의 테이블로 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bHJDlo/btqCsIhmXiL/S9aNrAuRpYwFdIgZo3KSQ1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블과 엔티티 명칭은 동일하게 하는 것을 권고&lt;/li&gt;
&lt;li&gt;테이블은 소스코드 가독성을 위해 영문명을 사용&lt;/li&gt;
&lt;li&gt;표준화된 용어 사용 지향&lt;/li&gt;
&lt;li&gt;변환 규칙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bX6D6R/btqCsGX1OZ5/K3mTePOnFtYhFUQeyENej1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;슈퍼타입/서브타입을 테이블로 변환&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;슈퍼타입과 서브타입은 논리 데이터 모델에서 이용되는 형태이므로 물리 데이터 모델을 설계할 때는 테이블로 변환&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;슈퍼타입 기준 테이블 변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서브타입을 슈퍼타입에 통합하여 하나의 테이블로 만듦&lt;/li&gt;
&lt;li&gt;데이터의 액세스가 상대적 용이&lt;/li&gt;
&lt;li&gt;뷰를 이용하여 각각의 서브타입만을 액세스 하거나 수정할 수 있음&lt;/li&gt;
&lt;li&gt;SQL 문장 구성이 단순&lt;/li&gt;
&lt;li&gt;디스크 저장 공간이 증가&lt;/li&gt;
&lt;li&gt;인덱스의 효율이 떨어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dEeHfX/btqCl9HJa8H/NMRnXl9nkYjmwK5L9wsRxk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;서브타입 기준 테이블 변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;슈퍼타입의 속성들을 각각의 서브타입에 추가하여 서브타입들을 개별적인 테이블로 만듦&lt;/li&gt;
&lt;li&gt;각 서브타입 속성들의 선택 사양이 명확한 경우 유리&lt;/li&gt;
&lt;li&gt;여러 개의 테이블로 통합하므로 테이블당 크기가 감소하여 전체 테이블 스캔 시 유리&lt;/li&gt;
&lt;li&gt;수행 속도 감사&lt;/li&gt;
&lt;li&gt;복잡한 처리를 하는 SQL의 통합이 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cJqLon/btqCl9npb67/qh16nLenZmr3gk9ywqXZik/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;개별타입 기준 테이블 변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;슈퍼타입과 서브타입들을 각각의 개별적인 테이블로 변환&lt;/li&gt;
&lt;li&gt;슈퍼타입과 서브타입 테이블 사이에는 각각 1:1 관계가 형성&lt;/li&gt;
&lt;li&gt;저장공간이 상대적으로 작음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/b75tUi/btqCl89RJdt/IPILGL0AvwjjlCr6Czshn0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;속성을 칼럼으로 변환&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;논리 데이터 모델에서 정의한 속성을 물리 데이터 모델의 컬럼으로 변환&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일반 속성 변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엔티티의 속성을 테이블의 각각의 컬럼으로 변환&lt;/li&gt;
&lt;li&gt;칼럼명은 SQL 예약어 사용을 피하고 가능한 한 짧게 지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/Lt7Wd/btqCtYK0MvF/XaKuZXtlbwgPL4an6TSi3K/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;관계를 외래키로 변환&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;논리 데이터 모델에서 정의된 관계는 기본키와 이를 참조하는 기본키로 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/cvyPeM/btqCsGqifKi/Y9y5nXQfuqycektaKKbkNk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;관리 목적의 테이블/칼럼 추가&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;논리 데이터 모델에는 존재하지 않는 테이블이나 칼럼을 데이터베이스 관리 혹은 이용하는 프로그래밍의 수행 속도를 향상시키기 위해 물리 데이터 모델에 추가할 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 타입 선택&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;정의된 논리적인 데이터 타입을 물리적인 DBMS의 물리적 특성과 성능을 고려하여 최적의 데이터 타입과 데이터의 최대 길이를 선택&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle에서 자주 사용되는 데이터 유형&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CHAR : 고정길이 문자열&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VARCHAR : 가변 길이 문자열&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NUMBER : 38 자릿수의 숫자 저장 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DATE : 날짜 저장&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)]]></title><link>https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)/</link><guid isPermaLink="false">https://jigglog.netlify.app/2020 정보처리기사 필기 요점 정리(1)-데이터베이스 구축(1)/</guid><pubDate>Wed, 01 Jan 2020 05:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;논리-데이터베이스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%85%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;논리 데이터베이스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;논리 데이터베이스 설계&lt;/h1&gt;
&lt;h1 id=&quot;1-논리-데이터베이스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-%EB%85%BC%EB%A6%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;1 논리 데이터베이스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 논리 데이터베이스 설계&lt;/h1&gt;
&lt;h2 id=&quot;데이터베이스-설계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;데이터베이스 설계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스 설계&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;사용자의 요구를 분석하여 그것에 맞게 설계하고 특정 DBMS로 데이터베이스를 구현하여 사용자들이 사용하는 것&lt;/p&gt;
&lt;h4&gt;데이터베이스 설계 순서(요구 조건 , 개념적, 논리적, 물리적, 구현)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;요구 조건 분석 → 개념적 설계 → 논리적 설계 → 물리적 설계 → 구현&lt;/li&gt;
&lt;li&gt;요구 조건 분석 : 요구 조건 명세서 작성&lt;/li&gt;
&lt;li&gt;개념적 설계 : 개념 스키마, E-R 모델, 트랜잭션 모델링&lt;/li&gt;
&lt;li&gt;논리적 설계 : 논리 스키마 설계 , 트랜잭션 인터페이스 설계&lt;/li&gt;
&lt;li&gt;물리적 설계 : 물리적 구조의 데이터로 변환&lt;/li&gt;
&lt;li&gt;구현 : DDL 로 데이터베이스 생성, 트랜잭션 작성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터베이스 설계 시 고려사항&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;무결성, 일관성, 회복, 보안, 효율성, 데이터베이스 확장&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터-모델의-개념&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;데이터 모델의 개념 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 모델의 개념&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;현실 세계의 정보들을 컴퓨터에 표현하기 위해서 단순화, 추상화하여 체계적으로 표현한 개념적 모형&lt;/p&gt;
&lt;h4&gt;데이터 모델의 구성 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개체(Entity), 속성(Attribute), 관계(Relation)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 모델의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개념적 데이터 모델, 논리적 데이터 모델, 물리적 데이터 모델&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;데이터 모델에 표시할 요소(구조, 연산, 제약 조건)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;구조(Structure) : 개체 타입들 간의 관계, 데이터 구조 및 정적 성질 표현&lt;/li&gt;
&lt;li&gt;연산(Operation) : 저장된 데이터를 처리하는 작업에 대한 명세, DB를 조작하는 기본 도구&lt;/li&gt;
&lt;li&gt;제약 조건(Constraint) : 데이터의 논리적인 제약 조건&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데이터-모델의-구성-요소---개체-속성-관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%AA%A8%EB%8D%B8%EC%9D%98-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C---%EA%B0%9C%EC%B2%B4-%EC%86%8D%EC%84%B1-%EA%B4%80%EA%B3%84&quot; aria-label=&quot;데이터 모델의 구성 요소   개체 속성 관계 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 모델의 구성 요소 - 개체, 속성, 관계&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/be49gG/btqBYuEauiK/AuIgZ7dl1bIFRYnj1qHnPK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;p&gt;데이터베이스의 표현하려는 정보&lt;/p&gt;
&lt;h4&gt;개체의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;유형, 무형의 정보로서 서로 연관된 몇 개의 속성으로 이루어짐&lt;/li&gt;
&lt;li&gt;유일한 식별자에 의해 식별이 가능&lt;/li&gt;
&lt;li&gt;개체(튜플)의 수를 카디널리티라고 함&lt;/li&gt;
&lt;li&gt;개체 인스턴스 : 개체를 구성하고 있는 속성들이 값을 가져 하나의 개체를 나타내는 것. 개체 어커런스라고도 함&lt;/li&gt;
&lt;li&gt;자료 흐름도(DFD)를 통해 업무 분석을 했을 경우는 자료 저장소(Data Store)를 이용함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;속성의 정의&lt;/h4&gt;
&lt;p&gt;DB를 구성하는 가장 작은 논리적인 단위(데이터 항목 또는 데이터 필드)&lt;/p&gt;
&lt;p&gt;(속성 = 차수= 디그리)&lt;/p&gt;
&lt;h4&gt;속성의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개체의 특성을 기술함&lt;/li&gt;
&lt;li&gt;속성의 수를 차수 혹은 디그리(Degree)라고 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;속성의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기본 속성 : 업무 분석을 통해 정의한 속성. 가장 많고 일반적 ex) 제품명&lt;/li&gt;
&lt;li&gt;설계 속성 : 업무상 존재하지 않지만 설계 과정에서 도출해내는 속성 ex) 제품 코드&lt;/li&gt;
&lt;li&gt;파생 속성 : 다른 속성으로부터 계산되거나 파생된 속성 ex) 제품 판매량, 판매 수익&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;속성의 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기본키 속성(Primary Key Attribute) : 개체를 식별할 수 있는 속성 ex) 학번&lt;/li&gt;
&lt;li&gt;외래키 속성(Foreign Key Attribute) : 다른 개체와의 관계에서 포함된 속성&lt;/li&gt;
&lt;li&gt;일반 속성 : 개체에 포함되어 있지만 기본키, 외래키가 아닌 속성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/s3t52/btqBYeO5Nfk/JNSpeHmn7krihj0KufbKGk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;p&gt;개체 간의 관계는 점선, 속성 간의 관계는 실선으로 표현&lt;/p&gt;
&lt;h4&gt;관계의 정의&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개체 간의 논리적인 연결&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;관계의 형태&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1:1, 1:N, N:M&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;식별 / 비식별 관계&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;식별 관계 : A,B 개체 간의 관계에서 A 개체의 기본키가 B 개체의 외래키면서 동시에 기본인 것&lt;/li&gt;
&lt;li&gt;비식별 관계 : A,B 개체 간의 관계에서 A 개체의 기본키가 B 개체의 외래키이지만 기본키는 아닌 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;식별자&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9D%EB%B3%84%EC%9E%90&quot; aria-label=&quot;식별자 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;식별자&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;하나의 개체 내에서 각각의 인스턴스(구체적인 데이터 값)를 유일하게 구분 지을수 있는 것&lt;/p&gt;
&lt;h4&gt;식별자의 분류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;대표성 여부 : 개체를 유일하게 식별할 수 있음&lt;/li&gt;
&lt;li&gt;주 식별자(유일성, 최소성, 불변성, 존재성) : 개체를 대표하는 유일한 식별자 ex) 학번&lt;/li&gt;
&lt;li&gt;보조 식별자 : 주 식별자를 대신하여 개체를 식별할 수 있는 것 ex) 주민번호&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bnESLx/btqB10vXHT6/91iT6rOzGqTHKm2YgepGk0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스스로 생성 여부&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;내부 식별자 : 개체 내에서 스스로 만들어지는 식별자&lt;/li&gt;
&lt;li&gt;외부 식별자 : 다른 개체와의 관계에서 만들어지는 식별자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단일 속성 여부&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단일 식별자 : 주 식별자가 한 가지 속성으로 구성된 식별자&lt;/li&gt;
&lt;li&gt;복합 식별자 : 주 식별자가 두 개 이상의 속성으로 구성된 식별자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대체 여부&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원조 식별자(=본질 식별자) : 업무에 의해 만들어지는 가공되지 않은 원래의 식별자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대리 식별자(=대리 식별자) : 주 식별자의 속성이 두 개 이상인 경우 속성들을 하나의 속성으로 묶어 사용하는 식별자&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;e-r개체-관계-모델&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#e-r%EA%B0%9C%EC%B2%B4-%EA%B4%80%EA%B3%84-%EB%AA%A8%EB%8D%B8&quot; aria-label=&quot;e r개체 관계 모델 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;E-R(개체-관계) 모델&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;E-R 모델의 개요&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;E-R 모델은 개념적 데이터 모델의 가장 대표적인 것&lt;/li&gt;
&lt;li&gt;피터첸에 의해 제안되어 기본적인 구성 요소가 적립&lt;/li&gt;
&lt;li&gt;데이터를 개체, 관계, 속성으로 묘사&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;E-R 다이어그램&lt;/h4&gt;
&lt;p&gt;E-R 모델의 기본 아이디어를 쉽게 기호를 사용하여 시각적으로 표현한 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;피터 첸 표기법, 정보 공학 표기법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;피터 첸 표기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사각형 : 개체 타입&lt;/li&gt;
&lt;li&gt;마름모 : 관계 타입&lt;/li&gt;
&lt;li&gt;타원 : 속성 타입&lt;/li&gt;
&lt;li&gt;이중 타원 : 복합 속성&lt;/li&gt;
&lt;li&gt;밑줄 타원 : 기본키 속성&lt;/li&gt;
&lt;li&gt;복수 타원 : 복합 속성&lt;/li&gt;
&lt;li&gt;관계 : 1:1, 1:N, N:M 같은 관계에 대한 대응 수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/eggVok/btqBYtUoLLq/5lfx6zaGyf4q6j5EDGyhck/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 50%;&quot;&gt;*&lt;/p&gt;
&lt;p&gt;교수와 학생이 1:N 관계&lt;/p&gt;
&lt;h4&gt;정보 공학 표기법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;관계 표시 기호&lt;/p&gt;
&lt;p&gt;| : 1, O : 0, &amp;#x3C; : N&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/88hSB/btqCl9Op22z/wLAkFhtYtgYvMiHm02RiCk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;p&gt;교수와 학생이 1:N 관계&lt;/p&gt;
&lt;h2 id=&quot;관계형-데이터베이스의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;관계형 데이터베이스의 구조 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관계형 데이터베이스의 구조&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;개체, 속성, 관계를 모두 표로 표현, 간결하고 보기 편하며 다른 데이터베이스로의 변환이 용이&lt;/p&gt;
&lt;h4&gt;관계형 데이터베이스의 구조&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;튜플&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;릴레이션을 구성하는 각각의 행&lt;/li&gt;
&lt;li&gt;튜플의 수를 카디널리티(Cardinality)라고 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;속성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스를 구성하는 가장 작은 논리적인 단위&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;개체의 특성을 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성의 수를 디그리(Degree) 또는 차수라고 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;도메인&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성이 취할 수 있는 값의 범위&lt;/li&gt;
&lt;li&gt;ex) 학년의 도메인 : 1~4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/dGvgtu/btqB2ucwMwn/2q719BsLFkv7rFSddIkSwK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom: 50%;&quot;&gt;*&lt;/p&gt;
&lt;h4&gt;릴레이션의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;튜플&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;똑같은 튜플이 있을 수 없음. 모두 상이하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;튜플에는 순서가 없음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;튜플의 삽입, 삭제로 인해 시간에 따라 변함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;속성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성의 명칭은 유일해야 하지만 속성을 구성하는 값은 다를 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;속성에는 순서가 없음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속성들은 원자 값(Atomic-Value)를 가짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;관계형-데이터베이스의-제약-조건---key&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4---key&quot; aria-label=&quot;관계형 데이터베이스의 제약 조건   key permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관계형 데이터베이스의 제약 조건 - Key&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;key는 데이터베이스에서 조건에 맞는 튜플을 찾거나 정렬할 때 튜플을 서로 구분할 수 있는 기준이 되는 속성&lt;/p&gt;
&lt;h4&gt;Key의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;후보키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본키로 사용할 수 있는 속성&lt;/li&gt;
&lt;li&gt;유일성과 최소성의 성질을 만족&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기본키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;후보 키 중에서 선정된 Main Key로 중복된 값을 가질 수 없음&lt;/li&gt;
&lt;li&gt;후보 키의 부분집합&lt;/li&gt;
&lt;li&gt;NULL 값을 가질 수 없음(=개체 무결성), 정보의 부재를 나타내기 위해 사용하는 값. 0의 값이 아님&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대체키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;후보 키가 둘 이상일 때 기본키를 제외한 나머지 후보키&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;슈퍼키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 가지 속성일 땐 Key가 될 수 없지만 여러 속성이 뭉쳐서 Key의 속성을 가짐&lt;/li&gt;
&lt;li&gt;유일성의 성질을 만족&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외래키&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 릴레이션의 기본 키를 참조한 것&lt;/li&gt;
&lt;li&gt;외래 키의 값은 참조한 릴레이션의 기본키 값과 동일해야 함(=참조 무결성)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/xd7ex/btqB4Z5DBmW/QZd3KmI82FvkkabIE10ifK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;h2 id=&quot;관계형-데이터베이스의-제약조건---무결성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4---%EB%AC%B4%EA%B2%B0%EC%84%B1&quot; aria-label=&quot;관계형 데이터베이스의 제약조건   무결성 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관계형 데이터베이스의 제약조건 - 무결성&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;무결성은 데이터베이스의 저장된 데이터 값과 그것이 표현하는 실제 값이 일치하는 정확성을 의미&lt;/p&gt;
&lt;h4&gt;무결성의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;개체 무결성 : 기본키를 구성하는 어떤 속성도 NULL 값이나 중복 값이면 안됨&lt;/li&gt;
&lt;li&gt;도메인 무결성 : 속성의 값이 도메인에 속한 값이어야 함&lt;/li&gt;
&lt;li&gt;참조 무결성 : 외래 키의 값은 참조한 릴레이션의 기본키 값과 동일해야 함&lt;/li&gt;
&lt;li&gt;사용자 정의 무결성 : 속성 값들은 사용자가 정의한 제약 조건에 만족해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;무결성 강화&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;애플리케이션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;무결성 조건을 검증하는 코드를 데이터를 조작하는 프로그램 내에 추가&lt;/li&gt;
&lt;li&gt;사용자 정의 같은 복잡한 무결성 조건의 구현이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터베이스 트리거&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트리거 : 데이터베이스 시스템에 이벤트가 발생할 때마다 자동으로 수행되는 절차형 SQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제약 조건&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스 제약 조건을 설정하여 무결성을 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;관계-대수-및-관계-해석&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EA%B3%84-%EB%8C%80%EC%88%98-%EB%B0%8F-%EA%B4%80%EA%B3%84-%ED%95%B4%EC%84%9D&quot; aria-label=&quot;관계 대수 및 관계 해석 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관계 대수 및 관계 해석&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;관계 데이터 언어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;관계 대수 : 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해 유도하는 것을 기술하는 절차적 언어&lt;/li&gt;
&lt;li&gt;관계 해석 : 관계 데이터의 연산을 표현하는 비절차적 언어&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;관계 대수의 연산자&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select(σ, σ&amp;#x3C;조건*(R), R은 릴레이션을 의미)&lt;/p&gt;
&lt;p&gt;조건을 만족하는 튜플을 구하여 새로운 릴레이션을 만드는 연산(수평 연산)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex) σ평균*80 (성적) : 성적 릴레이션에서 평균값이 80 이상인 튜플을 구함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/3eZ6a/btqB3qbyXHq/5YjyfQkNDYuMVa2ZTqKJMK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Project(π, π&amp;#x3C;조건*(R))&lt;/p&gt;
&lt;p&gt;속성만 추출하여 새로운 릴레이션을 만드는 연산(=수직연산)&lt;/p&gt;
&lt;p&gt;연산 결과에 중복이 발생하면 제거&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex) π이름, 평균(성적) : 성적 릴레이션에서 이름, 평균 속성을 추출&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bl9v71/btqB5F6IJFf/EKJipEdOP47X65XiK3yabk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Join(⋈, R⋈키 속성 r=키 속성 sS )&lt;/p&gt;
&lt;p&gt;두 릴레이션을 합쳐서 새로운 릴레이션을 만드는 연산&lt;/p&gt;
&lt;p&gt;Join의 결과로 만들어진 릴레이션의 차수는 두 차수의 합&lt;/p&gt;
&lt;p&gt;Join의 결과는 교차곱(Cartesian Product)을 수행 후 Select 한 것과 같음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex) 성적⋈이름=이름 명부 : 성적 릴레이션과 명부 릴레이션을 이름 속성을 기준으로 합침&lt;/li&gt;
&lt;li&gt;자연 조인 : Join의 조건이 같을 때 동일한 속성이 두 번 나타나 중복된 속성을 제거하여 한번만 표기하는 방법&lt;/li&gt;
&lt;li&gt;자연 조인이 성립되려면 두 릴레이션의 속성명과 도메인이 같아야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bUnuMQ/btqB6jbjaGg/nu18ceMDzQbDL4WKv73pN1/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Division(÷, R [속성 r ÷ 속성 s] S)&lt;/p&gt;
&lt;p&gt;R ⊃ S인 두 릴레이션이 있을 때, R의 속성이 S의 속성의 값을 모두 가진 튜플에서 S가 가진 속성을 제외한 속성만을 구하는 연산&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex) 성적 [평균 ÷ 기준] 기준&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/bljHpt/btqB5gTEtdO/c3FjWsNyBZYkXEga1KsPv0/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;일반 집합 연산자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;합집합(∪) : 두 릴레이션의 튜플의 합집합. 중복되는 튜플은 제거&lt;/li&gt;
&lt;li&gt;교집합(∩) : 두 필레이션의 튜플의 교집합.&lt;/li&gt;
&lt;li&gt;차집합(-) : 두 릴레이션의 튜플의 차집합.&lt;/li&gt;
&lt;li&gt;교차곱(×) : 두 릴레이션의 튜플들의 순서쌍. 차수(Degree)는 서로 더한 값 카디널리티(Cardinality)는 서로 곱한 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/LhuM2/btqB5hE0eTx/uzxQLzr4KWeQ80kg6vc3Tk/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;h2 id=&quot;정규화normalization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EA%B7%9C%ED%99%94normalization&quot; aria-label=&quot;정규화normalization permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정규화(Normalization)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;관계형 데이터베이스에서 정확성을 더욱 유지하기 위해 스키마를 쪼개는 과정, 데이터베이스의 논리적 설계 단계에서 수행&lt;/p&gt;
&lt;h4&gt;정규화의 목적&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;데이터 구조의 안정성 및 무결성을 유지&lt;/li&gt;
&lt;li&gt;이상의 발생을 방지 및 자료 저장 공간의 최소화&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;이상(Anomaly)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;사용자의 의도와는 상관없이 데이터가 삽입, 삭제, 갱신되는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;정규화 과정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;1NF _ 2NF _ 3NF _ BCNF _ 4NF * 5NF&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1NF(제1 정규형)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;릴레이션에 속한 모든 값들이 원자 값으로만 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2NF(제2 정규형)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본키가 아닌 모든 속성이 기본키에 대하여 완전 함수적 종속을 만족&lt;/li&gt;
&lt;li&gt;완전 함수적 종속 : 기본키에 의해서 속성이 결정&lt;/li&gt;
&lt;li&gt;부분 함수적 종속 : 기본키의 일부에 의해 속성이 결정&lt;/li&gt;
&lt;li&gt;아래와 같이 학번과 과목 코드가 기본키인 릴레이션이 있을 때&lt;/li&gt;
&lt;li&gt;과목 점수는 기본키(학번, 과목 코드)를 가지고 알 수 있음 = 완전 함수적 종속&lt;/li&gt;
&lt;li&gt;이름은 기본키의 일부(학번)를 가지고 알수 있음 = 부분 함수적 종속&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/xkNP8/btqB6IWeNsO/On3jgdQ2LT1Q87ZiXO6020/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:67%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;3NF(제3 정규형)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본키가 아닌 모든 속성이 기본키에 대해 이행적 종속을 만족하지 않음&lt;/li&gt;
&lt;li&gt;이행적 종속 : A → B, B → C 일 때 A → C를 만족하는 관계&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BCNF(Boyce-Codd정규형)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;결정자가 모두 후보키&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4NF(제4 정규형)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;릴레이션에 다치 종속이 성립하는 경우 모든 속성이 함수적 종속 관계를 만족&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5NF(제5 정규형)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 조인 종속이 후보키를 통해서만 성립&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://k.kakaocdn.net/dn/btd7lf/btqB2vkfpUj/DkFNmBoJ0r2L9Zvap5oJKK/img.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;도부이걸다조&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;반정규화denormalization&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%98%EC%A0%95%EA%B7%9C%ED%99%94denormalization&quot; aria-label=&quot;반정규화denormalization permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;반정규화(Denormalization)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;정규화된 데이터를 다시 통합, 중복, 분리하는 과정으로 의도적으로 정규화 원칙을 위해, 과도한 정규화로 성능이 떨어졌을 때 실행&lt;/p&gt;
&lt;h4&gt;반정규화의 종류&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;테이블 통합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 테이블로 합쳐 사용하는 것이 성능 향상에 도움이 될 경우 수행&lt;/li&gt;
&lt;li&gt;Not NULL, Default, Check 등의 제약조건을 설계하기 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;테이블 분할&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블을 수평 또는 수직으로 분할&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중복 테이블 추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여러 테이블에서 데이터를 추출해서 사용해야 하거나 다른 서버에 저장된 테이블을 이용해야 하는 경우 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중복 속성 추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조인해서 데이터를 처리할 때 데이터를 조회하는 경로를 단축하기 위해 자주 사용하는 속성을 하나 더 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;시스템-카탈로그&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%B9%B4%ED%83%88%EB%A1%9C%EA%B7%B8&quot; aria-label=&quot;시스템 카탈로그 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 카탈로그&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;시스템 카탈로그의 의미&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템 그 자체에 관련이 있는 다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스&lt;/li&gt;
&lt;li&gt;데이터 사전(Data Dictionary)이라고도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 카탈로그 저장 정보&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템 카탈로그에 저장되는 정보를 메타 데이터라고 함&lt;/li&gt;
&lt;li&gt;메타 데이터 : 데이터에 대한 설명. 메타 데이터가 모이면 데이터 사전이 됨&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메타 데이터의 유형&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 베이스 객체 정보 : Table, Index, View 등의 구조 및 통계 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용자 정보&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테이블의 무결성 제약 조건 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;함수, 프로시저, 트리거 등에 대한 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;시스템 카탈로그의 특징&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;시스템 테이블로 구성되어 있어 SQL문으로 검색해 볼 수 있음&lt;/li&gt;
&lt;li&gt;DML(INSERT, DELETE, UPDATE) 문으로 갱신이 불가능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[CAPTURE BLOG]]></title><link>https://jigglog.netlify.app/CaptureBlog/</link><guid isPermaLink="false">https://jigglog.netlify.app/CaptureBlog/</guid><pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;CAPTURE BLOG&lt;/li&gt;
&lt;li&gt;마크다운 반응형 서버사이드 블로그 프로젝트&lt;/li&gt;
&lt;li&gt;graphql / next.js / react / mobx / express / mongodb / typescript 사용 신기술 집약 블로그&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;SERVERSIDE RENDERING&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;NEXT.JS&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;DATABASE&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MongoDB Atlas&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;HEROKU&lt;/li&gt;
&lt;li&gt;NODE.JS EXPRESS&lt;/li&gt;
&lt;li&gt;GRAPHQL SERVER&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MOBX&lt;/li&gt;
&lt;li&gt;GRAPHQL APOLLO&lt;/li&gt;
&lt;li&gt;TYPESCRIPT&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;마크다운 블로그 포스트 실시간 편집 기능&lt;/li&gt;
&lt;li&gt;서버사이드 랜더링 / 클라이언트 사이드 랜더링 동시 지원으로 SEO / 반응형 / 모바일 최적화&lt;/li&gt;
&lt;li&gt;댓글 기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Post title]]></title><link>https://jigglog.netlify.app/.sample/</link><guid isPermaLink="false">https://jigglog.netlify.app/.sample/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;div id=&quot;sample-component&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;sample-tweet&quot;&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[LANGUAGE TOGETHER]]></title><link>https://jigglog.netlify.app/languageTogether/</link><guid isPermaLink="false">https://jigglog.netlify.app/languageTogether/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;languageTogether&lt;/li&gt;
&lt;li&gt;개인프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;h5&gt;BACKEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;AWS S3, RDS&lt;/li&gt;
&lt;li&gt;HEROKU&lt;/li&gt;
&lt;li&gt;DJANGO&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;FRONTEND&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;REACT/REDUX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;NEWS/BOARD/TED 등 다양한 카테고리별 게시판 제공&lt;/li&gt;
&lt;li&gt;이벤트 생성, 참가 기능&lt;/li&gt;
&lt;li&gt;유투브 동영상 업로드 기능&lt;/li&gt;
&lt;li&gt;댓글 + 대댓글 기능&lt;/li&gt;
&lt;li&gt;멤버 팔로우/팔로워 기능&lt;/li&gt;
&lt;li&gt;프로필 편집 기능&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[MOVIE STAR]]></title><link>https://jigglog.netlify.app/moviestar/</link><guid isPermaLink="false">https://jigglog.netlify.app/moviestar/</guid><pubDate>Mon, 01 Jan 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;about&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#about&quot; aria-label=&quot;about permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ABOUT&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MOVIE STAR&lt;/li&gt;
&lt;li&gt;SSAFY 관통 프로젝트&lt;/li&gt;
&lt;li&gt;영화 API 추천 사이트 만들기 프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tools&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tools&quot; aria-label=&quot;tools permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TOOLS&lt;/h2&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;DJANGO&lt;/li&gt;
&lt;li&gt;JQUERY&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;function&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#function&quot; aria-label=&quot;function permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FUNCTION&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;회원가입/로그인/로그아웃 기능&lt;/li&gt;
&lt;li&gt;영화 상세보기 게시판 제공&lt;/li&gt;
&lt;li&gt;별점 생성 기능&lt;/li&gt;
&lt;li&gt;카테고리별 영화 추천&lt;/li&gt;
&lt;li&gt;영화 추천 기능 제공&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Resume]]></title><link>https://jigglog.netlify.app/resume/</link><guid isPermaLink="false">https://jigglog.netlify.app/resume/</guid><pubDate>Sat, 01 Jan 2000 00:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;교육사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%9C%A1%EC%82%AC%ED%95%AD&quot; aria-label=&quot;교육사항 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교육사항&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;삼성 소프트웨어 아카데미 2기 수료 (2019.07.01 ~ 2020.06.30)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;자격증&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EA%B2%A9%EC%A6%9D&quot; aria-label=&quot;자격증 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자격증&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;정보처리기사&lt;/li&gt;
&lt;li&gt;리눅스 마스터 2급&lt;/li&gt;
&lt;li&gt;네트워크 관리사 2급&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;프로젝트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot; aria-label=&quot;프로젝트 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트&lt;/h1&gt;
&lt;hr&gt;
&lt;h4&gt;팀 프로젝트&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;MOVIE STAR (&lt;a href=&quot;https://moviestarreboot.herokuapp.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 싸피 영화 추천 사이트 프로젝트&lt;/li&gt;
&lt;li&gt;COLORBERRY PI (&lt;a href=&quot;http://colorberry.s3-website.ap-northeast-2.amazonaws.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 라즈베리 파이를 이용한 미술관 프로젝트&lt;/li&gt;
&lt;li&gt;SSAFY ART : 인공지능을 이용한 사진 화풍묘사 프로젝트&lt;/li&gt;
&lt;li&gt;SSAFY PORTFOLIO : 구직활동 포트폴리오 프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;개인 프로젝트&lt;/h4&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;LANGUAGE TOGETHER (&lt;a href=&quot;http://languagetogether.s3-website.ap-northeast-2.amazonaws.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 테드, 뉴스 등을 이용한 영어 공부 사이트&lt;/li&gt;
&lt;li&gt;CAPTURE BLOG (&lt;a href=&quot;https://floating-fortress-71700.herokuapp.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 마크다운 편집기능 / 회원가입과 댓글 기능, SSR로 SEO 최적화 기능이 있는 블로그&lt;/li&gt;
&lt;li&gt;MBTI WORLD (&lt;a href=&quot;http://ec2-54-180-150-73.ap-northeast-2.compute.amazonaws.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : NEXT.JS없는 서버사이드 프로젝트 / 회원가입과 댓글 기능, SSR로 SEO 최적화 기능이 있는 블로그&lt;/li&gt;
&lt;li&gt;ANGULOG (&lt;a href=&quot;http://angularblog.s3-website.ap-northeast-2.amazonaws.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 앵귤러 개인 블로그 사이트&lt;/li&gt;
&lt;li&gt;DT CENTER (&lt;a href=&quot;http://dtcenterwarehouse.s3-website.ap-northeast-2.amazonaws.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 물류 센터 3D 시뮬레이션 사이트&lt;/li&gt;
&lt;li&gt;VUELOG (&lt;a href=&quot;http://vuelog.s3-website.ap-northeast-2.amazonaws.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;) : 뷰 개인 블로그 사이트&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;스킬&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%82%AC&quot; aria-label=&quot;스킬 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스킬&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id=&quot;사용-언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9-%EC%96%B8%EC%96%B4&quot; aria-label=&quot;사용 언어 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용 언어&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;자바스크립트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;react, reduxredux-saga, redux-thunk, react-three-fiber, nodejs 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;타입스크립트&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;angular, ngrx, rxjs, vue, vuex&lt;/li&gt;
&lt;li&gt;CAPTURE BLOG, MBTI WORLD, ANGULOG, VUELOG 개인 프로젝트에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;파이썬&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;django, 웹 크롤링, 코딩테스트 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;자바&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 심화 프로젝트 잡 컨설팅 사이트 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;C/C++&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;개인 공부&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프론트엔드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C&quot; aria-label=&quot;프론트엔드 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프론트엔드&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;React/Redux&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 웹 프로젝트에 사용 : react , redux , react-three-fiber&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Angular/ngrx/rxjs&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;앵귤러 개인 블로그 프로젝트&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Mobx&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CAPTURE BLOG 개인 프로젝트에 사용, 싸피 웹 프로젝트 서버 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Vue&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 교육과정 vue.js 부분 수료&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;GraphQl Apollo&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CAPTURE BLOG 개인 프로젝트에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;백엔드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C&quot; aria-label=&quot;백엔드 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;Django&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 관통 프로젝트 영화 API 추천 사이트&lt;/li&gt;
&lt;li&gt;싸피 웹 프로젝트 django rest api 서버 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;SpringBoot&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 심화 프로젝트 잡 컨설팅 사이트 백엔드 서버 담당.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;flask&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 특화 프로젝트 rest api 인공지능 부분 서버 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Node.js express&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CAPTURE BLOG, MBTI WORLD, ANGULOG 개인 프로젝트에 사용, 싸피 웹 프로젝트 서버 담당&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;GraphQl SERVER&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CAPTURE BLOG 개인 프로젝트에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;딥러닝&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%A5%EB%9F%AC%EB%8B%9D&quot; aria-label=&quot;딥러닝 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딥러닝&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;Tensorflow/Keras&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;싸피 특화 프로젝트 style transfer 로 화풍 묘사 인공지능 만들기 SSAFY ART&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터베이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;데이터베이스 permalink&quot; class=&quot;anchor-header before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터베이스&lt;/h3&gt;
&lt;hr&gt;
&lt;h5&gt;Mongo DB&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CAPTURE BLOG, MBTI WORLD, ANGULOG, VUELOG 개인 프로젝트에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;MySql&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Language Togethre / ColorBerryPi에 사용&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>